//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class DeviceDescriptor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceDescriptor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceDescriptor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceDescriptor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_DeviceDescriptor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private uint _Id() {
    uint ret = CNTKLibPINVOKE.DeviceDescriptor__Id(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DeviceKind _Type() {
    DeviceKind ret = (DeviceKind)CNTKLibPINVOKE.DeviceDescriptor__Type(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsLocked() {
    bool ret = CNTKLibPINVOKE.DeviceDescriptor_IsLocked(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static DeviceDescriptor _CPUDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor__CPUDevice(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static DeviceDescriptor _GPUDevice(uint deviceId) {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor__GPUDevice(deviceId), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DeviceDescriptor UseDefaultDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_UseDefaultDevice(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool TrySetDefaultDevice(DeviceDescriptor newDefaultDevice, bool acquireDeviceLock) {
    bool ret = CNTKLibPINVOKE.DeviceDescriptor_TrySetDefaultDevice__SWIG_0(DeviceDescriptor.getCPtr(newDefaultDevice), acquireDeviceLock);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool TrySetDefaultDevice(DeviceDescriptor newDefaultDevice) {
    bool ret = CNTKLibPINVOKE.DeviceDescriptor_TrySetDefaultDevice__SWIG_1(DeviceDescriptor.getCPtr(newDefaultDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static void _SetExcludedDevices(DeviceDescriptorVector excluded) {
    CNTKLibPINVOKE.DeviceDescriptor__SetExcludedDevices(DeviceDescriptorVector.getCPtr(excluded));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private static DeviceDescriptorVector _AllDevices() {
    DeviceDescriptorVector ret = new DeviceDescriptorVector(CNTKLibPINVOKE.DeviceDescriptor__AllDevices(), false);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string AsString() {
    string ret = CNTKLibPINVOKE.DeviceDescriptor_AsString(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
