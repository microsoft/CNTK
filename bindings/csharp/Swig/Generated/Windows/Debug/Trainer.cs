//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class Trainer : Evaluator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Trainer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CNTKLibPINVOKE.Trainer_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Trainer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          CNTKLibPINVOKE.delete_Trainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  private bool _TrainMinibatch(UnorderedMapVariableMinibatchData arguments, DeviceDescriptor computeDevice) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_0(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableMinibatchData arguments) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_1(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableValuePtr arguments, bool isSweepEndInArguments, DeviceDescriptor computeDevice) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_2(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), isSweepEndInArguments, DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableValuePtr arguments, bool isSweepEndInArguments) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_3(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), isSweepEndInArguments);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableMinibatchData arguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_4(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableMinibatchData arguments, UnorderedMapVariableValuePtr outputsToFetch) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_5(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableValuePtr arguments, bool isSweepEndInarguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_6(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), isSweepEndInarguments, UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _TrainMinibatch(UnorderedMapVariableValuePtr arguments, bool isSweepEndInarguments, UnorderedMapVariableValuePtr outputsToFetch) {
    bool ret = CNTKLibPINVOKE.Trainer__TrainMinibatch__SWIG_7(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), isSweepEndInarguments, UnorderedMapVariableValuePtr.getCPtr(outputsToFetch));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SaveCheckpoint(string filePath, CNTKDictionary externalState) {
    CNTKLibPINVOKE.Trainer_SaveCheckpoint__SWIG_0(swigCPtr, filePath, CNTKDictionary.getCPtr(externalState));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveCheckpoint(string filePath) {
    CNTKLibPINVOKE.Trainer_SaveCheckpoint__SWIG_1(swigCPtr, filePath);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CNTKDictionary RestoreFromCheckpoint(string filePath) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.Trainer_RestoreFromCheckpoint(swigCPtr, filePath), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Function Model() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Trainer_Model(swigCPtr);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Function LossFunction() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Trainer_LossFunction(swigCPtr);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double PreviousMinibatchLossAverage() {
    double ret = CNTKLibPINVOKE.Trainer_PreviousMinibatchLossAverage(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double PreviousMinibatchEvaluationAverage() {
    double ret = CNTKLibPINVOKE.Trainer_PreviousMinibatchEvaluationAverage(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint PreviousMinibatchSampleCount() {
    uint ret = CNTKLibPINVOKE.Trainer_PreviousMinibatchSampleCount(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint TotalNumberOfSamplesSeen() {
    uint ret = CNTKLibPINVOKE.Trainer_TotalNumberOfSamplesSeen(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint TotalNumberOfUnitsSeen(DataUnit unit) {
    uint ret = CNTKLibPINVOKE.Trainer_TotalNumberOfUnitsSeen__SWIG_0(swigCPtr, (int)unit);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint TotalNumberOfUnitsSeen() {
    uint ret = CNTKLibPINVOKE.Trainer_TotalNumberOfUnitsSeen__SWIG_1(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SummarizeTrainingProgress() {
    CNTKLibPINVOKE.Trainer_SummarizeTrainingProgress(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void PrintNodeTiming() {
    CNTKLibPINVOKE.Trainer_PrintNodeTiming(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
