//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class HTKFeatureConfiguration : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HTKFeatureConfiguration(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HTKFeatureConfiguration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HTKFeatureConfiguration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_HTKFeatureConfiguration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public HTKFeatureConfiguration(string streamName, string scp, uint dim, uint left, uint right, bool broadcast, bool definesMbSize, uint maxSequenceLength) : this(CNTKLibPINVOKE.new_HTKFeatureConfiguration__SWIG_0(streamName, scp, dim, left, right, broadcast, definesMbSize, maxSequenceLength), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public HTKFeatureConfiguration(string streamName, string scp, uint dim, uint left, uint right, bool broadcast, bool definesMbSize) : this(CNTKLibPINVOKE.new_HTKFeatureConfiguration__SWIG_1(streamName, scp, dim, left, right, broadcast, definesMbSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public HTKFeatureConfiguration(string streamName, string scp, uint dim, uint left, uint right, bool broadcast) : this(CNTKLibPINVOKE.new_HTKFeatureConfiguration__SWIG_2(streamName, scp, dim, left, right, broadcast), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string m_streamName {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_streamName_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_streamName_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_scp {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_scp_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_scp_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint m_dim {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_dim_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_dim_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint m_left {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_left_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_left_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint m_right {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_right_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_right_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_broadcast {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_broadcast_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_broadcast_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_definesMbSize {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_definesMbSize_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_definesMbSize_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint m_maxSequenceLength {
    set {
      CNTKLibPINVOKE.HTKFeatureConfiguration_m_maxSequenceLength_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = CNTKLibPINVOKE.HTKFeatureConfiguration_m_maxSequenceLength_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
