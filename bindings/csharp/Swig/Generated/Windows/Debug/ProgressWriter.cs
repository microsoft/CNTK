//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class ProgressWriter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ProgressWriter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProgressWriter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProgressWriter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CNTKLibPINVOKE.delete_ProgressWriter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ProgressWriter(uint trainingUpdateWriteFrequency, uint trainingFirstUpdatesToWrite, uint testUpdateWriteFrequency, uint testFirstUpdatesToWrite, uint distributedSyncUpdateWriteFrequency, uint distributedSyncFirstUpdatesToWrite) : this(CNTKLibPINVOKE.new_ProgressWriter(trainingUpdateWriteFrequency, trainingFirstUpdatesToWrite, testUpdateWriteFrequency, testFirstUpdatesToWrite, distributedSyncUpdateWriteFrequency, distributedSyncFirstUpdatesToWrite), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWriteTrainingUpdate(PairSizeTSizeT arg0, PairSizeTSizeT arg1, PairDoubleDouble arg2, PairDoubleDouble arg3) {
    CNTKLibPINVOKE.ProgressWriter_OnWriteTrainingUpdate(swigCPtr, PairSizeTSizeT.getCPtr(arg0), PairSizeTSizeT.getCPtr(arg1), PairDoubleDouble.getCPtr(arg2), PairDoubleDouble.getCPtr(arg3));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWriteTestUpdate(PairSizeTSizeT arg0, PairSizeTSizeT arg1, PairDoubleDouble arg2) {
    CNTKLibPINVOKE.ProgressWriter_OnWriteTestUpdate(swigCPtr, PairSizeTSizeT.getCPtr(arg0), PairSizeTSizeT.getCPtr(arg1), PairDoubleDouble.getCPtr(arg2));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWriteDistributedSyncUpdate(PairSizeTSizeT arg0, PairSizeTSizeT arg1, PairDoubleDouble arg2) {
    CNTKLibPINVOKE.ProgressWriter_OnWriteDistributedSyncUpdate(swigCPtr, PairSizeTSizeT.getCPtr(arg0), PairSizeTSizeT.getCPtr(arg1), PairDoubleDouble.getCPtr(arg2));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnTrainingUpdateEnd() {
    CNTKLibPINVOKE.ProgressWriter_OnTrainingUpdateEnd(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWriteTrainingSummary(uint arg0, uint arg1, uint arg2, double arg3, double arg4, uint arg5) {
    CNTKLibPINVOKE.ProgressWriter_OnWriteTrainingSummary(swigCPtr, arg0, arg1, arg2, arg3, arg4, arg5);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWriteTestSummary(uint arg0, uint arg1, uint arg2, double arg3, uint arg4) {
    CNTKLibPINVOKE.ProgressWriter_OnWriteTestSummary(swigCPtr, arg0, arg1, arg2, arg3, arg4);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Write(string arg0, double arg1) {
    CNTKLibPINVOKE.ProgressWriter_Write(swigCPtr, arg0, arg1);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint TotalTrainingUpdates() {
    uint ret = CNTKLibPINVOKE.ProgressWriter_TotalTrainingUpdates(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint TotalTestUpdates() {
    uint ret = CNTKLibPINVOKE.ProgressWriter_TotalTestUpdates(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
