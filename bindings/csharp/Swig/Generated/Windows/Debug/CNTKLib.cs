//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class CNTKLib {
  public static Function ConvolutionSequenceShape(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, bool transpose, NDShape outputShape, uint groups, uint maxTempMemSizeInSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionSequenceShape__SWIG_0(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), transpose, NDShape.getCPtr(outputShape), groups, maxTempMemSizeInSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionSequenceShape(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, bool transpose, NDShape outputShape, uint groups, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionSequenceShape__SWIG_1(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), transpose, NDShape.getCPtr(outputShape), groups, maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpatialConvolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint maxTempMemSizeInSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpatialConvolution__SWIG_0(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), maxTempMemSizeInSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpatialConvolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpatialConvolution__SWIG_1(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpatialConvolutionSequenceShape(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint maxTempMemSizeInSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpatialConvolutionSequenceShape__SWIG_0(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), maxTempMemSizeInSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpatialConvolutionSequenceShape(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpatialConvolutionSequenceShape__SWIG_1(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MatMul(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MatMul__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MatMul(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MatMul__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC, float alpha, float beta, bool transA, bool transB, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_0(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC), alpha, beta, transA, transB, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC, float alpha, float beta, bool transA, bool transB) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_1(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC), alpha, beta, transA, transB);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC, float alpha, float beta, bool transA) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_2(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC), alpha, beta, transA);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC, float alpha, float beta) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_3(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC), alpha, beta);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC, float alpha) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_4(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC), alpha);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Gemm(Variable operandA, Variable operandB, Variable operandC) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Gemm__SWIG_5(Variable.getCPtr(operandA), Variable.getCPtr(operandB), Variable.getCPtr(operandC));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unsqueeze(Variable operand, AxisVector axes, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unsqueeze__SWIG_0(Variable.getCPtr(operand), AxisVector.getCPtr(axes), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unsqueeze(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unsqueeze__SWIG_1(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint GenerateRandomSeed(bool perWorkerLocalValue) {
    uint ret = CNTKLibPINVOKE.GenerateRandomSeed__SWIG_0(perWorkerLocalValue);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint GenerateRandomSeed() {
    uint ret = CNTKLibPINVOKE.GenerateRandomSeed__SWIG_1();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetMathLibTraceLevel(int traceLevel) {
    CNTKLibPINVOKE.SetMathLibTraceLevel(traceLevel);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ForceDeterministicAlgorithms() {
    CNTKLibPINVOKE.ForceDeterministicAlgorithms();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool ShouldForceDeterministicAlgorithms() {
    bool ret = CNTKLibPINVOKE.ShouldForceDeterministicAlgorithms();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void UseSparseGradientAggregationInDataParallelSGD(bool enable) {
    CNTKLibPINVOKE.UseSparseGradientAggregationInDataParallelSGD(enable);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool ShouldUseSparseGradientAggregationInDataParallelSGD() {
    bool ret = CNTKLibPINVOKE.ShouldUseSparseGradientAggregationInDataParallelSGD();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint GetRandomSeed() {
    uint ret = CNTKLibPINVOKE.GetRandomSeed();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetFixedRandomSeed(uint value) {
    CNTKLibPINVOKE.SetFixedRandomSeed(value);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsRandomSeedFixed() {
    bool ret = CNTKLibPINVOKE.IsRandomSeedFixed();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ResetRandomSeed(uint value) {
    CNTKLibPINVOKE.ResetRandomSeed__SWIG_0(value);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResetRandomSeed() {
    CNTKLibPINVOKE.ResetRandomSeed__SWIG_1();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DisableNodeTimeing() {
    CNTKLibPINVOKE.DisableNodeTimeing();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EnableCPUEvalOptimization() {
    CNTKLibPINVOKE.EnableCPUEvalOptimization();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DisableCPUEvalOptimization() {
    CNTKLibPINVOKE.DisableCPUEvalOptimization();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string DataTypeName(DataType dataType) {
    string ret = CNTKLibPINVOKE.DataTypeName((int)dataType);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint DataTypeSize(DataType dataType) {
    uint ret = CNTKLibPINVOKE.DataTypeSize((int)dataType);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsSparseStorageFormat(StorageFormat storageFormat) {
    bool ret = CNTKLibPINVOKE.IsSparseStorageFormat((int)storageFormat);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DeviceKindName(DeviceKind deviceKind) {
    string ret = global::System.Runtime.InteropServices.Marshal.PtrToStringUni(CNTKLibPINVOKE.DeviceKindName((int)deviceKind));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(NDShape first, NDShape second) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_0(NDShape.getCPtr(first), NDShape.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreNotEqual(NDShape first, NDShape second) {
    bool ret = CNTKLibPINVOKE.AreNotEqual__SWIG_0(NDShape.getCPtr(first), NDShape.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetTraceLevel(TraceLevel value) {
    CNTKLibPINVOKE.SetTraceLevel((int)value);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static TraceLevel GetTraceLevel() {
    TraceLevel ret = (TraceLevel)CNTKLibPINVOKE.GetTraceLevel();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(DeviceDescriptor first, DeviceDescriptor second) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_1(DeviceDescriptor.getCPtr(first), DeviceDescriptor.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreNotEqual(DeviceDescriptor left, DeviceDescriptor right) {
    bool ret = CNTKLibPINVOKE.AreNotEqual__SWIG_1(DeviceDescriptor.getCPtr(left), DeviceDescriptor.getCPtr(right));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(Axis first, Axis second) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_2(Axis.getCPtr(first), Axis.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreNotEqual(Axis first, Axis second) {
    bool ret = CNTKLibPINVOKE.AreNotEqual__SWIG_2(Axis.getCPtr(first), Axis.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string VariableKindName(VariableKind variableKind) {
    string ret = global::System.Runtime.InteropServices.Marshal.PtrToStringUni(CNTKLibPINVOKE.VariableKindName((int)variableKind));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, DataType dataType, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_0(NDShape.getCPtr(shape), (int)dataType, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, DataType dataType, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_1(NDShape.getCPtr(shape), (int)dataType, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType, bool needsGradient, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_0(NDShape.getCPtr(shape), isSparse, (int)dataType, needsGradient, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType, bool needsGradient, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_1(NDShape.getCPtr(shape), isSparse, (int)dataType, needsGradient, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes, bool needsGradient, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_0(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes), needsGradient, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes, bool needsGradient) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_1(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes), needsGradient), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(Variable first, Variable second) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_3(Variable.getCPtr(first), Variable.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreNotEqual(Variable first, Variable second) {
    bool ret = CNTKLibPINVOKE.AreNotEqual__SWIG_3(Variable.getCPtr(first), Variable.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_2(NDShape.getCPtr(shape), name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_3(NDShape.getCPtr(shape), AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_4(NDShape.getCPtr(shape)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_5(name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable() {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_6(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, bool needsGradient, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_2(NDShape.getCPtr(shape), (int)dataType, needsGradient, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, bool needsGradient, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_3(NDShape.getCPtr(shape), (int)dataType, needsGradient, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, bool needsGradient) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_4(NDShape.getCPtr(shape), (int)dataType, needsGradient), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_5(NDShape.getCPtr(shape), (int)dataType, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_6(NDShape.getCPtr(shape), (int)dataType, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_7(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, DataType dataType) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_8(NDShape.getCPtr(shape), (int)dataType), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_9(NDShape.getCPtr(shape), isSparse, (int)dataType, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_10(NDShape.getCPtr(shape), isSparse, (int)dataType, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_11(NDShape.getCPtr(shape), isSparse, (int)dataType, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable InputVariable(NDShape shape, bool isSparse, DataType dataType) {
    Variable ret = new Variable(CNTKLibPINVOKE.InputVariable__SWIG_12(NDShape.getCPtr(shape), isSparse, (int)dataType), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_2(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes), name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_3(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SentinelValueForInferParamInitRank {
    get {
      int ret = CNTKLibPINVOKE.SentinelValueForInferParamInitRank_get();
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int DefaultParamInitScale {
    get {
      int ret = CNTKLibPINVOKE.DefaultParamInitScale_get();
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static CNTKDictionary ConstantInitializer(double value) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ConstantInitializer__SWIG_0(value), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ConstantInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ConstantInitializer__SWIG_1(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary UniformInitializer(double scale, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.UniformInitializer__SWIG_0(scale, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary UniformInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.UniformInitializer__SWIG_1(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary NormalInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.NormalInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary NormalInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.NormalInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary NormalInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.NormalInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary NormalInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.NormalInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary XavierInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.XavierInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary XavierInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.XavierInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary XavierInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.XavierInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary XavierInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.XavierInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary XavierInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.XavierInitializer__SWIG_4(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotUniformInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotUniformInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotUniformInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotUniformInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotUniformInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotUniformInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotUniformInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotUniformInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotUniformInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotUniformInitializer__SWIG_4(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotNormalInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotNormalInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotNormalInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotNormalInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotNormalInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotNormalInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotNormalInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotNormalInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary GlorotNormalInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.GlorotNormalInitializer__SWIG_4(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeUniformInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeUniformInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeUniformInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeUniformInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeUniformInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeUniformInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeUniformInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeUniformInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeUniformInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeUniformInitializer__SWIG_4(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeNormalInitializer(double scale, int outputRank, int filterRank, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeNormalInitializer__SWIG_0(scale, outputRank, filterRank, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeNormalInitializer(double scale, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeNormalInitializer__SWIG_1(scale, outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeNormalInitializer(double scale, int outputRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeNormalInitializer__SWIG_2(scale, outputRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeNormalInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeNormalInitializer__SWIG_3(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HeNormalInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HeNormalInitializer__SWIG_4(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary BilinearInitializer(uint kernelWidth, uint kernelHeight) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.BilinearInitializer(kernelWidth, kernelHeight), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary RandomInitializerWithRank(CNTKDictionary initializer, int outputRank, int filterRank) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.RandomInitializerWithRank(CNTKDictionary.getCPtr(initializer), outputRank, filterRank), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary TruncatedNormalInitializer(double scale, uint seed) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.TruncatedNormalInitializer__SWIG_0(scale, seed), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary TruncatedNormalInitializer(double scale) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.TruncatedNormalInitializer__SWIG_1(scale), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary TruncatedNormalInitializer() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.TruncatedNormalInitializer__SWIG_2(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementAnd(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementAnd__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementAnd(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementAnd__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementNot(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementNot__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementNot(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementNot__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementOr(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementOr__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementOr(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementOr__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementXor(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementXor__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementXor(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementXor__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Negate(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Negate__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Negate(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Negate__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sigmoid(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sigmoid__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sigmoid(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sigmoid__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Atanh(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Atanh__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Atanh(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Atanh__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Tanh(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Tanh__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Tanh(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Tanh__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Asin(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Asin__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Asin(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Asin__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sin(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sin__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sin(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sin__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Acos(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Acos__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Acos(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Acos__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cos(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cos__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cos(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cos__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Atan(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Atan__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Atan(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Atan__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Tan(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Tan__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Tan(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Tan__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cosh(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cosh__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cosh(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cosh__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Asinh(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Asinh__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Asinh(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Asinh__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sinh(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sinh__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sinh(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sinh__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReLU(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReLU__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReLU(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReLU__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Exp(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Exp__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Exp(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Exp__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Log(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Log__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Log(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Log__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Square(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Square__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Square(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Square__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sqrt(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sqrt__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sqrt(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sqrt__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Round(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Round__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Round(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Round__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Floor(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Floor__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Floor(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Floor__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Ceil(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Ceil__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Ceil(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Ceil__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Abs(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Abs__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Abs(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Abs__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reciprocal(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reciprocal__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reciprocal(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reciprocal__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softmax(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softmax__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softmax(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softmax__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softmax(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softmax__SWIG_2(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softmax(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softmax__SWIG_3(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogSoftmax(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogSoftmax__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogSoftmax(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogSoftmax__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogSoftmax(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogSoftmax__SWIG_2(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogSoftmax(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogSoftmax__SWIG_3(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Hardmax(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Hardmax__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Hardmax(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Hardmax__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function HardSigmoid(Variable operand, float alpha, float beta, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.HardSigmoid__SWIG_0(Variable.getCPtr(operand), alpha, beta, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function HardSigmoid(Variable operand, float alpha, float beta) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.HardSigmoid__SWIG_1(Variable.getCPtr(operand), alpha, beta);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TopK(Variable operand, uint k, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TopK__SWIG_0(Variable.getCPtr(operand), k, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TopK(Variable operand, uint k) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TopK__SWIG_1(Variable.getCPtr(operand), k);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TopK(Variable operand, uint k, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TopK__SWIG_2(Variable.getCPtr(operand), k, Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TopK(Variable operand, uint k, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TopK__SWIG_3(Variable.getCPtr(operand), k, Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeAxes(Variable operand, Axis axis1, Axis axis2, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeAxes__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis1), Axis.getCPtr(axis2), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeAxes(Variable operand, Axis axis1, Axis axis2) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeAxes__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis1), Axis.getCPtr(axis2));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Transpose(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Transpose__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Transpose(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Transpose__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Transpose(Variable operand, AxisVector permutation, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Transpose__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(permutation), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Transpose(Variable operand, AxisVector permutation) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Transpose__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(permutation));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Slice(Variable operand, AxisVector axis, IntVector beginIndex, IntVector endIndex, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Slice__SWIG_0(Variable.getCPtr(operand), AxisVector.getCPtr(axis), IntVector.getCPtr(beginIndex), IntVector.getCPtr(endIndex), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Slice(Variable operand, AxisVector axis, IntVector beginIndex, IntVector endIndex) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Slice__SWIG_1(Variable.getCPtr(operand), AxisVector.getCPtr(axis), IntVector.getCPtr(beginIndex), IntVector.getCPtr(endIndex));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Slice(Variable operand, AxisVector axis, IntVector beginIndex, IntVector endIndex, IntVector strides, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Slice__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axis), IntVector.getCPtr(beginIndex), IntVector.getCPtr(endIndex), IntVector.getCPtr(strides), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Slice(Variable operand, AxisVector axis, IntVector beginIndex, IntVector endIndex, IntVector strides) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Slice__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axis), IntVector.getCPtr(beginIndex), IntVector.getCPtr(endIndex), IntVector.getCPtr(strides));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToBatch(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToBatch__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToBatch(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToBatch__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UnpackBatch(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UnpackBatch(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pad(Variable operand, PaddingMode mode, SizeTVector head, SizeTVector foot, double constantValue, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pad__SWIG_0(Variable.getCPtr(operand), (int)mode, SizeTVector.getCPtr(head), SizeTVector.getCPtr(foot), constantValue, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pad(Variable operand, PaddingMode mode, SizeTVector head, SizeTVector foot, double constantValue) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pad__SWIG_1(Variable.getCPtr(operand), (int)mode, SizeTVector.getCPtr(head), SizeTVector.getCPtr(foot), constantValue);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pad(Variable operand, PaddingMode mode, SizeTVector head, SizeTVector foot) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pad__SWIG_2(Variable.getCPtr(operand), (int)mode, SizeTVector.getCPtr(head), SizeTVector.getCPtr(foot));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSample(Variable operand, uint numSamples, bool allowDuplicates, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSample__SWIG_0(Variable.getCPtr(operand), numSamples, allowDuplicates, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSample(Variable operand, uint numSamples, bool allowDuplicates, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSample__SWIG_1(Variable.getCPtr(operand), numSamples, allowDuplicates, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSample(Variable operand, uint numSamples, bool allowDuplicates) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSample__SWIG_2(Variable.getCPtr(operand), numSamples, allowDuplicates);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSampleInclusionFrequency(Variable operand, uint numSamples, bool allowDuplicates, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSampleInclusionFrequency__SWIG_0(Variable.getCPtr(operand), numSamples, allowDuplicates, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSampleInclusionFrequency(Variable operand, uint numSamples, bool allowDuplicates, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSampleInclusionFrequency__SWIG_1(Variable.getCPtr(operand), numSamples, allowDuplicates, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function RandomSampleInclusionFrequency(Variable operand, uint numSamples, bool allowDuplicates) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RandomSampleInclusionFrequency__SWIG_2(Variable.getCPtr(operand), numSamples, allowDuplicates);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Dropout(Variable operand, double dropoutRate, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Dropout__SWIG_0(Variable.getCPtr(operand), dropoutRate, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Dropout(Variable operand, double dropoutRate, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Dropout__SWIG_1(Variable.getCPtr(operand), dropoutRate, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Dropout(Variable operand, double dropoutRate) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Dropout__SWIG_2(Variable.getCPtr(operand), dropoutRate);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandom(NDShape shape, DataType dataType, double low, double high, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandom__SWIG_0(NDShape.getCPtr(shape), (int)dataType, low, high, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandom(NDShape shape, DataType dataType, double low, double high, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandom__SWIG_1(NDShape.getCPtr(shape), (int)dataType, low, high, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandom(NDShape shape, DataType dataType, double low, double high) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandom__SWIG_2(NDShape.getCPtr(shape), (int)dataType, low, high);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandom(NDShape shape, DataType dataType, double low) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandom__SWIG_3(NDShape.getCPtr(shape), (int)dataType, low);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandom(NDShape shape, DataType dataType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandom__SWIG_4(NDShape.getCPtr(shape), (int)dataType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandomLike(Variable operand, double low, double high, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandomLike__SWIG_0(Variable.getCPtr(operand), low, high, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandomLike(Variable operand, double low, double high, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandomLike__SWIG_1(Variable.getCPtr(operand), low, high, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandomLike(Variable operand, double low, double high) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandomLike__SWIG_2(Variable.getCPtr(operand), low, high);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandomLike(Variable operand, double low) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandomLike__SWIG_3(Variable.getCPtr(operand), low);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function UniformRandomLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.UniformRandomLike__SWIG_4(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandom(NDShape shape, DataType dataType, double mean, double scale, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandom__SWIG_0(NDShape.getCPtr(shape), (int)dataType, mean, scale, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandom(NDShape shape, DataType dataType, double mean, double scale, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandom__SWIG_1(NDShape.getCPtr(shape), (int)dataType, mean, scale, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandom(NDShape shape, DataType dataType, double mean, double scale) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandom__SWIG_2(NDShape.getCPtr(shape), (int)dataType, mean, scale);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandom(NDShape shape, DataType dataType, double mean) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandom__SWIG_3(NDShape.getCPtr(shape), (int)dataType, mean);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandom(NDShape shape, DataType dataType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandom__SWIG_4(NDShape.getCPtr(shape), (int)dataType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandomLike(Variable operand, double mean, double scale, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandomLike__SWIG_0(Variable.getCPtr(operand), mean, scale, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandomLike(Variable operand, double mean, double scale, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandomLike__SWIG_1(Variable.getCPtr(operand), mean, scale, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandomLike(Variable operand, double mean, double scale) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandomLike__SWIG_2(Variable.getCPtr(operand), mean, scale);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandomLike(Variable operand, double mean) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandomLike__SWIG_3(Variable.getCPtr(operand), mean);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NormalRandomLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NormalRandomLike__SWIG_4(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandom(NDShape shape, DataType dataType, double loc, double scale, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandom__SWIG_0(NDShape.getCPtr(shape), (int)dataType, loc, scale, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandom(NDShape shape, DataType dataType, double loc, double scale, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandom__SWIG_1(NDShape.getCPtr(shape), (int)dataType, loc, scale, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandom(NDShape shape, DataType dataType, double loc, double scale) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandom__SWIG_2(NDShape.getCPtr(shape), (int)dataType, loc, scale);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandom(NDShape shape, DataType dataType, double loc) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandom__SWIG_3(NDShape.getCPtr(shape), (int)dataType, loc);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandom(NDShape shape, DataType dataType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandom__SWIG_4(NDShape.getCPtr(shape), (int)dataType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandomLike(Variable operand, double loc, double scale, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandomLike__SWIG_0(Variable.getCPtr(operand), loc, scale, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandomLike(Variable operand, double loc, double scale, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandomLike__SWIG_1(Variable.getCPtr(operand), loc, scale, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandomLike(Variable operand, double loc, double scale) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandomLike__SWIG_2(Variable.getCPtr(operand), loc, scale);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandomLike(Variable operand, double loc) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandomLike__SWIG_3(Variable.getCPtr(operand), loc);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GumbelRandomLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GumbelRandomLike__SWIG_4(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandom(NDShape shape, DataType dataType, double mean, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandom__SWIG_0(NDShape.getCPtr(shape), (int)dataType, mean, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandom(NDShape shape, DataType dataType, double mean, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandom__SWIG_1(NDShape.getCPtr(shape), (int)dataType, mean, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandom(NDShape shape, DataType dataType, double mean) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandom__SWIG_2(NDShape.getCPtr(shape), (int)dataType, mean);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandom(NDShape shape, DataType dataType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandom__SWIG_3(NDShape.getCPtr(shape), (int)dataType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandomLike(Variable operand, double mean, uint seed, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandomLike__SWIG_0(Variable.getCPtr(operand), mean, seed, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandomLike(Variable operand, double mean, uint seed) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandomLike__SWIG_1(Variable.getCPtr(operand), mean, seed);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandomLike(Variable operand, double mean) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandomLike__SWIG_2(Variable.getCPtr(operand), mean);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BernoulliRandomLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BernoulliRandomLike__SWIG_3(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Flatten(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Flatten__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Flatten(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Flatten__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Flatten(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Flatten__SWIG_2(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Flatten(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Flatten__SWIG_3(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reshape(Variable operand, NDShape replacementShape, Axis beginAxis, Axis endAxis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_0(Variable.getCPtr(operand), NDShape.getCPtr(replacementShape), Axis.getCPtr(beginAxis), Axis.getCPtr(endAxis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reshape(Variable operand, NDShape replacementShape, Axis beginAxis, Axis endAxis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_1(Variable.getCPtr(operand), NDShape.getCPtr(replacementShape), Axis.getCPtr(beginAxis), Axis.getCPtr(endAxis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reshape(Variable operand, NDShape newShape, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_2(Variable.getCPtr(operand), NDShape.getCPtr(newShape), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reshape(Variable operand, NDShape newShape) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_3(Variable.getCPtr(operand), NDShape.getCPtr(newShape));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Squeeze(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Squeeze__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Squeeze(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Squeeze__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Squeeze(Variable operand, AxisVector axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Squeeze__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Squeeze(Variable operand, AxisVector axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Squeeze__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ExpandDims(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ExpandDims__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ExpandDims(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ExpandDims__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConstantLike(Variable operand, double value, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConstantLike__SWIG_0(Variable.getCPtr(operand), value, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConstantLike(Variable operand, double value) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConstantLike__SWIG_1(Variable.getCPtr(operand), value);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ZerosLike(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ZerosLike__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ZerosLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ZerosLike__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OnesLike(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OnesLike__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OnesLike(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OnesLike__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function EyeLike(Variable operand, bool isOutputSparse, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.EyeLike__SWIG_0(Variable.getCPtr(operand), isOutputSparse, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function EyeLike(Variable operand, bool isOutputSparse) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.EyeLike__SWIG_1(Variable.getCPtr(operand), isOutputSparse);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Plus(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Plus__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Plus(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Plus__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Minus(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Minus__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Minus(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Minus__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogAddExp(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogAddExp__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LogAddExp(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LogAddExp__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pow(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pow__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pow(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pow__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementTimes(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementTimes__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementTimes(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementTimes__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementDivide(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementDivide__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementDivide(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementDivide__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementMax(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementMax(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementMin(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementMin(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Equal(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Equal__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Equal(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Equal__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NotEqual(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NotEqual__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NotEqual(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NotEqual__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Less(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Less__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Less(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Less__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LessEqual(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LessEqual__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LessEqual(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LessEqual__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Greater(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Greater__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Greater(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Greater__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GreaterEqual(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GreaterEqual__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GreaterEqual(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GreaterEqual__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand, uint outputRank, int inferInputRankToMap, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank, inferInputRankToMap, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand, uint outputRank, int inferInputRankToMap) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank, inferInputRankToMap);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand, uint outputRank, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_2(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand, uint outputRank) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_3(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_4(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Times(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Times__SWIG_5(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeTimes(Variable leftOperand, Variable rightOperand, uint outputRank, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeTimes__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeTimes(Variable leftOperand, Variable rightOperand, uint outputRank) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeTimes__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), outputRank);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeTimes(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeTimes__SWIG_2(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function TransposeTimes(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TransposeTimes__SWIG_3(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CosineDistance(Variable leftOperand, Variable rightOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CosineDistance__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CosineDistance(Variable leftOperand, Variable rightOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CosineDistance__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CosineDistanceWithNegativeSamples(Variable leftOperand, Variable rightOperand, uint shiftWindow, uint numberOfNegativeSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CosineDistanceWithNegativeSamples__SWIG_0(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), shiftWindow, numberOfNegativeSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CosineDistanceWithNegativeSamples(Variable leftOperand, Variable rightOperand, uint shiftWindow, uint numberOfNegativeSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CosineDistanceWithNegativeSamples__SWIG_1(Variable.getCPtr(leftOperand), Variable.getCPtr(rightOperand), shiftWindow, numberOfNegativeSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BinaryCrossEntropy(Variable prediction, Variable targets, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BinaryCrossEntropy__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(targets), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BinaryCrossEntropy(Variable prediction, Variable targets) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BinaryCrossEntropy__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(targets));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function WeightedBinaryCrossEntropy(Variable prediction, Variable targets, Variable weights, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.WeightedBinaryCrossEntropy__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(targets), Variable.getCPtr(weights), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function WeightedBinaryCrossEntropy(Variable prediction, Variable targets, Variable weights) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.WeightedBinaryCrossEntropy__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(targets), Variable.getCPtr(weights));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SquaredError(Variable prediction, Variable targets, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SquaredError__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(targets), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SquaredError(Variable prediction, Variable targets) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SquaredError__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(targets));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CrossEntropyWithSoftmax(Variable prediction, Variable labels, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CrossEntropyWithSoftmax__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(labels), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CrossEntropyWithSoftmax(Variable prediction, Variable labels, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CrossEntropyWithSoftmax__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(labels), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CrossEntropyWithSoftmax(Variable prediction, Variable labels, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CrossEntropyWithSoftmax__SWIG_2(Variable.getCPtr(prediction), Variable.getCPtr(labels), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CrossEntropyWithSoftmax(Variable prediction, Variable labels) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CrossEntropyWithSoftmax__SWIG_3(Variable.getCPtr(prediction), Variable.getCPtr(labels));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function EditDistanceError(Variable prediction, Variable labels, float substitutionPenalty, float deletionPenalty, float insertionPenalty, bool squashInputs, SizeTVector tokensToIgnore, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.EditDistanceError__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(labels), substitutionPenalty, deletionPenalty, insertionPenalty, squashInputs, SizeTVector.getCPtr(tokensToIgnore), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function EditDistanceError(Variable prediction, Variable labels, float substitutionPenalty, float deletionPenalty, float insertionPenalty, bool squashInputs, SizeTVector tokensToIgnore) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.EditDistanceError__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(labels), substitutionPenalty, deletionPenalty, insertionPenalty, squashInputs, SizeTVector.getCPtr(tokensToIgnore));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LatticeSequenceWithSoftmax(Variable labels, Variable prediction, Variable scaledLogLikelihood, Variable lattice, string symbolListPath, string phonePath, string stateListPath, string transitionProbabilityPath, string configFilePath, float smoothingWeight, float frameDropThreshold, bool doReferenceAlign, bool gammarUsesMBR, float gammarAMF, float gammarLMF, float gammarBMMIFactor, float gammarWordPenalty, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LatticeSequenceWithSoftmax__SWIG_0(Variable.getCPtr(labels), Variable.getCPtr(prediction), Variable.getCPtr(scaledLogLikelihood), Variable.getCPtr(lattice), symbolListPath, phonePath, stateListPath, transitionProbabilityPath, configFilePath, smoothingWeight, frameDropThreshold, doReferenceAlign, gammarUsesMBR, gammarAMF, gammarLMF, gammarBMMIFactor, gammarWordPenalty, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LatticeSequenceWithSoftmax(Variable labels, Variable prediction, Variable scaledLogLikelihood, Variable lattice, string symbolListPath, string phonePath, string stateListPath, string transitionProbabilityPath, string configFilePath, float smoothingWeight, float frameDropThreshold, bool doReferenceAlign, bool gammarUsesMBR, float gammarAMF, float gammarLMF, float gammarBMMIFactor, float gammarWordPenalty) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LatticeSequenceWithSoftmax__SWIG_1(Variable.getCPtr(labels), Variable.getCPtr(prediction), Variable.getCPtr(scaledLogLikelihood), Variable.getCPtr(lattice), symbolListPath, phonePath, stateListPath, transitionProbabilityPath, configFilePath, smoothingWeight, frameDropThreshold, doReferenceAlign, gammarUsesMBR, gammarAMF, gammarLMF, gammarBMMIFactor, gammarWordPenalty);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ForwardBackward(Variable graph, Variable features, uint blankTokenId, int delayConstraint, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ForwardBackward__SWIG_0(Variable.getCPtr(graph), Variable.getCPtr(features), blankTokenId, delayConstraint, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ForwardBackward(Variable graph, Variable features, uint blankTokenId, int delayConstraint) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ForwardBackward__SWIG_1(Variable.getCPtr(graph), Variable.getCPtr(features), blankTokenId, delayConstraint);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LabelsToGraph(Variable labels, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LabelsToGraph__SWIG_0(Variable.getCPtr(labels), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LabelsToGraph(Variable labels) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LabelsToGraph__SWIG_1(Variable.getCPtr(labels));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, uint topN, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(labels), topN, Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, uint topN, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(labels), topN, Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, uint topN, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_2(Variable.getCPtr(prediction), Variable.getCPtr(labels), topN, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, uint topN) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_3(Variable.getCPtr(prediction), Variable.getCPtr(labels), topN);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_4(Variable.getCPtr(prediction), Variable.getCPtr(labels), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_5(Variable.getCPtr(prediction), Variable.getCPtr(labels), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_6(Variable.getCPtr(prediction), Variable.getCPtr(labels), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ClassificationError(Variable prediction, Variable labels) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ClassificationError__SWIG_7(Variable.getCPtr(prediction), Variable.getCPtr(labels));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function DepthToSpace(Variable operand, uint blockSize, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.DepthToSpace__SWIG_0(Variable.getCPtr(operand), blockSize, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function DepthToSpace(Variable operand, uint blockSize) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.DepthToSpace__SWIG_1(Variable.getCPtr(operand), blockSize);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpaceToDepth(Variable operand, uint blockSize, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpaceToDepth__SWIG_0(Variable.getCPtr(operand), blockSize, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SpaceToDepth(Variable operand, uint blockSize) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SpaceToDepth__SWIG_1(Variable.getCPtr(operand), blockSize);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LambdaRank(Variable prediction, Variable gains, Variable groupId, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LambdaRank__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(gains), Variable.getCPtr(groupId), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LambdaRank(Variable prediction, Variable gains, Variable groupId) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LambdaRank__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(gains), Variable.getCPtr(groupId));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NDCGAt1(Variable prediction, Variable gains, Variable groupId, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NDCGAt1__SWIG_0(Variable.getCPtr(prediction), Variable.getCPtr(gains), Variable.getCPtr(groupId), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function NDCGAt1(Variable prediction, Variable gains, Variable groupId) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NDCGAt1__SWIG_1(Variable.getCPtr(prediction), Variable.getCPtr(gains), Variable.getCPtr(groupId));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand, Variable initialState, uint offset, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(initialState), offset, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand, Variable initialState, uint offset) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(initialState), offset);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand, Variable initialState) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(initialState));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand, uint offset, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_3(Variable.getCPtr(operand), offset, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand, uint offset) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_4(Variable.getCPtr(operand), offset);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PastValue(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PastValue__SWIG_5(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand, Variable initialState, uint offset, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(initialState), offset, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand, Variable initialState, uint offset) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(initialState), offset);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand, Variable initialState) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(initialState));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand, uint offset, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_3(Variable.getCPtr(operand), offset, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand, uint offset) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_4(Variable.getCPtr(operand), offset);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function FutureValue(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FutureValue__SWIG_5(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OneHotOp(Variable operand, uint numClass, bool outputSparse, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OneHotOp__SWIG_0(Variable.getCPtr(operand), numClass, outputSparse, Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OneHotOp(Variable operand, uint numClass, bool outputSparse, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OneHotOp__SWIG_1(Variable.getCPtr(operand), numClass, outputSparse, Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GatherOp(Variable indices, Variable reference, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GatherOp__SWIG_0(Variable.getCPtr(indices), Variable.getCPtr(reference), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GatherOp(Variable indices, Variable reference) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GatherOp__SWIG_1(Variable.getCPtr(indices), Variable.getCPtr(reference));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GatherOp(Variable indices, Variable reference, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GatherOp__SWIG_2(Variable.getCPtr(indices), Variable.getCPtr(reference), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function GatherOp(Variable indices, Variable reference, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.GatherOp__SWIG_3(Variable.getCPtr(indices), Variable.getCPtr(reference), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSum(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSum__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSum(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSum__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceLogSum(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceLogSum__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceLogSum(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceLogSum__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMean(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMean__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMean(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMean__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMax(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMax__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMax(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMax__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMin(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMin__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMin(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMin__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceProd(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceProd__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceProd(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceProd__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSum(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSum__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSum(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSum__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSum(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSum__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceLogSum(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceLogSum__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceLogSum(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceLogSum__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceLogSum(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceLogSum__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMean(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMean__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMean(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMean__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMean(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMean__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMax(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMax__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMax(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMax__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMax(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMax__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMin(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMin__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMin(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMin__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceMin(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceMin__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceProd(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceProd__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceProd(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceProd__SWIG_3(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceProd(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceProd__SWIG_4(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL1(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL1__SWIG_0(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL1(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL1__SWIG_1(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL1(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL1__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL2(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL2__SWIG_0(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL2(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL2__SWIG_1(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceL2(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceL2__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSumSquare(Variable operand, AxisVector axes, bool keepDims, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSumSquare__SWIG_0(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSumSquare(Variable operand, AxisVector axes, bool keepDims) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSumSquare__SWIG_1(Variable.getCPtr(operand), AxisVector.getCPtr(axes), keepDims);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReduceSumSquare(Variable operand, AxisVector axes) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReduceSumSquare__SWIG_2(Variable.getCPtr(operand), AxisVector.getCPtr(axes));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ImageScaler(Variable operand, float scaler, FloatVector biases, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ImageScaler(Variable.getCPtr(operand), scaler, FloatVector.getCPtr(biases), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PerDimMeanVarianceNormalize(Variable operand, Variable mean, Variable invStdDev, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PerDimMeanVarianceNormalize__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(mean), Variable.getCPtr(invStdDev), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PerDimMeanVarianceNormalize(Variable operand, Variable mean, Variable invStdDev) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PerDimMeanVarianceNormalize__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(mean), Variable.getCPtr(invStdDev));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PerDimMeanVarianceNormalize(Variable operand, NDArrayView mean, NDArrayView invStdDev, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PerDimMeanVarianceNormalize__SWIG_2(Variable.getCPtr(operand), NDArrayView.getCPtr(mean), NDArrayView.getCPtr(invStdDev), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PerDimMeanVarianceNormalize(Variable operand, NDArrayView mean, NDArrayView invStdDev) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PerDimMeanVarianceNormalize__SWIG_3(Variable.getCPtr(operand), NDArrayView.getCPtr(mean), NDArrayView.getCPtr(invStdDev));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, double epsilon, bool useStatsAcrossChannels, bool doVarianceScaling, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_0(Variable.getCPtr(operand), epsilon, useStatsAcrossChannels, doVarianceScaling, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, double epsilon, bool useStatsAcrossChannels, bool doVarianceScaling) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_1(Variable.getCPtr(operand), epsilon, useStatsAcrossChannels, doVarianceScaling);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, double epsilon, bool useStatsAcrossChannels) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_2(Variable.getCPtr(operand), epsilon, useStatsAcrossChannels);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, double epsilon) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_3(Variable.getCPtr(operand), epsilon);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, bool useStatsAcrossChannels, bool doVarianceScaling, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_4(Variable.getCPtr(operand), useStatsAcrossChannels, doVarianceScaling, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, bool useStatsAcrossChannels, bool doVarianceScaling) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_5(Variable.getCPtr(operand), useStatsAcrossChannels, doVarianceScaling);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand, bool useStatsAcrossChannels) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_6(Variable.getCPtr(operand), useStatsAcrossChannels);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function MeanVarianceNormalization(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MeanVarianceNormalization__SWIG_7(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint reductionRank, uint groups, uint maxTempMemSizeInSamples, bool sequential, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_0(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), reductionRank, groups, maxTempMemSizeInSamples, sequential, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint reductionRank, uint groups, uint maxTempMemSizeInSamples, bool sequential) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_1(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), reductionRank, groups, maxTempMemSizeInSamples, sequential);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint reductionRank, uint groups, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_2(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), reductionRank, groups, maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint reductionRank, uint groups) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_3(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), reductionRank, groups);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation, uint reductionRank) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_4(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation), reductionRank);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape dilation) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_5(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(dilation));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_6(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_7(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand, NDShape strides) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_8(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Convolution(Variable convolutionMap, Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Convolution__SWIG_9(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape outputShape, NDShape dilation, uint reductionRank, uint maxTempMemSizeInSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_0(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation), reductionRank, maxTempMemSizeInSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape outputShape, NDShape dilation, uint reductionRank, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_1(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation), reductionRank, maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape outputShape, NDShape dilation, uint reductionRank) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_2(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation), reductionRank);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape outputShape, NDShape dilation) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_3(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding, NDShape outputShape) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_4(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding), NDShape.getCPtr(outputShape));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, BoolVector autoPadding) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_5(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), BoolVector.getCPtr(autoPadding));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_6(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_7(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_8(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, SizeTVector lowerPad, SizeTVector upperPad, NDShape outputShape, NDShape dilation, uint maxTempMemSizeInSamples, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_9(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation), maxTempMemSizeInSamples, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ConvolutionTranspose(Variable convolutionMap, Variable operand, NDShape strides, BoolVector sharing, SizeTVector lowerPad, SizeTVector upperPad, NDShape outputShape, NDShape dilation, uint maxTempMemSizeInSamples) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ConvolutionTranspose__SWIG_10(Variable.getCPtr(convolutionMap), Variable.getCPtr(operand), NDShape.getCPtr(strides), BoolVector.getCPtr(sharing), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad), NDShape.getCPtr(outputShape), NDShape.getCPtr(dilation), maxTempMemSizeInSamples);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ROIPooling(Variable operand, Variable rois, PoolingType poolingType, NDShape roiOutputShape, double spatialScale, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ROIPooling(Variable.getCPtr(operand), Variable.getCPtr(rois), (int)poolingType, NDShape.getCPtr(roiOutputShape), spatialScale, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, BoolVector autoPadding, bool ceilOutDim, bool includePad, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_0(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding), ceilOutDim, includePad, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, BoolVector autoPadding, bool ceilOutDim, bool includePad) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_1(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding), ceilOutDim, includePad);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, BoolVector autoPadding, bool ceilOutDim) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_2(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding), ceilOutDim);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, BoolVector autoPadding) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_3(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_4(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_5(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, SizeTVector lowerPad, SizeTVector upperPad, bool ceilOutDim, bool includePad, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_6(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad), ceilOutDim, includePad, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, SizeTVector lowerPad, SizeTVector upperPad, bool ceilOutDim, bool includePad) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_7(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad), ceilOutDim, includePad);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, SizeTVector lowerPad, SizeTVector upperPad, bool ceilOutDim) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_8(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad), ceilOutDim);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Pooling(Variable operand, PoolingType poolingType, NDShape poolingWindowShape, NDShape strides, SizeTVector lowerPad, SizeTVector upperPad) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Pooling__SWIG_9(Variable.getCPtr(operand), (int)poolingType, NDShape.getCPtr(poolingWindowShape), NDShape.getCPtr(strides), SizeTVector.getCPtr(lowerPad), SizeTVector.getCPtr(upperPad));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unpooling(Variable operand, Variable poolingInput, PoolingType UnpoolingType, NDShape UnpoolingWindowShape, NDShape strides, BoolVector autoPadding, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unpooling__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(poolingInput), (int)UnpoolingType, NDShape.getCPtr(UnpoolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unpooling(Variable operand, Variable poolingInput, PoolingType UnpoolingType, NDShape UnpoolingWindowShape, NDShape strides, BoolVector autoPadding) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unpooling__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(poolingInput), (int)UnpoolingType, NDShape.getCPtr(UnpoolingWindowShape), NDShape.getCPtr(strides), BoolVector.getCPtr(autoPadding));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unpooling(Variable operand, Variable poolingInput, PoolingType UnpoolingType, NDShape UnpoolingWindowShape, NDShape strides) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unpooling__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(poolingInput), (int)UnpoolingType, NDShape.getCPtr(UnpoolingWindowShape), NDShape.getCPtr(strides));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Unpooling(Variable operand, Variable poolingInput, PoolingType UnpoolingType, NDShape UnpoolingWindowShape) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Unpooling__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(poolingInput), (int)UnpoolingType, NDShape.getCPtr(UnpoolingWindowShape));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant, double blendTimeConstant, double epsilon, bool useCuDNNEngine, bool disableRegularization, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant, blendTimeConstant, epsilon, useCuDNNEngine, disableRegularization, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant, double blendTimeConstant, double epsilon, bool useCuDNNEngine, bool disableRegularization) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant, blendTimeConstant, epsilon, useCuDNNEngine, disableRegularization);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant, double blendTimeConstant, double epsilon, bool useCuDNNEngine) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant, blendTimeConstant, epsilon, useCuDNNEngine);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant, double blendTimeConstant, double epsilon) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant, blendTimeConstant, epsilon);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant, double blendTimeConstant) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_4(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant, blendTimeConstant);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial, double normalizationTimeConstant) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_5(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial, normalizationTimeConstant);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function BatchNormalization(Variable operand, Variable scale, Variable bias, Variable runningMean, Variable runningInvStd, Variable runningCount, bool spatial) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.BatchNormalization__SWIG_6(Variable.getCPtr(operand), Variable.getCPtr(scale), Variable.getCPtr(bias), Variable.getCPtr(runningMean), Variable.getCPtr(runningInvStd), Variable.getCPtr(runningCount), spatial);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LocalResponseNormalization(Variable operand, uint depthRadius, double bias, double alpha, double beta, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LocalResponseNormalization__SWIG_0(Variable.getCPtr(operand), depthRadius, bias, alpha, beta, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LocalResponseNormalization(Variable operand, uint depthRadius, double bias, double alpha, double beta) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LocalResponseNormalization__SWIG_1(Variable.getCPtr(operand), depthRadius, bias, alpha, beta);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OptimizedRNNStack(Variable operand, Variable weights, uint hiddenSize, uint numLayers, bool bidirectional, string recurrentOp, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OptimizedRNNStack__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(weights), hiddenSize, numLayers, bidirectional, recurrentOp, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OptimizedRNNStack(Variable operand, Variable weights, uint hiddenSize, uint numLayers, bool bidirectional, string recurrentOp) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OptimizedRNNStack__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(weights), hiddenSize, numLayers, bidirectional, recurrentOp);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OptimizedRNNStack(Variable operand, Variable weights, uint hiddenSize, uint numLayers, bool bidirectional) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OptimizedRNNStack__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(weights), hiddenSize, numLayers, bidirectional);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function OptimizedRNNStack(Variable operand, Variable weights, uint hiddenSize, uint numLayers) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.OptimizedRNNStack__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(weights), hiddenSize, numLayers);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Clip(Variable operand, Variable min, Variable max, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Clip__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(min), Variable.getCPtr(max), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Clip(Variable operand, Variable min, Variable max) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Clip__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(min), Variable.getCPtr(max));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementSelect(Variable condition, Variable thenOperand, Variable elseOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementSelect__SWIG_0(Variable.getCPtr(condition), Variable.getCPtr(thenOperand), Variable.getCPtr(elseOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ElementSelect(Variable condition, Variable thenOperand, Variable elseOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ElementSelect__SWIG_1(Variable.getCPtr(condition), Variable.getCPtr(thenOperand), Variable.getCPtr(elseOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Splice(VariableVector operands, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Splice__SWIG_0(VariableVector.getCPtr(operands), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Splice(VariableVector operands, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Splice__SWIG_1(VariableVector.getCPtr(operands), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Combine(VariableVector operands, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Combine__SWIG_0(VariableVector.getCPtr(operands), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Combine(VariableVector operands) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Combine__SWIG_1(VariableVector.getCPtr(operands));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Mean(VariableVector operands, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Mean__SWIG_0(VariableVector.getCPtr(operands), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Mean(VariableVector operands) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Mean__SWIG_1(VariableVector.getCPtr(operands));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sum(VariableVector operands, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sum__SWIG_0(VariableVector.getCPtr(operands), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Sum(VariableVector operands) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Sum__SWIG_1(VariableVector.getCPtr(operands));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Alias(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Alias__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Alias(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Alias__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function StopGradient(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.StopGradient__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function StopGradient(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.StopGradient__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Assign(Variable arg0, Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Assign__SWIG_0(Variable.getCPtr(arg0), Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Assign(Variable arg0, Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Assign__SWIG_1(Variable.getCPtr(arg0), Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function AsComposite(Function rootFunction, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AsComposite__SWIG_0(Function.getCPtr(rootFunction), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function AsComposite(Function rootFunction) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AsComposite__SWIG_1(Function.getCPtr(rootFunction));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ELU(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ELU__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ELU(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ELU__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ELU(Variable operand, double alpha, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ELU__SWIG_2(Variable.getCPtr(operand), alpha, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ELU(Variable operand, double alpha) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ELU__SWIG_3(Variable.getCPtr(operand), alpha);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SELU(Variable operand, double gamma, double alpha, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SELU__SWIG_0(Variable.getCPtr(operand), gamma, alpha, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SELU(Variable operand, double gamma, double alpha) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SELU__SWIG_1(Variable.getCPtr(operand), gamma, alpha);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SELU(Variable operand, double gamma) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SELU__SWIG_2(Variable.getCPtr(operand), gamma);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SELU(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SELU__SWIG_3(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LeakyReLU(Variable operand, double alpha, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LeakyReLU__SWIG_0(Variable.getCPtr(operand), alpha, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function LeakyReLU(Variable operand, double alpha) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.LeakyReLU__SWIG_1(Variable.getCPtr(operand), alpha);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PReLU(Variable alpha, Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PReLU__SWIG_0(Variable.getCPtr(alpha), Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function PReLU(Variable alpha, Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.PReLU__SWIG_1(Variable.getCPtr(alpha), Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softplus(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softplus__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softplus(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softplus__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softsign(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softsign__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Softsign(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Softsign__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Argmax(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Argmax__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Argmax(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Argmax__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Argmin(Variable operand, Axis axis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Argmin__SWIG_0(Variable.getCPtr(operand), Axis.getCPtr(axis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Argmin(Variable operand, Axis axis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Argmin__SWIG_1(Variable.getCPtr(operand), Axis.getCPtr(axis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function StraightThrough(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.StraightThrough__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function StraightThrough(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.StraightThrough__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequence(Variable operand, string sequenceAxisNamePrefix, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequence__SWIG_0(Variable.getCPtr(operand), sequenceAxisNamePrefix, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequence(Variable operand, string sequenceAxisNamePrefix) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequence__SWIG_1(Variable.getCPtr(operand), sequenceAxisNamePrefix);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequence(Variable operand, Variable sequenceLengths, string sequenceAxisNamePrefix, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequence__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(sequenceLengths), sequenceAxisNamePrefix, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequence(Variable operand, Variable sequenceLengths, string sequenceAxisNamePrefix) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequence__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(sequenceLengths), sequenceAxisNamePrefix);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequenceLike(Variable operand, Variable dynamicAxesLike, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequenceLike__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(dynamicAxesLike), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ToSequenceLike(Variable operand, Variable dynamicAxesLike) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ToSequenceLike__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(dynamicAxesLike));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReconcileDynamicAxes(Variable operand, Variable axesAsOperand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReconcileDynamicAxes__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(axesAsOperand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function ReconcileDynamicAxes(Variable operand, Variable axesAsOperand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.ReconcileDynamicAxes__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(axesAsOperand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CustomProxyOp(VariableVector operands, string customOp, NDShape outputShape, DataType outputType, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CustomProxyOp__SWIG_0(VariableVector.getCPtr(operands), customOp, NDShape.getCPtr(outputShape), (int)outputType, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function CustomProxyOp(VariableVector operands, string customOp, NDShape outputShape, DataType outputType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CustomProxyOp__SWIG_1(VariableVector.getCPtr(operands), customOp, NDShape.getCPtr(outputShape), (int)outputType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceIsFirst(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceIsFirst__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceIsFirst(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceIsFirst__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceIsLast(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceIsLast__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceIsLast(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceIsLast__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceSlice(Variable operand, int beginIndex, int endIndex, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceSlice__SWIG_0(Variable.getCPtr(operand), beginIndex, endIndex, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceSlice(Variable operand, int beginIndex, int endIndex) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceSlice__SWIG_1(Variable.getCPtr(operand), beginIndex, endIndex);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceReduceSum(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceReduceSum__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceReduceSum(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceReduceSum__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceReduceMax(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceReduceMax__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceReduceMax(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceReduceMax__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceSoftmax(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceSoftmax__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceSoftmax(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceSoftmax__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceFirst(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceFirst__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceFirst(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceFirst__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceLast(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceLast__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceLast(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceLast__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceWhere(Variable condition, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceWhere__SWIG_0(Variable.getCPtr(condition), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceWhere(Variable condition) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceWhere__SWIG_1(Variable.getCPtr(condition));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceGather(Variable operand, Variable condition, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceGather__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(condition), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceGather(Variable operand, Variable condition) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceGather__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(condition));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceGather(Variable operand, Variable condition, PairSizeTInt newDerivedSequenceAxisScalingAndAdditiveFactor, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceGather__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(condition), PairSizeTInt.getCPtr(newDerivedSequenceAxisScalingAndAdditiveFactor), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceGather(Variable operand, Variable condition, PairSizeTInt newDerivedSequenceAxisScalingAndAdditiveFactor) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceGather__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(condition), PairSizeTInt.getCPtr(newDerivedSequenceAxisScalingAndAdditiveFactor));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceScatter(Variable operand, Variable condition, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceScatter__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(condition), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceScatter(Variable operand, Variable condition) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceScatter__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(condition));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceScatter(Variable operand, Variable condition, PairSizeTInt newDerivedSequenceAxisScalingAndAdditiveFactor, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceScatter__SWIG_2(Variable.getCPtr(operand), Variable.getCPtr(condition), PairSizeTInt.getCPtr(newDerivedSequenceAxisScalingAndAdditiveFactor), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceScatter(Variable operand, Variable condition, PairSizeTInt newDerivedSequenceAxisScalingAndAdditiveFactor) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceScatter__SWIG_3(Variable.getCPtr(operand), Variable.getCPtr(condition), PairSizeTInt.getCPtr(newDerivedSequenceAxisScalingAndAdditiveFactor));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceBroadcastAs(Variable operand, Variable broadcastAs, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceBroadcastAs__SWIG_0(Variable.getCPtr(operand), Variable.getCPtr(broadcastAs), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceBroadcastAs(Variable operand, Variable broadcastAs) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceBroadcastAs__SWIG_1(Variable.getCPtr(operand), Variable.getCPtr(broadcastAs));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceUnpack(Variable operand, double paddingValue, bool supressMaskOutput, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceUnpack__SWIG_0(Variable.getCPtr(operand), paddingValue, supressMaskOutput, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function SequenceUnpack(Variable operand, double paddingValue, bool supressMaskOutput) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SequenceUnpack__SWIG_1(Variable.getCPtr(operand), paddingValue, supressMaskOutput);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double MomentumFromTimeConstant(double momTC) {
    double ret = CNTKLibPINVOKE.MomentumFromTimeConstant(momTC);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(double time_constant) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_0(time_constant), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(TrainingParameterScheduleDouble schedule) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_1(TrainingParameterScheduleDouble.getCPtr(schedule)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(DoubleVector schedule, uint epoch_size) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_2(DoubleVector.getCPtr(schedule), epoch_size), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(DoubleVector schedule) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_3(DoubleVector.getCPtr(schedule)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(VectorPairSizeTDouble schedule, uint epoch_size) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_4(VectorPairSizeTDouble.getCPtr(schedule), epoch_size), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble MomentumAsTimeConstantSchedule(VectorPairSizeTDouble schedule) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.MomentumAsTimeConstantSchedule__SWIG_5(VectorPairSizeTDouble.getCPtr(schedule)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner SGDLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SGDLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner SGDLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.SGDLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner MomentumSGDLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MomentumSGDLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner MomentumSGDLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MomentumSGDLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner MomentumSGDLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.MomentumSGDLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner FSAdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FSAdaGradLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule), AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner FSAdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FSAdaGradLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner FSAdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FSAdaGradLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner FSAdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.FSAdaGradLearner__SWIG_3(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule, double epsilon, bool adamax, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule), epsilon, adamax, AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule, double epsilon, bool adamax) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule), epsilon, adamax);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule, double epsilon) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule), epsilon);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain, TrainingParameterScheduleDouble varianceMomentumSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_3(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain, TrainingParameterScheduleDouble.getCPtr(varianceMomentumSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule, bool unitGain) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_4(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule), unitGain);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdamLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, TrainingParameterScheduleDouble momentumSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdamLearner__SWIG_5(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), TrainingParameterScheduleDouble.getCPtr(momentumSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, bool needAveMultiplier, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaGradLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), needAveMultiplier, AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, bool needAveMultiplier) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaGradLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), needAveMultiplier);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaGradLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaGradLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner RMSPropLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double gamma, double inc, double dec, double max, double min, bool needAveMultiplier, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RMSPropLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), gamma, inc, dec, max, min, needAveMultiplier, AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner RMSPropLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double gamma, double inc, double dec, double max, double min, bool needAveMultiplier) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RMSPropLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), gamma, inc, dec, max, min, needAveMultiplier);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner RMSPropLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double gamma, double inc, double dec, double max, double min) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.RMSPropLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), gamma, inc, dec, max, min);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaDeltaLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double rho, double epsilon, AdditionalLearningOptions additionalOptions) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaDeltaLearner__SWIG_0(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), rho, epsilon, AdditionalLearningOptions.getCPtr(additionalOptions));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaDeltaLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double rho, double epsilon) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaDeltaLearner__SWIG_1(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), rho, epsilon);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaDeltaLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule, double rho) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaDeltaLearner__SWIG_2(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule), rho);
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Learner AdaDeltaLearner(ParameterVector parameters, TrainingParameterScheduleDouble learningRateSchedule) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.AdaDeltaLearner__SWIG_3(ParameterVector.getCPtr(parameters), TrainingParameterScheduleDouble.getCPtr(learningRateSchedule));
    Learner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Learner(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Evaluator CreateEvaluator(Function evaluationFunction, ProgressWriterVector progressWriters) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateEvaluator__SWIG_0(Function.getCPtr(evaluationFunction), ProgressWriterVector.getCPtr(progressWriters));
    Evaluator ret = (cPtr == global::System.IntPtr.Zero) ? null : new Evaluator(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Evaluator CreateEvaluator(Function evaluationFunction) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateEvaluator__SWIG_1(Function.getCPtr(evaluationFunction));
    Evaluator ret = (cPtr == global::System.IntPtr.Zero) ? null : new Evaluator(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Trainer CreateTrainer(Function model, Function lossFunction, LearnerVector parameterLearners, ProgressWriterVector progressWriters) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateTrainer__SWIG_0(Function.getCPtr(model), Function.getCPtr(lossFunction), LearnerVector.getCPtr(parameterLearners), ProgressWriterVector.getCPtr(progressWriters));
    Trainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trainer(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Trainer CreateTrainer(Function model, Function lossFunction, LearnerVector parameterLearners) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateTrainer__SWIG_1(Function.getCPtr(model), Function.getCPtr(lossFunction), LearnerVector.getCPtr(parameterLearners));
    Trainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trainer(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Trainer CreateTrainer(Function model, Function lossFunction, Function evaluationFunction, LearnerVector parameterLearners, ProgressWriterVector progressWriters) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateTrainer__SWIG_2(Function.getCPtr(model), Function.getCPtr(lossFunction), Function.getCPtr(evaluationFunction), LearnerVector.getCPtr(parameterLearners), ProgressWriterVector.getCPtr(progressWriters));
    Trainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trainer(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Trainer CreateTrainer(Function model, Function lossFunction, Function evaluationFunction, LearnerVector parameterLearners) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateTrainer__SWIG_3(Function.getCPtr(model), Function.getCPtr(lossFunction), Function.getCPtr(evaluationFunction), LearnerVector.getCPtr(parameterLearners));
    Trainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trainer(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource CreateCompositeMinibatchSource(MinibatchSourceConfig configuration) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.CreateCompositeMinibatchSource(MinibatchSourceConfig.getCPtr(configuration));
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType, PairIntInt cropSize, PairFloatFloat sideRatio, PairFloatFloat areaRatio, PairFloatFloat aspectRatio, string jitterType) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_0(cropType, PairIntInt.getCPtr(cropSize), PairFloatFloat.getCPtr(sideRatio), PairFloatFloat.getCPtr(areaRatio), PairFloatFloat.getCPtr(aspectRatio), jitterType), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType, PairIntInt cropSize, PairFloatFloat sideRatio, PairFloatFloat areaRatio, PairFloatFloat aspectRatio) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_1(cropType, PairIntInt.getCPtr(cropSize), PairFloatFloat.getCPtr(sideRatio), PairFloatFloat.getCPtr(areaRatio), PairFloatFloat.getCPtr(aspectRatio)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType, PairIntInt cropSize, PairFloatFloat sideRatio, PairFloatFloat areaRatio) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_2(cropType, PairIntInt.getCPtr(cropSize), PairFloatFloat.getCPtr(sideRatio), PairFloatFloat.getCPtr(areaRatio)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType, PairIntInt cropSize, PairFloatFloat sideRatio) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_3(cropType, PairIntInt.getCPtr(cropSize), PairFloatFloat.getCPtr(sideRatio)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType, PairIntInt cropSize) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_4(cropType, PairIntInt.getCPtr(cropSize)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop(string cropType) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_5(cropType), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderCrop() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderCrop__SWIG_6(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderScale(int width, int height, int channels, string interpolations, string scaleMode, int padValue) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderScale__SWIG_0(width, height, channels, interpolations, scaleMode, padValue), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderScale(int width, int height, int channels, string interpolations, string scaleMode) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderScale__SWIG_1(width, height, channels, interpolations, scaleMode), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderScale(int width, int height, int channels, string interpolations) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderScale__SWIG_2(width, height, channels, interpolations), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderScale(int width, int height, int channels) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderScale__SWIG_3(width, height, channels), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderMean(string meanFile) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderMean(meanFile), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderColor(float brightnessRadius, float contrastRadius, float saturationRadius) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderColor__SWIG_0(brightnessRadius, contrastRadius, saturationRadius), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderColor(float brightnessRadius, float contrastRadius) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderColor__SWIG_1(brightnessRadius, contrastRadius), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderColor(float brightnessRadius) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderColor__SWIG_2(brightnessRadius), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ReaderColor() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ReaderColor__SWIG_3(), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ImageDeserializer(string fileName, string labelStreamName, uint numLabels, string imageStreamName, DictionaryVector transforms) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ImageDeserializer__SWIG_0(fileName, labelStreamName, numLabels, imageStreamName, DictionaryVector.getCPtr(transforms)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary ImageDeserializer(string fileName, string labelStreamName, uint numLabels, string imageStreamName) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.ImageDeserializer__SWIG_1(fileName, labelStreamName, numLabels, imageStreamName), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary Base64ImageDeserializer(string fileName, string labelStreamName, uint numLabels, string imageStreamName, DictionaryVector transforms) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.Base64ImageDeserializer__SWIG_0(fileName, labelStreamName, numLabels, imageStreamName, DictionaryVector.getCPtr(transforms)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary Base64ImageDeserializer(string fileName, string labelStreamName, uint numLabels, string imageStreamName) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.Base64ImageDeserializer__SWIG_1(fileName, labelStreamName, numLabels, imageStreamName), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary CTFDeserializer(string fileName, StreamConfigurationVector streams) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.CTFDeserializer(fileName, StreamConfigurationVector.getCPtr(streams)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary CBFDeserializer(string fileName, StreamConfigurationVector streams) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.CBFDeserializer__SWIG_0(fileName, StreamConfigurationVector.getCPtr(streams)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary CBFDeserializer(string fileName) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.CBFDeserializer__SWIG_1(fileName), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HTKFeatureDeserializer(HTKFeatureConfigurationVector streams) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HTKFeatureDeserializer(HTKFeatureConfigurationVector.getCPtr(streams)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HTKMLFDeserializer(string streamName, string labelMappingFile, uint dimension, StringVector mlfFiles, bool phoneBoundaries) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HTKMLFDeserializer__SWIG_0(streamName, labelMappingFile, dimension, StringVector.getCPtr(mlfFiles), phoneBoundaries), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HTKMLFDeserializer(string streamName, string labelMappingFile, uint dimension, StringVector mlfFiles) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HTKMLFDeserializer__SWIG_1(streamName, labelMappingFile, dimension, StringVector.getCPtr(mlfFiles)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary HTKMLFBinaryDeserializer(string streamName, StringVector mlfFiles, uint dimension) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.HTKMLFBinaryDeserializer(streamName, StringVector.getCPtr(mlfFiles), dimension), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CNTKDictionary LatticeDeserializer(string streamName, string latticeIndexFile) {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.LatticeDeserializer(streamName, latticeIndexFile), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource TextFormatMinibatchSource(string dataFilePath, StreamConfigurationVector streamConfigs, uint epochSize, bool randomize, uint randomizationWindow, bool sampleBasedRandomizationWindow) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TextFormatMinibatchSource__SWIG_0(dataFilePath, StreamConfigurationVector.getCPtr(streamConfigs), epochSize, randomize, randomizationWindow, sampleBasedRandomizationWindow);
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource TextFormatMinibatchSource(string dataFilePath, StreamConfigurationVector streamConfigs, uint epochSize, bool randomize, uint randomizationWindow) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TextFormatMinibatchSource__SWIG_1(dataFilePath, StreamConfigurationVector.getCPtr(streamConfigs), epochSize, randomize, randomizationWindow);
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource TextFormatMinibatchSource(string dataFilePath, StreamConfigurationVector streamConfigs, uint epochSize, bool randomize) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TextFormatMinibatchSource__SWIG_2(dataFilePath, StreamConfigurationVector.getCPtr(streamConfigs), epochSize, randomize);
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource TextFormatMinibatchSource(string dataFilePath, StreamConfigurationVector streamConfigs, uint epochSize) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TextFormatMinibatchSource__SWIG_3(dataFilePath, StreamConfigurationVector.getCPtr(streamConfigs), epochSize);
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinibatchSource TextFormatMinibatchSource(string dataFilePath, StreamConfigurationVector streamConfigs) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.TextFormatMinibatchSource__SWIG_4(dataFilePath, StreamConfigurationVector.getCPtr(streamConfigs));
    MinibatchSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new MinibatchSource(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ComputeInputPerDimMeansAndInvStdDevs(MinibatchSource minibatchSource, UnorderedMapStreamInformationPairNDArrayViewPtrNDArrayViewPtr computedMeanAndVariances, DeviceDescriptor device) {
    CNTKLibPINVOKE.ComputeInputPerDimMeansAndInvStdDevs__SWIG_0(MinibatchSource.getCPtr(minibatchSource), UnorderedMapStreamInformationPairNDArrayViewPtrNDArrayViewPtr.getCPtr(computedMeanAndVariances), DeviceDescriptor.getCPtr(device));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComputeInputPerDimMeansAndInvStdDevs(MinibatchSource minibatchSource, UnorderedMapStreamInformationPairNDArrayViewPtrNDArrayViewPtr computedMeanAndVariances) {
    CNTKLibPINVOKE.ComputeInputPerDimMeansAndInvStdDevs__SWIG_1(MinibatchSource.getCPtr(minibatchSource), UnorderedMapStreamInformationPairNDArrayViewPtrNDArrayViewPtr.getCPtr(computedMeanAndVariances));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMaxNumCPUThreads(uint numCPUThreads) {
    CNTKLibPINVOKE.SetMaxNumCPUThreads(numCPUThreads);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint GetMaxNumCPUThreads() {
    uint ret = CNTKLibPINVOKE.GetMaxNumCPUThreads();
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent, uint offsetX, uint offsetY, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_0(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent), offsetX, offsetY, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent, uint offsetX, uint offsetY) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_1(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent), offsetX, offsetY);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_2(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_3(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent, Variable ancestorInput, Variable ancestorReferent, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_4(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent), Variable.getCPtr(ancestorInput), Variable.getCPtr(ancestorReferent), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Crop(Variable nodeInput, Variable nodeReferent, Variable ancestorInput, Variable ancestorReferent) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Crop__SWIG_5(Variable.getCPtr(nodeInput), Variable.getCPtr(nodeReferent), Variable.getCPtr(ancestorInput), Variable.getCPtr(ancestorReferent));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cast(Variable nodeInput, DataType outputType, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cast__SWIG_0(Variable.getCPtr(nodeInput), (int)outputType, name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Cast(Variable nodeInput, DataType outputType) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Cast__SWIG_1(Variable.getCPtr(nodeInput), (int)outputType);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


}

}
