//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class DictionaryValue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DictionaryValue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DictionaryValue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DictionaryValue() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_DictionaryValue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static string TypeName(DictionaryValue.Type type) {
    string ret = CNTKLibPINVOKE.DictionaryValue_TypeName((int)type);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DictionaryValue() : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_0(), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(bool value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_1(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(int value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_2(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(uint value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_3(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(float value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_4(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(double value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_5(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(string value) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_6(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public DictionaryValue(DictionaryValue other) : this(CNTKLibPINVOKE.new_DictionaryValue__SWIG_8(DictionaryValue.getCPtr(other)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasValue() {
    bool ret = CNTKLibPINVOKE.DictionaryValue_HasValue(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DictionaryValue.Type ValueType() {
    DictionaryValue.Type ret = (DictionaryValue.Type)CNTKLibPINVOKE.DictionaryValue_ValueType(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AreEqual(DictionaryValue other) {
    bool ret = CNTKLibPINVOKE.DictionaryValue_AreEqual(swigCPtr, DictionaryValue.getCPtr(other));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AreNotEqual(DictionaryValue other) {
    bool ret = CNTKLibPINVOKE.DictionaryValue_AreNotEqual(swigCPtr, DictionaryValue.getCPtr(other));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Save(string filename) {
    CNTKLibPINVOKE.DictionaryValue_Save(swigCPtr, filename);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DictionaryValue Load(string filename) {
    DictionaryValue ret = new DictionaryValue(CNTKLibPINVOKE.DictionaryValue_Load(filename), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    None,
    Bool,
    Int,
    SizeT,
    Float,
    Double,
    String,
    NDShape,
    Axis,
    Vector,
    Dictionary,
    NDArrayView,
    TrainingParameterSchedule
  }

}

}
