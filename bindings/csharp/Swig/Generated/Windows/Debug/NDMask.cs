//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class NDMask : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal NDMask(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NDMask obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NDMask() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CNTKLibPINVOKE.delete_NDMask(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NDMask(NDShape shape, DeviceDescriptor device) : this(CNTKLibPINVOKE.new_NDMask__SWIG_0(NDShape.getCPtr(shape), DeviceDescriptor.getCPtr(device)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDMask(NDShape shape) : this(CNTKLibPINVOKE.new_NDMask__SWIG_1(NDShape.getCPtr(shape)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _InvalidateSection(SizeTVector sectionOffset, NDShape sectionShape) {
    CNTKLibPINVOKE.NDMask__InvalidateSection(swigCPtr, SizeTVector.getCPtr(sectionOffset), NDShape.getCPtr(sectionShape));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _MarkSequenceBegin(SizeTVector offset) {
    CNTKLibPINVOKE.NDMask__MarkSequenceBegin__SWIG_0(swigCPtr, SizeTVector.getCPtr(offset));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _MarkSequenceBegin(SizeTVector offset, NDShape sectionShape) {
    CNTKLibPINVOKE.NDMask__MarkSequenceBegin__SWIG_1(swigCPtr, SizeTVector.getCPtr(offset), NDShape.getCPtr(sectionShape));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    CNTKLibPINVOKE.NDMask_Clear(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint _MaskedCount() {
    uint ret = CNTKLibPINVOKE.NDMask__MaskedCount(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DeviceDescriptor _Device() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.NDMask__Device(swigCPtr), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private NDShape _Shape() {
    NDShape ret = new NDShape(CNTKLibPINVOKE.NDMask__Shape(swigCPtr), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NDMask DeepClone(DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NDMask_DeepClone__SWIG_0(swigCPtr, DeviceDescriptor.getCPtr(device));
    NDMask ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDMask(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NDMask DeepClone() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NDMask_DeepClone__SWIG_1(swigCPtr);
    NDMask ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDMask(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NDMask Alias() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.NDMask_Alias(swigCPtr);
    NDMask ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDMask(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CopyFrom(NDMask source) {
    CNTKLibPINVOKE.NDMask_CopyFrom(swigCPtr, NDMask.getCPtr(source));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
