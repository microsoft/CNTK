//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class TrainingParameterScheduleDouble : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TrainingParameterScheduleDouble(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TrainingParameterScheduleDouble obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TrainingParameterScheduleDouble() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_TrainingParameterScheduleDouble(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public TrainingParameterScheduleDouble(double value, uint minibatchSize) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_0(value, minibatchSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterScheduleDouble(double value) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_1(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterScheduleDouble(VectorPairSizeTDouble schedule, uint epochSize, uint minibatchSize) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_2(VectorPairSizeTDouble.getCPtr(schedule), epochSize, minibatchSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterScheduleDouble(VectorPairSizeTDouble schedule, uint epochSize) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_3(VectorPairSizeTDouble.getCPtr(schedule), epochSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterScheduleDouble(VectorPairSizeTDouble schedule) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_4(VectorPairSizeTDouble.getCPtr(schedule)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSweepBased() {
    bool ret = CNTKLibPINVOKE.TrainingParameterScheduleDouble_IsSweepBased(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TrainingParameterScheduleDouble(TrainingParameterScheduleDouble arg0) : this(CNTKLibPINVOKE.new_TrainingParameterScheduleDouble__SWIG_5(TrainingParameterScheduleDouble.getCPtr(arg0)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CNTKDictionary Serialize() {
    CNTKDictionary ret = new CNTKDictionary(CNTKLibPINVOKE.TrainingParameterScheduleDouble_Serialize(swigCPtr), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint CurrentVersion() {
    uint ret = CNTKLibPINVOKE.TrainingParameterScheduleDouble_CurrentVersion(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TrainingParameterScheduleDouble Deserialize(CNTKDictionary dictionary) {
    TrainingParameterScheduleDouble ret = new TrainingParameterScheduleDouble(CNTKLibPINVOKE.TrainingParameterScheduleDouble_Deserialize(CNTKDictionary.getCPtr(dictionary)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AreEqual(TrainingParameterScheduleDouble right) {
    bool ret = CNTKLibPINVOKE.TrainingParameterScheduleDouble_AreEqual(swigCPtr, TrainingParameterScheduleDouble.getCPtr(right));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetMinibatchSize() {
    uint ret = CNTKLibPINVOKE.TrainingParameterScheduleDouble_GetMinibatchSize(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMinibatchSize(uint minibatchSize) {
    CNTKLibPINVOKE.TrainingParameterScheduleDouble_SetMinibatchSize(swigCPtr, minibatchSize);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly uint FullDataSweep = CNTKLibPINVOKE.TrainingParameterScheduleDouble_FullDataSweep_get();
  public static readonly uint IgnoredMinibatchSize = CNTKLibPINVOKE.TrainingParameterScheduleDouble_IgnoredMinibatchSize_get();
}

}
