//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class UnorderedMapVariableVariable : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<Variable, Variable>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UnorderedMapVariableVariable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UnorderedMapVariableVariable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UnorderedMapVariableVariable() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_UnorderedMapVariableVariable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public Variable this[Variable key]
    {
        get 
        {
            return getitem(key);
        }

        set 
        {
            setitem(key, value);
        }
    }

    public bool TryGetValue(Variable key, out Variable value) 
    {
        if (this.ContainsKey(key)) 
        {
            value = this[key];
            return true;
        }
        value = default(Variable);
        return false;
    }

    public int Count 
    {
        get 
        {
            return (int)size();
        }
    }

    public bool IsReadOnly 
    {
        get 
        { 
            return false; 
        }
    }

    public global::System.Collections.Generic.ICollection<Variable> Keys 
    {
        get 
        {
            global::System.Collections.Generic.ICollection<Variable> keys = new global::System.Collections.Generic.List<Variable>();
            int size = this.Count;
            if (size > 0) 
            {
                global::System.IntPtr iter = create_iterator_begin();
                for (int i = 0; i < size; i++) 
                {
                    keys.Add(get_next_key(iter));
                }
                destroy_iterator(iter);
            }
            return keys;
        }
    }

    public global::System.Collections.Generic.ICollection<Variable> Values 
    {
        get 
        {
            global::System.Collections.Generic.ICollection<Variable> vals = new global::System.Collections.Generic.List<Variable>();
            foreach (global::System.Collections.Generic.KeyValuePair<Variable, Variable> pair in this) 
            {
                vals.Add(pair.Value);
            }
            return vals;
        }
    }
  
    public void Add(global::System.Collections.Generic.KeyValuePair<Variable, Variable> item) 
    {
        Add(item.Key, item.Value);
    }

    public bool Remove(global::System.Collections.Generic.KeyValuePair<Variable, Variable> item) 
    {
        if (Contains(item)) 
        {
            return Remove(item.Key);
        } 
        else 
        {
            return false;
        }
    }

    public bool Contains(global::System.Collections.Generic.KeyValuePair<Variable, Variable> item) 
    {
        if (this[item.Key] == item.Value) 
        {
            return true;
        } 
        else
        {
            return false;
        }
    }

    public void CopyTo(global::System.Collections.Generic.KeyValuePair<Variable, Variable>[] array) 
    {
        CopyTo(array, 0);
    }

    public void CopyTo(global::System.Collections.Generic.KeyValuePair<Variable, Variable>[] array, int arrayIndex) 
    {
        if (array == null)
        {
            throw new global::System.ArgumentNullException("array");
        }
    
        if (arrayIndex < 0)
        {
            throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
        }
        if (array.Rank > 1) 
        {
            throw new global::System.ArgumentException("Multi dimensional array.", "array");
        }
        if (arrayIndex+this.Count > array.Length)
        {
            throw new global::System.ArgumentException("Number of elements to copy is too large.");
        }

        global::System.Collections.Generic.IList<Variable> keyList = new global::System.Collections.Generic.List<Variable>(this.Keys);
        for (int i = 0; i < keyList.Count; i++)
        {
            Variable currentKey = keyList[i];
            array.SetValue(new global::System.Collections.Generic.KeyValuePair<Variable, Variable>(currentKey, this[currentKey]), arrayIndex+i);
        }
    }

    global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<Variable, Variable>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<Variable, Variable>>.GetEnumerator() 
    {
        return new UnorderedMapVariableVariableEnumerator(this);
    }

    global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() 
    {
        return new UnorderedMapVariableVariableEnumerator(this);
    }

    public UnorderedMapVariableVariableEnumerator GetEnumerator() 
    {
        return new UnorderedMapVariableVariableEnumerator(this);
    }

    // Type-safe enumerator
    /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
    /// whenever the collection is modified. This has been done for changes in the size of the
    /// collection but not when one of the elements of the collection is modified as it is a bit
    /// tricky to detect unmanaged code that modifies the collection under our feet.
    public sealed class UnorderedMapVariableVariableEnumerator : global::System.Collections.IEnumerator, 
        global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<Variable, Variable>>
    {
        private UnorderedMapVariableVariable collectionRef;
        private global::System.Collections.Generic.IList<Variable> keyCollection;
        private int currentIndex;
        private object currentObject;
        private int currentSize;

        public UnorderedMapVariableVariableEnumerator(UnorderedMapVariableVariable collection) 
        {
            collectionRef = collection;
            keyCollection = new global::System.Collections.Generic.List<Variable>(collection.Keys);
            currentIndex = -1;
            currentObject = null;
            currentSize = collectionRef.Count;
        }

        // Type-safe iterator Current
        public global::System.Collections.Generic.KeyValuePair<Variable, Variable> Current 
        {
            get 
            {
                if (currentIndex == -1)
                {
                    throw new global::System.InvalidOperationException("Enumeration not started.");
                }
                if (currentIndex > currentSize - 1)
                {
                    throw new global::System.InvalidOperationException("Enumeration finished.");
                }
                if (currentObject == null)
                {
                    throw new global::System.InvalidOperationException("Collection modified.");
                }
                return (global::System.Collections.Generic.KeyValuePair<Variable, Variable>)currentObject;
            }
        }

        // Type-unsafe IEnumerator.Current
        object global::System.Collections.IEnumerator.Current
        {
            get 
            {
                return Current;
            }
        }

        public bool MoveNext() 
        {
            int size = collectionRef.Count;
            bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
            if (moveOkay) 
            {
                currentIndex++;
                Variable currentKey = keyCollection[currentIndex];
                currentObject = new global::System.Collections.Generic.KeyValuePair<Variable, Variable>(currentKey, collectionRef[currentKey]);
            } 
            else 
            {
                currentObject = null;
            }
            return moveOkay;
        }

        public void Reset() 
        {
            currentIndex = -1;
            currentObject = null;
            if (collectionRef.Count != currentSize) 
            {
                throw new global::System.InvalidOperationException("Collection modified.");
            }
        }

        public void Dispose() 
        {
            currentIndex = -1;
            currentObject = null;
        }
    }
  

  public UnorderedMapVariableVariable() : this(CNTKLibPINVOKE.new_UnorderedMapVariableVariable__SWIG_0(), true) {
  }

  public UnorderedMapVariableVariable(UnorderedMapVariableVariable other) : this(CNTKLibPINVOKE.new_UnorderedMapVariableVariable__SWIG_1(UnorderedMapVariableVariable.getCPtr(other)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = CNTKLibPINVOKE.UnorderedMapVariableVariable_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = CNTKLibPINVOKE.UnorderedMapVariableVariable_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    CNTKLibPINVOKE.UnorderedMapVariableVariable_Clear(swigCPtr);
  }

  private Variable getitem(Variable key) {
    Variable ret = new Variable(CNTKLibPINVOKE.UnorderedMapVariableVariable_getitem(swigCPtr, Variable.getCPtr(key)), false);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(Variable key, Variable x) {
    CNTKLibPINVOKE.UnorderedMapVariableVariable_setitem(swigCPtr, Variable.getCPtr(key), Variable.getCPtr(x));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(Variable key) {
    bool ret = CNTKLibPINVOKE.UnorderedMapVariableVariable_ContainsKey(swigCPtr, Variable.getCPtr(key));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(Variable key, Variable val) {
    CNTKLibPINVOKE.UnorderedMapVariableVariable_Add(swigCPtr, Variable.getCPtr(key), Variable.getCPtr(val));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(Variable key) {
    bool ret = CNTKLibPINVOKE.UnorderedMapVariableVariable_Remove(swigCPtr, Variable.getCPtr(key));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = CNTKLibPINVOKE.UnorderedMapVariableVariable_create_iterator_begin(swigCPtr);
    return ret;
  }

  private Variable get_next_key(global::System.IntPtr swigiterator) {
    Variable ret = new Variable(CNTKLibPINVOKE.UnorderedMapVariableVariable_get_next_key(swigCPtr, swigiterator), false);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    CNTKLibPINVOKE.UnorderedMapVariableVariable_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
