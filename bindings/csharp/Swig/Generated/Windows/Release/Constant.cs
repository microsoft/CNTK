//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class Constant : Variable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Constant(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CNTKLibPINVOKE.Constant_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Constant obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Constant() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_Constant(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Constant(NDArrayView value, string name) : this(CNTKLibPINVOKE.new_Constant__SWIG_0(NDArrayView.getCPtr(value), name), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Constant(NDArrayView value) : this(CNTKLibPINVOKE.new_Constant__SWIG_1(NDArrayView.getCPtr(value)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Constant(NDShape shape, DataType dataType, double initValue, DeviceDescriptor device, string name) : this(CNTKLibPINVOKE.new_Constant__SWIG_5(NDShape.getCPtr(shape), (int)dataType, initValue, DeviceDescriptor.getCPtr(device), name), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Constant(NDShape shape, DataType dataType, double initValue, DeviceDescriptor device) : this(CNTKLibPINVOKE.new_Constant__SWIG_6(NDShape.getCPtr(shape), (int)dataType, initValue, DeviceDescriptor.getCPtr(device)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Constant(NDShape shape, DataType dataType, double initValue) : this(CNTKLibPINVOKE.new_Constant__SWIG_7(NDShape.getCPtr(shape), (int)dataType, initValue), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Constant CloneAs(DataType dataType) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant_CloneAs(swigCPtr, (int)dataType), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Constant Scalar(DataType dataType, double value, DeviceDescriptor device) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant_Scalar__SWIG_0((int)dataType, value, DeviceDescriptor.getCPtr(device)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Constant Scalar(DataType dataType, double value) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant_Scalar__SWIG_1((int)dataType, value), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Constant(Variable variable) : this(CNTKLibPINVOKE.new_Constant__SWIG_8(Variable.getCPtr(variable)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDArrayView Value() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Constant_Value(swigCPtr);
    NDArrayView ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDArrayView(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetValue(NDArrayView value) {
    CNTKLibPINVOKE.Constant_SetValue(swigCPtr, NDArrayView.getCPtr(value));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RecordValueUpdate() {
    CNTKLibPINVOKE.Constant_RecordValueUpdate(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private static Constant _ScalarFloat(float value, DeviceDescriptor device) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant__ScalarFloat__SWIG_0(value, DeviceDescriptor.getCPtr(device)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Constant _ScalarFloat(float value) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant__ScalarFloat__SWIG_1(value), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Constant _ScalarDouble(double value, DeviceDescriptor device) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant__ScalarDouble__SWIG_0(value, DeviceDescriptor.getCPtr(device)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Constant _ScalarDouble(double value) {
    Constant ret = new Constant(CNTKLibPINVOKE.Constant__ScalarDouble__SWIG_1(value), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
