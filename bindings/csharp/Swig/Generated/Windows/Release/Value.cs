//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public partial class Value : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Value(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Value() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          this.Erase();
          CNTKLibPINVOKE.delete_Value(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Value(NDArrayView data) : this(CNTKLibPINVOKE.new_Value__SWIG_0(NDArrayView.getCPtr(data)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(NDArrayView data, NDMask mask) : this(CNTKLibPINVOKE.new_Value__SWIG_1(NDArrayView.getCPtr(data), NDMask.getCPtr(mask)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private static Value _Create(NDShape sampleShape, NDArrayViewPtrVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly, bool createNewCopy) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Create__SWIG_4(NDShape.getCPtr(sampleShape), NDArrayViewPtrVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly, createNewCopy);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _Create(NDShape sampleShape, NDArrayViewPtrVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Create__SWIG_5(NDShape.getCPtr(sampleShape), NDArrayViewPtrVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _Create(NDShape sampleShape, NDArrayViewPtrVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Create__SWIG_6(NDShape.getCPtr(sampleShape), NDArrayViewPtrVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _Create(NDShape sampleShape, NDArrayViewPtrVector sequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Create__SWIG_7(NDShape.getCPtr(sampleShape), NDArrayViewPtrVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _Create(NDShape sampleShape, NDArrayViewPtrVector sequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Create__SWIG_8(NDShape.getCPtr(sampleShape), NDArrayViewPtrVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DeviceDescriptor _Device() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.Value__Device(swigCPtr), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DataType _GetDataType() {
    DataType ret = (DataType)CNTKLibPINVOKE.Value__GetDataType(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private StorageFormat _GetStorageFormat() {
    StorageFormat ret = (StorageFormat)CNTKLibPINVOKE.Value__GetStorageFormat(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private NDShape _Shape() {
    NDShape ret = new NDShape(CNTKLibPINVOKE.Value__Shape(swigCPtr), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _IsSparse() {
    bool ret = CNTKLibPINVOKE.Value__IsSparse(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _IsReadOnly() {
    bool ret = CNTKLibPINVOKE.Value__IsReadOnly(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private uint _MaskedCount() {
    uint ret = CNTKLibPINVOKE.Value__MaskedCount(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private NDArrayView _Data() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Data(swigCPtr);
    NDArrayView ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDArrayView(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private NDMask _Mask() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Mask(swigCPtr);
    NDMask ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDMask(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Value DeepClone(bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value_DeepClone__SWIG_0(swigCPtr, readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value DeepClone() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value_DeepClone__SWIG_1(swigCPtr);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private Value _Alias(bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Alias__SWIG_0(swigCPtr, readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private Value _Alias() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__Alias__SWIG_1(swigCPtr);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CopyFrom(Value source) {
    CNTKLibPINVOKE.Value_CopyFrom(swigCPtr, Value.getCPtr(source));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Erase() {
    CNTKLibPINVOKE.Value_Erase(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _CopyVariableValueTo(Variable outputVariable, SizeTVectorVector sequences) {
    CNTKLibPINVOKE.Value__CopyVariableValueTo(swigCPtr, Variable.getCPtr(outputVariable), SizeTVectorVector.getCPtr(sequences));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool _IsValid() {
    bool ret = CNTKLibPINVOKE.Value__IsValid(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string AsString() {
    string ret = CNTKLibPINVOKE.Value_AsString(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseFloat(NDShape sampleShape, FloatVectorVector sequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseFloat__SWIG_0(NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseFloat(NDShape sampleShape, FloatVectorVector sequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseFloat__SWIG_1(NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseDouble(NDShape sampleShape, DoubleVectorVector sequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseDouble__SWIG_0(NDShape.getCPtr(sampleShape), DoubleVectorVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseDouble(NDShape sampleShape, DoubleVectorVector sequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseDouble__SWIG_1(NDShape.getCPtr(sampleShape), DoubleVectorVector.getCPtr(sequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseFloat(NDShape sampleShape, FloatVectorVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseFloat__SWIG_2(NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseFloat(NDShape sampleShape, FloatVectorVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseFloat__SWIG_3(NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseDouble(NDShape sampleShape, DoubleVectorVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseDouble__SWIG_2(NDShape.getCPtr(sampleShape), DoubleVectorVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateDenseDouble(NDShape sampleShape, DoubleVectorVector sequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateDenseDouble__SWIG_3(NDShape.getCPtr(sampleShape), DoubleVectorVector.getCPtr(sequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchFloat(NDShape sampleShape, float[] dataBuffer, int dataStart, int dataSize, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchFloat__SWIG_0(NDShape.getCPtr(sampleShape), dataBuffer, dataStart, dataSize, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchFloat(NDShape sampleShape, float[] dataBuffer, int dataStart, int dataSize, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchFloat__SWIG_1(NDShape.getCPtr(sampleShape), dataBuffer, dataStart, dataSize, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchDouble(NDShape sampleShape, double[] dataBuffer, int dataStart, int dataSize, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchDouble__SWIG_0(NDShape.getCPtr(sampleShape), dataBuffer, dataStart, dataSize, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchDouble(NDShape sampleShape, double[] dataBuffer, int dataStart, int dataSize, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchDouble__SWIG_1(NDShape.getCPtr(sampleShape), dataBuffer, dataStart, dataSize, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(NDShape sampleShape, float[] dataBuffer, int dataSize, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_0(NDShape.getCPtr(sampleShape), dataBuffer, dataSize, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(NDShape sampleShape, float[] dataBuffer, int dataSize, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_1(NDShape.getCPtr(sampleShape), dataBuffer, dataSize, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(NDShape sampleShape, double[] dataBuffer, int dataSize, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_0(NDShape.getCPtr(sampleShape), dataBuffer, dataSize, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(NDShape sampleShape, double[] dataBuffer, int dataSize, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_1(NDShape.getCPtr(sampleShape), dataBuffer, dataSize, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(NDShape sampleShape, SizeTVectorVector oneHotSequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_0(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(NDShape sampleShape, SizeTVectorVector oneHotSequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_1(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(NDShape sampleShape, SizeTVectorVector oneHotSequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_0(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(NDShape sampleShape, SizeTVectorVector oneHotSequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_1(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(NDShape sampleShape, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_2(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(NDShape sampleShape, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_3(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(NDShape sampleShape, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_2(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(NDShape sampleShape, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_3(NDShape.getCPtr(sampleShape), SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(uint dimension, SizeTVectorVector oneHotSequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_4(dimension, SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(uint dimension, SizeTVectorVector oneHotSequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_5(dimension, SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(uint dimension, SizeTVectorVector oneHotSequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_4(dimension, SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(uint dimension, SizeTVectorVector oneHotSequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_5(dimension, SizeTVectorVector.getCPtr(oneHotSequences), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(uint dimension, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_6(dimension, SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotFloat(uint dimension, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotFloat__SWIG_7(dimension, SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(uint dimension, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_6(dimension, SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateOneHotDouble(uint dimension, SizeTVectorVector oneHotSequences, BoolVector sequenceStartFlags, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateOneHotDouble__SWIG_7(dimension, SizeTVectorVector.getCPtr(oneHotSequences), BoolVector.getCPtr(sequenceStartFlags), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchFloat(uint dimension, SizeTVector batchData, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchFloat__SWIG_2(dimension, SizeTVector.getCPtr(batchData), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchFloat(uint dimension, SizeTVector batchData, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchFloat__SWIG_3(dimension, SizeTVector.getCPtr(batchData), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchDouble(uint dimension, SizeTVector batchData, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchDouble__SWIG_2(dimension, SizeTVector.getCPtr(batchData), DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateBatchDouble(uint dimension, SizeTVector batchData, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateBatchDouble__SWIG_3(dimension, SizeTVector.getCPtr(batchData), DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(uint dimension, SizeTVector sequenceData, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_2(dimension, SizeTVector.getCPtr(sequenceData), sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(uint dimension, SizeTVector sequenceData, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_3(dimension, SizeTVector.getCPtr(sequenceData), sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(uint dimension, SizeTVector sequenceData, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_2(dimension, SizeTVector.getCPtr(sequenceData), sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(uint dimension, SizeTVector sequenceData, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_3(dimension, SizeTVector.getCPtr(sequenceData), sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(NDShape sampleShape, uint sequenceLength, int[] colStarts, int[] rowIndices, float[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_4(NDShape.getCPtr(sampleShape), sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(NDShape sampleShape, uint sequenceLength, int[] colStarts, int[] rowIndices, float[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_5(NDShape.getCPtr(sampleShape), sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(NDShape sampleShape, uint sequenceLength, int[] colStarts, int[] rowIndices, double[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_4(NDShape.getCPtr(sampleShape), sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(NDShape sampleShape, uint sequenceLength, int[] colStarts, int[] rowIndices, double[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_5(NDShape.getCPtr(sampleShape), sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(uint dimension, uint sequenceLength, int[] colStarts, int[] rowIndices, float[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_6(dimension, sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceFloat(uint dimension, uint sequenceLength, int[] colStarts, int[] rowIndices, float[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceFloat__SWIG_7(dimension, sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(uint dimension, uint sequenceLength, int[] colStarts, int[] rowIndices, double[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_6(dimension, sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device), readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Value _CreateSequenceDouble(uint dimension, uint sequenceLength, int[] colStarts, int[] rowIndices, double[] nonZeroValues, uint numNonZeroValues, bool sequenceStartFlag, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Value__CreateSequenceDouble__SWIG_7(dimension, sequenceLength, colStarts, rowIndices, nonZeroValues, numNonZeroValues, sequenceStartFlag, DeviceDescriptor.getCPtr(device));
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void _CopyVariableValueToFloat(Variable outputVariable, FloatVectorVector sequences) {
    CNTKLibPINVOKE.Value__CopyVariableValueToFloat__SWIG_0(swigCPtr, Variable.getCPtr(outputVariable), FloatVectorVector.getCPtr(sequences));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _CopyVariableValueToDouble(Variable outputVariable, DoubleVectorVector sequences) {
    CNTKLibPINVOKE.Value__CopyVariableValueToDouble__SWIG_0(swigCPtr, Variable.getCPtr(outputVariable), DoubleVectorVector.getCPtr(sequences));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _CopyVariableValueToFloat(Variable outputVariable, int[] sequenceLength, IntVector colStarts, IntVector rowIndices, FloatVector nonZeroValues, int[] numNonZeroValues) {
    CNTKLibPINVOKE.Value__CopyVariableValueToFloat__SWIG_1(swigCPtr, Variable.getCPtr(outputVariable), sequenceLength, IntVector.getCPtr(colStarts), IntVector.getCPtr(rowIndices), FloatVector.getCPtr(nonZeroValues), numNonZeroValues);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  private void _CopyVariableValueToDouble(Variable outputVariable, int[] sequenceLength, IntVector colStarts, IntVector rowIndices, DoubleVector nonZeroValues, int[] numNonZeroValues) {
    CNTKLibPINVOKE.Value__CopyVariableValueToDouble__SWIG_1(swigCPtr, Variable.getCPtr(outputVariable), sequenceLength, IntVector.getCPtr(colStarts), IntVector.getCPtr(rowIndices), DoubleVector.getCPtr(nonZeroValues), numNonZeroValues);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly uint OneHotSkip = CNTKLibPINVOKE.Value_OneHotSkip_get();
}

}
