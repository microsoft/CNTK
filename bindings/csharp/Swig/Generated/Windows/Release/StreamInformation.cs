//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class StreamInformation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StreamInformation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StreamInformation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StreamInformation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_StreamInformation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StreamInformation() : this(CNTKLibPINVOKE.new_StreamInformation(), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public string m_name {
    set {
      CNTKLibPINVOKE.StreamInformation_m_name_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CNTKLibPINVOKE.StreamInformation_m_name_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint m_id {
    set {
      CNTKLibPINVOKE.StreamInformation_m_id_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = CNTKLibPINVOKE.StreamInformation_m_id_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public StorageFormat m_storageFormat {
    set {
      CNTKLibPINVOKE.StreamInformation_m_storageFormat_set(swigCPtr, (int)value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      StorageFormat ret = (StorageFormat)CNTKLibPINVOKE.StreamInformation_m_storageFormat_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DataType m_elementType {
    set {
      CNTKLibPINVOKE.StreamInformation_m_elementType_set(swigCPtr, (int)value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DataType ret = (DataType)CNTKLibPINVOKE.StreamInformation_m_elementType_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NDShape m_sampleLayout {
    set {
      CNTKLibPINVOKE.StreamInformation_m_sampleLayout_set(swigCPtr, NDShape.getCPtr(value));
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      NDShape ret = new NDShape(CNTKLibPINVOKE.StreamInformation_m_sampleLayout_get(swigCPtr), true);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_definesMbSize {
    set {
      CNTKLibPINVOKE.StreamInformation_m_definesMbSize_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = CNTKLibPINVOKE.StreamInformation_m_definesMbSize_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_isBinary {
    set {
      CNTKLibPINVOKE.StreamInformation_m_isBinary_set(swigCPtr, value);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = CNTKLibPINVOKE.StreamInformation_m_isBinary_get(swigCPtr);
      if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string AsString() {
    string ret = CNTKLibPINVOKE.StreamInformation_AsString(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
