//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class Evaluator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Evaluator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Evaluator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Evaluator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CNTKLibPINVOKE.delete_Evaluator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments, DeviceDescriptor computeDevice, bool distributed) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_0(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), DeviceDescriptor.getCPtr(computeDevice), distributed);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments, DeviceDescriptor computeDevice) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_1(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_2(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments, DeviceDescriptor computeDevice, bool distributed) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_3(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), DeviceDescriptor.getCPtr(computeDevice), distributed);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments, DeviceDescriptor computeDevice) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_4(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_5(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice, bool distributed) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_6(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice), distributed);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_7(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableMinibatchData arguments, UnorderedMapVariableValuePtr outputsToFetch) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_8(swigCPtr, UnorderedMapVariableMinibatchData.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice, bool distributed) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_9(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice), distributed);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments, UnorderedMapVariableValuePtr outputsToFetch, DeviceDescriptor computeDevice) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_10(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch), DeviceDescriptor.getCPtr(computeDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TestMinibatch(UnorderedMapVariableValuePtr arguments, UnorderedMapVariableValuePtr outputsToFetch) {
    double ret = CNTKLibPINVOKE.Evaluator_TestMinibatch__SWIG_11(swigCPtr, UnorderedMapVariableValuePtr.getCPtr(arguments), UnorderedMapVariableValuePtr.getCPtr(outputsToFetch));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Function EvaluationFunction() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Evaluator_EvaluationFunction(swigCPtr);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SummarizeTestProgress() {
    CNTKLibPINVOKE.Evaluator_SummarizeTestProgress(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void PrintNodeTiming() {
    CNTKLibPINVOKE.Evaluator_PrintNodeTiming(swigCPtr);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
