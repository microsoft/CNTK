syntax = "proto2";

package ONNXIR;

// Note [Protobuf compatibility]
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Based on experience working with downstream vendors, we generally can't
// assume recent versions of protobufs. This means that we do not use any
// protobuf features that are only available in proto3.
//
// Here are the most notable contortions we have to carry out to work around
// these limitations:
//
//   - No 'map' (added protobuf 3.0). We instead represent mappings as lists
//     of key-value pairs, where order does not matter and duplicates
//     are not allowed.

// Note [Namespaces]
// ~~~~~~~~~~~~~~~~~
// LotusIR gives explicit names to graphs, intermediate values and
// serialized tensors.  To make it easier to generate names, we organize
// these into separate namespaces (so, e.g., a graph can have the same
// name as a serialized tensor.)  The namespaces are as follows:
//
// - Node: These names identify specific nodes in the graph (but not, necessarily
//   any particular input or output of the node.
// - Graph: These names identify graphs in the protobuf.
// - Attribute: These names identify attribute names for extra attributes that
//   are passed to operators.
// - OperatorOrFunction: These names identify particular operators and
//   functions.
// - Value: These names identify intermediate values (typically tensors) flowing through
//   the computation of a graph.
// - Shape: These names represent parameters for unknown shape dimensions.
//
// We specify the namespace of a name in LotusIR as comments in the form
// of "namespace {Node,Graph,OperatorOrFunction,Attribute,Value,Shape}". Framework is
// responsible for supporting the namespaces.

// To be compatible with both proto2 and proto3, we will use a version number
// that is not defined by the default value but an explicit enum number.
enum Version {
  // The version field is always serialized and we will use it to store the
  // version that the  graph is generated from. This helps us set up version
  // control. We should use version as
  //     xx(major) - xx(minor) - xxxx(bugfix)
  // and we are starting with 00000001.
  IR_VERSION = 00000001;
}

// A named attribute containing either singular float, integer, string
// and tensor values, or repeated float, integer, string and tensor values.
// An AttributeProto MUST contain the name field, and *only one* of the
// following content fields, effectively enforcing a C/C++ union equivalent.
message AttributeProto {
  // The name field MUST be present for this version of the IR.
  optional string name = 1;           // namespace Attribute
  optional float f = 2;               // float
  optional int64 i = 3;               // int
  optional bytes s = 4;               // UTF-8 string
  optional TensorProto t = 5;         // tensor value
  optional GraphProto g = 6;          // graph

  repeated float floats = 7;          // list of floats
  repeated int64 ints = 8;            // list of ints
  repeated bytes strings = 9;         // list of UTF-8 strings
  repeated TensorProto tensors = 10;  // list of tensors
  repeated GraphProto graphs = 11;    // list of graph

  optional TypeProto type = 51;
  repeated TypeProto types = 52;
  //ISSUE:13807134,dbox: Do we ever see shape showing up as an attribute value?
  //            If so, won't it always be accompanied by a TypeProto?
  optional TypeProto.TensorShapeProto shape = 53;
  repeated TypeProto.TensorShapeProto shapes = 54;
}

// Defines information on value, including the name, the type, and
// the shape of the value.
message ValueInfoProto {
  // This field MUST be present in this version of the IR.
  optional string name = 1;     // namespace Value
  // This field MUST be present in this version of the IR.
  optional TypeProto type = 2;
}

// Defines a node in a computation graph. Each graph node is either an
// operator or a function call. A node that is similar to the notion of "layer"
// or "operator" in many deep learning frameworks. For example, it can be a
// node of type "Conv" that takes in an image, a filter tensor and a bias
// tensor, and produces the convolved output.
//
// NOTE: Control flow is defined by two built-in operators:
//
// Cond(p, true_input, false_input) takes three inputs, where p is a
// boolean scalar tensor, true_input is the list of inputs to the true
// branch of cond, and false_input is the list of inputs to the false
// branch of cond. The true and false branches are defined as 
// functions that takes true_input and false_input as inputs respectively.
// The two functions must have the same number of outputs, and each
// corresponding output must have the same types, and have compatible
// shapes.
//
// While(vars, consts) takes two inputs, where vars are the initial
// values of the loop variables and consts are the values of constants
// used inside the loop. The loop condition and loop body are defined
// as functions. The functions take both vars and consts as inputs.
// The loop condition function returns a boolean scalar tensor. The
// loop body function has the form: body(vars, consts) = new_vars,
// where new_vars are the new values of the loop variables after one
// iteration so must match vars in terms of types and shapes.
message NodeProto {
  // The named inputs of the node.
  repeated string input = 1;   // namespace Value

  // The named outputs of the node.
  repeated string output = 2;  // namespace Value

  // The name of this node.
  // This field is optional and used to uniquely identify nodes in the graph.
  optional string name = 3;    // namespace Node

  // The name of the operator/function called by the node.
  // This field MUST be present for this version of the IR.
  optional string op_type = 4; // namespace OperatorOrFunction

  // Additional named attributes.
  repeated AttributeProto attribute = 5;

  // An optional human-readable documentation for this node in the graph.
  // This text MAY contain Markdown markup that conforms to http://commonmark.org/. 
  optional string doc_string = 6;

  // The number of inputs for each argument of the operator/function.
  // A formal parameter of the op may take a variable number of inputs
  // that is only known when this node is constructed.
  //BUG:13806939,dbox: I'm assuming that this field is like input_arg_info in that
  //          a zero element/missing array implies that one needs to crawl
  //          the graph to figure out the input counts, yes? Confirm and I'll
  //          make clear.  Otherwise, we need to require it to be present
  //          and accurate.
  repeated int32 input_arg_count = 50;

  // Specify a list of named nodes that must be executed before this node.
  // Framework may use this to give users the ability to impose additional
  // execution orders for the operations.
  repeated string control_input = 51;
}

// ModelProto is a top-level file/container format for bundling a ML model.
// The semantics of the model are described by the GraphProto that represents
// a parameterized computation graph against a set of named operators that are
// defined independently from the graph.
message ModelProto {
  // The version of the IR this model targets. See Version enum above.
  // This field MUST be present.
  optional int64 ir_version = 1;

  // The name of the framework or tool used to generate this model.
  // This field SHOULD be present to indicate which implementation/tool/framework
  // emitted the model.
  optional string producer_name = 2;

  // The version of the framework or tool used to generate this model.
  // This field SHOULD be present to indicate which implementation/tool/framework
  // emitted the model.
  optional string producer_version = 3;

  // Domain name of the model.
  // We use reverse domain names as name space indicators. For example:
  // `com.facebook.fair` or `com.microsoft.cognitiveservices`
  //
  // Together with `model_version` and GraphProto.name, this forms the unique identity of
  // the graph.
  optional string domain = 4;

  // The version of the graph encoded. See Version enum below.
  optional int64 model_version = 5;

  // A human-readable documentation for this model. Markdown is allowed.
  optional string doc_string = 6;

  // The parameterized graph that is evaluated to execute the model.
  optional GraphProto graph = 7;

  // NOTE: ids between 8 and 49 are reserved for more ONNX fields.
  
  // The optional name of the author who created the graph.
  optional string model_author = 50;

  // Optional licensing information concerning use or origination of the graph.
  // This text MAY contain Markdown markup that conforms to http://commonmark.org/. 
  optional string model_license = 51;
};

// GraphProto defines a parameterized series of nodes to form a directed acyclic graph.
// This is the equivalent of the "network" and "graph" in many deep learning
// frameworks.
// All the input/output tensors are explicitly named so a framework can
// run any subgraph of the graph by feeding and fetching the named tensors.
message GraphProto {
  // The nodes in the graph.
  repeated NodeProto node = 1;

  // The name of the graph.
  optional string name = 2;   // namespace Graph

  // A list of named tensor values (constants), used to specify default
  // values for some of the inputs of the graph.
  // Each TensorProto entry must have a distinct name (within the list) that
  // also appears in the input list.
  // In an evaluation, the default value specified here is used if and only if
  // user specifies no value for the corresponding input parameter.
  // May be used to pass serialized parameters for networks.
  repeated TensorProto initializer = 5;

  // A human-readable documentation for this graph. Markdown is allowed.
  optional string doc_string = 10;

  // The inputs and outputs of the graph.
  repeated ValueInfoProto input = 11;
  repeated ValueInfoProto output = 12;

  // Information for the values in the graph. The ValueInfoProto.name's
  // must be distinct. It is optional for a value to appear in value_info list.
  repeated ValueInfoProto value_info = 13;

  // DO NOT USE the following fields which were deprecated.
  // repeated string input = 3;
  // repeated string output = 4;
  // optional int64 ir_version = 6;
  // optional int64 producer_version = 7;
  // optional string producer_tag = 8;
  // optional string domain = 9;

  // The function definitions of the graph. They can only only be used
  // (i.e., called) in this graph.
  // Each FunctionDefProto in function MUST have a unique name. 
  repeated FunctionDefProto function = 50;

  // The externally defined operators declared by this graph. 
  repeated OperatorDeclProto operator = 51;

  // TODO: When the map type is added, provide for the "model_information"
  // field which holds name/value pairs of strings with additional devops
  // metadata, such as an identifier for which training set this instance
  // of a graph was trained with.

  // Imported libraries are referenced as a collection of strings in the form of absolute
  // URIs or relative paths. Where such relative paths are rooted is defined by tools and
  // runtime implementations.
  repeated string imported_libraries = 52;  
  
  reserved 100 to 200; // for future extensions.
}

// A message defined to store a tensor in its serialized format.
message TensorProto {
  enum DataType {
    UNDEFINED = 0;
    // Basic types.
    FLOAT = 1;   // float
    UINT8 = 2;   // uint8_t
    INT8 = 3;    // int8_t
    UINT16 = 4;  // uint16_t
    INT16 = 5;   // int16_t
    INT32 = 6;   // int32_t
    INT64 = 7;   // int64_t
    STRING = 8;  // string
    BOOL = 9;    // bool

    // Advanced types
    FLOAT16 = 10;
    DOUBLE = 11;
    UINT32 = 12;
    UINT64 = 13;
    COMPLEX64 = 14;     // complex with float32 real and imaginary components
    COMPLEX128 = 15;    // complex with float64 real and imaginary components
    // Future extensions go here.
  }

  // The shape of the tensor.
  repeated int64 dims = 1;

  // The data type of the tensor.
  optional DataType data_type = 2;

  // For very large tensors, we may want to store them in chunks, in which
  // case the following fields will specify the segment that is stored in
  // the current TensorProto.
  message Segment {
    optional int64 begin = 1;
    optional int64 end = 2;
  }
  optional Segment segment = 3;

  // Tensor content must be in the row major order.
  //
  // Depending on the data_type field, exactly one of the fields below with
  // name ending in _data is used to store the elements of the tensor.

  // For float and complex64 values
  // Complex64 tensors are encoded as a single array of floats,
  // with the real components appearing in odd numbered positions,
  // and the corresponding imaginary component apparing in the
  // subsequent even numbered position. (e.g., [1.0 + 2.0i, 3.0 + 4.0i]
  // is encoded as [1.0, 2.0 ,3.0 ,4.0]
  // When this field is present, the data_type field MUST be FLOAT or COMPLEX64.
  repeated float float_data = 4 [packed = true];

  // For int32, uint8, int8, uint16, int16, bool, and float16 values
  // float16 values must be bit-wise converted to an uint16_t prior
  // to writing to the buffer.
  // When this field is present, the data_type field MUST be
  // INT32, INT16, INT8, UINT16, INT8, BOOL, or FLOAT32
  repeated int32 int32_data = 5 [packed = true];

  // For strings.
  // Each element of string_data is a UTF-8 encoded Unicode
  // string. No trailing null, no leading BOM. The protobuf "string"
  // scalar type is not used to match ML community conventions.
  // When this field is present, the data_type field MUST be STRING
  repeated bytes string_data = 6;

  // For int64.
  // When this field is present, the data_type field MUST be INT64
  repeated int64 int64_data = 7 [packed = true];

  // Optionally, a name for the tensor.
  optional string name = 8; // namespace Value

  // Serializations can either use one of the fields above, or use this
  // raw bytes field. The only exception is the string case, where one is
  // required to store the content in the repeated bytes string_data field.
  //
  // When this raw_data field is used to store tensor value, elements MUST
  // be stored in as fixed-width, little-endian order.
  // Floating-point data types MUST be stored in IEEE 754 format.
  // Complex64 elements must be written as two consecutive FLOAT values, real component first.
  // Complex128 elements must be written as two consecutive DOUBLE values, real component first.
  // Boolean type MUST be written one byte per tensor element (00000001 for true, 00000000 for false).
  //
  // Note: the advantage of specific field rather than the raw_data field is
  // that in some cases (e.g. int data), protobuf does a better packing via
  // variable length storage, and may lead to smaller binary footprint.
  // When this field is present, the data_type field MUST NOT be STRING or UNDEFINED
  optional bytes raw_data = 9;

  // For double
  // Complex64 tensors are encoded as a single array of doubles,
  // with the real components appearing in odd numbered positions,
  // and the corresponding imaginary component apparing in the
  // subsequent even numbered position. (e.g., [1.0 + 2.0i, 3.0 + 4.0i]
  // is encoded as [1.0, 2.0 ,3.0 ,4.0]
  // When this field is present, the data_type field MUST be DOUBLE or COMPLEX128
  repeated double double_data = 10 [packed = true];

  // For uint64 and uint32 values
  // When this field is present, the data_type field MUST be
  // UINT32 or UINT64
  repeated uint64 uint64_data = 11 [packed = true];
}

// A sparse tensor must be stored as three dense tensors:
//  1. dims: The shape of the original dense tensor.
//  2. indices: A 2-D tensor specifying the indices of the nonzero elements.
//  3. values: A 1-D tensor containing the values of the nonzero elements.
message SparseTensorProto {
  // The dimensions in the tensor.
  repeated int64 dims = 1;
  // This field MUST be present this version of the IR.
  optional TensorProto indices = 2;
  // This field MUST be present this version of the IR.
  optional TensorProto values = 3;
}

// Define the types.
message TypeProto {
  // Defines a tensor shape. A dimension can be either an integer value
  // or a symbolic variable. A symbolic variable represents an unknown
  // dimension.
  message TensorShapeProto {
    message Dimension {
      oneof value {
        int64 dim_value = 1;
        string dim_param = 2;   // namespace Shape
      }
    }
    repeated Dimension dim = 1;
  }

  message TensorTypeProto {
    // This field MUST NOT have the value of UNDEFINED
    // This field MUST be present for this version of the IR.
    optional TensorProto.DataType elem_type = 1;
    optional TensorShapeProto shape = 2;
  }

  message SparseTensorTypeProto {
    // This field MUST NOT have the value of UNDEFINED
    // This field MUST be present for this version of the IR.
    optional TensorProto.DataType elem_type = 1;
    optional TensorShapeProto shape = 2;
  }

  message HandleTypeProto {
  }

  message TupleTypeProto {
    repeated TypeProto elem_type = 1;
  }

  message SeqTypeProto {
    // This field MUST be present for this version of the IR.
    optional TypeProto elem_type = 1;
  }

  message MapTypeProto {
    // This field MUST be present for this version of the IR.
    // This field MUST refer to an integral type ([U]INT{8|16|32|64}) or STRING
    optional TensorProto.DataType key_type = 1;
    // This field MUST be present for this version of the IR.
    // This field MUST NOT refer to UNDEFINED
    optional TensorProto.DataType value_type = 2;
  }
      
  oneof value {
    // The type of a tensor.
    TensorTypeProto tensor_type = 1;

    // The type of a sparse tensor.
    SparseTensorTypeProto sparse_tensor_type = 2;

    // The type of an opaque handle. A handle is used to represent a
    // reference to a resource managed by the framework runtime.
    HandleTypeProto handle_type = 3;

    // The type of a tuple.
    TupleTypeProto tuple_type = 4;

    // The type of a sequence.
    SeqTypeProto seq_type = 5;

    // The type of a map.
    MapTypeProto map_type = 6;
  }
}

message ValueProto {
  // Defines a handle in its serialized format.
  message HandleProto {
    // This field MUST be present this version of the IR.  
    optional int64 uid = 1;

    // More information to be added. We need to specify the device
    // that the resource managed by the handle is on.
  }

  // Defines a tuple in its serialized format.
  message TupleProto {
    repeated ValueProto elems = 1;
  }

  // Defines a sequence in its serialized format.
  message SequenceProto {
    repeated ValueProto elems = 1;
  }

  // Defines a map in its serialized format.
  // Maps are serialized as two single-dimensional tensors 
  // for storage efficiency. The dimensions of each tensor MUST be identical
  // and the key at position N corresponds to the value at position N.
  // Keys SHOULD be unique. When a given key appears multiple times,
  // the value that corresponds last occurance of the key is the value.
  // This is consistent with protobuf3 encoding rules for map.
  message MapProto {
    // This field MUST be present for this version of the IR.
    // The data type of the tensor MUST refer to an integral type ([U]INT{8|16|32|64}) or STRING
    optional TensorProto keys = 1;

    // This field MUST be present for this version of the IR.
    optional TensorProto values = 2;
  }

  oneof value {
    // A dense tensor.
    TensorProto dense_tensor = 1;

    // A sparse tensor.
    SparseTensorProto sparse_tensor = 2;  

    // A handle.
    HandleProto handle = 3;

    // A tuple.
    TupleProto tuple = 4;

    // A sequence.
    SequenceProto seq = 5;

    // A map.
    MapProto map = 6;
  }
}

message ParameterDeclProto {
  optional string name = 1;
  optional TypeProto type = 2;
  // An optional human-readable documentation for this parameter.
  optional string doc_string = 3;
}

// Defines a function.
message FunctionDefProto {
  // The name of the function.
  // This field MUST be present for this version of the IR.
  optional string name = 1;

  // The input parameters of the function.
  repeated ParameterDeclProto input_params = 2;

  // The output parameters of the function.
  repeated ParameterDeclProto output_params = 3;

  // The body of the function.
  repeated NodeProto node = 4;

  // The named attributes of the function.
  repeated AttributeProto attr = 5;
}

message SignatureDeclProto {
  // The formal input parameters to the operation or function 
  repeated ParameterDeclProto input_params = 1;
  // The formal output parameters to the operation or function 
  repeated ParameterDeclProto output_params = 2;
  // The declaration of expected attributes to the operation or function 
  repeated ParameterDeclProto input_attributes = 3; 
  // An optional human-readable documentation for this signature.
  optional string doc_string = 4;
}

message OperatorDeclProto {
  // This field MUST be present for this version of the IR.
  optional string name = 1;

  // This field MUST contain at least one SignatureDeclProto.
  // This field MAY contain multiple SignatureDeclProtos, one 
  // per type signature supported by this operator.
  repeated SignatureDeclProto signature = 2;

  // An optional human-readable documentation for this operator.
  optional string doc_string = 3;
}

// A library is a top-level format that contains the declaration
// of operators and the definition of functions. 
message LibraryProto {
  // The version of the IR this graph targets. See Version enum below.
  // This field MUST be present this version of the IR.  
  optional int64 ir_version = 1;

  // The optional version of the framework runtime that generates this graph.
  // This producer_version has the same format as ir_version. 
  optional int64 producer_version = 2;

  // The optional name of the framework used to generate this graph in the form
  // "framework_name[-tag]". Tag is optional and provides additional
  // information such as `alpha` or `beta` or `rc3`.
  optional string producer_tag = 3;

  // An optional version identifier used to track evolution of this library.
  // This model_version has the same format as ir_version. 
  optional int64 model_version = 4;

  // The optional name of the author who created the library.
  optional string model_author = 5;

  // Optional licensing information concerning use or origination of the library.
  optional string model_license = 6;

  // The name of the library.
  optional string name = 7;   // namespace Library

  // Domain of the graph.
  // We use reverse domain names as name space indicators. For example:
  // `com.facebook.fair` or `com.microsoft.cognitiveservices`
  //
  // Together with `name` and `model_version`, this forms the unique identity of
  // the library.
  optional string domain = 8;

  // An optional human-readable documentation for this graph.
  optional string doc_string = 9;

  // The operators declared by this library. 
  repeated OperatorDeclProto operator = 10;

  // The function definitions of the library. 
  repeated FunctionDefProto function = 11;

  // A given name may appear at most once in either operator or function (but not both).
  // When refering to an operator or function from outside of this library, the op_type
  // field must equal:
  //      LibraryProto.domain + "." + LibraryProto.name + "." OperatorDeclProto.name  
  // or
  //      LibraryProto.domain + "." + LibraryProto.name + "." FunctionDefProto.name  

  // Imported libraries are referenced as a collection of strings in the form of absolute
  // URIs or relative paths. Where such relative paths are rooted is defined by tools and
  // runtime implementations.
  repeated string imported_libraries = 12;  
}