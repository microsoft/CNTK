=== Running mpiexec -n 3 /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank0
Redirecting stderr to file /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank1
Redirecting stderr to file /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank2
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Jan  6 2016 19:01:02
MPI Rank 0: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 0: 		Build type: debug
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2016/01/06 23:26:48
MPI Rank 0: command line: 
MPI Rank 0: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=-1
MPI Rank 0: configparameters: cntk.config:numCPUThreads=2
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=double
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 2 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using CPU.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0: #PLUS#
MPI Rank 0: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: #NLop5#
MPI Rank 0: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: #PLUSBP#
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 1.2313s; SamplesPerSecond = 519.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 0.7968s; SamplesPerSecond = 803.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.9684s; SamplesPerSecond = 660.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 0.9333s; SamplesPerSecond = 685.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 1.0671s; SamplesPerSecond = 599.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 1.1067s; SamplesPerSecond = 578.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 1.1035s; SamplesPerSecond = 580.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 1.0778s; SamplesPerSecond = 593.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 1.0580s; SamplesPerSecond = 604.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.8092s; SamplesPerSecond = 791.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.8000s; SamplesPerSecond = 800.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.9890s; SamplesPerSecond = 647.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 1.0585s; SamplesPerSecond = 604.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 1.0774s; SamplesPerSecond = 594.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 1.1220s; SamplesPerSecond = 570.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 1.0985s; SamplesPerSecond = 582.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 1.0918s; SamplesPerSecond = 586.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 1.0858s; SamplesPerSecond = 589.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 1.0809s; SamplesPerSecond = 592.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 1.1356s; SamplesPerSecond = 563.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.9394s; SamplesPerSecond = 681.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.8181s; SamplesPerSecond = 782.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 0.8172s; SamplesPerSecond = 783.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 1.0088s; SamplesPerSecond = 634.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 1.0543s; SamplesPerSecond = 607.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 1.0675s; SamplesPerSecond = 599.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 1.1324s; SamplesPerSecond = 565.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 1.1390s; SamplesPerSecond = 561.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 1.1258s; SamplesPerSecond = 568.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 1.1357s; SamplesPerSecond = 563.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 1.1347s; SamplesPerSecond = 564.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 1.1246s; SamplesPerSecond = 569.1
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=33.1964
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.017002
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.005501
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.09514596; EvalErr[0]PerSample = 0.55989583; TotalTime = 1.3414s; SamplesPerSecond = 1717.6
MPI Rank 0: Async gradient aggregation wait time: 1.3e-05
MPI Rank 0: Actual gradient aggregation time: 0.006026
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.005781
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14762552; EvalErr[0]PerSample = 0.58242187; TotalTime = 1.3654s; SamplesPerSecond = 1874.9
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.006045
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.006305
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19977785; EvalErr[0]PerSample = 0.58867187; TotalTime = 1.3787s; SamplesPerSecond = 1856.8
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.005319
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.005503
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13471172; EvalErr[0]PerSample = 0.59023437; TotalTime = 1.3831s; SamplesPerSecond = 1851.0
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.005297
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.005518
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.07369296; EvalErr[0]PerSample = 0.57382813; TotalTime = 1.3683s; SamplesPerSecond = 1871.0
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.005775
MPI Rank 0: Async gradient aggregation wait time: 1.3e-05
MPI Rank 0: Actual gradient aggregation time: 0.006074
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14944464; EvalErr[0]PerSample = 0.57578125; TotalTime = 1.3681s; SamplesPerSecond = 1871.3
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.00529
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.006175
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09921664; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3474s; SamplesPerSecond = 1899.9
MPI Rank 0: Async gradient aggregation wait time: 1.3e-05
MPI Rank 0: Actual gradient aggregation time: 0.005733
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.006003
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.04462189; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3342s; SamplesPerSecond = 1918.8
MPI Rank 0: Async gradient aggregation wait time: 1.3e-05
MPI Rank 0: Actual gradient aggregation time: 0.006173
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1163671; EvalErrPerSample = 0.575; AvgLearningRatePerSample = 0.001953125; EpochTime=10.9568
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.005437
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.005918
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.00619565; EvalErr[0]PerSample = 0.55088976; TotalTime = 3.3670s; SamplesPerSecond = 2737.1
MPI Rank 0: Async gradient aggregation wait time: 1.4e-05
MPI Rank 0: Actual gradient aggregation time: 0.006134
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.005916
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.93824509; EvalErr[0]PerSample = 0.53398437; TotalTime = 3.3488s; SamplesPerSecond = 3057.8
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.9709628; EvalErrPerSample = 0.54194336; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.80837
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.022555
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.040141
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.91072859; EvalErr[0]PerSample = 0.52365451; TotalTime = 3.3219s; SamplesPerSecond = 2774.3
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.143767
MPI Rank 0: Async gradient aggregation wait time: 1.5e-05
MPI Rank 0: Actual gradient aggregation time: 0.26264
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.89799241; EvalErr[0]PerSample = 0.52294922; TotalTime = 3.2030s; SamplesPerSecond = 3197.0
MPI Rank 0: Async gradient aggregation wait time: 0.006704
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9047436; EvalErrPerSample = 0.52290039; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.84798
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Jan  6 2016 19:01:02
MPI Rank 1: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 1: 		Build type: debug
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2016/01/06 23:26:48
MPI Rank 1: command line: 
MPI Rank 1: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=-1
MPI Rank 1: configparameters: cntk.config:numCPUThreads=2
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=double
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 2 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using CPU.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1: #PLUS#
MPI Rank 1: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: #NLop5#
MPI Rank 1: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: #PLUSBP#
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 1.2459s; SamplesPerSecond = 513.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 1.0856s; SamplesPerSecond = 589.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 1.0678s; SamplesPerSecond = 599.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 1.0544s; SamplesPerSecond = 607.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 0.9092s; SamplesPerSecond = 703.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.8011s; SamplesPerSecond = 798.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 1.0352s; SamplesPerSecond = 618.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 0.8800s; SamplesPerSecond = 727.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.9507s; SamplesPerSecond = 673.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.9720s; SamplesPerSecond = 658.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.8238s; SamplesPerSecond = 776.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.9045s; SamplesPerSecond = 707.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 1.1113s; SamplesPerSecond = 575.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 0.9321s; SamplesPerSecond = 686.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 0.7297s; SamplesPerSecond = 877.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 0.6618s; SamplesPerSecond = 967.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 0.7469s; SamplesPerSecond = 856.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.8027s; SamplesPerSecond = 797.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 0.6692s; SamplesPerSecond = 956.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.6625s; SamplesPerSecond = 966.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.7818s; SamplesPerSecond = 818.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.8652s; SamplesPerSecond = 739.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 1.0687s; SamplesPerSecond = 598.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 1.0737s; SamplesPerSecond = 596.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 1.0723s; SamplesPerSecond = 596.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 1.0673s; SamplesPerSecond = 599.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 1.0991s; SamplesPerSecond = 582.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 1.1095s; SamplesPerSecond = 576.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 1.0623s; SamplesPerSecond = 602.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 1.0597s; SamplesPerSecond = 604.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 1.0513s; SamplesPerSecond = 608.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 1.0534s; SamplesPerSecond = 607.5
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=30.4183
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.046047
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.138694
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.09514596; EvalErr[0]PerSample = 0.55989583; TotalTime = 1.2304s; SamplesPerSecond = 1872.5
MPI Rank 1: Async gradient aggregation wait time: 1.3e-05
MPI Rank 1: Actual gradient aggregation time: 0.119024
MPI Rank 1: Async gradient aggregation wait time: 8e-06
MPI Rank 1: Actual gradient aggregation time: 0.12827
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14762552; EvalErr[0]PerSample = 0.58242187; TotalTime = 1.3526s; SamplesPerSecond = 1892.7
MPI Rank 1: Async gradient aggregation wait time: 0.004926
MPI Rank 1: Actual gradient aggregation time: 0.142038
MPI Rank 1: Async gradient aggregation wait time: 0.011642
MPI Rank 1: Actual gradient aggregation time: 0.138231
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19977785; EvalErr[0]PerSample = 0.58867187; TotalTime = 1.3781s; SamplesPerSecond = 1857.6
MPI Rank 1: Async gradient aggregation wait time: 0.003444
MPI Rank 1: Actual gradient aggregation time: 0.140383
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.14099
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13471172; EvalErr[0]PerSample = 0.59023437; TotalTime = 1.3807s; SamplesPerSecond = 1854.1
MPI Rank 1: Async gradient aggregation wait time: 0.00307
MPI Rank 1: Actual gradient aggregation time: 0.135863
MPI Rank 1: Async gradient aggregation wait time: 0.006403
MPI Rank 1: Actual gradient aggregation time: 0.133294
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.07369296; EvalErr[0]PerSample = 0.57382813; TotalTime = 1.3809s; SamplesPerSecond = 1853.8
MPI Rank 1: Async gradient aggregation wait time: 1.3e-05
MPI Rank 1: Actual gradient aggregation time: 0.122461
MPI Rank 1: Async gradient aggregation wait time: 0.009764
MPI Rank 1: Actual gradient aggregation time: 0.130475
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14944464; EvalErr[0]PerSample = 0.57578125; TotalTime = 1.3624s; SamplesPerSecond = 1879.0
MPI Rank 1: Async gradient aggregation wait time: 0.003466
MPI Rank 1: Actual gradient aggregation time: 0.135504
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.121177
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09921664; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3754s; SamplesPerSecond = 1861.3
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.104627
MPI Rank 1: Async gradient aggregation wait time: 1.3e-05
MPI Rank 1: Actual gradient aggregation time: 0.08827
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.04462189; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3409s; SamplesPerSecond = 1909.1
MPI Rank 1: Async gradient aggregation wait time: 0.034765
MPI Rank 1: Actual gradient aggregation time: 0.068492
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1163671; EvalErrPerSample = 0.575; AvgLearningRatePerSample = 0.001953125; EpochTime=10.91
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 1.5e-05
MPI Rank 1: Actual gradient aggregation time: 0.046922
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.049929
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.00619565; EvalErr[0]PerSample = 0.55088976; TotalTime = 3.3045s; SamplesPerSecond = 2788.9
MPI Rank 1: Async gradient aggregation wait time: 1.5e-05
MPI Rank 1: Actual gradient aggregation time: 0.107407
MPI Rank 1: Async gradient aggregation wait time: 1.5e-05
MPI Rank 1: Actual gradient aggregation time: 0.030779
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.93824509; EvalErr[0]PerSample = 0.53398437; TotalTime = 3.3284s; SamplesPerSecond = 3076.6
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.9709628; EvalErrPerSample = 0.54194336; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.75424
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 9e-06
MPI Rank 1: Actual gradient aggregation time: 0.006172
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.005785
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.91072859; EvalErr[0]PerSample = 0.52365451; TotalTime = 3.4161s; SamplesPerSecond = 2697.8
MPI Rank 1: Async gradient aggregation wait time: 1.5e-05
MPI Rank 1: Actual gradient aggregation time: 0.006201
MPI Rank 1: Async gradient aggregation wait time: 1.5e-05
MPI Rank 1: Actual gradient aggregation time: 0.005721
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.89799241; EvalErr[0]PerSample = 0.52294922; TotalTime = 3.3852s; SamplesPerSecond = 3024.9
MPI Rank 1: Async gradient aggregation wait time: 1.3e-05
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9047436; EvalErrPerSample = 0.52290039; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.8934
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Jan  6 2016 19:01:02
MPI Rank 2: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 2: 		Build type: debug
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2016/01/06 23:26:49
MPI Rank 2: command line: 
MPI Rank 2: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = -1
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=-1
MPI Rank 2: configparameters: cntk.config:numCPUThreads=2
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=double
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = double
MPI Rank 2: Using 2 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20160106232647.724209/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using CPU.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2: #PLUS#
MPI Rank 2: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: #NLop5#
MPI Rank 2: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: #PLUSBP#
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 0.7096s; SamplesPerSecond = 901.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 0.6952s; SamplesPerSecond = 920.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.8293s; SamplesPerSecond = 771.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 0.8270s; SamplesPerSecond = 773.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 0.9680s; SamplesPerSecond = 661.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 1.1485s; SamplesPerSecond = 557.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 0.8633s; SamplesPerSecond = 741.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 0.8252s; SamplesPerSecond = 775.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.7957s; SamplesPerSecond = 804.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 1.1151s; SamplesPerSecond = 573.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 1.0905s; SamplesPerSecond = 586.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 1.1102s; SamplesPerSecond = 576.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 1.1037s; SamplesPerSecond = 579.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 0.8253s; SamplesPerSecond = 775.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 0.8097s; SamplesPerSecond = 790.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 0.9776s; SamplesPerSecond = 654.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 1.0392s; SamplesPerSecond = 615.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.8033s; SamplesPerSecond = 796.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 1.0417s; SamplesPerSecond = 614.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 1.1086s; SamplesPerSecond = 577.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.9366s; SamplesPerSecond = 683.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 1.1645s; SamplesPerSecond = 549.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 1.1295s; SamplesPerSecond = 566.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 1.1017s; SamplesPerSecond = 580.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 1.1070s; SamplesPerSecond = 578.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 0.8212s; SamplesPerSecond = 779.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.8427s; SamplesPerSecond = 759.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 0.9096s; SamplesPerSecond = 703.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 1.0912s; SamplesPerSecond = 586.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 1.1533s; SamplesPerSecond = 554.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 1.1513s; SamplesPerSecond = 555.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 1.1538s; SamplesPerSecond = 554.7
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=31.2545
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.060522
MPI Rank 2: Async gradient aggregation wait time: 0.031623
MPI Rank 2: Actual gradient aggregation time: 0.14453
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.09514596; EvalErr[0]PerSample = 0.55989583; TotalTime = 1.2174s; SamplesPerSecond = 1892.5
MPI Rank 2: Async gradient aggregation wait time: 0.018795
MPI Rank 2: Actual gradient aggregation time: 0.128166
MPI Rank 2: Async gradient aggregation wait time: 0.022281
MPI Rank 2: Actual gradient aggregation time: 0.132534
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14762552; EvalErr[0]PerSample = 0.58242187; TotalTime = 1.3620s; SamplesPerSecond = 1879.6
MPI Rank 2: Async gradient aggregation wait time: 0.032316
MPI Rank 2: Actual gradient aggregation time: 0.138782
MPI Rank 2: Async gradient aggregation wait time: 0.038093
MPI Rank 2: Actual gradient aggregation time: 0.129845
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19977785; EvalErr[0]PerSample = 0.58867187; TotalTime = 1.3797s; SamplesPerSecond = 1855.5
MPI Rank 2: Async gradient aggregation wait time: 0.032278
MPI Rank 2: Actual gradient aggregation time: 0.140392
MPI Rank 2: Async gradient aggregation wait time: 0.028146
MPI Rank 2: Actual gradient aggregation time: 0.142341
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13471172; EvalErr[0]PerSample = 0.59023437; TotalTime = 1.3790s; SamplesPerSecond = 1856.5
MPI Rank 2: Async gradient aggregation wait time: 0.035036
MPI Rank 2: Actual gradient aggregation time: 0.135871
MPI Rank 2: Async gradient aggregation wait time: 0.027692
MPI Rank 2: Actual gradient aggregation time: 0.133302
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.07369296; EvalErr[0]PerSample = 0.57382813; TotalTime = 1.3808s; SamplesPerSecond = 1854.0
MPI Rank 2: Async gradient aggregation wait time: 0.017662
MPI Rank 2: Actual gradient aggregation time: 0.131173
MPI Rank 2: Async gradient aggregation wait time: 0.031357
MPI Rank 2: Actual gradient aggregation time: 0.127953
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.14944464; EvalErr[0]PerSample = 0.57578125; TotalTime = 1.3611s; SamplesPerSecond = 1880.8
MPI Rank 2: Async gradient aggregation wait time: 0.021014
MPI Rank 2: Actual gradient aggregation time: 0.135512
MPI Rank 2: Async gradient aggregation wait time: 0.01649
MPI Rank 2: Actual gradient aggregation time: 0.137525
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09921664; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3517s; SamplesPerSecond = 1893.8
MPI Rank 2: Async gradient aggregation wait time: 0.023689
MPI Rank 2: Actual gradient aggregation time: 0.133718
MPI Rank 2: Async gradient aggregation wait time: 0.025159
MPI Rank 2: Actual gradient aggregation time: 0.138051
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.04462189; EvalErr[0]PerSample = 0.56484375; TotalTime = 1.3358s; SamplesPerSecond = 1916.5
MPI Rank 2: Async gradient aggregation wait time: 0.067309
MPI Rank 2: Actual gradient aggregation time: 0.065304
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1163671; EvalErrPerSample = 0.575; AvgLearningRatePerSample = 0.001953125; EpochTime=10.91
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.079988
MPI Rank 2: Actual gradient aggregation time: 0.334992
MPI Rank 2: Async gradient aggregation wait time: 0.096806
MPI Rank 2: Actual gradient aggregation time: 0.33545
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.00619565; EvalErr[0]PerSample = 0.55088976; TotalTime = 3.0141s; SamplesPerSecond = 3057.6
MPI Rank 2: Async gradient aggregation wait time: 0.075682
MPI Rank 2: Actual gradient aggregation time: 0.336393
MPI Rank 2: Async gradient aggregation wait time: 0.062102
MPI Rank 2: Actual gradient aggregation time: 0.315776
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.93824509; EvalErr[0]PerSample = 0.53398437; TotalTime = 3.3451s; SamplesPerSecond = 3061.2
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.9709628; EvalErrPerSample = 0.54194336; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.75423
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 1.5e-05
MPI Rank 2: Actual gradient aggregation time: 0.242073
MPI Rank 2: Async gradient aggregation wait time: 0.084231
MPI Rank 2: Actual gradient aggregation time: 0.328716
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.91072859; EvalErr[0]PerSample = 0.52365451; TotalTime = 3.0890s; SamplesPerSecond = 2983.5
MPI Rank 2: Async gradient aggregation wait time: 0.098743
MPI Rank 2: Actual gradient aggregation time: 0.358852
MPI Rank 2: Async gradient aggregation wait time: 0.07654
MPI Rank 2: Actual gradient aggregation time: 0.332335
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.89799241; EvalErr[0]PerSample = 0.52294922; TotalTime = 3.4555s; SamplesPerSecond = 2963.4
MPI Rank 2: Async gradient aggregation wait time: 0.004703
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9047436; EvalErrPerSample = 0.52290039; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=6.84798
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: __COMPLETED__
MPI Rank 2: ~MPIWrapper
