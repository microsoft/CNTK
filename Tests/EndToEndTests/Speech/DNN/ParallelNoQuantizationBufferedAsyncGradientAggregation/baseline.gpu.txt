=== Running mpiexec -n 3 /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank0
Redirecting stderr to file /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank1
Redirecting stderr to file /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank2
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Jan  6 2016 19:01:02
MPI Rank 0: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 0: 		Build type: debug
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2016/01/06 23:25:24
MPI Rank 0: command line: 
MPI Rank 0: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=0
MPI Rank 0: configparameters: cntk.config:numCPUThreads=2
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=double
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 2 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0: #PLUS#
MPI Rank 0: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 0: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 0: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 0: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 0: #NLop5#
MPI Rank 0: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: #PLUSBP#
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.2407s; SamplesPerSecond = 2658.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.2186s; SamplesPerSecond = 2927.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2176s; SamplesPerSecond = 2940.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.2198s; SamplesPerSecond = 2912.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.2186s; SamplesPerSecond = 2928.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2156s; SamplesPerSecond = 2969.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.2155s; SamplesPerSecond = 2969.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.2172s; SamplesPerSecond = 2946.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.2175s; SamplesPerSecond = 2942.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.2167s; SamplesPerSecond = 2953.8
MPI Rank 0: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.2119s; SamplesPerSecond = 3020.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.2171s; SamplesPerSecond = 2947.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.2174s; SamplesPerSecond = 2944.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.2179s; SamplesPerSecond = 2936.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.2171s; SamplesPerSecond = 2947.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.2173s; SamplesPerSecond = 2945.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.2174s; SamplesPerSecond = 2943.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.2176s; SamplesPerSecond = 2941.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.2169s; SamplesPerSecond = 2951.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.2173s; SamplesPerSecond = 2945.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.2176s; SamplesPerSecond = 2940.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.2181s; SamplesPerSecond = 2934.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.2169s; SamplesPerSecond = 2950.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.2186s; SamplesPerSecond = 2928.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.2086s; SamplesPerSecond = 3067.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.2128s; SamplesPerSecond = 3007.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.2160s; SamplesPerSecond = 2963.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.2164s; SamplesPerSecond = 2957.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.2164s; SamplesPerSecond = 2958.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.2140s; SamplesPerSecond = 2991.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.2051s; SamplesPerSecond = 3120.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.2171s; SamplesPerSecond = 2948.2
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.00504
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.011961
MPI Rank 0: Async gradient aggregation wait time: 0.000904
MPI Rank 0: Actual gradient aggregation time: 0.033022
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.08990053; EvalErr[0]PerSample = 0.56640625; TotalTime = 0.2889s; SamplesPerSecond = 7976.0
MPI Rank 0: Async gradient aggregation wait time: 0.005171
MPI Rank 0: Actual gradient aggregation time: 0.02443
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.026637
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.16003887; EvalErr[0]PerSample = 0.58476562; TotalTime = 0.2810s; SamplesPerSecond = 9111.7
MPI Rank 0: Async gradient aggregation wait time: 0.002957
MPI Rank 0: Actual gradient aggregation time: 0.029982
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.017448
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19985756; EvalErr[0]PerSample = 0.59492188; TotalTime = 0.2801s; SamplesPerSecond = 9141.1
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.016532
MPI Rank 0: Async gradient aggregation wait time: 0.003627
MPI Rank 0: Actual gradient aggregation time: 0.026545
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12388714; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.2753s; SamplesPerSecond = 9298.5
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.028147
MPI Rank 0: Async gradient aggregation wait time: 0.001084
MPI Rank 0: Actual gradient aggregation time: 0.010457
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.05908444; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2835s; SamplesPerSecond = 9029.2
MPI Rank 0: Async gradient aggregation wait time: 0.000789
MPI Rank 0: Actual gradient aggregation time: 0.031524
MPI Rank 0: Async gradient aggregation wait time: 0.002736
MPI Rank 0: Actual gradient aggregation time: 0.019029
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13603725; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2996s; SamplesPerSecond = 8545.9
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.012875
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.008355
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09094421; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.2910s; SamplesPerSecond = 8797.6
MPI Rank 0: Async gradient aggregation wait time: 0.007399
MPI Rank 0: Actual gradient aggregation time: 0.030404
MPI Rank 0: Async gradient aggregation wait time: 0.002218
MPI Rank 0: Actual gradient aggregation time: 0.031144
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.02829896; EvalErr[0]PerSample = 0.56210938; TotalTime = 0.3025s; SamplesPerSecond = 8461.9
MPI Rank 0: Async gradient aggregation wait time: 0.00443
MPI Rank 0: Actual gradient aggregation time: 0.013037
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1092867; EvalErrPerSample = 0.57392578; AvgLearningRatePerSample = 0.001953125; EpochTime=2.33368
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.3e-05
MPI Rank 0: Actual gradient aggregation time: 0.035052
MPI Rank 0: Async gradient aggregation wait time: 8e-06
MPI Rank 0: Actual gradient aggregation time: 0.039993
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.99429576; EvalErr[0]PerSample = 0.54709201; TotalTime = 0.5249s; SamplesPerSecond = 17558.8
MPI Rank 0: Async gradient aggregation wait time: 1.1e-05
MPI Rank 0: Actual gradient aggregation time: 0.03286
MPI Rank 0: Async gradient aggregation wait time: 0.007913
MPI Rank 0: Actual gradient aggregation time: 0.036843
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.92530640; EvalErr[0]PerSample = 0.52812500; TotalTime = 0.5521s; SamplesPerSecond = 18546.6
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.958861; EvalErrPerSample = 0.53725586; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.12898
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.00691
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.007876
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.90011431; EvalErr[0]PerSample = 0.51725260; TotalTime = 0.5175s; SamplesPerSecond = 17807.9
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.032879
MPI Rank 0: Async gradient aggregation wait time: 0.006177
MPI Rank 0: Actual gradient aggregation time: 0.055069
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88429973; EvalErr[0]PerSample = 0.52099609; TotalTime = 0.5251s; SamplesPerSecond = 19499.9
MPI Rank 0: Async gradient aggregation wait time: 0.004648
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8924891; EvalErrPerSample = 0.51933594; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.10761
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Jan  6 2016 19:01:02
MPI Rank 1: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 1: 		Build type: debug
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2016/01/06 23:25:25
MPI Rank 1: command line: 
MPI Rank 1: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=0
MPI Rank 1: configparameters: cntk.config:numCPUThreads=2
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=double
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 2 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1: #PLUS#
MPI Rank 1: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 1: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 1: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 1: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 1: #NLop5#
MPI Rank 1: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: #PLUSBP#
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.2462s; SamplesPerSecond = 2599.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.2190s; SamplesPerSecond = 2921.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2180s; SamplesPerSecond = 2935.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.2181s; SamplesPerSecond = 2934.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.2176s; SamplesPerSecond = 2941.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2156s; SamplesPerSecond = 2968.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.2167s; SamplesPerSecond = 2952.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.2171s; SamplesPerSecond = 2947.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.2176s; SamplesPerSecond = 2940.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.2165s; SamplesPerSecond = 2956.6
MPI Rank 1: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.2191s; SamplesPerSecond = 2920.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.2175s; SamplesPerSecond = 2942.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.2171s; SamplesPerSecond = 2947.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.2173s; SamplesPerSecond = 2945.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.2180s; SamplesPerSecond = 2936.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.2171s; SamplesPerSecond = 2948.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.2173s; SamplesPerSecond = 2944.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.2170s; SamplesPerSecond = 2949.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.2177s; SamplesPerSecond = 2939.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.2173s; SamplesPerSecond = 2945.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.2174s; SamplesPerSecond = 2943.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.2175s; SamplesPerSecond = 2942.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.2175s; SamplesPerSecond = 2942.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.2186s; SamplesPerSecond = 2927.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.2246s; SamplesPerSecond = 2849.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.2172s; SamplesPerSecond = 2945.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.2159s; SamplesPerSecond = 2963.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.2164s; SamplesPerSecond = 2957.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.2162s; SamplesPerSecond = 2959.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.2250s; SamplesPerSecond = 2844.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.2194s; SamplesPerSecond = 2916.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.1922s; SamplesPerSecond = 3330.0
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.00464
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.025686
MPI Rank 1: Async gradient aggregation wait time: 0.004606
MPI Rank 1: Actual gradient aggregation time: 0.033068
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.08990053; EvalErr[0]PerSample = 0.56640625; TotalTime = 0.2998s; SamplesPerSecond = 7685.1
MPI Rank 1: Async gradient aggregation wait time: 0.00059
MPI Rank 1: Actual gradient aggregation time: 0.023269
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.00805
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.16003887; EvalErr[0]PerSample = 0.58476562; TotalTime = 0.2786s; SamplesPerSecond = 9187.9
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.012697
MPI Rank 1: Async gradient aggregation wait time: 6e-06
MPI Rank 1: Actual gradient aggregation time: 0.014048
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19985756; EvalErr[0]PerSample = 0.59492188; TotalTime = 0.2718s; SamplesPerSecond = 9417.8
MPI Rank 1: Async gradient aggregation wait time: 0.003797
MPI Rank 1: Actual gradient aggregation time: 0.016977
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.008841
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12388714; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.2784s; SamplesPerSecond = 9194.2
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.013979
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.0094
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.05908444; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2847s; SamplesPerSecond = 8991.4
MPI Rank 1: Async gradient aggregation wait time: 0.015021
MPI Rank 1: Actual gradient aggregation time: 0.019205
MPI Rank 1: Async gradient aggregation wait time: 0.002628
MPI Rank 1: Actual gradient aggregation time: 0.020009
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13603725; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2944s; SamplesPerSecond = 8695.6
MPI Rank 1: Async gradient aggregation wait time: 0.01
MPI Rank 1: Actual gradient aggregation time: 0.01446
MPI Rank 1: Async gradient aggregation wait time: 0.003974
MPI Rank 1: Actual gradient aggregation time: 0.031839
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09094421; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.2953s; SamplesPerSecond = 8670.5
MPI Rank 1: Async gradient aggregation wait time: 0.007178
MPI Rank 1: Actual gradient aggregation time: 0.03041
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.017581
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.02829896; EvalErr[0]PerSample = 0.56210938; TotalTime = 0.3019s; SamplesPerSecond = 8478.7
MPI Rank 1: Async gradient aggregation wait time: 0.005355
MPI Rank 1: Actual gradient aggregation time: 0.022981
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1092867; EvalErrPerSample = 0.57392578; AvgLearningRatePerSample = 0.001953125; EpochTime=2.33933
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 1.1e-05
MPI Rank 1: Actual gradient aggregation time: 0.009509
MPI Rank 1: Async gradient aggregation wait time: 1.2e-05
MPI Rank 1: Actual gradient aggregation time: 0.006755
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.99429576; EvalErr[0]PerSample = 0.54709201; TotalTime = 0.5328s; SamplesPerSecond = 17298.4
MPI Rank 1: Async gradient aggregation wait time: 9e-06
MPI Rank 1: Actual gradient aggregation time: 0.007444
MPI Rank 1: Async gradient aggregation wait time: 1e-05
MPI Rank 1: Actual gradient aggregation time: 0.007848
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.92530640; EvalErr[0]PerSample = 0.52812500; TotalTime = 0.5467s; SamplesPerSecond = 18730.9
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.958861; EvalErrPerSample = 0.53725586; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.12851
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 6e-06
MPI Rank 1: Actual gradient aggregation time: 0.038811
MPI Rank 1: Async gradient aggregation wait time: 7e-06
MPI Rank 1: Actual gradient aggregation time: 0.034876
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.90011431; EvalErr[0]PerSample = 0.51725260; TotalTime = 0.5304s; SamplesPerSecond = 17374.8
MPI Rank 1: Async gradient aggregation wait time: 1e-05
MPI Rank 1: Actual gradient aggregation time: 0.006991
MPI Rank 1: Async gradient aggregation wait time: 1.4e-05
MPI Rank 1: Actual gradient aggregation time: 0.006682
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88429973; EvalErr[0]PerSample = 0.52099609; TotalTime = 0.5395s; SamplesPerSecond = 18980.1
MPI Rank 1: Async gradient aggregation wait time: 0.004311
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8924891; EvalErrPerSample = 0.51933594; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.10764
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Jan  6 2016 19:01:02
MPI Rank 2: 		Last modified date: Tue Jan  5 10:37:19 2016
MPI Rank 2: 		Build type: debug
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: f88156c7f48e6418e0e5e2998e159c54aaca3c1d
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2016/01/06 23:25:25
MPI Rank 2: command line: 
MPI Rank 2: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = 0
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/DNN/ParallelNoQuantizationBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=0
MPI Rank 2: configparameters: cntk.config:numCPUThreads=2
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=double
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = double
MPI Rank 2: Using 2 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20160106232524.94334/Speech/DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using GPU 0.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2: #PLUS#
MPI Rank 2: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 2: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 2: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 2: 8 procs  32 warps  2147483647 65535 65535 max grid  on  GeForce GTX 690
MPI Rank 2: #NLop5#
MPI Rank 2: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: #PLUSBP#
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.2561s; SamplesPerSecond = 2498.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.2183s; SamplesPerSecond = 2931.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2137s; SamplesPerSecond = 2995.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.2167s; SamplesPerSecond = 2953.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.2161s; SamplesPerSecond = 2961.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.2156s; SamplesPerSecond = 2968.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.2176s; SamplesPerSecond = 2941.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.2178s; SamplesPerSecond = 2938.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.2170s; SamplesPerSecond = 2949.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.2165s; SamplesPerSecond = 2956.2
MPI Rank 2: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.2197s; SamplesPerSecond = 2913.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.2169s; SamplesPerSecond = 2950.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.2173s; SamplesPerSecond = 2945.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.2169s; SamplesPerSecond = 2950.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.2186s; SamplesPerSecond = 2927.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.2173s; SamplesPerSecond = 2945.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.2175s; SamplesPerSecond = 2942.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.2162s; SamplesPerSecond = 2960.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.2183s; SamplesPerSecond = 2931.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.2168s; SamplesPerSecond = 2952.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.2177s; SamplesPerSecond = 2940.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.2172s; SamplesPerSecond = 2947.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.2183s; SamplesPerSecond = 2931.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.2139s; SamplesPerSecond = 2992.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.2068s; SamplesPerSecond = 3094.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.2183s; SamplesPerSecond = 2931.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.2161s; SamplesPerSecond = 2961.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.2164s; SamplesPerSecond = 2957.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.2157s; SamplesPerSecond = 2967.1
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.2168s; SamplesPerSecond = 2951.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.2191s; SamplesPerSecond = 2920.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.2044s; SamplesPerSecond = 3130.7
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.00462
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.022031
MPI Rank 2: Async gradient aggregation wait time: 0.007427
MPI Rank 2: Actual gradient aggregation time: 0.033122
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.08990053; EvalErr[0]PerSample = 0.56640625; TotalTime = 0.2872s; SamplesPerSecond = 8022.4
MPI Rank 2: Async gradient aggregation wait time: 0.008906
MPI Rank 2: Actual gradient aggregation time: 0.023597
MPI Rank 2: Async gradient aggregation wait time: 0.007731
MPI Rank 2: Actual gradient aggregation time: 0.031038
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.16003887; EvalErr[0]PerSample = 0.58476562; TotalTime = 0.2858s; SamplesPerSecond = 8957.9
MPI Rank 2: Async gradient aggregation wait time: 0.010559
MPI Rank 2: Actual gradient aggregation time: 0.022847
MPI Rank 2: Async gradient aggregation wait time: 0.007715
MPI Rank 2: Actual gradient aggregation time: 0.01345
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.19985756; EvalErr[0]PerSample = 0.59492188; TotalTime = 0.2764s; SamplesPerSecond = 9260.6
MPI Rank 2: Async gradient aggregation wait time: 0.009341
MPI Rank 2: Actual gradient aggregation time: 0.015912
MPI Rank 2: Async gradient aggregation wait time: 0.00736
MPI Rank 2: Actual gradient aggregation time: 0.026809
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12388714; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.2787s; SamplesPerSecond = 9184.7
MPI Rank 2: Async gradient aggregation wait time: 0.000492
MPI Rank 2: Actual gradient aggregation time: 0.040623
MPI Rank 2: Async gradient aggregation wait time: 0.006849
MPI Rank 2: Actual gradient aggregation time: 0.006687
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.05908444; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2835s; SamplesPerSecond = 9029.1
MPI Rank 2: Async gradient aggregation wait time: 0.006498
MPI Rank 2: Actual gradient aggregation time: 0.033143
MPI Rank 2: Async gradient aggregation wait time: 0.009191
MPI Rank 2: Actual gradient aggregation time: 0.019724
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.13603725; EvalErr[0]PerSample = 0.57070312; TotalTime = 0.2989s; SamplesPerSecond = 8563.6
MPI Rank 2: Async gradient aggregation wait time: 0.005047
MPI Rank 2: Actual gradient aggregation time: 0.006069
MPI Rank 2: Async gradient aggregation wait time: 0.008467
MPI Rank 2: Actual gradient aggregation time: 0.023633
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09094421; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.2856s; SamplesPerSecond = 8964.4
MPI Rank 2: Async gradient aggregation wait time: 0.018896
MPI Rank 2: Actual gradient aggregation time: 0.010287
MPI Rank 2: Async gradient aggregation wait time: 0.006593
MPI Rank 2: Actual gradient aggregation time: 0.029012
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.02829896; EvalErr[0]PerSample = 0.56210938; TotalTime = 0.3084s; SamplesPerSecond = 8302.1
MPI Rank 2: Async gradient aggregation wait time: 0.00403
MPI Rank 2: Actual gradient aggregation time: 0.017647
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1092867; EvalErrPerSample = 0.57392578; AvgLearningRatePerSample = 0.001953125; EpochTime=2.33332
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.007131
MPI Rank 2: Actual gradient aggregation time: 0.049529
MPI Rank 2: Async gradient aggregation wait time: 0.007958
MPI Rank 2: Actual gradient aggregation time: 0.051621
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.99429576; EvalErr[0]PerSample = 0.54709201; TotalTime = 0.5153s; SamplesPerSecond = 17884.0
MPI Rank 2: Async gradient aggregation wait time: 0.00777
MPI Rank 2: Actual gradient aggregation time: 0.056468
MPI Rank 2: Async gradient aggregation wait time: 0.001599
MPI Rank 2: Actual gradient aggregation time: 0.0501
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.92530640; EvalErr[0]PerSample = 0.52812500; TotalTime = 0.5538s; SamplesPerSecond = 18490.0
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.958861; EvalErrPerSample = 0.53725586; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.12889
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.000481
MPI Rank 2: Actual gradient aggregation time: 0.04614
MPI Rank 2: Async gradient aggregation wait time: 0.011101
MPI Rank 2: Actual gradient aggregation time: 0.039715
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.90011431; EvalErr[0]PerSample = 0.51725260; TotalTime = 0.4844s; SamplesPerSecond = 19023.7
MPI Rank 2: Async gradient aggregation wait time: 0.007438
MPI Rank 2: Actual gradient aggregation time: 0.05382
MPI Rank 2: Async gradient aggregation wait time: 7e-06
MPI Rank 2: Actual gradient aggregation time: 0.052382
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88429973; EvalErr[0]PerSample = 0.52099609; TotalTime = 0.5637s; SamplesPerSecond = 18166.3
MPI Rank 2: Async gradient aggregation wait time: 0.005346
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8924891; EvalErrPerSample = 0.51933594; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.10805
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: __COMPLETED__
MPI Rank 2: ~MPIWrapper
