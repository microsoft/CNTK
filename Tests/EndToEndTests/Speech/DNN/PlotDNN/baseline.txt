=== Running /cygdrive/d/work/Program/Code/local-src/CNTK-public/CNTK-github2/x64/debug/cntk.exe configFile=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN/plot.cntk currentDirectory=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu DataDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data ConfigDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN OutputDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 18 2016 11:43:50
		Last modified date: Mon Apr 18 10:00:14 2016
		Build type: Debug
		Build target: GPU
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: D:\work\Program\Code\src\CUB
		CUDNN_PATH: D:\work\Program\Code\src\cuDNN\cuda
		Build Branch: erw/PlotFix
		Build SHA1: 4e90a514120ae6033d9bfa88b3ba296bfae0d559 (modified)
		Built by erw on 7253-Wang
		Build Path: D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
04/18/2016 12:15:03: -------------------------------------------------------------------
04/18/2016 12:15:03: Build info: 

04/18/2016 12:15:03: 		Built time: Apr 18 2016 11:43:50
04/18/2016 12:15:03: 		Last modified date: Mon Apr 18 10:00:14 2016
04/18/2016 12:15:03: 		Build type: Debug
04/18/2016 12:15:03: 		Build target: GPU
04/18/2016 12:15:03: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
04/18/2016 12:15:03: 		CUB_PATH: D:\work\Program\Code\src\CUB
04/18/2016 12:15:03: 		CUDNN_PATH: D:\work\Program\Code\src\cuDNN\cuda
04/18/2016 12:15:03: 		Build Branch: erw/PlotFix
04/18/2016 12:15:03: 		Build SHA1: 4e90a514120ae6033d9bfa88b3ba296bfae0d559 (modified)
04/18/2016 12:15:03: 		Built by erw on 7253-Wang
04/18/2016 12:15:03: 		Build Path: D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Source\CNTK\
04/18/2016 12:15:03: -------------------------------------------------------------------

04/18/2016 12:15:03: Running on 7253-Wang at 2016/04/18 12:15:03
04/18/2016 12:15:03: Command line: 
D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\x64\debug\cntk.exe  configFile=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN/plot.cntk  currentDirectory=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu  DataDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data  ConfigDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN  OutputDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu  DeviceId=0  timestamping=true



04/18/2016 12:15:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/18/2016 12:15:03: precision = "float"
command = speechTrain:plot
deviceId = $DeviceId$
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
        layerSizes = 363:512:512:132
        trainingCriterion = 'CE'
        evalCriterion = 'Err'
        applyMeanVarNorm = true
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = if trainingCriterion == 'CE'
             then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
             else Fail('unknown trainingCriterion ' + trainingCriterion)
        Err = if evalCriterion == 'Err' then
              ClassificationError(labels, outZ, tag='evaluation')
              else Fail('unknown evalCriterion ' + evalCriterion)
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 4096
        minibatchSize = 256
        learningRatesPerMB = 1.0
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 1
        keepCheckPointFiles = true
        clippingThresholdPerSample = 1#INF
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
plot=[
     action=plot
     modelPath="$RunDir$/models/cntkSpeech.dnn"
     outputdotFile="$RunDir$/cntkSpeech.dnn.dot"
]
currentDirectory=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
DataDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
ConfigDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN
OutputDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
DeviceId=0
timestamping=true

04/18/2016 12:15:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/18/2016 12:15:03: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/18/2016 12:15:03: precision = "float"
command = speechTrain:plot
deviceId = 0
speechTrain = [
    action = "train"
    modelPath = "C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
        layerSizes = 363:512:512:132
        trainingCriterion = 'CE'
        evalCriterion = 'Err'
        applyMeanVarNorm = true
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = if trainingCriterion == 'CE'
             then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
             else Fail('unknown trainingCriterion ' + trainingCriterion)
        Err = if evalCriterion == 'Err' then
              ClassificationError(labels, outZ, tag='evaluation')
              else Fail('unknown evalCriterion ' + evalCriterion)
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 4096
        minibatchSize = 256
        learningRatesPerMB = 1.0
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 1
        keepCheckPointFiles = true
        clippingThresholdPerSample = 1#INF
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
plot=[
     action=plot
     modelPath="C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn"
     outputdotFile="C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/cntkSpeech.dnn.dot"
]
currentDirectory=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
DataDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
ConfigDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN
OutputDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
DeviceId=0
timestamping=true

04/18/2016 12:15:03: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/18/2016 12:15:03: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: plot.cntk:command=speechTrain:plot
configparameters: plot.cntk:ConfigDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\DNN\PlotDNN
configparameters: plot.cntk:currentDirectory=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
configparameters: plot.cntk:DataDir=D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data
configparameters: plot.cntk:deviceId=0
configparameters: plot.cntk:OutputDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
configparameters: plot.cntk:plot=[
     action=plot
     modelPath="C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn"
     outputdotFile="C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/cntkSpeech.dnn.dot"
]

configparameters: plot.cntk:precision=float
configparameters: plot.cntk:RunDir=C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu
configparameters: plot.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
        layerSizes = 363:512:512:132
        trainingCriterion = 'CE'
        evalCriterion = 'Err'
        applyMeanVarNorm = true
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = if trainingCriterion == 'CE'
             then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
             else Fail('unknown trainingCriterion ' + trainingCriterion)
        Err = if evalCriterion == 'Err' then
              ClassificationError(labels, outZ, tag='evaluation')
              else Fail('unknown evalCriterion ' + evalCriterion)
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 4096
        minibatchSize = 256
        learningRatesPerMB = 1.0
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 1
        keepCheckPointFiles = true
        clippingThresholdPerSample = 1#INF
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: plot.cntk:timestamping=true
04/18/2016 12:15:03: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/18/2016 12:15:03: Commands: speechTrain plot
04/18/2016 12:15:03: Precision = "float"
04/18/2016 12:15:03: CNTKModelPath: C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn
04/18/2016 12:15:03: CNTKCommandTrainInfo: speechTrain : 1
04/18/2016 12:15:03: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

04/18/2016 12:15:03: ##############################################################################
04/18/2016 12:15:03: #                                                                            #
04/18/2016 12:15:03: # Action "train"                                                             #
04/18/2016 12:15:03: #                                                                            #
04/18/2016 12:15:03: ##############################################################################

04/18/2016 12:15:03: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file D:\work\Program\Code\local-src\CNTK-public\CNTK-github2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/18/2016 12:15:05: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.


Validating network. 17 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]


12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/18/2016 12:15:24: Created model with 25 nodes on GPU 0.

04/18/2016 12:15:24: Training criterion node(s):
04/18/2016 12:15:24: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/18/2016 12:15:24: Evaluation criterion node(s):

04/18/2016 12:15:24: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

04/18/2016 12:15:24: Precomputing --> 3 PreCompute nodes found.

04/18/2016 12:15:24: 	MeanOfFeatures = Mean()
04/18/2016 12:15:24: 	InvStdOfFeatures = InvStdDev()
04/18/2016 12:15:24: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/18/2016 12:15:42: Precomputing --> Completed.


04/18/2016 12:15:42: Starting Epoch 1: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
minibatchiterator: epoch 0: frames [0..4096] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

04/18/2016 12:15:42: Starting minibatch loop.
04/18/2016 12:15:42:  Epoch[ 1 of 1]-Minibatch[   1-  10, 62.50%]: * 2560; CrossEntropyWithSoftmax =  4.31999168; EvalClassificationError = 0.90117187; TotalTime = 0.3796s; SamplesPerSecond = 6744.2
04/18/2016 12:15:43: Finished Epoch[ 1 of 1]: [Training] CrossEntropyWithSoftmax = 4.2283239 * 4096; EvalClassificationError = 0.89477539; learningRatePerSample = 0.00390625; EpochTime=0.591265
04/18/2016 12:15:43: SGD: Saving checkpoint model 'C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/models/cntkSpeech.dnn'
04/18/2016 12:15:43: CNTKCommandTrainEnd: speechTrain

04/18/2016 12:15:43: Action "train" complete.


04/18/2016 12:15:43: ##############################################################################
04/18/2016 12:15:43: #                                                                            #
04/18/2016 12:15:43: # Action "plot"                                                              #
04/18/2016 12:15:43: #                                                                            #
04/18/2016 12:15:43: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.


Validating network. 17 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]


12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Created network description in dot format: C:\Users\erw\AppData\Local\Temp\cntk-test-20160418121457.523360\Speech\DNN_PlotDNN@debug_gpu/cntkSpeech.dnn.dot
Done.

04/18/2016 12:15:43: Action "plot" complete.

04/18/2016 12:15:43: __COMPLETED__

checking generated dot file against baseline dot file:


dot file of DNN topology matches
