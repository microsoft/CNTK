CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu DeviceId=-1 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:21:33
		Last modified date: Fri Aug 12 04:25:16 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: e08387a84c9168982e0feec3a0f9ce5d17a62e5a
		Built by svcphil on liana-08-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
08/16/2016 09:40:12: -------------------------------------------------------------------
08/16/2016 09:40:12: Build info: 

08/16/2016 09:40:12: 		Built time: Aug 16 2016 09:21:33
08/16/2016 09:40:12: 		Last modified date: Fri Aug 12 04:25:16 2016
08/16/2016 09:40:12: 		Build type: Release
08/16/2016 09:40:12: 		Build target: GPU
08/16/2016 09:40:12: 		With 1bit-SGD: no
08/16/2016 09:40:12: 		Math lib: mkl
08/16/2016 09:40:12: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 09:40:12: 		CUB_PATH: C:\src\cub-1.4.1
08/16/2016 09:40:12: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 09:40:12: 		Build Branch: HEAD
08/16/2016 09:40:12: 		Build SHA1: e08387a84c9168982e0feec3a0f9ce5d17a62e5a
08/16/2016 09:40:12: 		Built by svcphil on liana-08-w
08/16/2016 09:40:12: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 09:40:12: -------------------------------------------------------------------
08/16/2016 09:40:13: -------------------------------------------------------------------
08/16/2016 09:40:13: GPU info:

08/16/2016 09:40:13: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 09:40:13: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 09:40:13: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 09:40:13: -------------------------------------------------------------------

08/16/2016 09:40:13: Running on DPHAIM-25 at 2016/08/16 09:40:13
08/16/2016 09:40:13: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu  DeviceId=-1  timestamping=true  shareNodeValueMatrices=true



08/16/2016 09:40:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 09:40:13: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

08/16/2016 09:40:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 09:40:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 09:40:13: precision = "float"
command = speechTrain:write
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/Output"
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

08/16/2016 09:40:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 09:40:13: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\WriteCommand
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/Output"
]

08/16/2016 09:40:13: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 09:40:13: Commands: speechTrain write
08/16/2016 09:40:13: Precision = "float"
08/16/2016 09:40:13: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn
08/16/2016 09:40:13: CNTKCommandTrainInfo: speechTrain : 3
08/16/2016 09:40:13: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 09:40:13: ##############################################################################
08/16/2016 09:40:13: #                                                                            #
08/16/2016 09:40:13: # Action "train"                                                             #
08/16/2016 09:40:13: #                                                                            #
08/16/2016 09:40:13: ##############################################################################

08/16/2016 09:40:13: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 09:40:14: Creating virgin network.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 09:40:14: Created model with 25 nodes on CPU.

08/16/2016 09:40:14: Training criterion node(s):
08/16/2016 09:40:14: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 09:40:14: Evaluation criterion node(s):
08/16/2016 09:40:14: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 21 are shared as 7, and 19 are not shared.

	{ H2 : [512 x 1 x *]
	  W0 : [512 x 363] (gradient)
	  W0*features+B0 : [512 x 1 x *]
	  W0*features+B0 : [512 x 1 x *] (gradient)
	  W1*H1 : [512 x 1 x *]
	  W1*H1 : [512 x 1 x *] (gradient) }
	{ W1 : [512 x 512] (gradient)
	  W1*H1+B1 : [512 x 1 x *] (gradient)
	  W2*H1 : [132 x 1 x *] (gradient) }
	{ H1 : [512 x 1 x *]
	  W0*features : [512 x *]
	  W0*features : [512 x *] (gradient) }
	{ B0 : [512 x 1] (gradient)
	  H1 : [512 x 1 x *] (gradient) }
	{ W1*H1+B1 : [512 x 1 x *]
	  W2*H1 : [132 x 1 x *] }
	{ B1 : [512 x 1] (gradient)
	  H2 : [512 x 1 x *] (gradient)
	  HLast : [132 x 1 x *] (gradient) }
	{ HLast : [132 x 1 x *]
	  W2 : [132 x 512] (gradient) }


08/16/2016 09:40:14: Training 516740 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 09:40:14: 	Node 'B0' (LearnableParameter operation) : [512 x 1]
08/16/2016 09:40:14: 	Node 'B1' (LearnableParameter operation) : [512 x 1]
08/16/2016 09:40:14: 	Node 'B2' (LearnableParameter operation) : [132 x 1]
08/16/2016 09:40:14: 	Node 'W0' (LearnableParameter operation) : [512 x 363]
08/16/2016 09:40:14: 	Node 'W1' (LearnableParameter operation) : [512 x 512]
08/16/2016 09:40:14: 	Node 'W2' (LearnableParameter operation) : [132 x 512]


08/16/2016 09:40:14: Precomputing --> 3 PreCompute nodes found.

08/16/2016 09:40:14: 	MeanOfFeatures = Mean()
08/16/2016 09:40:14: 	InvStdOfFeatures = InvStdDev()
08/16/2016 09:40:14: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 09:40:16: Precomputing --> Completed.


08/16/2016 09:40:16: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/16/2016 09:40:16: Starting minibatch loop.
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.56731186 * 640; EvalClassificationError = 0.91718750 * 640; time = 0.0700s; samplesPerSecond = 9143.8
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31208801 * 640; EvalClassificationError = 0.92812500 * 640; time = 0.0631s; samplesPerSecond = 10144.9
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 3.97319870 * 640; EvalClassificationError = 0.87343750 * 640; time = 0.0603s; samplesPerSecond = 10612.0
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.73308105 * 640; EvalClassificationError = 0.84531250 * 640; time = 0.0631s; samplesPerSecond = 10137.8
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.83238373 * 640; EvalClassificationError = 0.86406250 * 640; time = 0.0632s; samplesPerSecond = 10129.6
08/16/2016 09:40:16:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.69914246 * 640; EvalClassificationError = 0.86093750 * 640; time = 0.0644s; samplesPerSecond = 9935.9
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.40238342 * 640; EvalClassificationError = 0.77812500 * 640; time = 0.0681s; samplesPerSecond = 9394.8
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.51739502 * 640; EvalClassificationError = 0.83750000 * 640; time = 0.0645s; samplesPerSecond = 9927.9
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.50059509 * 640; EvalClassificationError = 0.81250000 * 640; time = 0.0655s; samplesPerSecond = 9766.8
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.39301453 * 640; EvalClassificationError = 0.80156250 * 640; time = 0.0677s; samplesPerSecond = 9447.5
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.48832092 * 640; EvalClassificationError = 0.82187500 * 640; time = 0.0652s; samplesPerSecond = 9820.9
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.23814392 * 640; EvalClassificationError = 0.77031250 * 640; time = 0.0647s; samplesPerSecond = 9894.7
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.14333801 * 640; EvalClassificationError = 0.76093750 * 640; time = 0.0636s; samplesPerSecond = 10068.9
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.01547852 * 640; EvalClassificationError = 0.73906250 * 640; time = 0.0644s; samplesPerSecond = 9933.0
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 2.91114502 * 640; EvalClassificationError = 0.71093750 * 640; time = 0.0645s; samplesPerSecond = 9926.6
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.06449585 * 640; EvalClassificationError = 0.74375000 * 640; time = 0.0623s; samplesPerSecond = 10280.5
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.77009888 * 640; EvalClassificationError = 0.69531250 * 640; time = 0.0616s; samplesPerSecond = 10393.7
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.67233887 * 640; EvalClassificationError = 0.64531250 * 640; time = 0.0614s; samplesPerSecond = 10428.9
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.76323853 * 640; EvalClassificationError = 0.69843750 * 640; time = 0.0624s; samplesPerSecond = 10262.3
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.70050659 * 640; EvalClassificationError = 0.68125000 * 640; time = 0.0605s; samplesPerSecond = 10573.1
08/16/2016 09:40:17:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.56018677 * 640; EvalClassificationError = 0.65312500 * 640; time = 0.0614s; samplesPerSecond = 10415.5
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.56796875 * 640; EvalClassificationError = 0.63906250 * 640; time = 0.0626s; samplesPerSecond = 10216.5
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.51055908 * 640; EvalClassificationError = 0.65000000 * 640; time = 0.0635s; samplesPerSecond = 10085.3
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.52174072 * 640; EvalClassificationError = 0.65468750 * 640; time = 0.0614s; samplesPerSecond = 10429.7
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.45943604 * 640; EvalClassificationError = 0.62812500 * 640; time = 0.0611s; samplesPerSecond = 10477.2
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.36069336 * 640; EvalClassificationError = 0.62031250 * 640; time = 0.0618s; samplesPerSecond = 10362.9
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.22167969 * 640; EvalClassificationError = 0.58125000 * 640; time = 0.0616s; samplesPerSecond = 10388.3
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.48105469 * 640; EvalClassificationError = 0.66093750 * 640; time = 0.0616s; samplesPerSecond = 10393.7
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.23253174 * 640; EvalClassificationError = 0.58906250 * 640; time = 0.0597s; samplesPerSecond = 10713.3
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.22145386 * 640; EvalClassificationError = 0.60312500 * 640; time = 0.0627s; samplesPerSecond = 10209.1
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.21771851 * 640; EvalClassificationError = 0.58125000 * 640; time = 0.0618s; samplesPerSecond = 10361.2
08/16/2016 09:40:18:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.19994507 * 640; EvalClassificationError = 0.59843750 * 640; time = 0.0602s; samplesPerSecond = 10631.6
08/16/2016 09:40:18: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 3.00789585 * 20480; EvalClassificationError = 0.72641602 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=2.02218s
08/16/2016 09:40:18: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.1'

08/16/2016 09:40:18: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

08/16/2016 09:40:18: Starting minibatch loop.
08/16/2016 09:40:18:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.09962826 * 2560; EvalClassificationError = 0.56132812 * 2560; time = 0.1716s; samplesPerSecond = 14917.4
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.02412395 * 2560; EvalClassificationError = 0.55000000 * 2560; time = 0.1643s; samplesPerSecond = 15584.6
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.00477333 * 2560; EvalClassificationError = 0.54296875 * 2560; time = 0.1710s; samplesPerSecond = 14967.5
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.99184341 * 2560; EvalClassificationError = 0.55273438 * 2560; time = 0.1659s; samplesPerSecond = 15431.8
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.98267365 * 2560; EvalClassificationError = 0.54023438 * 2560; time = 0.1650s; samplesPerSecond = 15519.6
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.93130722 * 2560; EvalClassificationError = 0.52773437 * 2560; time = 0.1673s; samplesPerSecond = 15304.3
08/16/2016 09:40:19:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91975632 * 2560; EvalClassificationError = 0.51718750 * 2560; time = 0.1676s; samplesPerSecond = 15271.2
08/16/2016 09:40:20:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.90691223 * 2560; EvalClassificationError = 0.52734375 * 2560; time = 0.1689s; samplesPerSecond = 15158.1
08/16/2016 09:40:20: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.98262730 * 20480; EvalClassificationError = 0.53994141 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.34387s
08/16/2016 09:40:20: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.2'

08/16/2016 09:40:20: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

08/16/2016 09:40:20: Starting minibatch loop.
08/16/2016 09:40:20:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.90951138 * 10240; EvalClassificationError = 0.52617187 * 10240; time = 0.5521s; samplesPerSecond = 18547.5
08/16/2016 09:40:21:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.93082523 * 10240; EvalClassificationError = 0.54072266 * 10240; time = 0.5398s; samplesPerSecond = 18969.0
08/16/2016 09:40:21: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.92016830 * 20480; EvalClassificationError = 0.53344727 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=1.09794s
08/16/2016 09:40:21: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn'
08/16/2016 09:40:21: CNTKCommandTrainEnd: speechTrain

08/16/2016 09:40:21: Action "train" complete.


08/16/2016 09:40:21: ##############################################################################
08/16/2016 09:40:21: #                                                                            #
08/16/2016 09:40:21: # Action "write"                                                             #
08/16/2016 09:40:21: #                                                                            #
08/16/2016 09:40:21: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 12 are shared as 3, and 13 are not shared.

	{ CrossEntropyWithSoftmax : [1]
	  EvalClassificationError : [1]
	  PosteriorProb : [132 x 1 x *1] }
	{ H1 : [512 x 1 x *1]
	  W0*features : [512 x *1]
	  W1*H1+B1 : [512 x 1 x *1]
	  W2*H1 : [132 x 1 x *1] }
	{ H2 : [512 x 1 x *1]
	  HLast : [132 x 1 x *1]
	  MVNormalizedFeatures : [363 x *1]
	  W0*features+B0 : [512 x 1 x *1]
	  W1*H1 : [512 x 1 x *1] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816093739.204785\Speech\DNN_WriteCommand@release_cpu/Output*
Total Samples Evaluated = 3250

08/16/2016 09:40:22: Action "write" complete.

08/16/2016 09:40:22: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /cygdrive/c/Users/svcphil/AppData/Local/Temp/cntk-test-20160816093739.204785/Speech/DNN_WriteCommand@release_cpu/Output.ScaledLogLikelihood.diff
