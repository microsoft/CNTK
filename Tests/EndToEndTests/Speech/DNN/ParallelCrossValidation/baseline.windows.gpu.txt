=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 D:\src\cntk\x64\release\cntk.exe configFile=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation/cntkcv.cntk currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DeviceId=0 numCPUThreads=20 stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr_speechTrain.logrank0
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Mar  1 2016 17:03:02
MPI Rank 0: 		Last modified date: Fri Feb 26 14:22:38 2016
MPI Rank 0: 		Build type: Release
MPI Rank 0: 		Build target: GPU
MPI Rank 0: 		With 1bit-SGD: no
MPI Rank 0: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 0: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 0: 		CUDNN_PATH: C:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 		Build Branch: weixi/pcv
MPI Rank 0: 		Build SHA1: 6cb3b9d86a12663b8b08404811e7d882815f2326 (modified)
MPI Rank 0: 		Built by weixi on GCRCN0509
MPI Rank 0: 		Build Path: D:\src\cntk\Source\CNTK\
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on GCRCN0509 at 2016/03/02 01:24:13
MPI Rank 0: command line: 
MPI Rank 0: D:\src\cntk\x64\release\cntk.exe configFile=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation/cntkcv.cntk currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DeviceId=0 numCPUThreads=20 stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "double"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 64
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: 	cvreader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.cv.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 0: OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=20
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "double"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 64
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: 	cvreader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.cv.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 0: OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=20
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntkcv.cntk:command=speechTrain
MPI Rank 0: configparameters: cntkcv.cntk:ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 0: configparameters: cntkcv.cntk:currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntkcv.cntk:DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntkcv.cntk:deviceId=0
MPI Rank 0: configparameters: cntkcv.cntk:numCPUThreads=20
MPI Rank 0: configparameters: cntkcv.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: configparameters: cntkcv.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntkcv.cntk:precision=double
MPI Rank 0: configparameters: cntkcv.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 0: configparameters: cntkcv.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 64
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: 	cvreader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.cv.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntkcv.cntk:stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 20 CPU threads
MPI Rank 0: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: reading script file glob_0000.cv.scp ... 300 entries
MPI Rank 0: total 132 state names in state list D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...........................................................................feature set 0: 83050 frames in 300 out of 300 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 300 utterances grouped into 1 chunks, av. chunk size: 300.0 utterances, 83050.0 frames
MPI Rank 0: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 17 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: SamplesSeen = 640; TrainLossPerSample =  4.52102408; EvalErr[0]PerSample = 0.92656250; TotalTime = 0.0775s; SamplesPerSecond = 8260.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.21764659; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.0723s; SamplesPerSecond = 8850.8
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.92251861; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.0731s; SamplesPerSecond = 8757.3
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.91289446; EvalErr[0]PerSample = 0.88750000; TotalTime = 0.0734s; SamplesPerSecond = 8717.9
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84057836; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.0723s; SamplesPerSecond = 8847.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71077800; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.0737s; SamplesPerSecond = 8684.4
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.50986627; EvalErr[0]PerSample = 0.81718750; TotalTime = 0.0696s; SamplesPerSecond = 9190.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.47993705; EvalErr[0]PerSample = 0.81250000; TotalTime = 0.0695s; SamplesPerSecond = 9215.3
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.33550558; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.0701s; SamplesPerSecond = 9133.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.49726054; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.0698s; SamplesPerSecond = 9172.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21905375; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.0730s; SamplesPerSecond = 8767.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31461145; EvalErr[0]PerSample = 0.79062500; TotalTime = 0.0725s; SamplesPerSecond = 8828.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.15950802; EvalErr[0]PerSample = 0.77968750; TotalTime = 0.0736s; SamplesPerSecond = 8692.7
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.07762131; EvalErr[0]PerSample = 0.77187500; TotalTime = 0.0730s; SamplesPerSecond = 8769.6
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05637351; EvalErr[0]PerSample = 0.72187500; TotalTime = 0.0723s; SamplesPerSecond = 8852.9
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91153531; EvalErr[0]PerSample = 0.69062500; TotalTime = 0.0728s; SamplesPerSecond = 8786.9
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.89745725; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.0722s; SamplesPerSecond = 8861.6
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.72829961; EvalErr[0]PerSample = 0.65312500; TotalTime = 0.0732s; SamplesPerSecond = 8743.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.65806444; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.0727s; SamplesPerSecond = 8801.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.66604147; EvalErr[0]PerSample = 0.66093750; TotalTime = 0.0724s; SamplesPerSecond = 8835.8
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.53915697; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.0725s; SamplesPerSecond = 8825.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61937093; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.0725s; SamplesPerSecond = 8832.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51539473; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.0725s; SamplesPerSecond = 8822.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47301309; EvalErr[0]PerSample = 0.64218750; TotalTime = 0.0723s; SamplesPerSecond = 8846.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.42748799; EvalErr[0]PerSample = 0.61250000; TotalTime = 0.0725s; SamplesPerSecond = 8829.2
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.42204482; EvalErr[0]PerSample = 0.62500000; TotalTime = 0.0721s; SamplesPerSecond = 8880.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17342812; EvalErr[0]PerSample = 0.56718750; TotalTime = 0.0721s; SamplesPerSecond = 8875.1
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31290374; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.0721s; SamplesPerSecond = 8874.0
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26008782; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.0730s; SamplesPerSecond = 8770.8
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15763314; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.0723s; SamplesPerSecond = 8854.5
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.23496000; EvalErr[0]PerSample = 0.59531250; TotalTime = 0.0721s; SamplesPerSecond = 8875.6
MPI Rank 0:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25712791; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.0723s; SamplesPerSecond = 8848.2
MPI Rank 0: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.000912; EvalErrPerSample = 0.72744141; AvgLearningRatePerSample = 0.015625; EpochTime=2.33396
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: Final Results: Minibatch[1-1298]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 2.1123249    Perplexity = 8.2674399    EvalErrorPrediction: ErrorPrediction/Sample = 0.56936785    
MPI Rank 0: Finished Epoch[ 1 of 3]: [Validation Set] TrainLossPerSample = 2.1123249; EvalErrPerSample = 0.56936785
MPI Rank 0: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09679725; EvalErr[0]PerSample = 0.56328125; TotalTime = 0.0851s; SamplesPerSecond = 30086.9
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.99204361; EvalErr[0]PerSample = 0.54648438; TotalTime = 0.0803s; SamplesPerSecond = 31900.3
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.99681229; EvalErr[0]PerSample = 0.54882813; TotalTime = 0.0812s; SamplesPerSecond = 31536.0
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90894475; EvalErr[0]PerSample = 0.52929688; TotalTime = 0.0809s; SamplesPerSecond = 31646.4
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.89584567; EvalErr[0]PerSample = 0.52500000; TotalTime = 0.0813s; SamplesPerSecond = 31473.6
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90450680; EvalErr[0]PerSample = 0.54062500; TotalTime = 0.0820s; SamplesPerSecond = 31224.8
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91141823; EvalErr[0]PerSample = 0.53203125; TotalTime = 0.0811s; SamplesPerSecond = 31553.5
MPI Rank 0:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.87590201; EvalErr[0]PerSample = 0.52460938; TotalTime = 0.0827s; SamplesPerSecond = 30964.6
MPI Rank 0: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9477838; EvalErrPerSample = 0.53876953; AvgLearningRatePerSample = 0.001953125; EpochTime=0.66369
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: Final Results: Minibatch[1-325]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 1.8690699    Perplexity = 6.4822646    EvalErrorPrediction: ErrorPrediction/Sample = 0.52003612    
MPI Rank 0: Finished Epoch[ 2 of 3]: [Validation Set] TrainLossPerSample = 1.8690699; EvalErrPerSample = 0.52003612
MPI Rank 0: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.87890619; EvalErr[0]PerSample = 0.52246094; TotalTime = 0.1452s; SamplesPerSecond = 70538.0
MPI Rank 0:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88442887; EvalErr[0]PerSample = 0.51699219; TotalTime = 0.1342s; SamplesPerSecond = 76305.7
MPI Rank 0: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8816675; EvalErrPerSample = 0.51972656; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=0.289387
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: Final Results: Minibatch[1-82]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 1.8458415    Perplexity = 6.3334268    EvalErrorPrediction: ErrorPrediction/Sample = 0.50965683    
MPI Rank 0: Finished Epoch[ 3 of 3]: [Validation Set] TrainLossPerSample = 1.8458415; EvalErrPerSample = 0.50965683
MPI Rank 0: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr_speechTrain.logrank1
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Mar  1 2016 17:03:02
MPI Rank 1: 		Last modified date: Fri Feb 26 14:22:38 2016
MPI Rank 1: 		Build type: Release
MPI Rank 1: 		Build target: GPU
MPI Rank 1: 		With 1bit-SGD: no
MPI Rank 1: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 1: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 1: 		CUDNN_PATH: C:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 		Build Branch: weixi/pcv
MPI Rank 1: 		Build SHA1: 6cb3b9d86a12663b8b08404811e7d882815f2326 (modified)
MPI Rank 1: 		Built by weixi on GCRCN0509
MPI Rank 1: 		Build Path: D:\src\cntk\Source\CNTK\
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on GCRCN0509 at 2016/03/02 01:24:13
MPI Rank 1: command line: 
MPI Rank 1: D:\src\cntk\x64\release\cntk.exe configFile=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation/cntkcv.cntk currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu DeviceId=0 numCPUThreads=20 stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "double"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 64
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: 	cvreader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.cv.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 1: OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=20
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "double"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 64
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: 	cvreader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.cv.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 1: OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=20
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntkcv.cntk:command=speechTrain
MPI Rank 1: configparameters: cntkcv.cntk:ConfigDir=D:\src\cntk\Tests\EndToEndTests\Speech\DNN\ParallelCrossValidation
MPI Rank 1: configparameters: cntkcv.cntk:currentDirectory=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntkcv.cntk:DataDir=D:\src\cntk\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntkcv.cntk:deviceId=0
MPI Rank 1: configparameters: cntkcv.cntk:numCPUThreads=20
MPI Rank 1: configparameters: cntkcv.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: configparameters: cntkcv.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntkcv.cntk:precision=double
MPI Rank 1: configparameters: cntkcv.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu
MPI Rank 1: configparameters: cntkcv.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 64
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: 	cvreader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.cv.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntkcv.cntk:stderr=C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 20 CPU threads
MPI Rank 1: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160301172412.673018\Speech\DNN_ParallelCrossValidation@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 3
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: reading script file glob_0000.cv.scp ... 300 entries
MPI Rank 1: total 132 state names in state list D:\src\cntk\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file D:\src\cntk\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...........................................................................feature set 0: 83050 frames in 300 out of 300 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 300 utterances grouped into 1 chunks, av. chunk size: 300.0 utterances, 83050.0 frames
MPI Rank 1: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 17 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363 x *]) -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363 x *]) -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363 x *], MeanOfFeatures[363], InvStdOfFeatures[363]) -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times(W0[512 x 363], MVNormalizedFeatures[363 x *]) -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512 x *], B0[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512 x 512], H1[512 x 1 x *]) -> [512 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512 x *], B1[512 x 1]) -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512 x 1 x *]) -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132 x 512], H2[512 x 1 x *]) -> [132 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132 x *], B2[132 x 1]) -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132 x *], HLast[132 x 1 x *]) -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132 x 1 x *]) -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean(labels[132 x *]) -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132]) -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132 x 1 x *], LogOfPrior[132]) -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: SamplesSeen = 640; TrainLossPerSample =  4.52102408; EvalErr[0]PerSample = 0.92656250; TotalTime = 0.0776s; SamplesPerSecond = 8247.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.21764659; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.0723s; SamplesPerSecond = 8850.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.92251861; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.0731s; SamplesPerSecond = 8756.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.91289446; EvalErr[0]PerSample = 0.88750000; TotalTime = 0.0733s; SamplesPerSecond = 8737.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84057836; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.0724s; SamplesPerSecond = 8843.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71077800; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.0737s; SamplesPerSecond = 8683.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.50986627; EvalErr[0]PerSample = 0.81718750; TotalTime = 0.0697s; SamplesPerSecond = 9188.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.47993705; EvalErr[0]PerSample = 0.81250000; TotalTime = 0.0694s; SamplesPerSecond = 9218.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.33550558; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.0702s; SamplesPerSecond = 9111.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.49726054; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.0696s; SamplesPerSecond = 9191.6
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.21905375; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.0732s; SamplesPerSecond = 8747.8
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.31461145; EvalErr[0]PerSample = 0.79062500; TotalTime = 0.0725s; SamplesPerSecond = 8824.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.15950802; EvalErr[0]PerSample = 0.77968750; TotalTime = 0.0736s; SamplesPerSecond = 8690.8
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.07762131; EvalErr[0]PerSample = 0.77187500; TotalTime = 0.0730s; SamplesPerSecond = 8766.9
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.05637351; EvalErr[0]PerSample = 0.72187500; TotalTime = 0.0721s; SamplesPerSecond = 8871.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91153531; EvalErr[0]PerSample = 0.69062500; TotalTime = 0.0729s; SamplesPerSecond = 8776.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.89745725; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.0721s; SamplesPerSecond = 8871.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.72829961; EvalErr[0]PerSample = 0.65312500; TotalTime = 0.0732s; SamplesPerSecond = 8740.9
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.65806444; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.0729s; SamplesPerSecond = 8777.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.66604147; EvalErr[0]PerSample = 0.66093750; TotalTime = 0.0725s; SamplesPerSecond = 8833.3
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.53915697; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.0724s; SamplesPerSecond = 8844.7
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61937093; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.0727s; SamplesPerSecond = 8808.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.51539473; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.0726s; SamplesPerSecond = 8820.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47301309; EvalErr[0]PerSample = 0.64218750; TotalTime = 0.0724s; SamplesPerSecond = 8845.0
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.42748799; EvalErr[0]PerSample = 0.61250000; TotalTime = 0.0725s; SamplesPerSecond = 8829.2
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.42204482; EvalErr[0]PerSample = 0.62500000; TotalTime = 0.0721s; SamplesPerSecond = 8879.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17342812; EvalErr[0]PerSample = 0.56718750; TotalTime = 0.0721s; SamplesPerSecond = 8875.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31290374; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.0720s; SamplesPerSecond = 8894.9
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26008782; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.0731s; SamplesPerSecond = 8749.4
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15763314; EvalErr[0]PerSample = 0.57968750; TotalTime = 0.0723s; SamplesPerSecond = 8853.1
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.23496000; EvalErr[0]PerSample = 0.59531250; TotalTime = 0.0721s; SamplesPerSecond = 8874.5
MPI Rank 1:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25712791; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.0723s; SamplesPerSecond = 8847.5
MPI Rank 1: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.000912; EvalErrPerSample = 0.72744141; AvgLearningRatePerSample = 0.015625; EpochTime=2.33402
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: Final Results: Minibatch[1-1298]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 2.1123249    Perplexity = 8.2674399    EvalErrorPrediction: ErrorPrediction/Sample = 0.56936785    
MPI Rank 1: Finished Epoch[ 1 of 3]: [Validation Set] TrainLossPerSample = 2.1123249; EvalErrPerSample = 0.56936785
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.09679725; EvalErr[0]PerSample = 0.56328125; TotalTime = 0.0851s; SamplesPerSecond = 30067.4
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.99204361; EvalErr[0]PerSample = 0.54648438; TotalTime = 0.0804s; SamplesPerSecond = 31827.3
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.99681229; EvalErr[0]PerSample = 0.54882813; TotalTime = 0.0811s; SamplesPerSecond = 31565.6
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90894475; EvalErr[0]PerSample = 0.52929688; TotalTime = 0.0810s; SamplesPerSecond = 31613.5
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.89584567; EvalErr[0]PerSample = 0.52500000; TotalTime = 0.0812s; SamplesPerSecond = 31537.6
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.90450680; EvalErr[0]PerSample = 0.54062500; TotalTime = 0.0820s; SamplesPerSecond = 31226.4
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91141823; EvalErr[0]PerSample = 0.53203125; TotalTime = 0.0811s; SamplesPerSecond = 31552.4
MPI Rank 1:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.87590201; EvalErr[0]PerSample = 0.52460938; TotalTime = 0.0827s; SamplesPerSecond = 30962.7
MPI Rank 1: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9477838; EvalErrPerSample = 0.53876953; AvgLearningRatePerSample = 0.001953125; EpochTime=0.663724
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: Final Results: Minibatch[1-325]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 1.8690699    Perplexity = 6.4822646    EvalErrorPrediction: ErrorPrediction/Sample = 0.52003612    
MPI Rank 1: Finished Epoch[ 2 of 3]: [Validation Set] TrainLossPerSample = 1.8690699; EvalErrPerSample = 0.52003612
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 64), distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.87890619; EvalErr[0]PerSample = 0.52246094; TotalTime = 0.1466s; SamplesPerSecond = 69830.9
MPI Rank 1:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88442887; EvalErr[0]PerSample = 0.51699219; TotalTime = 0.1342s; SamplesPerSecond = 76320.5
MPI Rank 1: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8816675; EvalErrPerSample = 0.51972656; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=0.289375
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: minibatchiterator: epoch 0: frames [0..83050] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: Final Results: Minibatch[1-82]: Samples Seen = 83050    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 1.8458415    Perplexity = 6.3334268    EvalErrorPrediction: ErrorPrediction/Sample = 0.50965683    
MPI Rank 1: Finished Epoch[ 3 of 3]: [Validation Set] TrainLossPerSample = 1.8458415; EvalErrPerSample = 0.50965683
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
