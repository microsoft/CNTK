CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3550 @ 3.07GHz
    Hardware threads: 4
    Total Memory: 12580388 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
08/16/2016 03:11:19: -------------------------------------------------------------------
08/16/2016 03:11:19: Build info: 

08/16/2016 03:11:19: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:11:19: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:11:19: 		Build type: Release
08/16/2016 03:11:19: 		Build target: GPU
08/16/2016 03:11:19: 		With 1bit-SGD: no
08/16/2016 03:11:19: 		Math lib: mkl
08/16/2016 03:11:19: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:11:19: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:11:19: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:11:19: 		Build Branch: HEAD
08/16/2016 03:11:19: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:11:19: 		Built by svcphil on Philly-Pool3
08/16/2016 03:11:19: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:11:19: -------------------------------------------------------------------
08/16/2016 03:11:20: -------------------------------------------------------------------
08/16/2016 03:11:20: GPU info:

08/16/2016 03:11:20: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/16/2016 03:11:20: -------------------------------------------------------------------

08/16/2016 03:11:20: Running on cntk-muc02 at 2016/08/16 03:11:20
08/16/2016 03:11:20: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu  DeviceId=0  timestamping=true



08/16/2016 03:11:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:11:20: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        // dimensions (needed for both model and readers)
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        model (features) = [
            useSelfStabilization = true
            // hidden dimensions
            innerCellDim  = 1024
            hiddenDim     = 256
            numLSTMLayers = 3        // number of hidden LSTM model layers
            feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);
            featNorm = MeanVarNorm(feashift)
            // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
            Stabilize (x, enabled=true) =
                if enabled
                then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                    result = beta .* x
                ].result
                else x
            LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
            [
                _privateInnards = [       // encapsulate the inner workings
                    dh = prevState.h // previous values
                    dc = prevState.c
                    // parameter macros--these carry their own weight matrices
                    B() = BS.Parameters.BiasParam (cellDim)
                    W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                    H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                    C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                    // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                    it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                    bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                    ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                    bft = ft .* dc                                     // applied to cell(t-1)
                    ct = bft + bit                                     // c(t) is sum of both
                    ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                    ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
                ]
                c = _privateInnards.ct          // cell value
                h = if outputDim != cellDim     // output/hidden state
                    then [                      // project
                        Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                        htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                    ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                    else _privateInnards.ht     // no projection
                dim = outputDim
            ]
            RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
            [
                prevState = previousHook (lstmState)
                inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
                lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
            ].lstmState // we return the state record (h,c)
            // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
            S(x) = Stabilize (x, enabled=useSelfStabilization)
            LSTMoutput[k:1..numLSTMLayers] =
                if k == 1
                then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
                else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
            // and add a softmax layer on top
            W = BS.Parameters.WeightParam (labelDim, hiddenDim)
            B = BS.Parameters.BiasParam   (labelDim)
            z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        ].z
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        // link model to inputs
        z = model (realFeatures)
        // link model to training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:11:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:11:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:11:20: precision = "float"
deviceId = 0
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        // dimensions (needed for both model and readers)
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        model (features) = [
            useSelfStabilization = true
            // hidden dimensions
            innerCellDim  = 1024
            hiddenDim     = 256
            numLSTMLayers = 3        // number of hidden LSTM model layers
            feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);
            featNorm = MeanVarNorm(feashift)
            // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
            Stabilize (x, enabled=true) =
                if enabled
                then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                    result = beta .* x
                ].result
                else x
            LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
            [
                _privateInnards = [       // encapsulate the inner workings
                    dh = prevState.h // previous values
                    dc = prevState.c
                    // parameter macros--these carry their own weight matrices
                    B() = BS.Parameters.BiasParam (cellDim)
                    W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                    H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                    C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                    // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                    it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                    bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                    ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                    bft = ft .* dc                                     // applied to cell(t-1)
                    ct = bft + bit                                     // c(t) is sum of both
                    ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                    ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
                ]
                c = _privateInnards.ct          // cell value
                h = if outputDim != cellDim     // output/hidden state
                    then [                      // project
                        Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                        htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                    ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                    else _privateInnards.ht     // no projection
                dim = outputDim
            ]
            RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
            [
                prevState = previousHook (lstmState)
                inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
                lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
            ].lstmState // we return the state record (h,c)
            // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
            S(x) = Stabilize (x, enabled=useSelfStabilization)
            LSTMoutput[k:1..numLSTMLayers] =
                if k == 1
                then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
                else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
            // and add a softmax layer on top
            W = BS.Parameters.WeightParam (labelDim, hiddenDim)
            B = BS.Parameters.BiasParam   (labelDim)
            z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        ].z
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        // link model to inputs
        z = model (realFeatures)
        // link model to training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:11:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:11:20: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\LSTM
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        // dimensions (needed for both model and readers)
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        model (features) = [
            useSelfStabilization = true
            // hidden dimensions
            innerCellDim  = 1024
            hiddenDim     = 256
            numLSTMLayers = 3        // number of hidden LSTM model layers
            feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, features);
            featNorm = MeanVarNorm(feashift)
            // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
            Stabilize (x, enabled=true) =
                if enabled
                then [
beta = Exp (BS.Parameters.BiasParam ((1))) 
                    result = beta .* x
                ].result
                else x
            LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
            [
                _privateInnards = [       // encapsulate the inner workings
                    dh = prevState.h // previous values
                    dc = prevState.c
                    // parameter macros--these carry their own weight matrices
                    B() = BS.Parameters.BiasParam (cellDim)
                    W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                    H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                    C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                    // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                    it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                    bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                    ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                    bft = ft .* dc                                     // applied to cell(t-1)
                    ct = bft + bit                                     // c(t) is sum of both
                    ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                    ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
                ]
                c = _privateInnards.ct          // cell value
                h = if outputDim != cellDim     // output/hidden state
                    then [                      // project
                        Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                        htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                    ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                    else _privateInnards.ht     // no projection
                dim = outputDim
            ]
            RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
            [
                prevState = previousHook (lstmState)
                inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
                lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
            ].lstmState // we return the state record (h,c)
            // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
            S(x) = Stabilize (x, enabled=useSelfStabilization)
            LSTMoutput[k:1..numLSTMLayers] =
                if k == 1
                then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
                else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
            // and add a softmax layer on top
            W = BS.Parameters.WeightParam (labelDim, hiddenDim)
            B = BS.Parameters.BiasParam   (labelDim)
            z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        ].z
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        // link model to inputs
        z = model (realFeatures)
        // link model to training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=true
08/16/2016 03:11:20: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:11:20: Commands: speechTrain
08/16/2016 03:11:20: Precision = "float"
08/16/2016 03:11:20: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn
08/16/2016 03:11:20: CNTKCommandTrainInfo: speechTrain : 4
08/16/2016 03:11:20: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

08/16/2016 03:11:20: ##############################################################################
08/16/2016 03:11:20: #                                                                            #
08/16/2016 03:11:20: # Action "train"                                                             #
08/16/2016 03:11:20: #                                                                            #
08/16/2016 03:11:20: ##############################################################################

08/16/2016 03:11:20: CNTKCommandTrainBegin: speechTrain
reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:11:20: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[256 x 1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 33] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024 x 256] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 1.000000.

Post-processing network...

6 roots:
	ScaledLogLikelihood = Pass()
	ce = SumElements()
	err = SumElements()
	logPrior._ = Mean()
	z.featNorm.invStdDev = InvStdDev()
	z.featNorm.mean = Mean()

Loop[0] --> Loop_z.LSTMoutput[1].lstmState.h.htp -> 35 nodes

	z.LSTMoutput[1].prevState.h	z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0]	z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0]	z.LSTMoutput[1].prevState.c	z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]	z.LSTMoutput[1].lstmState._privateInnards.ft._	z.LSTMoutput[1].lstmState._privateInnards.ft
	z.LSTMoutput[1].lstmState._privateInnards.bft	z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0]	z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]
	z.LSTMoutput[1].lstmState._privateInnards.it._	z.LSTMoutput[1].lstmState._privateInnards.it	z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	z.LSTMoutput[1].lstmState._privateInnards.bit	z.LSTMoutput[1].lstmState._privateInnards.ct
	z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]	z.LSTMoutput[1].lstmState._privateInnards.ot._
	z.LSTMoutput[1].lstmState._privateInnards.ot	z.LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	z.LSTMoutput[1].lstmState._privateInnards.ht
	z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	z.LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_z.LSTMoutput[2].lstmState.h.htp -> 35 nodes

	z.LSTMoutput[2].prevState.h	z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0]	z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0]	z.LSTMoutput[2].prevState.c	z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]	z.LSTMoutput[2].lstmState._privateInnards.ft._	z.LSTMoutput[2].lstmState._privateInnards.ft
	z.LSTMoutput[2].lstmState._privateInnards.bft	z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0]	z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]
	z.LSTMoutput[2].lstmState._privateInnards.it._	z.LSTMoutput[2].lstmState._privateInnards.it	z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	z.LSTMoutput[2].lstmState._privateInnards.bit	z.LSTMoutput[2].lstmState._privateInnards.ct
	z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]	z.LSTMoutput[2].lstmState._privateInnards.ot._
	z.LSTMoutput[2].lstmState._privateInnards.ot	z.LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	z.LSTMoutput[2].lstmState._privateInnards.ht
	z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	z.LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_z.LSTMoutput[3].lstmState.h.htp -> 35 nodes

	z.LSTMoutput[3].prevState.h	z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0]	z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0]	z.LSTMoutput[3].prevState.c	z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result
	z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]	z.LSTMoutput[3].lstmState._privateInnards.ft._	z.LSTMoutput[3].lstmState._privateInnards.ft
	z.LSTMoutput[3].lstmState._privateInnards.bft	z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]
	z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0]	z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]
	z.LSTMoutput[3].lstmState._privateInnards.it._	z.LSTMoutput[3].lstmState._privateInnards.it	z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	z.LSTMoutput[3].lstmState._privateInnards.bit	z.LSTMoutput[3].lstmState._privateInnards.ct
	z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result	z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]	z.LSTMoutput[3].lstmState._privateInnards.ot._
	z.LSTMoutput[3].lstmState._privateInnards.ot	z.LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	z.LSTMoutput[3].lstmState._privateInnards.ht
	z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	z.LSTMoutput[3].lstmState.h.htp

Validating network. 286 nodes to process in pass 1.

Validating --> z.W = LearnableParameter() :  -> [132 x 256]
Validating --> z.z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.z.PlusArgs[0].TimesArgs[1].beta = Exp (z.z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> z.feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> z.featNorm.mean = Mean (z.feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> z.featNorm.ElementTimesArgs[0] = Minus (z.feashift, z.featNorm.mean) : [33 x 1 x *], [33 x 1] -> [33 x 1 x *]
Validating --> z.featNorm.invStdDev = InvStdDev (z.feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> z.featNorm = ElementTimes (z.featNorm.ElementTimesArgs[0], z.featNorm.invStdDev) : [33 x 1 x *], [33 x 1] -> [33 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, z.featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._ = Plus (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (z.LSTMoutput[1].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft, z.LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] = Plus (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._ = Plus (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (z.LSTMoutput[1].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it, z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ct = Plus (z.LSTMoutput[1].lstmState._privateInnards.bft, z.LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._ = Plus (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (z.LSTMoutput[1].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (z.LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot, z.LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, z.LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState.h.htp = Times (z.LSTMoutput[1].lstmState.h.Wmr, z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._ = Plus (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (z.LSTMoutput[2].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft, z.LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] = Plus (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._ = Plus (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (z.LSTMoutput[2].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it, z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ct = Plus (z.LSTMoutput[2].lstmState._privateInnards.bft, z.LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._ = Plus (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (z.LSTMoutput[2].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (z.LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot, z.LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, z.LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState.h.htp = Times (z.LSTMoutput[2].lstmState.h.Wmr, z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ = LearnableParameter() :  -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._) : [1] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._ = Plus (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (z.LSTMoutput[3].lstmState._privateInnards.ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft, z.LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] = Plus (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._ = Plus (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (z.LSTMoutput[3].lstmState._privateInnards.it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it, z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ct = Plus (z.LSTMoutput[3].lstmState._privateInnards.bft, z.LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1] = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._ = Plus (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (z.LSTMoutput[3].lstmState._privateInnards.ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (z.LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot, z.LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, z.LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState.h.htp = Times (z.LSTMoutput[3].lstmState.h.Wmr, z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.z.PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.z.PlusArgs[0] = Times (z.W, z.z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> z.B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.z.PlusArgs[0], z.B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood._ = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood._) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> ce.matrix.MinusArgs[0] = ReduceElements (z) : [132 x 1 x *] -> [1 x *]
Validating --> ce.matrix.MinusArgs[1] = TransposeTimes (labels, z) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> ce.matrix = Minus (ce.matrix.MinusArgs[0], ce.matrix.MinusArgs[1]) : [1 x *], [1 x 1 x *] -> [1 x 1 x *]
Validating --> ce = SumElements (ce.matrix) : [1 x 1 x *] -> [1]
Validating --> BS.Constants.One = LearnableParameter() :  -> [1]
Validating --> err.matrix.MinusArgs[1].rightMatrix = Hardmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> err.matrix.MinusArgs[1] = TransposeTimes (labels, err.matrix.MinusArgs[1].rightMatrix) : [132 x *], [132 x 1 x *] -> [1 x 1 x *]
Validating --> err.matrix = Minus (BS.Constants.One, err.matrix.MinusArgs[1]) : [1], [1 x 1 x *] -> [1 x 1 x *]
Validating --> err = SumElements (err.matrix) : [1 x 1 x *] -> [1]

Validating network. 196 nodes to process in pass 2.

Validating --> z.LSTMoutput[1].prevState.h = PastValue (z.LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].prevState.c = PastValue (z.LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].prevState.h = PastValue (z.LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].prevState.c = PastValue (z.LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].prevState.h = PastValue (z.LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].prevState.c = PastValue (z.LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] = Times (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta, z.LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, z.LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 286 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:11:20: Created model with 286 nodes on GPU 0.

08/16/2016 03:11:20: Training criterion node(s):
08/16/2016 03:11:20: 	ce = SumElements

08/16/2016 03:11:20: Evaluation criterion node(s):
08/16/2016 03:11:20: 	err = SumElements


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 555 matrices, 347 are shared as 132, and 208 are not shared.

	{ z.LSTMoutput[2].lstmState.h.htp : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[3].prevState.h : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].prevState.c : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._ : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 33] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 33] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 33] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.z.PlusArgs[0] : [132 x 1 x *]
	  z.z.PlusArgs[0].TimesArgs[1].beta : [1] (gradient) }
	{ ce.matrix.MinusArgs[1] : [1 x 1 x *]
	  z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta : [1] (gradient)
	  z.z.PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].prevState.h : [256 x 1 x *] }
	{ ce.matrix : [1 x 1 x *]
	  z : [132 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState.h.Wmr : [256 x 1024] (gradient)
	  z.z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z : [132 x 1 x *]
	  z.W : [132 x 256] (gradient) }
	{ ce.matrix.MinusArgs[0] : [1 x *]
	  z.LSTMoutput[3].lstmState.h.htp : [256 x 1 x *] (gradient)
	  z.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
	{ ce.matrix.MinusArgs[1] : [1 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ht : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bft : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].prevState.c : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it : [1024 x 1 x *] (gradient) }
	{ ce.matrix.MinusArgs[0] : [1 x *] (gradient)
	  z.B : [132] (gradient) }
	{ ce.matrix : [1 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ht : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ct : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._ : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bft : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bft : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[1].prevState.h : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._ : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState.h.Wmr : [256 x 1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState.h.htp : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].prevState.c : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].prevState.c : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._ : [1] (gradient) }
	{ z.LSTMoutput[2].lstmState.h.Wmr : [256 x 1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *]
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bft : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].prevState.h : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] : [1024 x 33] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._ : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._ : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ht : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].prevState.h : [256 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bft : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._ : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0] : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.it : [1024 x 1 x *] }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient)
	  z.LSTMoutput[2].prevState.h : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ct : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.bit : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [33 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].prevState.c : [1024 x 1 x *] }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].result : [256 x 1 x *] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1] : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._ : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta : [1] (gradient) }
	{ z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result : [256 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] : [1024] (gradient) }
	{ z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] : [1024 x 1 x *] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].result : [1024 x 1 x *] (gradient) }
	{ z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] : [1024 x 256] (gradient)
	  z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta : [1] (gradient)
	  z.LSTMoutput[3].lstmState._privateInnards.ft._ : [1024 x 1 x *] (gradient) }


08/16/2016 03:11:20: Training 6219945 parameters in 87 out of 87 parameter tensors and 269 nodes with gradient:

08/16/2016 03:11:20: 	Node 'z.B' (LearnableParameter operation) : [132]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 33]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 33]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 33]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 33]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState.h.Wmr' (LearnableParameter operation) : [256 x 1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState.h.Wmr' (LearnableParameter operation) : [256 x 1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ft._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.it._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0]' (LearnableParameter operation) : [1024 x 256]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[0]' (LearnableParameter operation) : [1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState._privateInnards.ot._.PlusArgs[1].ElementTimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState.h.Wmr' (LearnableParameter operation) : [256 x 1024]
08/16/2016 03:11:20: 	Node 'z.LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta._' (LearnableParameter operation) : [1]
08/16/2016 03:11:20: 	Node 'z.W' (LearnableParameter operation) : [132 x 256]
08/16/2016 03:11:20: 	Node 'z.z.PlusArgs[0].TimesArgs[1].beta._' (LearnableParameter operation) : [1]


08/16/2016 03:11:20: Precomputing --> 3 PreCompute nodes found.

08/16/2016 03:11:20: 	z.featNorm.mean = Mean()
08/16/2016 03:11:20: 	z.featNorm.invStdDev = InvStdDev()
08/16/2016 03:11:20: 	logPrior._ = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 03:11:22: Precomputing --> Completed.


08/16/2016 03:11:22: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/16/2016 03:11:22: Starting minibatch loop.
08/16/2016 03:11:26:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: ce = 4.76563782 * 6400; err = 0.88187500 * 6400; time = 3.5921s; samplesPerSecond = 1781.7
08/16/2016 03:11:29:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: ce = 4.59046021 * 6400; err = 0.88515625 * 6400; time = 3.6261s; samplesPerSecond = 1765.0
08/16/2016 03:11:34:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: ce = 4.44501317 * 5494; err = 0.90880961 * 5494; time = 4.5167s; samplesPerSecond = 1216.4
08/16/2016 03:11:38:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: ce = 4.05334248 * 2062; err = 0.88506305 * 2062; time = 3.8803s; samplesPerSecond = 531.4
08/16/2016 03:11:39: Finished Epoch[ 1 of 4]: [Training] ce = 4.54268366 * 20498; err = 0.89018441 * 20498; totalSamplesSeen = 20498; learningRatePerSample = 0.00078125001; epochTime=17.0046s
08/16/2016 03:11:39: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn.1'

08/16/2016 03:11:40: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20498), data subset 0 of 1, with 1 datapasses

08/16/2016 03:11:40: Starting minibatch loop.
08/16/2016 03:11:43:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: ce = 3.79669434 * 6400; err = 0.82656250 * 6400; time = 3.4624s; samplesPerSecond = 1848.5
08/16/2016 03:11:47:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: ce = 3.69113403 * 6400; err = 0.84906250 * 6400; time = 3.5555s; samplesPerSecond = 1800.0
08/16/2016 03:11:51:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: ce = 3.29124961 * 5626; err = 0.78137220 * 5626; time = 4.0552s; samplesPerSecond = 1387.4
08/16/2016 03:11:55:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: ce = 3.36787152 * 1816; err = 0.83920705 * 1816; time = 3.8030s; samplesPerSecond = 477.5
08/16/2016 03:11:58:  Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: ce = 3.76700368 * 238; err = 0.92016807 * 238; time = 3.4193s; samplesPerSecond = 69.6
08/16/2016 03:11:59: Finished Epoch[ 2 of 4]: [Training] ce = 3.58466322 * 20514; err = 0.82343765 * 20514; totalSamplesSeen = 41012; learningRatePerSample = 0.00078125001; epochTime=18.9919s
08/16/2016 03:11:59: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn.2'

08/16/2016 03:12:00: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 41012), data subset 0 of 1, with 1 datapasses

08/16/2016 03:12:00: Starting minibatch loop.
08/16/2016 03:12:03:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: ce = 2.99737610 * 6400; err = 0.74000000 * 6400; time = 3.4327s; samplesPerSecond = 1864.4
08/16/2016 03:12:07:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: ce = 2.71373779 * 6400; err = 0.69734375 * 6400; time = 3.5854s; samplesPerSecond = 1785.0
08/16/2016 03:12:11:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: ce = 2.63009484 * 5748; err = 0.70441893 * 5748; time = 4.0463s; samplesPerSecond = 1420.5
08/16/2016 03:12:15:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: ce = 2.48010334 * 1828; err = 0.65754923 * 1828; time = 3.8070s; samplesPerSecond = 480.2
08/16/2016 03:12:16: Finished Epoch[ 3 of 4]: [Training] ce = 2.75440103 * 20598; err = 0.70890378 * 20598; totalSamplesSeen = 61610; learningRatePerSample = 0.00078125001; epochTime=16.6217s
08/16/2016 03:12:17: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn.3'

08/16/2016 03:12:17: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61610), data subset 0 of 1, with 1 datapasses

08/16/2016 03:12:17: Starting minibatch loop.
08/16/2016 03:12:21:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: ce = 2.32423950 * 6400; err = 0.61296875 * 6400; time = 3.4831s; samplesPerSecond = 1837.4
08/16/2016 03:12:24:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: ce = 2.21035980 * 6400; err = 0.61265625 * 6400; time = 3.5926s; samplesPerSecond = 1781.5
08/16/2016 03:12:28:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: ce = 2.50927253 * 5882; err = 0.66048963 * 5882; time = 4.0979s; samplesPerSecond = 1435.4
08/16/2016 03:12:32:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: ce = 2.52520483 * 1682; err = 0.66349584 * 1682; time = 3.7257s; samplesPerSecond = 451.5
08/16/2016 03:12:32: Finished Epoch[ 4 of 4]: [Training] ce = 2.35767186 * 20376; err = 0.63084020 * 20376; totalSamplesSeen = 81986; learningRatePerSample = 0.00078125001; epochTime=15.2535s
08/16/2016 03:12:33: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030156.514477\Speech\LSTM_Truncated@release_gpu/models/cntkSpeech.dnn'
08/16/2016 03:12:33: CNTKCommandTrainEnd: speechTrain

08/16/2016 03:12:33: Action "train" complete.

08/16/2016 03:12:33: __COMPLETED__