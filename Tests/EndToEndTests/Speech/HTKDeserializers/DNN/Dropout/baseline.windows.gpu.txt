CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 08/16/2016 03:03:20: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
MPI Rank 0: 08/16/2016 03:03:20: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:20: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: 		Built time: Aug 16 2016 02:54:53
MPI Rank 0: 08/16/2016 03:03:20: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 0: 08/16/2016 03:03:20: 		Build type: Release
MPI Rank 0: 08/16/2016 03:03:20: 		Build target: GPU
MPI Rank 0: 08/16/2016 03:03:20: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 03:03:20: 		Math lib: mkl
MPI Rank 0: 08/16/2016 03:03:20: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 08/16/2016 03:03:20: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 0: 08/16/2016 03:03:20: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 08/16/2016 03:03:20: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 03:03:20: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 03:03:20: 		Built by svcphil on Philly-Pool3
MPI Rank 0: 08/16/2016 03:03:20: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 08/16/2016 03:03:20: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:20: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:20: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 08/16/2016 03:03:20: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: Running on cntk-muc01 at 2016/08/16 03:03:20
MPI Rank 0: 08/16/2016 03:03:20: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:20: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:20: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 03:03:20: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 03:03:20: Commands: speechTrain
MPI Rank 0: 08/16/2016 03:03:20: Precision = "float"
MPI Rank 0: 08/16/2016 03:03:20: Using 4 CPU threads.
MPI Rank 0: 08/16/2016 03:03:20: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 03:03:20: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 03:03:20: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: ##############################################################################
MPI Rank 0: 08/16/2016 03:03:20: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:20: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 03:03:20: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:20: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:20: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Creating virgin network.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Created model with 37 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Training criterion node(s):
MPI Rank 0: 08/16/2016 03:03:21: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 03:03:21: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 03:03:21: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:21: 	featNorm.mean = Mean()
MPI Rank 0: 08/16/2016 03:03:21: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 08/16/2016 03:03:21: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:23: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:23: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:23: Starting minibatch loop.
MPI Rank 0: (GPU): creating curand object with seed 0
MPI Rank 0: (GPU): creating curand object with seed 1
MPI Rank 0: (GPU): creating curand object with seed 2
MPI Rank 0: (GPU): creating curand object with seed 3
MPI Rank 0: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 5.28622131 * 2560; err = 0.92343750 * 2560; time = 0.1279s; samplesPerSecond = 20012.8
MPI Rank 0: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 9.00316162 * 2560; err = 0.93515625 * 2560; time = 0.0689s; samplesPerSecond = 37148.8
MPI Rank 0: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.35603485 * 2560; err = 0.94414062 * 2560; time = 0.0688s; samplesPerSecond = 37215.8
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.67256317 * 2560; err = 0.89921875 * 2560; time = 0.0690s; samplesPerSecond = 37120.3
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.15976563 * 2560; err = 0.90273437 * 2560; time = 0.0691s; samplesPerSecond = 37069.8
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.01864319 * 2560; err = 0.89140625 * 2560; time = 0.0674s; samplesPerSecond = 37992.3
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.99413147 * 2560; err = 0.87929687 * 2560; time = 0.0668s; samplesPerSecond = 38298.1
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.93304749 * 2560; err = 0.88984375 * 2560; time = 0.0684s; samplesPerSecond = 37445.0
MPI Rank 0: 08/16/2016 03:03:24: Finished Epoch[ 1 of 5]: [Training] ce = 5.30294609 * 20480; err = 0.90815430 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.61039s
MPI Rank 0: 08/16/2016 03:03:24: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:24: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:24: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 4
MPI Rank 0: (GPU): creating curand object with seed 5
MPI Rank 0: (GPU): creating curand object with seed 6
MPI Rank 0: (GPU): creating curand object with seed 7
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90373861 * 2560; err = 0.87656250 * 2560; time = 0.1480s; samplesPerSecond = 17297.6
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.84557810 * 2560; err = 0.86953125 * 2560; time = 0.1139s; samplesPerSecond = 22478.0
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.80858604 * 2560; err = 0.84687500 * 2560; time = 0.1135s; samplesPerSecond = 22559.6
MPI Rank 0: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.70856071 * 2560; err = 0.82734375 * 2560; time = 0.1151s; samplesPerSecond = 22234.0
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.61108493 * 2560; err = 0.81914062 * 2560; time = 0.1135s; samplesPerSecond = 22555.3
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.45544277 * 2560; err = 0.79726562 * 2560; time = 0.1144s; samplesPerSecond = 22374.7
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.38894690 * 2560; err = 0.80195313 * 2560; time = 0.1141s; samplesPerSecond = 22439.6
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37404169 * 2560; err = 0.80351562 * 2560; time = 0.1156s; samplesPerSecond = 22151.1
MPI Rank 0: 08/16/2016 03:03:25: Finished Epoch[ 2 of 5]: [Training] ce = 3.63699747 * 20480; err = 0.83027344 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.956363s
MPI Rank 0: 08/16/2016 03:03:25: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:25: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:25: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 8
MPI Rank 0: (GPU): creating curand object with seed 9
MPI Rank 0: (GPU): creating curand object with seed 10
MPI Rank 0: (GPU): creating curand object with seed 11
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.28471687 * 2560; err = 0.78828125 * 2560; time = 0.1510s; samplesPerSecond = 16952.7
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.21541977 * 2560; err = 0.78085938 * 2560; time = 0.1139s; samplesPerSecond = 22469.9
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.19995390 * 2560; err = 0.76250000 * 2560; time = 0.1142s; samplesPerSecond = 22415.0
MPI Rank 0: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.23756682 * 2560; err = 0.78085938 * 2560; time = 0.1146s; samplesPerSecond = 22346.2
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.11529098 * 2560; err = 0.76406250 * 2560; time = 0.1161s; samplesPerSecond = 22043.3
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.11986756 * 2560; err = 0.74765625 * 2560; time = 0.1155s; samplesPerSecond = 22156.1
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.02920208 * 2560; err = 0.73242188 * 2560; time = 0.1151s; samplesPerSecond = 22246.7
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.00916479 * 2560; err = 0.74218750 * 2560; time = 0.1154s; samplesPerSecond = 22177.2
MPI Rank 0: 08/16/2016 03:03:26: Finished Epoch[ 3 of 5]: [Training] ce = 3.15139785 * 20480; err = 0.76235352 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.96412s
MPI Rank 0: 08/16/2016 03:03:26: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:26: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:26: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.91499068 * 2560; err = 0.70937500 * 2560; time = 0.1472s; samplesPerSecond = 17386.1
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.82291759 * 2560; err = 0.69492188 * 2560; time = 0.1160s; samplesPerSecond = 22070.7
MPI Rank 0: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.80213912 * 2560; err = 0.69570312 * 2560; time = 0.1164s; samplesPerSecond = 21989.0
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.81144277 * 2560; err = 0.70312500 * 2560; time = 0.1170s; samplesPerSecond = 21880.5
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.65378259 * 2560; err = 0.67773438 * 2560; time = 0.1150s; samplesPerSecond = 22265.5
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.67352255 * 2560; err = 0.66992188 * 2560; time = 0.1171s; samplesPerSecond = 21858.9
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.66132782 * 2560; err = 0.68281250 * 2560; time = 0.1139s; samplesPerSecond = 22473.5
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.63672749 * 2560; err = 0.66953125 * 2560; time = 0.1144s; samplesPerSecond = 22373.9
MPI Rank 0: 08/16/2016 03:03:27: Finished Epoch[ 4 of 5]: [Training] ce = 2.74710632 * 20480; err = 0.68789062 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.965079s
MPI Rank 0: 08/16/2016 03:03:27: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:27: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:27: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.49174185 * 2560; err = 0.61718750 * 2560; time = 0.1077s; samplesPerSecond = 23779.7
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49057629 * 2560; err = 0.64296875 * 2560; time = 0.1058s; samplesPerSecond = 24206.9
MPI Rank 0: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.37584589 * 2560; err = 0.62226563 * 2560; time = 0.1088s; samplesPerSecond = 23534.4
MPI Rank 0: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.41075712 * 2560; err = 0.62578125 * 2560; time = 0.1071s; samplesPerSecond = 23909.8
MPI Rank 0: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.34542393 * 2560; err = 0.61250000 * 2560; time = 0.1052s; samplesPerSecond = 24327.4
MPI Rank 0: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.24817099 * 2560; err = 0.58359375 * 2560; time = 0.1047s; samplesPerSecond = 24453.4
MPI Rank 0: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.30388773 * 2560; err = 0.59921875 * 2560; time = 0.1067s; samplesPerSecond = 24002.4
MPI Rank 0: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.25066987 * 2560; err = 0.59062500 * 2560; time = 0.1059s; samplesPerSecond = 24174.0
MPI Rank 0: 08/16/2016 03:03:28: Finished Epoch[ 5 of 5]: [Training] ce = 2.36463421 * 20480; err = 0.61176758 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.859766s
MPI Rank 0: 08/16/2016 03:03:28: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 03:03:28: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:28: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:28: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 03:03:21: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 1: 08/16/2016 03:03:21: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:21: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: 		Built time: Aug 16 2016 02:54:53
MPI Rank 1: 08/16/2016 03:03:21: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 1: 08/16/2016 03:03:21: 		Build type: Release
MPI Rank 1: 08/16/2016 03:03:21: 		Build target: GPU
MPI Rank 1: 08/16/2016 03:03:21: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 03:03:21: 		Math lib: mkl
MPI Rank 1: 08/16/2016 03:03:21: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 08/16/2016 03:03:21: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 1: 08/16/2016 03:03:21: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 08/16/2016 03:03:21: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 03:03:21: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 03:03:21: 		Built by svcphil on Philly-Pool3
MPI Rank 1: 08/16/2016 03:03:21: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 08/16/2016 03:03:21: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:21: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:21: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 08/16/2016 03:03:21: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Running on cntk-muc01 at 2016/08/16 03:03:21
MPI Rank 1: 08/16/2016 03:03:21: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:21: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:21: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 03:03:21: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 03:03:21: Commands: speechTrain
MPI Rank 1: 08/16/2016 03:03:21: Precision = "float"
MPI Rank 1: 08/16/2016 03:03:21: Using 4 CPU threads.
MPI Rank 1: 08/16/2016 03:03:21: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 03:03:21: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 03:03:21: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: ##############################################################################
MPI Rank 1: 08/16/2016 03:03:21: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:21: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 03:03:21: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:21: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Creating virgin network.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Created model with 37 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Training criterion node(s):
MPI Rank 1: 08/16/2016 03:03:21: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 03:03:21: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 03:03:21: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:21: 	featNorm.mean = Mean()
MPI Rank 1: 08/16/2016 03:03:21: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 08/16/2016 03:03:21: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:23: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:23: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:23: Starting minibatch loop.
MPI Rank 1: (GPU): creating curand object with seed 0
MPI Rank 1: (GPU): creating curand object with seed 1
MPI Rank 1: (GPU): creating curand object with seed 2
MPI Rank 1: (GPU): creating curand object with seed 3
MPI Rank 1: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 5.28622131 * 2560; err = 0.92343750 * 2560; time = 0.1297s; samplesPerSecond = 19740.0
MPI Rank 1: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 9.00316162 * 2560; err = 0.93515625 * 2560; time = 0.0689s; samplesPerSecond = 37168.2
MPI Rank 1: 08/16/2016 03:03:23:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.35603485 * 2560; err = 0.94414062 * 2560; time = 0.0687s; samplesPerSecond = 37263.5
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.67256317 * 2560; err = 0.89921875 * 2560; time = 0.0690s; samplesPerSecond = 37099.8
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.15976563 * 2560; err = 0.90273437 * 2560; time = 0.0691s; samplesPerSecond = 37069.8
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.01864319 * 2560; err = 0.89140625 * 2560; time = 0.0677s; samplesPerSecond = 37816.7
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.99413147 * 2560; err = 0.87929687 * 2560; time = 0.0694s; samplesPerSecond = 36871.1
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.93304749 * 2560; err = 0.88984375 * 2560; time = 0.0676s; samplesPerSecond = 37860.9
MPI Rank 1: 08/16/2016 03:03:24: Finished Epoch[ 1 of 5]: [Training] ce = 5.30294609 * 20480; err = 0.90815430 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.614114s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:24: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:24: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 24
MPI Rank 1: (GPU): creating curand object with seed 25
MPI Rank 1: (GPU): creating curand object with seed 26
MPI Rank 1: (GPU): creating curand object with seed 27
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90373861 * 2560; err = 0.87656250 * 2560; time = 0.1475s; samplesPerSecond = 17353.5
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.84557810 * 2560; err = 0.86953125 * 2560; time = 0.1138s; samplesPerSecond = 22490.5
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.80858604 * 2560; err = 0.84687500 * 2560; time = 0.1134s; samplesPerSecond = 22577.1
MPI Rank 1: 08/16/2016 03:03:24:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.70856071 * 2560; err = 0.82734375 * 2560; time = 0.1151s; samplesPerSecond = 22236.9
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.61108493 * 2560; err = 0.81914062 * 2560; time = 0.1134s; samplesPerSecond = 22567.0
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.45544277 * 2560; err = 0.79726562 * 2560; time = 0.1144s; samplesPerSecond = 22368.4
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.38894690 * 2560; err = 0.80195313 * 2560; time = 0.1141s; samplesPerSecond = 22444.9
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.37404169 * 2560; err = 0.80351562 * 2560; time = 0.1156s; samplesPerSecond = 22151.7
MPI Rank 1: 08/16/2016 03:03:25: Finished Epoch[ 2 of 5]: [Training] ce = 3.63699747 * 20480; err = 0.83027344 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.955829s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:25: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:25: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 28
MPI Rank 1: (GPU): creating curand object with seed 29
MPI Rank 1: (GPU): creating curand object with seed 30
MPI Rank 1: (GPU): creating curand object with seed 31
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.28471687 * 2560; err = 0.78828125 * 2560; time = 0.1505s; samplesPerSecond = 17006.0
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.21541977 * 2560; err = 0.78085938 * 2560; time = 0.1139s; samplesPerSecond = 22476.3
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.19995390 * 2560; err = 0.76250000 * 2560; time = 0.1142s; samplesPerSecond = 22419.0
MPI Rank 1: 08/16/2016 03:03:25:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.23756682 * 2560; err = 0.78085938 * 2560; time = 0.1146s; samplesPerSecond = 22338.2
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.11529098 * 2560; err = 0.76406250 * 2560; time = 0.1160s; samplesPerSecond = 22060.8
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.11986756 * 2560; err = 0.74765625 * 2560; time = 0.1155s; samplesPerSecond = 22158.0
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.02920208 * 2560; err = 0.73242188 * 2560; time = 0.1150s; samplesPerSecond = 22256.8
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.00916479 * 2560; err = 0.74218750 * 2560; time = 0.1155s; samplesPerSecond = 22165.3
MPI Rank 1: 08/16/2016 03:03:26: Finished Epoch[ 3 of 5]: [Training] ce = 3.15139785 * 20480; err = 0.76235352 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.963576s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:26: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:26: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.91499068 * 2560; err = 0.70937500 * 2560; time = 0.1472s; samplesPerSecond = 17390.8
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.82291759 * 2560; err = 0.69492188 * 2560; time = 0.1159s; samplesPerSecond = 22089.7
MPI Rank 1: 08/16/2016 03:03:26:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.80213912 * 2560; err = 0.69570312 * 2560; time = 0.1164s; samplesPerSecond = 21995.2
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.81144277 * 2560; err = 0.70312500 * 2560; time = 0.1170s; samplesPerSecond = 21887.6
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.65378259 * 2560; err = 0.67773438 * 2560; time = 0.1149s; samplesPerSecond = 22270.6
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.67352255 * 2560; err = 0.66992188 * 2560; time = 0.1171s; samplesPerSecond = 21856.1
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.66132782 * 2560; err = 0.68281250 * 2560; time = 0.1138s; samplesPerSecond = 22489.9
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.63672749 * 2560; err = 0.66953125 * 2560; time = 0.1144s; samplesPerSecond = 22385.1
MPI Rank 1: 08/16/2016 03:03:27: Finished Epoch[ 4 of 5]: [Training] ce = 2.74710632 * 20480; err = 0.68789062 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.964465s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:27: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:27: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.49174185 * 2560; err = 0.61718750 * 2560; time = 0.1071s; samplesPerSecond = 23903.1
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49057629 * 2560; err = 0.64296875 * 2560; time = 0.1057s; samplesPerSecond = 24212.4
MPI Rank 1: 08/16/2016 03:03:27:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.37584589 * 2560; err = 0.62226563 * 2560; time = 0.1088s; samplesPerSecond = 23531.1
MPI Rank 1: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.41075712 * 2560; err = 0.62578125 * 2560; time = 0.1070s; samplesPerSecond = 23915.8
MPI Rank 1: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.34542393 * 2560; err = 0.61250000 * 2560; time = 0.1052s; samplesPerSecond = 24345.5
MPI Rank 1: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.24817099 * 2560; err = 0.58359375 * 2560; time = 0.1056s; samplesPerSecond = 24231.0
MPI Rank 1: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.30388773 * 2560; err = 0.59921875 * 2560; time = 0.1056s; samplesPerSecond = 24237.4
MPI Rank 1: 08/16/2016 03:03:28:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.25066987 * 2560; err = 0.59062500 * 2560; time = 0.1058s; samplesPerSecond = 24198.9
MPI Rank 1: 08/16/2016 03:03:28: Finished Epoch[ 5 of 5]: [Training] ce = 2.36463421 * 20480; err = 0.61176758 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.859221s
MPI Rank 1: 08/16/2016 03:03:28: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:28: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:28: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 08/16/2016 03:03:31: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
MPI Rank 0: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:31: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: 		Built time: Aug 16 2016 02:54:53
MPI Rank 0: 08/16/2016 03:03:31: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 0: 08/16/2016 03:03:31: 		Build type: Release
MPI Rank 0: 08/16/2016 03:03:31: 		Build target: GPU
MPI Rank 0: 08/16/2016 03:03:31: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 03:03:31: 		Math lib: mkl
MPI Rank 0: 08/16/2016 03:03:31: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 08/16/2016 03:03:31: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 0: 08/16/2016 03:03:31: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 08/16/2016 03:03:31: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 03:03:31: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 03:03:31: 		Built by svcphil on Philly-Pool3
MPI Rank 0: 08/16/2016 03:03:31: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:31: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: Running on cntk-muc01 at 2016/08/16 03:03:31
MPI Rank 0: 08/16/2016 03:03:31: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:31: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:31: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 03:03:31: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 03:03:31: Commands: speechTrain
MPI Rank 0: 08/16/2016 03:03:31: Precision = "float"
MPI Rank 0: 08/16/2016 03:03:31: Using 4 CPU threads.
MPI Rank 0: 08/16/2016 03:03:31: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 03:03:31: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 03:03:31: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: ##############################################################################
MPI Rank 0: 08/16/2016 03:03:31: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:31: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 03:03:31: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:31: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:31: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: Loaded model with 37 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: Training criterion node(s):
MPI Rank 0: 08/16/2016 03:03:32: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 03:03:32: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 03:03:32: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:32: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:33: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:33: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.91499068 * 2560; err = 0.70937500 * 2560; time = 0.3681s; samplesPerSecond = 6955.3
MPI Rank 0: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.82291759 * 2560; err = 0.69492188 * 2560; time = 0.1184s; samplesPerSecond = 21624.5
MPI Rank 0: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.80213912 * 2560; err = 0.69570312 * 2560; time = 0.1119s; samplesPerSecond = 22882.1
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.81144277 * 2560; err = 0.70312500 * 2560; time = 0.1182s; samplesPerSecond = 21661.9
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.65378259 * 2560; err = 0.67773438 * 2560; time = 0.1151s; samplesPerSecond = 22232.5
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.67352255 * 2560; err = 0.66992188 * 2560; time = 0.1171s; samplesPerSecond = 21859.8
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.66132782 * 2560; err = 0.68281250 * 2560; time = 0.1111s; samplesPerSecond = 23042.5
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.63672749 * 2560; err = 0.66953125 * 2560; time = 0.1151s; samplesPerSecond = 22245.2
MPI Rank 0: 08/16/2016 03:03:34: Finished Epoch[ 4 of 5]: [Training] ce = 2.74710632 * 20480; err = 0.68789062 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=1.30885s
MPI Rank 0: 08/16/2016 03:03:34: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:34: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:34: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.49174185 * 2560; err = 0.61718750 * 2560; time = 0.1067s; samplesPerSecond = 23987.6
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49057629 * 2560; err = 0.64296875 * 2560; time = 0.1040s; samplesPerSecond = 24610.7
MPI Rank 0: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.37584589 * 2560; err = 0.62226563 * 2560; time = 0.1042s; samplesPerSecond = 24574.7
MPI Rank 0: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.41075712 * 2560; err = 0.62578125 * 2560; time = 0.1106s; samplesPerSecond = 23140.2
MPI Rank 0: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.34542393 * 2560; err = 0.61250000 * 2560; time = 0.1011s; samplesPerSecond = 25319.2
MPI Rank 0: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.24817099 * 2560; err = 0.58359375 * 2560; time = 0.1015s; samplesPerSecond = 25211.2
MPI Rank 0: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.30388773 * 2560; err = 0.59921875 * 2560; time = 0.1051s; samplesPerSecond = 24359.8
MPI Rank 0: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.25066987 * 2560; err = 0.59062500 * 2560; time = 0.1032s; samplesPerSecond = 24799.2
MPI Rank 0: 08/16/2016 03:03:35: Finished Epoch[ 5 of 5]: [Training] ce = 2.36463421 * 20480; err = 0.61176758 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.845021s
MPI Rank 0: 08/16/2016 03:03:35: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 03:03:35: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:35: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:35: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 03:03:31: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 1: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:31: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:31: 		Built time: Aug 16 2016 02:54:53
MPI Rank 1: 08/16/2016 03:03:31: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 1: 08/16/2016 03:03:31: 		Build type: Release
MPI Rank 1: 08/16/2016 03:03:31: 		Build target: GPU
MPI Rank 1: 08/16/2016 03:03:31: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 03:03:31: 		Math lib: mkl
MPI Rank 1: 08/16/2016 03:03:31: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 08/16/2016 03:03:31: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 1: 08/16/2016 03:03:31: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 08/16/2016 03:03:31: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 03:03:31: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 03:03:31: 		Built by svcphil on Philly-Pool3
MPI Rank 1: 08/16/2016 03:03:31: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 08/16/2016 03:03:31: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:32: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:32: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 08/16/2016 03:03:32: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: Running on cntk-muc01 at 2016/08/16 03:03:32
MPI Rank 1: 08/16/2016 03:03:32: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:32: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:32: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 03:03:32: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 03:03:32: Commands: speechTrain
MPI Rank 1: 08/16/2016 03:03:32: Precision = "float"
MPI Rank 1: 08/16/2016 03:03:32: Using 4 CPU threads.
MPI Rank 1: 08/16/2016 03:03:32: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 03:03:32: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 03:03:32: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: ##############################################################################
MPI Rank 1: 08/16/2016 03:03:32: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:32: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 03:03:32: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:32: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:32: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Loaded model with 37 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Training criterion node(s):
MPI Rank 1: 08/16/2016 03:03:33: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 03:03:33: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 03:03:33: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:33: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.91499068 * 2560; err = 0.70937500 * 2560; time = 0.3544s; samplesPerSecond = 7223.5
MPI Rank 1: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.82291759 * 2560; err = 0.69492188 * 2560; time = 0.1184s; samplesPerSecond = 21620.0
MPI Rank 1: 08/16/2016 03:03:33:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.80213912 * 2560; err = 0.69570312 * 2560; time = 0.1118s; samplesPerSecond = 22888.4
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.81144277 * 2560; err = 0.70312500 * 2560; time = 0.1182s; samplesPerSecond = 21664.4
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.65378259 * 2560; err = 0.67773438 * 2560; time = 0.1161s; samplesPerSecond = 22041.8
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.67352255 * 2560; err = 0.66992188 * 2560; time = 0.1161s; samplesPerSecond = 22046.5
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.66132782 * 2560; err = 0.68281250 * 2560; time = 0.1110s; samplesPerSecond = 23062.0
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.63672749 * 2560; err = 0.66953125 * 2560; time = 0.1151s; samplesPerSecond = 22243.1
MPI Rank 1: 08/16/2016 03:03:34: Finished Epoch[ 4 of 5]: [Training] ce = 2.74710632 * 20480; err = 0.68789062 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=1.30835s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:34: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:34: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.49174185 * 2560; err = 0.61718750 * 2560; time = 0.1072s; samplesPerSecond = 23882.2
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49057629 * 2560; err = 0.64296875 * 2560; time = 0.1041s; samplesPerSecond = 24588.9
MPI Rank 1: 08/16/2016 03:03:34:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.37584589 * 2560; err = 0.62226563 * 2560; time = 0.1041s; samplesPerSecond = 24588.0
MPI Rank 1: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.41075712 * 2560; err = 0.62578125 * 2560; time = 0.1096s; samplesPerSecond = 23347.2
MPI Rank 1: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.34542393 * 2560; err = 0.61250000 * 2560; time = 0.1011s; samplesPerSecond = 25317.5
MPI Rank 1: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.24817099 * 2560; err = 0.58359375 * 2560; time = 0.1015s; samplesPerSecond = 25232.4
MPI Rank 1: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.30388773 * 2560; err = 0.59921875 * 2560; time = 0.1061s; samplesPerSecond = 24117.5
MPI Rank 1: 08/16/2016 03:03:35:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.25066987 * 2560; err = 0.59062500 * 2560; time = 0.1022s; samplesPerSecond = 25052.1
MPI Rank 1: 08/16/2016 03:03:35: Finished Epoch[ 5 of 5]: [Training] ce = 2.36463421 * 20480; err = 0.61176758 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.844511s
MPI Rank 1: 08/16/2016 03:03:35: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:35: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:35: __COMPLETED__
MPI Rank 1: ~MPIWrapper