CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
08/16/2016 09:58:20: Redirecting stderr to file /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
08/16/2016 09:58:20: Redirecting stderr to file /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/16/2016 09:58:20: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:20: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:20: 		Built time: Aug 16 2016 09:41:56
MPI Rank 0: 08/16/2016 09:58:20: 		Last modified date: Fri Aug 12 07:32:43 2016
MPI Rank 0: 08/16/2016 09:58:20: 		Build type: release
MPI Rank 0: 08/16/2016 09:58:20: 		Build target: GPU
MPI Rank 0: 08/16/2016 09:58:20: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 09:58:20: 		Math lib: mkl
MPI Rank 0: 08/16/2016 09:58:20: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/16/2016 09:58:20: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/16/2016 09:58:20: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/16/2016 09:58:20: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 09:58:20: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 09:58:20: 		Built by philly on f67b30a647de
MPI Rank 0: 08/16/2016 09:58:20: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/16/2016 09:58:20: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:22: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:22: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:22: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:22: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:22: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:22: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Running on localhost at 2016/08/16 09:58:22
MPI Rank 0: 08/16/2016 09:58:22: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 09:58:22: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 09:58:22: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 09:58:22: Commands: speechTrain
MPI Rank 0: 08/16/2016 09:58:22: Precision = "float"
MPI Rank 0: 08/16/2016 09:58:22: Using 12 CPU threads.
MPI Rank 0: 08/16/2016 09:58:22: CNTKModelPath: /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 09:58:22: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 09:58:22: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: ##############################################################################
MPI Rank 0: 08/16/2016 09:58:22: #                                                                            #
MPI Rank 0: 08/16/2016 09:58:22: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 09:58:22: #                                                                            #
MPI Rank 0: 08/16/2016 09:58:22: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Creating virgin network.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Created model with 37 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Training criterion node(s):
MPI Rank 0: 08/16/2016 09:58:22: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 09:58:22: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 09:58:22: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:22: 	featNorm.mean = Mean()
MPI Rank 0: 08/16/2016 09:58:22: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 08/16/2016 09:58:22: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:23: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:23: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:23: Starting minibatch loop.
MPI Rank 0: (GPU): creating curand object with seed 0
MPI Rank 0: (GPU): creating curand object with seed 1
MPI Rank 0: (GPU): creating curand object with seed 2
MPI Rank 0: (GPU): creating curand object with seed 3
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 8.93629532 * 2560; err = 0.95742187 * 2560; time = 0.0624s; samplesPerSecond = 41050.6
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 10.48109360 * 2560; err = 0.93242187 * 2560; time = 0.0434s; samplesPerSecond = 58950.9
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 9.62917175 * 2560; err = 0.94218750 * 2560; time = 0.0430s; samplesPerSecond = 59576.4
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 5.36300964 * 2560; err = 0.91054687 * 2560; time = 0.0421s; samplesPerSecond = 60830.7
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.53137817 * 2560; err = 0.90468750 * 2560; time = 0.0420s; samplesPerSecond = 60884.2
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.09275818 * 2560; err = 0.88554687 * 2560; time = 0.0421s; samplesPerSecond = 60754.2
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.98515320 * 2560; err = 0.88046875 * 2560; time = 0.0410s; samplesPerSecond = 62376.6
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.93446045 * 2560; err = 0.88710937 * 2560; time = 0.0399s; samplesPerSecond = 64121.8
MPI Rank 0: 08/16/2016 09:58:24: Finished Epoch[ 1 of 5]: [Training] ce = 6.36916504 * 20480; err = 0.91254883 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.358593s
MPI Rank 0: 08/16/2016 09:58:24: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:24: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:24: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 4
MPI Rank 0: (GPU): creating curand object with seed 5
MPI Rank 0: (GPU): creating curand object with seed 6
MPI Rank 0: (GPU): creating curand object with seed 7
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90861429 * 2560; err = 0.88398438 * 2560; time = 0.0786s; samplesPerSecond = 32579.5
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.86123084 * 2560; err = 0.87070313 * 2560; time = 0.0632s; samplesPerSecond = 40488.4
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.84743418 * 2560; err = 0.86406250 * 2560; time = 0.0637s; samplesPerSecond = 40216.8
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.78620272 * 2560; err = 0.84531250 * 2560; time = 0.0635s; samplesPerSecond = 40293.4
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.71890882 * 2560; err = 0.84570312 * 2560; time = 0.0640s; samplesPerSecond = 40025.6
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.56764314 * 2560; err = 0.80898437 * 2560; time = 0.0641s; samplesPerSecond = 39914.6
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.48846634 * 2560; err = 0.80156250 * 2560; time = 0.0675s; samplesPerSecond = 37902.9
MPI Rank 0: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.45341789 * 2560; err = 0.81250000 * 2560; time = 0.0706s; samplesPerSecond = 36249.3
MPI Rank 0: 08/16/2016 09:58:24: Finished Epoch[ 2 of 5]: [Training] ce = 3.70398978 * 20480; err = 0.84160156 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.541924s
MPI Rank 0: 08/16/2016 09:58:24: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:24: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:24: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 8
MPI Rank 0: (GPU): creating curand object with seed 9
MPI Rank 0: (GPU): creating curand object with seed 10
MPI Rank 0: (GPU): creating curand object with seed 11
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.35596404 * 2560; err = 0.79257813 * 2560; time = 0.0707s; samplesPerSecond = 36200.1
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.27901288 * 2560; err = 0.79062500 * 2560; time = 0.0650s; samplesPerSecond = 39410.1
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.26494024 * 2560; err = 0.77578125 * 2560; time = 0.0652s; samplesPerSecond = 39289.1
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27018706 * 2560; err = 0.78046875 * 2560; time = 0.0647s; samplesPerSecond = 39589.9
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.17238140 * 2560; err = 0.76054687 * 2560; time = 0.0660s; samplesPerSecond = 38780.8
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.18761446 * 2560; err = 0.77226562 * 2560; time = 0.0655s; samplesPerSecond = 39078.0
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.11432619 * 2560; err = 0.75937500 * 2560; time = 0.0653s; samplesPerSecond = 39218.7
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.08495176 * 2560; err = 0.75781250 * 2560; time = 0.0653s; samplesPerSecond = 39182.7
MPI Rank 0: 08/16/2016 09:58:25: Finished Epoch[ 3 of 5]: [Training] ce = 3.21617225 * 20480; err = 0.77368164 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.533376s
MPI Rank 0: 08/16/2016 09:58:25: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:25: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:25: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.99453180 * 2560; err = 0.73828125 * 2560; time = 0.0707s; samplesPerSecond = 36216.0
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90813234 * 2560; err = 0.70273438 * 2560; time = 0.0661s; samplesPerSecond = 38721.6
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90156922 * 2560; err = 0.70664063 * 2560; time = 0.0653s; samplesPerSecond = 39191.1
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.90775536 * 2560; err = 0.71679688 * 2560; time = 0.0658s; samplesPerSecond = 38916.4
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.74782330 * 2560; err = 0.70351562 * 2560; time = 0.0676s; samplesPerSecond = 37882.7
MPI Rank 0: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77808113 * 2560; err = 0.68828125 * 2560; time = 0.0649s; samplesPerSecond = 39452.6
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.77256969 * 2560; err = 0.69218750 * 2560; time = 0.0650s; samplesPerSecond = 39387.6
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.73913394 * 2560; err = 0.68671875 * 2560; time = 0.0656s; samplesPerSecond = 39014.9
MPI Rank 0: 08/16/2016 09:58:26: Finished Epoch[ 4 of 5]: [Training] ce = 2.84369960 * 20480; err = 0.70439453 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.53684s
MPI Rank 0: 08/16/2016 09:58:26: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:26: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:26: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62055426 * 2560; err = 0.64882812 * 2560; time = 0.0643s; samplesPerSecond = 39801.6
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.61482008 * 2560; err = 0.66875000 * 2560; time = 0.0622s; samplesPerSecond = 41125.2
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.50300923 * 2560; err = 0.64531250 * 2560; time = 0.0617s; samplesPerSecond = 41475.0
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.52772745 * 2560; err = 0.64257812 * 2560; time = 0.0617s; samplesPerSecond = 41473.6
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.45625177 * 2560; err = 0.63085938 * 2560; time = 0.0614s; samplesPerSecond = 41714.2
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36816513 * 2560; err = 0.59960938 * 2560; time = 0.0614s; samplesPerSecond = 41668.0
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42021244 * 2560; err = 0.62734375 * 2560; time = 0.0614s; samplesPerSecond = 41698.6
MPI Rank 0: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35478931 * 2560; err = 0.59882813 * 2560; time = 0.0614s; samplesPerSecond = 41672.8
MPI Rank 0: 08/16/2016 09:58:26: Finished Epoch[ 5 of 5]: [Training] ce = 2.48319121 * 20480; err = 0.63276367 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.501802s
MPI Rank 0: 08/16/2016 09:58:26: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 09:58:26: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:26: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:26: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 09:58:20: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:20: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:20: 		Built time: Aug 16 2016 09:41:56
MPI Rank 1: 08/16/2016 09:58:20: 		Last modified date: Fri Aug 12 07:32:43 2016
MPI Rank 1: 08/16/2016 09:58:20: 		Build type: release
MPI Rank 1: 08/16/2016 09:58:20: 		Build target: GPU
MPI Rank 1: 08/16/2016 09:58:20: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 09:58:20: 		Math lib: mkl
MPI Rank 1: 08/16/2016 09:58:20: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/16/2016 09:58:20: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/16/2016 09:58:20: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/16/2016 09:58:20: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 09:58:20: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 09:58:20: 		Built by philly on f67b30a647de
MPI Rank 1: 08/16/2016 09:58:20: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/16/2016 09:58:20: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:22: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:22: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:22: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:22: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:22: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:22: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: Running on localhost at 2016/08/16 09:58:22
MPI Rank 1: 08/16/2016 09:58:22: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 09:58:22: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 09:58:22: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 09:58:22: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 09:58:22: Commands: speechTrain
MPI Rank 1: 08/16/2016 09:58:22: Precision = "float"
MPI Rank 1: 08/16/2016 09:58:22: Using 12 CPU threads.
MPI Rank 1: 08/16/2016 09:58:22: CNTKModelPath: /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 09:58:22: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 09:58:22: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: ##############################################################################
MPI Rank 1: 08/16/2016 09:58:22: #                                                                            #
MPI Rank 1: 08/16/2016 09:58:22: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 09:58:22: #                                                                            #
MPI Rank 1: 08/16/2016 09:58:22: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:22: Creating virgin network.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Created model with 37 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Training criterion node(s):
MPI Rank 1: 08/16/2016 09:58:23: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 09:58:23: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 09:58:23: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: 	featNorm.mean = Mean()
MPI Rank 1: 08/16/2016 09:58:23: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 08/16/2016 09:58:23: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:23: Starting minibatch loop.
MPI Rank 1: (GPU): creating curand object with seed 0
MPI Rank 1: (GPU): creating curand object with seed 1
MPI Rank 1: (GPU): creating curand object with seed 2
MPI Rank 1: (GPU): creating curand object with seed 3
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 8.93629532 * 2560; err = 0.95742187 * 2560; time = 0.0625s; samplesPerSecond = 40948.9
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 10.48109360 * 2560; err = 0.93242187 * 2560; time = 0.0434s; samplesPerSecond = 58933.2
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 9.62917175 * 2560; err = 0.94218750 * 2560; time = 0.0430s; samplesPerSecond = 59598.6
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 5.36300964 * 2560; err = 0.91054687 * 2560; time = 0.0421s; samplesPerSecond = 60862.5
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.53137817 * 2560; err = 0.90468750 * 2560; time = 0.0421s; samplesPerSecond = 60862.5
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.09275818 * 2560; err = 0.88554687 * 2560; time = 0.0421s; samplesPerSecond = 60780.2
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.98515320 * 2560; err = 0.88046875 * 2560; time = 0.0410s; samplesPerSecond = 62404.0
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.93446045 * 2560; err = 0.88710937 * 2560; time = 0.0399s; samplesPerSecond = 64092.9
MPI Rank 1: 08/16/2016 09:58:24: Finished Epoch[ 1 of 5]: [Training] ce = 6.36916504 * 20480; err = 0.91254883 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.358593s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:24: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:24: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 24
MPI Rank 1: (GPU): creating curand object with seed 25
MPI Rank 1: (GPU): creating curand object with seed 26
MPI Rank 1: (GPU): creating curand object with seed 27
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90861429 * 2560; err = 0.88398438 * 2560; time = 0.0787s; samplesPerSecond = 32521.6
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.86123084 * 2560; err = 0.87070313 * 2560; time = 0.0632s; samplesPerSecond = 40514.7
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.84743418 * 2560; err = 0.86406250 * 2560; time = 0.0636s; samplesPerSecond = 40241.4
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.78620272 * 2560; err = 0.84531250 * 2560; time = 0.0635s; samplesPerSecond = 40313.1
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.71890882 * 2560; err = 0.84570312 * 2560; time = 0.0639s; samplesPerSecond = 40046.3
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.56764314 * 2560; err = 0.80898437 * 2560; time = 0.0641s; samplesPerSecond = 39945.1
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.48846634 * 2560; err = 0.80156250 * 2560; time = 0.0672s; samplesPerSecond = 38085.0
MPI Rank 1: 08/16/2016 09:58:24:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.45341789 * 2560; err = 0.81250000 * 2560; time = 0.0706s; samplesPerSecond = 36246.8
MPI Rank 1: 08/16/2016 09:58:24: Finished Epoch[ 2 of 5]: [Training] ce = 3.70398978 * 20480; err = 0.84160156 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.541629s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:24: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:24: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 28
MPI Rank 1: (GPU): creating curand object with seed 29
MPI Rank 1: (GPU): creating curand object with seed 30
MPI Rank 1: (GPU): creating curand object with seed 31
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.35596404 * 2560; err = 0.79257813 * 2560; time = 0.0709s; samplesPerSecond = 36131.1
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.27901288 * 2560; err = 0.79062500 * 2560; time = 0.0649s; samplesPerSecond = 39429.5
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.26494024 * 2560; err = 0.77578125 * 2560; time = 0.0649s; samplesPerSecond = 39418.6
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27018706 * 2560; err = 0.78046875 * 2560; time = 0.0648s; samplesPerSecond = 39512.3
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.17238140 * 2560; err = 0.76054687 * 2560; time = 0.0660s; samplesPerSecond = 38804.9
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.18761446 * 2560; err = 0.77226562 * 2560; time = 0.0655s; samplesPerSecond = 39099.5
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.11432619 * 2560; err = 0.75937500 * 2560; time = 0.0652s; samplesPerSecond = 39243.9
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.08495176 * 2560; err = 0.75781250 * 2560; time = 0.0651s; samplesPerSecond = 39312.6
MPI Rank 1: 08/16/2016 09:58:25: Finished Epoch[ 3 of 5]: [Training] ce = 3.21617225 * 20480; err = 0.77368164 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.533132s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:25: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:25: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.99453180 * 2560; err = 0.73828125 * 2560; time = 0.0710s; samplesPerSecond = 36057.9
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90813234 * 2560; err = 0.70273438 * 2560; time = 0.0661s; samplesPerSecond = 38746.2
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90156922 * 2560; err = 0.70664063 * 2560; time = 0.0653s; samplesPerSecond = 39205.5
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.90775536 * 2560; err = 0.71679688 * 2560; time = 0.0655s; samplesPerSecond = 39054.8
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.74782330 * 2560; err = 0.70351562 * 2560; time = 0.0677s; samplesPerSecond = 37797.7
MPI Rank 1: 08/16/2016 09:58:25:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77808113 * 2560; err = 0.68828125 * 2560; time = 0.0648s; samplesPerSecond = 39483.0
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.77256969 * 2560; err = 0.69218750 * 2560; time = 0.0650s; samplesPerSecond = 39413.7
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.73913394 * 2560; err = 0.68671875 * 2560; time = 0.0654s; samplesPerSecond = 39141.9
MPI Rank 1: 08/16/2016 09:58:26: Finished Epoch[ 4 of 5]: [Training] ce = 2.84369960 * 20480; err = 0.70439453 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.536519s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:26: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:26: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62055426 * 2560; err = 0.64882812 * 2560; time = 0.0646s; samplesPerSecond = 39645.1
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.61482008 * 2560; err = 0.66875000 * 2560; time = 0.0624s; samplesPerSecond = 41004.0
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.50300923 * 2560; err = 0.64531250 * 2560; time = 0.0617s; samplesPerSecond = 41497.1
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.52772745 * 2560; err = 0.64257812 * 2560; time = 0.0617s; samplesPerSecond = 41507.9
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.45625177 * 2560; err = 0.63085938 * 2560; time = 0.0613s; samplesPerSecond = 41735.3
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36816513 * 2560; err = 0.59960938 * 2560; time = 0.0614s; samplesPerSecond = 41701.3
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42021244 * 2560; err = 0.62734375 * 2560; time = 0.0614s; samplesPerSecond = 41717.6
MPI Rank 1: 08/16/2016 09:58:26:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35478931 * 2560; err = 0.59882813 * 2560; time = 0.0612s; samplesPerSecond = 41817.8
MPI Rank 1: 08/16/2016 09:58:26: Finished Epoch[ 5 of 5]: [Training] ce = 2.48319121 * 20480; err = 0.63276367 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.501703s
MPI Rank 1: 08/16/2016 09:58:26: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:26: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:26: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
08/16/2016 09:58:29: Redirecting stderr to file /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
08/16/2016 09:58:29: Redirecting stderr to file /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/16/2016 09:58:29: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:29: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:29: 		Built time: Aug 16 2016 09:41:56
MPI Rank 0: 08/16/2016 09:58:29: 		Last modified date: Fri Aug 12 07:32:43 2016
MPI Rank 0: 08/16/2016 09:58:29: 		Build type: release
MPI Rank 0: 08/16/2016 09:58:29: 		Build target: GPU
MPI Rank 0: 08/16/2016 09:58:29: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 09:58:29: 		Math lib: mkl
MPI Rank 0: 08/16/2016 09:58:29: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/16/2016 09:58:29: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/16/2016 09:58:29: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/16/2016 09:58:29: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 09:58:29: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 09:58:29: 		Built by philly on f67b30a647de
MPI Rank 0: 08/16/2016 09:58:29: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/16/2016 09:58:29: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:30: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 09:58:30: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:30: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:30: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:30: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/16/2016 09:58:30: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: Running on localhost at 2016/08/16 09:58:30
MPI Rank 0: 08/16/2016 09:58:30: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 09:58:30: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 09:58:30: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 09:58:30: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 09:58:30: Commands: speechTrain
MPI Rank 0: 08/16/2016 09:58:30: Precision = "float"
MPI Rank 0: 08/16/2016 09:58:30: Using 12 CPU threads.
MPI Rank 0: 08/16/2016 09:58:30: CNTKModelPath: /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 09:58:30: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 09:58:30: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: ##############################################################################
MPI Rank 0: 08/16/2016 09:58:30: #                                                                            #
MPI Rank 0: 08/16/2016 09:58:30: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 09:58:30: #                                                                            #
MPI Rank 0: 08/16/2016 09:58:30: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:30: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: Loaded model with 37 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: Training criterion node(s):
MPI Rank 0: 08/16/2016 09:58:31: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 09:58:31: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 09:58:31: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:31: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:32: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.99453180 * 2560; err = 0.73828125 * 2560; time = 0.2002s; samplesPerSecond = 12785.7
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90813234 * 2560; err = 0.70273438 * 2560; time = 0.0689s; samplesPerSecond = 37145.1
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90156922 * 2560; err = 0.70664063 * 2560; time = 0.0641s; samplesPerSecond = 39955.7
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.90775536 * 2560; err = 0.71679688 * 2560; time = 0.0651s; samplesPerSecond = 39338.6
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.74782330 * 2560; err = 0.70351562 * 2560; time = 0.0636s; samplesPerSecond = 40230.1
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77808113 * 2560; err = 0.68828125 * 2560; time = 0.0656s; samplesPerSecond = 39032.1
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.77256969 * 2560; err = 0.69218750 * 2560; time = 0.0648s; samplesPerSecond = 39489.7
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.73913394 * 2560; err = 0.68671875 * 2560; time = 0.0659s; samplesPerSecond = 38842.0
MPI Rank 0: 08/16/2016 09:58:32: Finished Epoch[ 4 of 5]: [Training] ce = 2.84369960 * 20480; err = 0.70439453 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.812161s
MPI Rank 0: 08/16/2016 09:58:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:32: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:32: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62055426 * 2560; err = 0.64882812 * 2560; time = 0.0631s; samplesPerSecond = 40566.7
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.61482008 * 2560; err = 0.66875000 * 2560; time = 0.0615s; samplesPerSecond = 41624.0
MPI Rank 0: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.50300923 * 2560; err = 0.64531250 * 2560; time = 0.0617s; samplesPerSecond = 41518.7
MPI Rank 0: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.52772745 * 2560; err = 0.64257812 * 2560; time = 0.0631s; samplesPerSecond = 40572.5
MPI Rank 0: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.45625177 * 2560; err = 0.63085938 * 2560; time = 0.0617s; samplesPerSecond = 41485.7
MPI Rank 0: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36816513 * 2560; err = 0.59960938 * 2560; time = 0.0619s; samplesPerSecond = 41383.1
MPI Rank 0: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42021244 * 2560; err = 0.62734375 * 2560; time = 0.0622s; samplesPerSecond = 41169.5
MPI Rank 0: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35478931 * 2560; err = 0.59882813 * 2560; time = 0.0619s; samplesPerSecond = 41349.0
MPI Rank 0: 08/16/2016 09:58:33: Finished Epoch[ 5 of 5]: [Training] ce = 2.48319121 * 20480; err = 0.63276367 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.503081s
MPI Rank 0: 08/16/2016 09:58:33: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 09:58:33: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:33: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 09:58:33: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 09:58:29: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:29: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:29: 		Built time: Aug 16 2016 09:41:56
MPI Rank 1: 08/16/2016 09:58:29: 		Last modified date: Fri Aug 12 07:32:43 2016
MPI Rank 1: 08/16/2016 09:58:29: 		Build type: release
MPI Rank 1: 08/16/2016 09:58:29: 		Build target: GPU
MPI Rank 1: 08/16/2016 09:58:29: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 09:58:29: 		Math lib: mkl
MPI Rank 1: 08/16/2016 09:58:29: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/16/2016 09:58:29: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/16/2016 09:58:29: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/16/2016 09:58:29: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 09:58:29: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 09:58:29: 		Built by philly on f67b30a647de
MPI Rank 1: 08/16/2016 09:58:29: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/16/2016 09:58:29: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:31: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 09:58:31: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:31: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:31: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:31: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/16/2016 09:58:31: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Running on localhost at 2016/08/16 09:58:31
MPI Rank 1: 08/16/2016 09:58:31: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 09:58:31: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 09:58:31: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 09:58:31: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 09:58:31: Commands: speechTrain
MPI Rank 1: 08/16/2016 09:58:31: Precision = "float"
MPI Rank 1: 08/16/2016 09:58:31: Using 12 CPU threads.
MPI Rank 1: 08/16/2016 09:58:31: CNTKModelPath: /tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 09:58:31: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 09:58:31: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: ##############################################################################
MPI Rank 1: 08/16/2016 09:58:31: #                                                                            #
MPI Rank 1: 08/16/2016 09:58:31: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 09:58:31: #                                                                            #
MPI Rank 1: 08/16/2016 09:58:31: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160816095713.701165/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Loaded model with 37 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Training criterion node(s):
MPI Rank 1: 08/16/2016 09:58:31: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 09:58:31: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 09:58:31: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:31: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:32: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.99453180 * 2560; err = 0.73828125 * 2560; time = 0.2464s; samplesPerSecond = 10391.1
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90813234 * 2560; err = 0.70273438 * 2560; time = 0.0689s; samplesPerSecond = 37169.9
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.90156922 * 2560; err = 0.70664063 * 2560; time = 0.0640s; samplesPerSecond = 39981.9
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.90775536 * 2560; err = 0.71679688 * 2560; time = 0.0649s; samplesPerSecond = 39467.8
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.74782330 * 2560; err = 0.70351562 * 2560; time = 0.0636s; samplesPerSecond = 40259.8
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.77808113 * 2560; err = 0.68828125 * 2560; time = 0.0655s; samplesPerSecond = 39062.5
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.77256969 * 2560; err = 0.69218750 * 2560; time = 0.0650s; samplesPerSecond = 39405.2
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.73913394 * 2560; err = 0.68671875 * 2560; time = 0.0659s; samplesPerSecond = 38863.8
MPI Rank 1: 08/16/2016 09:58:32: Finished Epoch[ 4 of 5]: [Training] ce = 2.84369960 * 20480; err = 0.70439453 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.812061s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:32: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:32: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.62055426 * 2560; err = 0.64882812 * 2560; time = 0.0633s; samplesPerSecond = 40438.5
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.61482008 * 2560; err = 0.66875000 * 2560; time = 0.0615s; samplesPerSecond = 41657.2
MPI Rank 1: 08/16/2016 09:58:32:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.50300923 * 2560; err = 0.64531250 * 2560; time = 0.0618s; samplesPerSecond = 41426.6
MPI Rank 1: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.52772745 * 2560; err = 0.64257812 * 2560; time = 0.0630s; samplesPerSecond = 40665.3
MPI Rank 1: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.45625177 * 2560; err = 0.63085938 * 2560; time = 0.0618s; samplesPerSecond = 41446.1
MPI Rank 1: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.36816513 * 2560; err = 0.59960938 * 2560; time = 0.0618s; samplesPerSecond = 41413.9
MPI Rank 1: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.42021244 * 2560; err = 0.62734375 * 2560; time = 0.0621s; samplesPerSecond = 41194.6
MPI Rank 1: 08/16/2016 09:58:33:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.35478931 * 2560; err = 0.59882813 * 2560; time = 0.0617s; samplesPerSecond = 41499.2
MPI Rank 1: 08/16/2016 09:58:33: Finished Epoch[ 5 of 5]: [Training] ce = 2.48319121 * 20480; err = 0.63276367 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.502806s
MPI Rank 1: 08/16/2016 09:58:33: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:33: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 09:58:33: __COMPLETED__
MPI Rank 1: ~MPIWrapper