CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 08/16/2016 03:02:16: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 08/16/2016 03:02:16: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:02:16: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:16: 		Built time: Aug 16 2016 02:54:53
MPI Rank 0: 08/16/2016 03:02:16: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 0: 08/16/2016 03:02:16: 		Build type: Release
MPI Rank 0: 08/16/2016 03:02:16: 		Build target: GPU
MPI Rank 0: 08/16/2016 03:02:16: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 03:02:16: 		Math lib: mkl
MPI Rank 0: 08/16/2016 03:02:16: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 08/16/2016 03:02:16: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 0: 08/16/2016 03:02:16: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 08/16/2016 03:02:16: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 03:02:16: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 03:02:16: 		Built by svcphil on Philly-Pool3
MPI Rank 0: 08/16/2016 03:02:16: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 08/16/2016 03:02:16: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:02:17: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:02:17: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 08/16/2016 03:02:17: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Running on cntk-muc01 at 2016/08/16 03:02:17
MPI Rank 0: 08/16/2016 03:02:17: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:02:17: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:02:17: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 03:02:17: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 03:02:17: Commands: speechTrain
MPI Rank 0: 08/16/2016 03:02:17: Precision = "float"
MPI Rank 0: 08/16/2016 03:02:17: Using 4 CPU threads.
MPI Rank 0: 08/16/2016 03:02:17: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 03:02:17: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 03:02:17: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: ##############################################################################
MPI Rank 0: 08/16/2016 03:02:17: #                                                                            #
MPI Rank 0: 08/16/2016 03:02:17: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 03:02:17: #                                                                            #
MPI Rank 0: 08/16/2016 03:02:17: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Creating virgin network.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Created model with 37 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Training criterion node(s):
MPI Rank 0: 08/16/2016 03:02:17: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 03:02:17: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 03:02:17: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:17: 	featNorm.mean = Mean()
MPI Rank 0: 08/16/2016 03:02:17: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 08/16/2016 03:02:17: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:20: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:20: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:20: Starting minibatch loop.
MPI Rank 0: 08/16/2016 03:02:22:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 9.54901199 * 2560; err = 0.94375000 * 2560; time = 1.1439s; samplesPerSecond = 2237.9
MPI Rank 0: 08/16/2016 03:02:22:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 8.64793930 * 2560; err = 0.92929688 * 2560; time = 0.7679s; samplesPerSecond = 3333.7
MPI Rank 0: 08/16/2016 03:02:23:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.10125122 * 2560; err = 0.94062500 * 2560; time = 0.7245s; samplesPerSecond = 3533.7
MPI Rank 0: 08/16/2016 03:02:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.88107910 * 2560; err = 0.90585938 * 2560; time = 0.7228s; samplesPerSecond = 3541.8
MPI Rank 0: 08/16/2016 03:02:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.10536194 * 2560; err = 0.89062500 * 2560; time = 0.6630s; samplesPerSecond = 3861.1
MPI Rank 0: 08/16/2016 03:02:25:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.98631592 * 2560; err = 0.89804688 * 2560; time = 0.7556s; samplesPerSecond = 3388.2
MPI Rank 0: 08/16/2016 03:02:26:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.98947754 * 2560; err = 0.88046875 * 2560; time = 0.7273s; samplesPerSecond = 3519.7
MPI Rank 0: 08/16/2016 03:02:27:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.95942993 * 2560; err = 0.88320312 * 2560; time = 0.7739s; samplesPerSecond = 3307.9
MPI Rank 0: 08/16/2016 03:02:27: Finished Epoch[ 1 of 5]: [Training] ce = 5.77748337 * 20480; err = 0.90898437 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=6.28383s
MPI Rank 0: 08/16/2016 03:02:27: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:27: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:27: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:02:28:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.94527147 * 2560; err = 0.88906250 * 2560; time = 0.9421s; samplesPerSecond = 2717.4
MPI Rank 0: 08/16/2016 03:02:29:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.86277831 * 2560; err = 0.87773437 * 2560; time = 0.9084s; samplesPerSecond = 2818.2
MPI Rank 0: 08/16/2016 03:02:30:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.85494012 * 2560; err = 0.89140625 * 2560; time = 0.9825s; samplesPerSecond = 2605.5
MPI Rank 0: 08/16/2016 03:02:31:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.78181474 * 2560; err = 0.85117188 * 2560; time = 0.6507s; samplesPerSecond = 3934.5
MPI Rank 0: 08/16/2016 03:02:31:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.73115406 * 2560; err = 0.84335938 * 2560; time = 0.9387s; samplesPerSecond = 2727.2
MPI Rank 0: 08/16/2016 03:02:32:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.55547082 * 2560; err = 0.80898437 * 2560; time = 0.9605s; samplesPerSecond = 2665.4
MPI Rank 0: 08/16/2016 03:02:33:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.46613522 * 2560; err = 0.80898437 * 2560; time = 0.9229s; samplesPerSecond = 2774.0
MPI Rank 0: 08/16/2016 03:02:34:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.44071517 * 2560; err = 0.81953125 * 2560; time = 0.9480s; samplesPerSecond = 2700.4
MPI Rank 0: 08/16/2016 03:02:34: Finished Epoch[ 2 of 5]: [Training] ce = 3.70478499 * 20480; err = 0.84877930 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=7.30496s
MPI Rank 0: 08/16/2016 03:02:34: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:35: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:35: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:02:36:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.34316119 * 2560; err = 0.79257813 * 2560; time = 1.1723s; samplesPerSecond = 2183.7
MPI Rank 0: 08/16/2016 03:02:37:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.24841775 * 2560; err = 0.79257813 * 2560; time = 0.9683s; samplesPerSecond = 2643.8
MPI Rank 0: 08/16/2016 03:02:38:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.25792707 * 2560; err = 0.78632813 * 2560; time = 0.8789s; samplesPerSecond = 2912.6
MPI Rank 0: 08/16/2016 03:02:38:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27339221 * 2560; err = 0.79062500 * 2560; time = 0.5649s; samplesPerSecond = 4531.4
MPI Rank 0: 08/16/2016 03:02:39:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.16591209 * 2560; err = 0.76757813 * 2560; time = 0.5183s; samplesPerSecond = 4939.2
MPI Rank 0: 08/16/2016 03:02:40:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.17143878 * 2560; err = 0.76523438 * 2560; time = 1.0792s; samplesPerSecond = 2372.2
MPI Rank 0: 08/16/2016 03:02:41:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.09211397 * 2560; err = 0.75625000 * 2560; time = 0.9672s; samplesPerSecond = 2646.7
MPI Rank 0: 08/16/2016 03:02:42:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.06562504 * 2560; err = 0.75000000 * 2560; time = 1.0193s; samplesPerSecond = 2511.6
MPI Rank 0: 08/16/2016 03:02:42: Finished Epoch[ 3 of 5]: [Training] ce = 3.20224851 * 20480; err = 0.77514648 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=7.17664s
MPI Rank 0: 08/16/2016 03:02:42: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:42: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:42: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:02:43:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.98185381 * 2560; err = 0.73554688 * 2560; time = 1.1723s; samplesPerSecond = 2183.8
MPI Rank 0: 08/16/2016 03:02:44:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90257182 * 2560; err = 0.70781250 * 2560; time = 1.0254s; samplesPerSecond = 2496.6
MPI Rank 0: 08/16/2016 03:02:45:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87658405 * 2560; err = 0.70937500 * 2560; time = 0.6891s; samplesPerSecond = 3714.7
MPI Rank 0: 08/16/2016 03:02:46:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.88475653 * 2560; err = 0.71757812 * 2560; time = 1.1001s; samplesPerSecond = 2327.2
MPI Rank 0: 08/16/2016 03:02:47:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.72318647 * 2560; err = 0.70273438 * 2560; time = 1.2571s; samplesPerSecond = 2036.4
MPI Rank 0: 08/16/2016 03:02:48:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75536808 * 2560; err = 0.68945313 * 2560; time = 0.7999s; samplesPerSecond = 3200.4
MPI Rank 0: 08/16/2016 03:02:49:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.74598934 * 2560; err = 0.69218750 * 2560; time = 1.2056s; samplesPerSecond = 2123.3
MPI Rank 0: 08/16/2016 03:02:50:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72856409 * 2560; err = 0.68476563 * 2560; time = 1.0226s; samplesPerSecond = 2503.4
MPI Rank 0: 08/16/2016 03:02:50: Finished Epoch[ 4 of 5]: [Training] ce = 2.82485927 * 20480; err = 0.70493164 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=8.31062s
MPI Rank 0: 08/16/2016 03:02:50: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:50: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:50: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:02:51:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.58512907 * 2560; err = 0.64375000 * 2560; time = 0.8140s; samplesPerSecond = 3144.9
MPI Rank 0: 08/16/2016 03:02:52:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58142844 * 2560; err = 0.66601563 * 2560; time = 0.7814s; samplesPerSecond = 3276.0
MPI Rank 0: 08/16/2016 03:02:53:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.46930316 * 2560; err = 0.64570313 * 2560; time = 1.0202s; samplesPerSecond = 2509.4
MPI Rank 0: 08/16/2016 03:02:54:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.49514628 * 2560; err = 0.63945312 * 2560; time = 0.9408s; samplesPerSecond = 2721.1
MPI Rank 0: 08/16/2016 03:02:55:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.42775581 * 2560; err = 0.62734375 * 2560; time = 0.7336s; samplesPerSecond = 3489.6
MPI Rank 0: 08/16/2016 03:02:55:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.33229687 * 2560; err = 0.60000000 * 2560; time = 0.6485s; samplesPerSecond = 3947.3
MPI Rank 0: 08/16/2016 03:02:56:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.38544278 * 2560; err = 0.62070313 * 2560; time = 1.0471s; samplesPerSecond = 2444.8
MPI Rank 0: 08/16/2016 03:02:57:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.32707222 * 2560; err = 0.60156250 * 2560; time = 0.9740s; samplesPerSecond = 2628.4
MPI Rank 0: 08/16/2016 03:02:57: Finished Epoch[ 5 of 5]: [Training] ce = 2.45044683 * 20480; err = 0.63056641 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=7.00905s
MPI Rank 0: 08/16/2016 03:02:57: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 03:02:57: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:57: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:57: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 03:02:17: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 08/16/2016 03:02:17: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:02:17: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:17: 		Built time: Aug 16 2016 02:54:53
MPI Rank 1: 08/16/2016 03:02:17: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 1: 08/16/2016 03:02:17: 		Build type: Release
MPI Rank 1: 08/16/2016 03:02:17: 		Build target: GPU
MPI Rank 1: 08/16/2016 03:02:17: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 03:02:17: 		Math lib: mkl
MPI Rank 1: 08/16/2016 03:02:17: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 08/16/2016 03:02:17: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 1: 08/16/2016 03:02:17: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 08/16/2016 03:02:17: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 03:02:17: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 03:02:17: 		Built by svcphil on Philly-Pool3
MPI Rank 1: 08/16/2016 03:02:17: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 08/16/2016 03:02:17: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:02:18: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:02:18: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 08/16/2016 03:02:18: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Running on cntk-muc01 at 2016/08/16 03:02:18
MPI Rank 1: 08/16/2016 03:02:18: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:02:18: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:02:18: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 03:02:18: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 03:02:18: Commands: speechTrain
MPI Rank 1: 08/16/2016 03:02:18: Precision = "float"
MPI Rank 1: 08/16/2016 03:02:18: Using 4 CPU threads.
MPI Rank 1: 08/16/2016 03:02:18: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 03:02:18: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 03:02:18: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: ##############################################################################
MPI Rank 1: 08/16/2016 03:02:18: #                                                                            #
MPI Rank 1: 08/16/2016 03:02:18: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 03:02:18: #                                                                            #
MPI Rank 1: 08/16/2016 03:02:18: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Creating virgin network.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=1, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 1.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Created model with 37 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Training criterion node(s):
MPI Rank 1: 08/16/2016 03:02:18: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 03:02:18: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 03:02:18: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:18: 	featNorm.mean = Mean()
MPI Rank 1: 08/16/2016 03:02:18: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 08/16/2016 03:02:18: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:20: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:20: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:20: Starting minibatch loop.
MPI Rank 1: 08/16/2016 03:02:21:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 9.54901199 * 2560; err = 0.94375000 * 2560; time = 0.8687s; samplesPerSecond = 2947.1
MPI Rank 1: 08/16/2016 03:02:22:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 8.64793930 * 2560; err = 0.92929688 * 2560; time = 0.7415s; samplesPerSecond = 3452.2
MPI Rank 1: 08/16/2016 03:02:23:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 7.10125122 * 2560; err = 0.94062500 * 2560; time = 0.7177s; samplesPerSecond = 3567.0
MPI Rank 1: 08/16/2016 03:02:24:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.88107910 * 2560; err = 0.90585938 * 2560; time = 0.8400s; samplesPerSecond = 3047.6
MPI Rank 1: 08/16/2016 03:02:24:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.10536194 * 2560; err = 0.89062500 * 2560; time = 0.8348s; samplesPerSecond = 3066.8
MPI Rank 1: 08/16/2016 03:02:25:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.98631592 * 2560; err = 0.89804688 * 2560; time = 0.9582s; samplesPerSecond = 2671.7
MPI Rank 1: 08/16/2016 03:02:26:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.98947754 * 2560; err = 0.88046875 * 2560; time = 0.8607s; samplesPerSecond = 2974.3
MPI Rank 1: 08/16/2016 03:02:27:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.95942993 * 2560; err = 0.88320312 * 2560; time = 0.6897s; samplesPerSecond = 3711.5
MPI Rank 1: 08/16/2016 03:02:27: Finished Epoch[ 1 of 5]: [Training] ce = 5.77748337 * 20480; err = 0.90898437 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=6.51664s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:27: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:27: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:02:28:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.94527147 * 2560; err = 0.88906250 * 2560; time = 0.9409s; samplesPerSecond = 2720.7
MPI Rank 1: 08/16/2016 03:02:29:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.86277831 * 2560; err = 0.87773437 * 2560; time = 0.9084s; samplesPerSecond = 2818.2
MPI Rank 1: 08/16/2016 03:02:30:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.85494012 * 2560; err = 0.89140625 * 2560; time = 0.9825s; samplesPerSecond = 2605.7
MPI Rank 1: 08/16/2016 03:02:31:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.78181474 * 2560; err = 0.85117188 * 2560; time = 0.6501s; samplesPerSecond = 3937.8
MPI Rank 1: 08/16/2016 03:02:31:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.73115406 * 2560; err = 0.84335938 * 2560; time = 0.9392s; samplesPerSecond = 2725.8
MPI Rank 1: 08/16/2016 03:02:32:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.55547082 * 2560; err = 0.80898437 * 2560; time = 0.9605s; samplesPerSecond = 2665.2
MPI Rank 1: 08/16/2016 03:02:33:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.46613522 * 2560; err = 0.80898437 * 2560; time = 0.9228s; samplesPerSecond = 2774.1
MPI Rank 1: 08/16/2016 03:02:34:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.44071517 * 2560; err = 0.81953125 * 2560; time = 0.9463s; samplesPerSecond = 2705.3
MPI Rank 1: 08/16/2016 03:02:34: Finished Epoch[ 2 of 5]: [Training] ce = 3.70478499 * 20480; err = 0.84877930 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=7.30282s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:35: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:35: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:02:36:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.34316119 * 2560; err = 0.79257813 * 2560; time = 1.1725s; samplesPerSecond = 2183.3
MPI Rank 1: 08/16/2016 03:02:37:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.24841775 * 2560; err = 0.79257813 * 2560; time = 0.9674s; samplesPerSecond = 2646.2
MPI Rank 1: 08/16/2016 03:02:38:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.25792707 * 2560; err = 0.78632813 * 2560; time = 0.8798s; samplesPerSecond = 2909.7
MPI Rank 1: 08/16/2016 03:02:38:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.27339221 * 2560; err = 0.79062500 * 2560; time = 0.5651s; samplesPerSecond = 4530.0
MPI Rank 1: 08/16/2016 03:02:39:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.16591209 * 2560; err = 0.76757813 * 2560; time = 0.5181s; samplesPerSecond = 4940.7
MPI Rank 1: 08/16/2016 03:02:40:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.17143878 * 2560; err = 0.76523438 * 2560; time = 1.0804s; samplesPerSecond = 2369.6
MPI Rank 1: 08/16/2016 03:02:41:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.09211397 * 2560; err = 0.75625000 * 2560; time = 0.9651s; samplesPerSecond = 2652.5
MPI Rank 1: 08/16/2016 03:02:42:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.06562504 * 2560; err = 0.75000000 * 2560; time = 1.0202s; samplesPerSecond = 2509.4
MPI Rank 1: 08/16/2016 03:02:42: Finished Epoch[ 3 of 5]: [Training] ce = 3.20224851 * 20480; err = 0.77514648 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=7.17663s
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:42: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:42: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:02:43:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.98185381 * 2560; err = 0.73554688 * 2560; time = 1.1737s; samplesPerSecond = 2181.1
MPI Rank 1: 08/16/2016 03:02:44:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90257182 * 2560; err = 0.70781250 * 2560; time = 1.0242s; samplesPerSecond = 2499.4
MPI Rank 1: 08/16/2016 03:02:45:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87658405 * 2560; err = 0.70937500 * 2560; time = 0.6909s; samplesPerSecond = 3705.2
MPI Rank 1: 08/16/2016 03:02:46:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.88475653 * 2560; err = 0.71757812 * 2560; time = 1.0994s; samplesPerSecond = 2328.6
MPI Rank 1: 08/16/2016 03:02:47:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.72318647 * 2560; err = 0.70273438 * 2560; time = 1.2561s; samplesPerSecond = 2038.1
MPI Rank 1: 08/16/2016 03:02:48:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75536808 * 2560; err = 0.68945313 * 2560; time = 0.7990s; samplesPerSecond = 3204.2
MPI Rank 1: 08/16/2016 03:02:49:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.74598934 * 2560; err = 0.69218750 * 2560; time = 1.2077s; samplesPerSecond = 2119.8
MPI Rank 1: 08/16/2016 03:02:50:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72856409 * 2560; err = 0.68476563 * 2560; time = 1.0234s; samplesPerSecond = 2501.6
MPI Rank 1: 08/16/2016 03:02:50: Finished Epoch[ 4 of 5]: [Training] ce = 2.82485927 * 20480; err = 0.70493164 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=8.31211s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:50: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:50: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:02:51:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.58512907 * 2560; err = 0.64375000 * 2560; time = 0.8153s; samplesPerSecond = 3140.0
MPI Rank 1: 08/16/2016 03:02:52:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58142844 * 2560; err = 0.66601563 * 2560; time = 0.7794s; samplesPerSecond = 3284.6
MPI Rank 1: 08/16/2016 03:02:53:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.46930316 * 2560; err = 0.64570313 * 2560; time = 1.0223s; samplesPerSecond = 2504.2
MPI Rank 1: 08/16/2016 03:02:54:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.49514628 * 2560; err = 0.63945312 * 2560; time = 0.9409s; samplesPerSecond = 2720.7
MPI Rank 1: 08/16/2016 03:02:55:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.42775581 * 2560; err = 0.62734375 * 2560; time = 0.7336s; samplesPerSecond = 3489.7
MPI Rank 1: 08/16/2016 03:02:55:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.33229687 * 2560; err = 0.60000000 * 2560; time = 0.6466s; samplesPerSecond = 3959.4
MPI Rank 1: 08/16/2016 03:02:56:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.38544278 * 2560; err = 0.62070313 * 2560; time = 1.0471s; samplesPerSecond = 2444.8
MPI Rank 1: 08/16/2016 03:02:57:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.32707222 * 2560; err = 0.60156250 * 2560; time = 0.9722s; samplesPerSecond = 2633.3
MPI Rank 1: 08/16/2016 03:02:57: Finished Epoch[ 5 of 5]: [Training] ce = 2.45044683 * 20480; err = 0.63056641 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=7.00679s
MPI Rank 1: 08/16/2016 03:02:57: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:57: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:02:57: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 2 C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=4 stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [requestnodes (after change)]: all 2 nodes responded
ping [mpihelper]: 2 nodes pinging each other
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
MPI Rank 0: 08/16/2016 03:02:59: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
MPI Rank 0: 08/16/2016 03:02:59: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:02:59: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:02:59: 		Built time: Aug 16 2016 02:54:53
MPI Rank 0: 08/16/2016 03:02:59: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 0: 08/16/2016 03:02:59: 		Build type: Release
MPI Rank 0: 08/16/2016 03:02:59: 		Build target: GPU
MPI Rank 0: 08/16/2016 03:02:59: 		With 1bit-SGD: no
MPI Rank 0: 08/16/2016 03:02:59: 		Math lib: mkl
MPI Rank 0: 08/16/2016 03:02:59: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 0: 08/16/2016 03:02:59: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 0: 08/16/2016 03:02:59: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 0: 08/16/2016 03:02:59: 		Build Branch: HEAD
MPI Rank 0: 08/16/2016 03:02:59: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 0: 08/16/2016 03:02:59: 		Built by svcphil on Philly-Pool3
MPI Rank 0: 08/16/2016 03:02:59: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 0: 08/16/2016 03:02:59: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 0: 08/16/2016 03:03:00: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 0: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Running on cntk-muc01 at 2016/08/16 03:03:00
MPI Rank 0: 08/16/2016 03:03:00: Command line: 
MPI Rank 0: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:00: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/16/2016 03:03:00: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=4
MPI Rank 0: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 0: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ClassificationError
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         useMersenneTwisterRand=true
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/16/2016 03:03:00: Commands: speechTrain
MPI Rank 0: 08/16/2016 03:03:00: Precision = "float"
MPI Rank 0: 08/16/2016 03:03:00: Using 4 CPU threads.
MPI Rank 0: 08/16/2016 03:03:00: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 08/16/2016 03:03:00: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/16/2016 03:03:00: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: ##############################################################################
MPI Rank 0: 08/16/2016 03:03:00: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:00: # Action "train"                                                             #
MPI Rank 0: 08/16/2016 03:03:00: #                                                                            #
MPI Rank 0: 08/16/2016 03:03:00: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ClassificationError()
MPI Rank 0: 	featNorm.invStdDev = InvStdDev()
MPI Rank 0: 	featNorm.mean = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 37 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 26 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Loaded model with 37 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Training criterion node(s):
MPI Rank 0: 08/16/2016 03:03:00: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Evaluation criterion node(s):
MPI Rank 0: 08/16/2016 03:03:00: 	err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 0: 
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 0: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 0: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 0: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 0: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 0: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 0: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 0: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 0: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 0: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 0: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 0: 08/16/2016 03:03:00: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:00: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:01: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:01: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:03:02:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.98185381 * 2560; err = 0.73554688 * 2560; time = 0.9824s; samplesPerSecond = 2605.9
MPI Rank 0: 08/16/2016 03:03:03:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90257182 * 2560; err = 0.70781250 * 2560; time = 1.0388s; samplesPerSecond = 2464.3
MPI Rank 0: 08/16/2016 03:03:04:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87658405 * 2560; err = 0.70937500 * 2560; time = 0.9608s; samplesPerSecond = 2664.4
MPI Rank 0: 08/16/2016 03:03:05:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.88475653 * 2560; err = 0.71757812 * 2560; time = 0.8962s; samplesPerSecond = 2856.4
MPI Rank 0: 08/16/2016 03:03:06:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.72318647 * 2560; err = 0.70273438 * 2560; time = 0.9715s; samplesPerSecond = 2635.0
MPI Rank 0: 08/16/2016 03:03:07:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75536808 * 2560; err = 0.68945313 * 2560; time = 1.0604s; samplesPerSecond = 2414.1
MPI Rank 0: 08/16/2016 03:03:08:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.74598934 * 2560; err = 0.69218750 * 2560; time = 1.0235s; samplesPerSecond = 2501.3
MPI Rank 0: 08/16/2016 03:03:09:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72856409 * 2560; err = 0.68476563 * 2560; time = 0.9177s; samplesPerSecond = 2789.7
MPI Rank 0: 08/16/2016 03:03:09: Finished Epoch[ 4 of 5]: [Training] ce = 2.82485927 * 20480; err = 0.70493164 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=8.06564s
MPI Rank 0: 08/16/2016 03:03:09: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:09: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:09: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/16/2016 03:03:10:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.58512907 * 2560; err = 0.64375000 * 2560; time = 0.9136s; samplesPerSecond = 2802.2
MPI Rank 0: 08/16/2016 03:03:11:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58142844 * 2560; err = 0.66601563 * 2560; time = 0.9281s; samplesPerSecond = 2758.3
MPI Rank 0: 08/16/2016 03:03:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.46930316 * 2560; err = 0.64570313 * 2560; time = 1.0057s; samplesPerSecond = 2545.5
MPI Rank 0: 08/16/2016 03:03:13:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.49514628 * 2560; err = 0.63945312 * 2560; time = 0.8651s; samplesPerSecond = 2959.1
MPI Rank 0: 08/16/2016 03:03:13:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.42775581 * 2560; err = 0.62734375 * 2560; time = 0.4390s; samplesPerSecond = 5831.7
MPI Rank 0: 08/16/2016 03:03:14:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.33229687 * 2560; err = 0.60000000 * 2560; time = 0.7988s; samplesPerSecond = 3204.7
MPI Rank 0: 08/16/2016 03:03:15:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.38544278 * 2560; err = 0.62070313 * 2560; time = 0.8766s; samplesPerSecond = 2920.4
MPI Rank 0: 08/16/2016 03:03:16:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.32707222 * 2560; err = 0.60156250 * 2560; time = 0.7143s; samplesPerSecond = 3584.0
MPI Rank 0: 08/16/2016 03:03:16: Finished Epoch[ 5 of 5]: [Training] ce = 2.45044683 * 20480; err = 0.63056641 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.59206s
MPI Rank 0: 08/16/2016 03:03:16: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/16/2016 03:03:16: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:16: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/16/2016 03:03:16: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/16/2016 03:03:00: Redirecting stderr to file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 1: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:00: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: 		Built time: Aug 16 2016 02:54:53
MPI Rank 1: 08/16/2016 03:03:00: 		Last modified date: Fri Aug 12 05:31:21 2016
MPI Rank 1: 08/16/2016 03:03:00: 		Build type: Release
MPI Rank 1: 08/16/2016 03:03:00: 		Build target: GPU
MPI Rank 1: 08/16/2016 03:03:00: 		With 1bit-SGD: no
MPI Rank 1: 08/16/2016 03:03:00: 		Math lib: mkl
MPI Rank 1: 08/16/2016 03:03:00: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
MPI Rank 1: 08/16/2016 03:03:00: 		CUB_PATH: c:\src\cub-1.4.1
MPI Rank 1: 08/16/2016 03:03:00: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
MPI Rank 1: 08/16/2016 03:03:00: 		Build Branch: HEAD
MPI Rank 1: 08/16/2016 03:03:00: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
MPI Rank 1: 08/16/2016 03:03:00: 		Built by svcphil on Philly-Pool3
MPI Rank 1: 08/16/2016 03:03:00: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
MPI Rank 1: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 1: 08/16/2016 03:03:00: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
MPI Rank 1: 08/16/2016 03:03:00: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: Running on cntk-muc01 at 2016/08/16 03:03:00
MPI Rank 1: 08/16/2016 03:03:00: Command line: 
MPI Rank 1: C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=4  stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:00: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/16/2016 03:03:00: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=4
MPI Rank 1: stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\DNN\Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=4
MPI Rank 1: configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ClassificationError
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         useMersenneTwisterRand=true
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/16/2016 03:03:00: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/16/2016 03:03:00: Commands: speechTrain
MPI Rank 1: 08/16/2016 03:03:00: Precision = "float"
MPI Rank 1: 08/16/2016 03:03:00: Using 4 CPU threads.
MPI Rank 1: 08/16/2016 03:03:00: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 08/16/2016 03:03:00: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/16/2016 03:03:00: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: ##############################################################################
MPI Rank 1: 08/16/2016 03:03:00: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:00: # Action "train"                                                             #
MPI Rank 1: 08/16/2016 03:03:00: #                                                                            #
MPI Rank 1: 08/16/2016 03:03:00: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:00: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech\DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ClassificationError()
MPI Rank 1: 	featNorm.invStdDev = InvStdDev()
MPI Rank 1: 	featNorm.mean = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 37 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.mean = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.ElementTimesArgs[0] = Minus (features, featNorm.mean) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> featNorm.invStdDev = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = ElementTimes (featNorm.ElementTimesArgs[0], featNorm.invStdDev) : [363 x *], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outZ = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ClassificationError (labels, outZ) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outZ, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 26 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 37 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Loaded model with 37 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Training criterion node(s):
MPI Rank 1: 08/16/2016 03:03:01: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Evaluation criterion node(s):
MPI Rank 1: 08/16/2016 03:03:01: 	err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 62 matrices, 33 are shared as 15, and 29 are not shared.
MPI Rank 1: 
MPI Rank 1: 	{ layers[3].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ outLayer.in : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ outLayer.W : [132 x 512] (gradient)
MPI Rank 1: 	  outZ : [132 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *]
MPI Rank 1: 	  layers[3].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.B : [512 x 1] (gradient) }
MPI Rank 1: 	{ finalHiddenToPlus : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.z.PlusArgs[0] : [132 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[3].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[2].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] (gradient) }
MPI Rank 1: 	{ layers[3].Eh : [512 x 1 x *] (gradient)
MPI Rank 1: 	  outLayer.in : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._._.W : [512 x 363] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *]
MPI Rank 1: 	  layers[1].Eh._._.z.PlusArgs[0] : [512 x *] (gradient) }
MPI Rank 1: 	{ layers[1].Eh._ : [512 x 1 x *] (gradient)
MPI Rank 1: 	  layers[1].Eh._._.B : [512 x 1] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z.PlusArgs[0] : [512 x 1 x *] }
MPI Rank 1: 	{ layers[2].Eh._._.W : [512 x 512] (gradient)
MPI Rank 1: 	  layers[2].Eh._._.z : [512 x 1 x *] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Training 779396 parameters in 8 out of 8 parameter tensors and 25 nodes with gradient:
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[1].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[1].Eh._._.W' (LearnableParameter operation) : [512 x 363]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[2].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[2].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[3].Eh._._.B' (LearnableParameter operation) : [512 x 1]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'layers[3].Eh._._.W' (LearnableParameter operation) : [512 x 512]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'outLayer.B' (LearnableParameter operation) : [132 x 1]
MPI Rank 1: 08/16/2016 03:03:01: 	Node 'outLayer.W' (LearnableParameter operation) : [132 x 512]
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:01: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:03:02:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.98185381 * 2560; err = 0.73554688 * 2560; time = 1.0301s; samplesPerSecond = 2485.2
MPI Rank 1: 08/16/2016 03:03:03:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.90257182 * 2560; err = 0.70781250 * 2560; time = 1.0388s; samplesPerSecond = 2464.3
MPI Rank 1: 08/16/2016 03:03:04:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.87658405 * 2560; err = 0.70937500 * 2560; time = 0.9608s; samplesPerSecond = 2664.5
MPI Rank 1: 08/16/2016 03:03:05:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.88475653 * 2560; err = 0.71757812 * 2560; time = 0.8983s; samplesPerSecond = 2849.9
MPI Rank 1: 08/16/2016 03:03:06:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.72318647 * 2560; err = 0.70273438 * 2560; time = 0.9695s; samplesPerSecond = 2640.6
MPI Rank 1: 08/16/2016 03:03:07:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75536808 * 2560; err = 0.68945313 * 2560; time = 1.0603s; samplesPerSecond = 2414.4
MPI Rank 1: 08/16/2016 03:03:08:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.74598934 * 2560; err = 0.69218750 * 2560; time = 1.0234s; samplesPerSecond = 2501.4
MPI Rank 1: 08/16/2016 03:03:09:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72856409 * 2560; err = 0.68476563 * 2560; time = 0.9165s; samplesPerSecond = 2793.1
MPI Rank 1: 08/16/2016 03:03:09: Finished Epoch[ 4 of 5]: [Training] ce = 2.82485927 * 20480; err = 0.70493164 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=8.06404s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:09: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:09: Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 2, numGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/16/2016 03:03:10:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.58512907 * 2560; err = 0.64375000 * 2560; time = 0.9148s; samplesPerSecond = 2798.3
MPI Rank 1: 08/16/2016 03:03:11:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.58142844 * 2560; err = 0.66601563 * 2560; time = 0.9282s; samplesPerSecond = 2757.9
MPI Rank 1: 08/16/2016 03:03:12:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.46930316 * 2560; err = 0.64570313 * 2560; time = 1.0036s; samplesPerSecond = 2550.8
MPI Rank 1: 08/16/2016 03:03:13:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.49514628 * 2560; err = 0.63945312 * 2560; time = 0.8651s; samplesPerSecond = 2959.1
MPI Rank 1: 08/16/2016 03:03:13:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.42775581 * 2560; err = 0.62734375 * 2560; time = 0.4400s; samplesPerSecond = 5818.6
MPI Rank 1: 08/16/2016 03:03:14:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.33229687 * 2560; err = 0.60000000 * 2560; time = 0.7979s; samplesPerSecond = 3208.6
MPI Rank 1: 08/16/2016 03:03:15:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.38544278 * 2560; err = 0.62070313 * 2560; time = 0.8766s; samplesPerSecond = 2920.5
MPI Rank 1: 08/16/2016 03:03:16:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.32707222 * 2560; err = 0.60156250 * 2560; time = 0.7125s; samplesPerSecond = 3593.0
MPI Rank 1: 08/16/2016 03:03:16: Finished Epoch[ 5 of 5]: [Training] ce = 2.45044683 * 20480; err = 0.63056641 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.58981s
MPI Rank 1: 08/16/2016 03:03:16: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:16: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/16/2016 03:03:16: __COMPLETED__
MPI Rank 1: ~MPIWrapper