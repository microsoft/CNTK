CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand OutputDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu DeviceId=0 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 16:05:03
		Last modified date: Mon Aug 15 21:17:49 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: e08387a84c9168982e0feec3a0f9ce5d17a62e5a
		Built by philly on 596b809798b4
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
08/16/2016 16:17:58: -------------------------------------------------------------------
08/16/2016 16:17:58: Build info: 

08/16/2016 16:17:58: 		Built time: Aug 16 2016 16:05:03
08/16/2016 16:17:58: 		Last modified date: Mon Aug 15 21:17:49 2016
08/16/2016 16:17:58: 		Build type: release
08/16/2016 16:17:58: 		Build target: GPU
08/16/2016 16:17:58: 		With 1bit-SGD: no
08/16/2016 16:17:58: 		Math lib: mkl
08/16/2016 16:17:58: 		CUDA_PATH: /usr/local/cuda-7.5
08/16/2016 16:17:58: 		CUB_PATH: /usr/local/cub-1.4.1
08/16/2016 16:17:58: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/16/2016 16:17:58: 		Build Branch: HEAD
08/16/2016 16:17:58: 		Build SHA1: e08387a84c9168982e0feec3a0f9ce5d17a62e5a
08/16/2016 16:17:58: 		Built by philly on 596b809798b4
08/16/2016 16:17:58: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/16/2016 16:17:58: -------------------------------------------------------------------
08/16/2016 16:17:58: -------------------------------------------------------------------
08/16/2016 16:17:58: GPU info:

08/16/2016 16:17:58: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 16:17:58: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 16:17:58: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 16:17:58: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 16:17:58: -------------------------------------------------------------------

08/16/2016 16:17:58: Running on localhost at 2016/08/16 16:17:58
08/16/2016 16:17:58: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand  OutputDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu  DeviceId=0  timestamping=true  shareNodeValueMatrices=true



08/16/2016 16:17:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 16:17:58: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
DeviceId=0
timestamping=true
shareNodeValueMatrices=true

08/16/2016 16:17:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 16:17:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 16:17:58: precision = "float"
command = speechTrain:write
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = 0
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/Output"
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand
OutputDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
DeviceId=0
timestamping=true
shareNodeValueMatrices=true

08/16/2016 16:17:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 16:17:58: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/WriteCommand
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = 0
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/Output"
]

08/16/2016 16:17:58: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 16:17:58: Commands: speechTrain write
08/16/2016 16:17:58: Precision = "float"
08/16/2016 16:17:58: CNTKModelPath: /tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn
08/16/2016 16:17:58: CNTKCommandTrainInfo: speechTrain : 3
08/16/2016 16:17:58: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 16:17:58: ##############################################################################
08/16/2016 16:17:58: #                                                                            #
08/16/2016 16:17:58: # Action "train"                                                             #
08/16/2016 16:17:58: #                                                                            #
08/16/2016 16:17:58: ##############################################################################

08/16/2016 16:17:58: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 16:17:58: Creating virgin network.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 16:17:59: Created model with 25 nodes on GPU 0.

08/16/2016 16:17:59: Training criterion node(s):
08/16/2016 16:17:59: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 16:17:59: Evaluation criterion node(s):
08/16/2016 16:17:59: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 21 are shared as 7, and 19 are not shared.

	{ H2 : [512 x 1 x *]
	  W0 : [512 x 363] (gradient)
	  W0*features+B0 : [512 x 1 x *]
	  W0*features+B0 : [512 x 1 x *] (gradient)
	  W1*H1 : [512 x 1 x *]
	  W1*H1 : [512 x 1 x *] (gradient) }
	{ H1 : [512 x 1 x *]
	  W0*features : [512 x *]
	  W0*features : [512 x *] (gradient) }
	{ W1*H1+B1 : [512 x 1 x *]
	  W2*H1 : [132 x 1 x *] }
	{ HLast : [132 x 1 x *]
	  W2 : [132 x 512] (gradient) }
	{ B1 : [512 x 1] (gradient)
	  H2 : [512 x 1 x *] (gradient)
	  HLast : [132 x 1 x *] (gradient) }
	{ W1 : [512 x 512] (gradient)
	  W1*H1+B1 : [512 x 1 x *] (gradient)
	  W2*H1 : [132 x 1 x *] (gradient) }
	{ B0 : [512 x 1] (gradient)
	  H1 : [512 x 1 x *] (gradient) }


08/16/2016 16:17:59: Training 516740 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 16:17:59: 	Node 'B0' (LearnableParameter operation) : [512 x 1]
08/16/2016 16:17:59: 	Node 'B1' (LearnableParameter operation) : [512 x 1]
08/16/2016 16:17:59: 	Node 'B2' (LearnableParameter operation) : [132 x 1]
08/16/2016 16:17:59: 	Node 'W0' (LearnableParameter operation) : [512 x 363]
08/16/2016 16:17:59: 	Node 'W1' (LearnableParameter operation) : [512 x 512]
08/16/2016 16:17:59: 	Node 'W2' (LearnableParameter operation) : [132 x 512]


08/16/2016 16:17:59: Precomputing --> 3 PreCompute nodes found.

08/16/2016 16:17:59: 	MeanOfFeatures = Mean()
08/16/2016 16:17:59: 	InvStdOfFeatures = InvStdDev()
08/16/2016 16:17:59: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 16:17:59: Precomputing --> Completed.


08/16/2016 16:18:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/16/2016 16:18:00: Starting minibatch loop.
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.53638611 * 640; EvalClassificationError = 0.92031250 * 640; time = 0.0102s; samplesPerSecond = 62640.7
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.32517776 * 640; EvalClassificationError = 0.92500000 * 640; time = 0.0083s; samplesPerSecond = 77266.7
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 3.98246384 * 640; EvalClassificationError = 0.87187500 * 640; time = 0.0083s; samplesPerSecond = 77108.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.73673553 * 640; EvalClassificationError = 0.84531250 * 640; time = 0.0083s; samplesPerSecond = 77266.7
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.84021912 * 640; EvalClassificationError = 0.86406250 * 640; time = 0.0083s; samplesPerSecond = 76941.6
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.69831390 * 640; EvalClassificationError = 0.86250000 * 640; time = 0.0083s; samplesPerSecond = 76729.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.39593201 * 640; EvalClassificationError = 0.77031250 * 640; time = 0.0083s; samplesPerSecond = 77266.7
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.49749756 * 640; EvalClassificationError = 0.82968750 * 640; time = 0.0083s; samplesPerSecond = 77229.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.47295837 * 640; EvalClassificationError = 0.81093750 * 640; time = 0.0083s; samplesPerSecond = 77154.9
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.36483765 * 640; EvalClassificationError = 0.79843750 * 640; time = 0.0083s; samplesPerSecond = 77257.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.46790466 * 640; EvalClassificationError = 0.81718750 * 640; time = 0.0083s; samplesPerSecond = 77210.8
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.22105103 * 640; EvalClassificationError = 0.75625000 * 640; time = 0.0101s; samplesPerSecond = 63454.3
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.12504578 * 640; EvalClassificationError = 0.75312500 * 640; time = 0.0083s; samplesPerSecond = 76821.5
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 2.99507751 * 640; EvalClassificationError = 0.71875000 * 640; time = 0.0083s; samplesPerSecond = 77136.3
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 2.89601440 * 640; EvalClassificationError = 0.70000000 * 640; time = 0.0083s; samplesPerSecond = 77313.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.04739380 * 640; EvalClassificationError = 0.74218750 * 640; time = 0.0083s; samplesPerSecond = 76766.2
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.75064697 * 640; EvalClassificationError = 0.69375000 * 640; time = 0.0083s; samplesPerSecond = 76720.2
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.65537720 * 640; EvalClassificationError = 0.63750000 * 640; time = 0.0083s; samplesPerSecond = 77313.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.74816895 * 640; EvalClassificationError = 0.69062500 * 640; time = 0.0083s; samplesPerSecond = 77062.0
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.68736572 * 640; EvalClassificationError = 0.68593750 * 640; time = 0.0083s; samplesPerSecond = 77369.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.53269653 * 640; EvalClassificationError = 0.64375000 * 640; time = 0.0083s; samplesPerSecond = 77015.6
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.53923340 * 640; EvalClassificationError = 0.63750000 * 640; time = 0.0083s; samplesPerSecond = 77145.6
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.48909302 * 640; EvalClassificationError = 0.64218750 * 640; time = 0.0083s; samplesPerSecond = 77006.4
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.50032349 * 640; EvalClassificationError = 0.65156250 * 640; time = 0.0083s; samplesPerSecond = 76950.8
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.43569336 * 640; EvalClassificationError = 0.63125000 * 640; time = 0.0083s; samplesPerSecond = 77322.7
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.34293823 * 640; EvalClassificationError = 0.61562500 * 640; time = 0.0083s; samplesPerSecond = 76997.1
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.20427856 * 640; EvalClassificationError = 0.57812500 * 640; time = 0.0089s; samplesPerSecond = 71999.1
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.46885986 * 640; EvalClassificationError = 0.65468750 * 640; time = 0.0077s; samplesPerSecond = 83550.9
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.22067261 * 640; EvalClassificationError = 0.58906250 * 640; time = 0.0077s; samplesPerSecond = 83550.9
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.21785278 * 640; EvalClassificationError = 0.60781250 * 640; time = 0.0077s; samplesPerSecond = 83106.1
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.20442505 * 640; EvalClassificationError = 0.57812500 * 640; time = 0.0077s; samplesPerSecond = 83235.8
08/16/2016 16:18:00:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.18215332 * 640; EvalClassificationError = 0.58593750 * 640; time = 0.0077s; samplesPerSecond = 83398.5
08/16/2016 16:18:00: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 2.99321213 * 20480; EvalClassificationError = 0.72216797 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=0.269524s
08/16/2016 16:18:00: SGD: Saving checkpoint model '/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn.1'

08/16/2016 16:18:00: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

08/16/2016 16:18:00: Starting minibatch loop.
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.08889847 * 2560; EvalClassificationError = 0.56367188 * 2560; time = 0.0145s; samplesPerSecond = 176478.7
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.00776215 * 2560; EvalClassificationError = 0.54218750 * 2560; time = 0.0124s; samplesPerSecond = 206785.1
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.99260178 * 2560; EvalClassificationError = 0.54257813 * 2560; time = 0.0124s; samplesPerSecond = 206468.3
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.98459930 * 2560; EvalClassificationError = 0.54648438 * 2560; time = 0.0124s; samplesPerSecond = 206885.4
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.97206497 * 2560; EvalClassificationError = 0.53984375 * 2560; time = 0.0124s; samplesPerSecond = 206852.0
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.91865540 * 2560; EvalClassificationError = 0.52109375 * 2560; time = 0.0124s; samplesPerSecond = 206584.9
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91066666 * 2560; EvalClassificationError = 0.52148438 * 2560; time = 0.0131s; samplesPerSecond = 196063.4
08/16/2016 16:18:00:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.89501343 * 2560; EvalClassificationError = 0.51992187 * 2560; time = 0.0122s; samplesPerSecond = 209355.6
08/16/2016 16:18:00: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.97128277 * 20480; EvalClassificationError = 0.53715820 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.103715s
08/16/2016 16:18:00: SGD: Saving checkpoint model '/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn.2'

08/16/2016 16:18:00: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

08/16/2016 16:18:00: Starting minibatch loop.
08/16/2016 16:18:00:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89820576 * 10240; EvalClassificationError = 0.52470703 * 10240; time = 0.0337s; samplesPerSecond = 303641.3
08/16/2016 16:18:00:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.91958065 * 10240; EvalClassificationError = 0.53974609 * 10240; time = 0.0302s; samplesPerSecond = 338624.3
08/16/2016 16:18:00: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.90889320 * 20480; EvalClassificationError = 0.53222656 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.067649s
08/16/2016 16:18:00: SGD: Saving checkpoint model '/tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/models/cntkSpeech.dnn'
08/16/2016 16:18:00: CNTKCommandTrainEnd: speechTrain

08/16/2016 16:18:00: Action "train" complete.


08/16/2016 16:18:00: ##############################################################################
08/16/2016 16:18:00: #                                                                            #
08/16/2016 16:18:00: # Action "write"                                                             #
08/16/2016 16:18:00: #                                                                            #
08/16/2016 16:18:00: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 12 are shared as 3, and 13 are not shared.

	{ CrossEntropyWithSoftmax : [1]
	  EvalClassificationError : [1]
	  PosteriorProb : [132 x 1 x *1] }
	{ H1 : [512 x 1 x *1]
	  W0*features : [512 x *1]
	  W1*H1+B1 : [512 x 1 x *1]
	  W2*H1 : [132 x 1 x *1] }
	{ H2 : [512 x 1 x *1]
	  HLast : [132 x 1 x *1]
	  MVNormalizedFeatures : [363 x *1]
	  W0*features+B0 : [512 x 1 x *1]
	  W1*H1 : [512 x 1 x *1] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to /tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/Output*
Total Samples Evaluated = 3250

08/16/2016 16:18:00: Action "write" complete.

08/16/2016 16:18:00: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /tmp/cntk-test-20160816161514.827041/Speech/DNN_WriteCommand@release_gpu/Output.ScaledLogLikelihood.diff
