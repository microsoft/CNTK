=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/../cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/.. OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 17:56:15
		Last modified date: Tue May  3 11:36:22 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
		Built by philly on 18750d26eb32
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
05/03/2016 18:08:48: -------------------------------------------------------------------
05/03/2016 18:08:48: Build info: 

05/03/2016 18:08:48: 		Built time: May  3 2016 17:56:15
05/03/2016 18:08:48: 		Last modified date: Tue May  3 11:36:22 2016
05/03/2016 18:08:48: 		Build type: release
05/03/2016 18:08:48: 		Build target: GPU
05/03/2016 18:08:48: 		With 1bit-SGD: no
05/03/2016 18:08:48: 		Math lib: acml
05/03/2016 18:08:48: 		CUDA_PATH: /usr/local/cuda-7.5
05/03/2016 18:08:48: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 18:08:48: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 18:08:48: 		Build Branch: HEAD
05/03/2016 18:08:48: 		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
05/03/2016 18:08:48: 		Built by philly on 18750d26eb32
05/03/2016 18:08:48: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/03/2016 18:08:48: -------------------------------------------------------------------

05/03/2016 18:08:48: Running on localhost at 2016/05/03 18:08:48
05/03/2016 18:08:48: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/..  OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu  DeviceId=-1  timestamping=true



05/03/2016 18:08:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:08:48: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
DeviceId=-1
timestamping=true

05/03/2016 18:08:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:08:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:08:48: precision = "float"
deviceId = -1
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
DeviceId=-1
timestamping=true

05/03/2016 18:08:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:08:48: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated/..
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=true
05/03/2016 18:08:48: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 18:08:48: Commands: speechTrain
05/03/2016 18:08:48: Precision = "float"
05/03/2016 18:08:48: CNTKModelPath: /tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn
05/03/2016 18:08:48: CNTKCommandTrainInfo: speechTrain : 4
05/03/2016 18:08:48: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

05/03/2016 18:08:48: ##############################################################################
05/03/2016 18:08:48: #                                                                            #
05/03/2016 18:08:48: # Action "train"                                                             #
05/03/2016 18:08:48: #                                                                            #
05/03/2016 18:08:48: ##############################################################################

05/03/2016 18:08:48: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

05/03/2016 18:08:48: Creating virgin network.

Post-processing network...

7 roots:
	ScaledLogLikelihood = Pass()
	ce = Pass()
	crExplicit = Negate()
	err = ErrorPrediction()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior.x = Mean()

Loop[0] --> Loop_LSTMoutput[1].lstmState.h.htp -> 35 nodes

	LSTMoutput[1].prevState.h	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[1].prevState.c	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ft.z	LSTMoutput[1].lstmState._privateInnards.ft
	LSTMoutput[1].lstmState._privateInnards.bft	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z	LSTMoutput[1].lstmState._privateInnards.it	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit	LSTMoutput[1].lstmState._privateInnards.ct
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ot.z
	LSTMoutput[1].lstmState._privateInnards.ot	LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.ht
	LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_LSTMoutput[2].lstmState.h.htp -> 35 nodes

	LSTMoutput[2].prevState.h	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[2].prevState.c	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ft.z	LSTMoutput[2].lstmState._privateInnards.ft
	LSTMoutput[2].lstmState._privateInnards.bft	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z	LSTMoutput[2].lstmState._privateInnards.it	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit	LSTMoutput[2].lstmState._privateInnards.ct
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ot.z
	LSTMoutput[2].lstmState._privateInnards.ot	LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.ht
	LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_LSTMoutput[3].lstmState.h.htp -> 35 nodes

	LSTMoutput[3].prevState.h	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[3].prevState.c	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ft.z	LSTMoutput[3].lstmState._privateInnards.ft
	LSTMoutput[3].lstmState._privateInnards.bft	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z	LSTMoutput[3].lstmState._privateInnards.it	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit	LSTMoutput[3].lstmState._privateInnards.ct
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ot.z
	LSTMoutput[3].lstmState._privateInnards.ot	LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.ht
	LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[3].lstmState.h.htp

Validating network. 283 nodes to process in pass 1.

Validating --> W = LearnableParameter() :  -> [132 x 256]
Validating --> z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> z.PlusArgs[0].TimesArgs[1].beta = Exp (z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft, LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (LSTMoutput[1].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it, LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ct = Plus (LSTMoutput[1].lstmState._privateInnards.bft, LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot, LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp = Times (LSTMoutput[1].lstmState.h.Wmr, LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft, LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (LSTMoutput[2].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it, LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ct = Plus (LSTMoutput[2].lstmState._privateInnards.bft, LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot, LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp = Times (LSTMoutput[2].lstmState.h.Wmr, LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft, LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (LSTMoutput[3].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it, LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ct = Plus (LSTMoutput[3].lstmState._privateInnards.bft, LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot, LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp = Times (LSTMoutput[3].lstmState.h.Wmr, LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0] = Times (W, z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior.x = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior.x) : [132] -> [132]
Validating --> ScaledLogLikelihood.x = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood.x) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crNode = CrossEntropyWithSoftmax (labels, z) : [132 x *], [132 x 1 x *] -> [1]
Validating --> ce = Pass (crNode) : [1] -> [1]
Validating --> crExplicit._negate.z.ElementTimesArgs[1] = LogSoftmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate.z = ElementTimes (labels, crExplicit._negate.z.ElementTimesArgs[1]) : [132 x *], [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate = ReduceElements (crExplicit._negate.z) : [132 x 1 x *] -> [1 x *]
Validating --> crExplicit = Negate (crExplicit._negate) : [1 x *] -> [1 x *]
Validating --> err = ErrorPrediction (labels, z) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 194 nodes to process in pass 2.

Validating --> LSTMoutput[1].prevState.h = PastValue (LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].prevState.c = PastValue (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.h = PastValue (LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.c = PastValue (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.h = PastValue (LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.c = PastValue (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 283 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 18:08:48: Created model with 283 nodes on CPU.

05/03/2016 18:08:48: Training criterion node(s):
05/03/2016 18:08:48: 	ce = Pass

05/03/2016 18:08:48: Evaluation criterion node(s):

05/03/2016 18:08:48: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ScaledLogLikelihood Gradient[132 x 1 x *]] [ScaledLogLikelihood.x Gradient[132 x 1 x *]] [crExplicit Gradient[1 x *]] [crExplicit Value[1 x *]] [crExplicit._negate Gradient[1 x *]] [crExplicit._negate Value[1 x *]] [crExplicit._negate.z Gradient[132 x 1 x *]] [crExplicit._negate.z Value[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Gradient[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Value[132 x 1 x *]] [err Gradient[1]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior.x Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x22814c8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2281628: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2281dc8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2282fb8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].prevState.h Value[256 x 1 x *]] }
0x2283448: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x22834e8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x228be28: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x228cbc8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x228ce08: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x228d048: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x228d388: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x228d5c8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x228d808: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x228db48: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x228dd88: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x228dfc8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x228e2c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x228f0c8: {[logPrior Value[132]] }
0x242c488: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x242c548: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x246ccd8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x246d5b8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x246d8b8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x246d958: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x246da08: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2470bd8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2472d38: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2477c78: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24782f8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x247a078: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x247d5c8: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x247f598: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x247f758: {[ce Value[1]] }
0x2489248: {[z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x2489408: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x248b098: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x248bc08: {[labels Value[132 x *]] }
0x248e188: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x248e4c8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x248e618: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2490888: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2490a48: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2490c08: {[LSTMoutput[1].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2490dc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2490f88: {[LSTMoutput[1].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x2491148: {[LSTMoutput[3].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x2491308: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x24914c8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2491688: {[LSTMoutput[3].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x2491848: {[LSTMoutput[3].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x2491a08: {[LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2491bc8: {[LSTMoutput[3].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x2491d88: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x2491f48: {[LSTMoutput[3].lstmState.h.htp Value[256 x 1 x *]] }
0x2492108: {[LSTMoutput[3].lstmState.h.Wmr Gradient[256 x 1024]] [z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x24922c8: {[z.PlusArgs[0] Value[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x2492488: {[W Gradient[132 x 256]] [z Value[132 x 1 x *]] }
0x2492648: {[ScaledLogLikelihood.x Value[132 x 1 x *]] }
0x2492808: {[LSTMoutput[3].lstmState.h.htp Gradient[256 x 1 x *]] [crNode Value[1]] [z.PlusArgs[0] Gradient[132 x 1 x *]] }
0x24932b8: {[ce Gradient[1]] }
0x2493478: {[B Gradient[132]] [crNode Gradient[1]] }
0x2493638: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [z Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2493828: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0x24939e8: {[LSTMoutput[3].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] }
0x2493ba8: {[LSTMoutput[3].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] }
0x2493d68: {[LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2493f28: {[LSTMoutput[3].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] }
0x24940e8: {[LSTMoutput[3].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] }
0x24942a8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2494468: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2494628: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x24947e8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x24949a8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x2494b68: {[LSTMoutput[1].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] }
0x2494d28: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] }
0x2494ee8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it Gradient[1024 x 1 x *]] }
0x24950a8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2495268: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x2495428: {[LSTMoutput[2].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x24955e8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x24957a8: {[LSTMoutput[1].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2495968: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x2495b28: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2495ce8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2495ea8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x2496068: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].prevState.h Gradient[256 x 1 x *]] }
0x2496228: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] }
0x24963e8: {[LSTMoutput[1].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x24965a8: {[LSTMoutput[1].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2496768: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x2496928: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x2496ae8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x2496ca8: {[LSTMoutput[1].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Gradient[1024 x 1 x *]] }
0x2496e68: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2497028: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x24971e8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x24973a8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2497568: {[LSTMoutput[2].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0x2497728: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] }
0x24978e8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] }
0x2497aa8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2497c68: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2497e28: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x2497fe8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x24981a8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x2498368: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x2498528: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x24986e8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x24988a8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2498a68: {[LSTMoutput[2].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0x2498c28: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2498de8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2498fa8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2499168: {[LSTMoutput[2].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x2499328: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0x249aee8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x249db98: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x249dc48: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x24a0718: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x24a46c8: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x24a4788: {[LSTMoutput[2].lstmState.h.Wmr Value[256 x 1024]] }
0x24abfe8: {[realFeatures Value[363 x 1 x *]] }
0x24ac758: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x24acd98: {[feashift Value[33 x 1 x *]] }
0x24ad3c8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0x24af8e8: {[featNorm Value[33 x 1 x *]] }
0x24b0328: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x24b0488: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x24b05e8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x24b0748: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x24b08a8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x24b0a08: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x24b0b68: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x24b0cc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x24b0e28: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x24b1068: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x24b27d8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x24b2938: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x24b2a98: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x24b2bf8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x24b2d58: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x24b2eb8: {[LSTMoutput[1].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x24b3018: {[LSTMoutput[1].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x24b3178: {[LSTMoutput[1].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x24b32d8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x24b3438: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x24b3598: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x24b36f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x24b3858: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x24b39b8: {[LSTMoutput[1].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x24b3b18: {[LSTMoutput[1].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x24b3c78: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x24b3dd8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x24b6008: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x24b60a8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x24c8638: {[z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24c9df8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Value[1024 x 1 x *]] }
0x24ca648: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x24cabb8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x24cb958: {[features Value[1 x 363 x *]] }
0x24ce518: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24d1148: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x24d70b8: {[featNorm.invStdDevVector Value[33 x 1]] }
0x24d7ae8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x24da188: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x24dcc18: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x24df3e8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24df488: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x24e0098: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24e0588: {[featNorm.meanVector Value[33 x 1]] }
0x24e1a68: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].prevState.h Value[256 x 1 x *]] }
0x24e1b48: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24e3fd8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x24e5058: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x24ed2e8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x24ee878: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x24f13a8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x24f16f8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x24f1798: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x24f1bb8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x24f2b08: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24f7fd8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24f9f48: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x24faf98: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x24fc098: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x24fc5b8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x24fc658: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2509ec8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250a088: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x250a248: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250a408: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x250a5c8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250a9b8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250abf8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250ae38: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250b178: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250b3b8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250b5f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250b938: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250bb78: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250bdb8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250c0b8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250ceb8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250d0f8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250d338: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250d678: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250d8b8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250daf8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x250de38: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x250e078: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x250e2b8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x25101a8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2511408: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2511d98: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].prevState.h Value[256 x 1 x *]] }
0x25135c8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2514908: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2514d58: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2519308: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2519a78: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x251ca08: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Value[1024 x 1 x *]] }
0x251eaa8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x251f998: {[LSTMoutput[1].prevState.c Value[1024 x 1 x *]] }
0x2521d48: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2526028: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2526458: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2526f58: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x252a9b8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x252e098: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x252e258: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x252f7e8: {[LSTMoutput[1].lstmState.h.Wmr Value[256 x 1024]] }
0x2531b88: {[err Value[1]] }
0x2531ef8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2532578: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2532648: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x25337d8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x25338b8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2533f28: {[logPrior.x Value[132]] }
0x2537c28: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2538968: {[LSTMoutput[3].lstmState.h.Wmr Value[256 x 1024]] }
0x253acb8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x253ba68: {[B Value[132]] }
0x253f638: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x253fd98: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2542688: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x2544078: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x25445f8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x257d748: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2596268: {[W Value[132 x 256]] }
0x2597738: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2597898: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x25979f8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2597b58: {[LSTMoutput[1].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x2597cb8: {[LSTMoutput[1].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x2597e18: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x2597f78: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2598138: {[LSTMoutput[1].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x25982f8: {[LSTMoutput[1].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x25984b8: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2598678: {[LSTMoutput[1].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x2598838: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x25989f8: {[LSTMoutput[1].lstmState.h.htp Value[256 x 1 x *]] }
0x2598bb8: {[LSTMoutput[1].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x2598d78: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0x2598f38: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x25990f8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x25992b8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x2599478: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2599638: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x25997f8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x25999b8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2599b78: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x2599d38: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x2599ef8: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x259a0b8: {[LSTMoutput[1].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x259a278: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x259a438: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x259a5f8: {[LSTMoutput[1].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x259a7b8: {[LSTMoutput[1].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x259a978: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x259ab38: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x259acf8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x259aeb8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x259b078: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x259b238: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x259b3f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x259b5b8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x259b778: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x259b938: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x259baf8: {[LSTMoutput[1].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x259bcb8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x259be78: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x259c038: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x259c1f8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x259c3b8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x259c578: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x259c738: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x259c8f8: {[LSTMoutput[2].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x259cab8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x259cc78: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x259ce38: {[LSTMoutput[2].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x259cff8: {[LSTMoutput[2].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x259d1b8: {[LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x259d378: {[LSTMoutput[2].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x259d538: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x259d6f8: {[LSTMoutput[2].lstmState.h.htp Value[256 x 1 x *]] }
0x259d8b8: {[LSTMoutput[2].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x259da78: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0x259dc38: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x259ddf8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x259dfb8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x259e178: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x259e338: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x259e4f8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x259e6b8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x259e878: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x259ea38: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x259ebf8: {[LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x259edb8: {[LSTMoutput[2].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x259ef78: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x259f138: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x259f2f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x259f4b8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x259f678: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x259f838: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x259f9f8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x259fbb8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x259fd78: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x259ff38: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x25a00f8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x25a02b8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x25a0478: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x25a0638: {[LSTMoutput[1].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x25a07f8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x25a09b8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x25a0b78: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }


05/03/2016 18:08:49: Precomputing --> 3 PreCompute nodes found.

05/03/2016 18:08:49: 	featNorm.meanVector = Mean()
05/03/2016 18:08:49: 	featNorm.invStdDevVector = InvStdDev()
05/03/2016 18:08:49: 	logPrior.x = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

05/03/2016 18:08:52: Precomputing --> Completed.


05/03/2016 18:08:52: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

05/03/2016 18:08:53: Starting minibatch loop.
05/03/2016 18:09:01:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: ce = 4.80572479 * 6400; err = 0.90281250 * 6400; time = 8.5039s; samplesPerSecond = 752.6
05/03/2016 18:09:10:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: ce = 4.59893951 * 6400; err = 0.85390625 * 6400; time = 8.8814s; samplesPerSecond = 720.6
05/03/2016 18:09:19:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: ce = 5.52913826 * 5738; err = 0.88654583 * 5738; time = 8.7948s; samplesPerSecond = 652.4
05/03/2016 18:09:27:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: ce = 4.56729365 * 1840; err = 0.88369565 * 1840; time = 7.9152s; samplesPerSecond = 232.5
05/03/2016 18:09:30: Finished Epoch[ 1 of 4]: [Training] ce = 4.91749002 * 20546; err = 0.88021999 * 20546; totalSamplesSeen = 20546; learningRatePerSample = 0.00078125001; epochTime=37.5048s
05/03/2016 18:09:30: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn.1'

05/03/2016 18:09:31: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20546), data subset 0 of 1, with 1 datapasses

05/03/2016 18:09:31: Starting minibatch loop.
05/03/2016 18:09:40:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: ce = 4.47223267 * 6400; err = 0.91109375 * 6400; time = 9.5332s; samplesPerSecond = 671.3
05/03/2016 18:09:49:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: ce = 4.39250671 * 6400; err = 0.87343750 * 6400; time = 8.5879s; samplesPerSecond = 745.2
05/03/2016 18:09:57:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: ce = 4.39425923 * 4782; err = 0.91447093 * 4782; time = 7.9916s; samplesPerSecond = 598.4
05/03/2016 18:10:04:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: ce = 4.41530524 * 2238; err = 0.93610366 * 2238; time = 7.8032s; samplesPerSecond = 286.8
05/03/2016 18:10:15:  Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: ce = 4.45681281 * 608; err = 0.92927632 * 608; time = 10.1852s; samplesPerSecond = 59.7
05/03/2016 18:10:15: Finished Epoch[ 2 of 4]: [Training] ce = 4.42176183 * 20434; err = 0.90310267 * 20434; totalSamplesSeen = 40980; learningRatePerSample = 0.00078125001; epochTime=44.9388s
05/03/2016 18:10:16: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn.2'

05/03/2016 18:10:16: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40980), data subset 0 of 1, with 1 datapasses

05/03/2016 18:10:16: Starting minibatch loop.
05/03/2016 18:10:25:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: ce = 4.14042542 * 6400; err = 0.83671875 * 6400; time = 9.0509s; samplesPerSecond = 707.1
05/03/2016 18:10:33:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: ce = 4.17684998 * 6400; err = 0.86468750 * 6400; time = 7.7267s; samplesPerSecond = 828.3
05/03/2016 18:10:41:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: ce = 4.23903612 * 5330; err = 0.89530957 * 5330; time = 7.8929s; samplesPerSecond = 675.3
05/03/2016 18:10:50:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: ce = 4.41369312 * 2390; err = 0.94016736 * 2390; time = 8.8715s; samplesPerSecond = 269.4
05/03/2016 18:10:53: Finished Epoch[ 3 of 4]: [Training] ce = 4.20693304 * 20682; err = 0.87264288 * 20682; totalSamplesSeen = 61662; learningRatePerSample = 0.00078125001; epochTime=36.8398s
05/03/2016 18:10:53: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn.3'

05/03/2016 18:10:53: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61662), data subset 0 of 1, with 1 datapasses

05/03/2016 18:10:54: Starting minibatch loop.
05/03/2016 18:11:03:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: ce = 4.06095703 * 6400; err = 0.85125000 * 6400; time = 9.4311s; samplesPerSecond = 678.6
05/03/2016 18:11:12:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: ce = 4.12552429 * 6400; err = 0.87437500 * 6400; time = 9.3077s; samplesPerSecond = 687.6
05/03/2016 18:11:22:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: ce = 4.13897448 * 5796; err = 0.87370600 * 5796; time = 9.8220s; samplesPerSecond = 590.1
05/03/2016 18:11:31:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: ce = 4.05378643 * 1630; err = 0.89018405 * 1630; time = 8.5546s; samplesPerSecond = 190.5
05/03/2016 18:11:36: Finished Epoch[ 4 of 4]: [Training] ce = 4.09726114 * 20366; err = 0.86727880 * 20366; totalSamplesSeen = 82028; learningRatePerSample = 0.00078125001; epochTime=42.9924s
05/03/2016 18:11:37: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated@release_cpu/models/cntkSpeech.dnn'
05/03/2016 18:11:37: CNTKCommandTrainEnd: speechTrain

05/03/2016 18:11:37: Action "train" complete.

05/03/2016 18:11:37: __COMPLETED__