=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance OutputDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu DeviceId=0 timestamping=true Truncated=false speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: May  4 2016 07:17:05
		Last modified date: Tue May  3 11:36:23 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: f791064dc55b8bbbfbccf5265cb68431019ff646
		Built by philly on cded08e6b560
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
05/04/2016 07:48:16: -------------------------------------------------------------------
05/04/2016 07:48:16: Build info: 

05/04/2016 07:48:16: 		Built time: May  4 2016 07:17:05
05/04/2016 07:48:16: 		Last modified date: Tue May  3 11:36:23 2016
05/04/2016 07:48:16: 		Build type: release
05/04/2016 07:48:16: 		Build target: GPU
05/04/2016 07:48:16: 		With 1bit-SGD: no
05/04/2016 07:48:16: 		Math lib: acml
05/04/2016 07:48:16: 		CUDA_PATH: /usr/local/cuda-7.5
05/04/2016 07:48:16: 		CUB_PATH: /usr/local/cub-1.4.1
05/04/2016 07:48:16: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/04/2016 07:48:16: 		Build Branch: HEAD
05/04/2016 07:48:16: 		Build SHA1: f791064dc55b8bbbfbccf5265cb68431019ff646
05/04/2016 07:48:16: 		Built by philly on cded08e6b560
05/04/2016 07:48:16: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/04/2016 07:48:16: -------------------------------------------------------------------

05/04/2016 07:48:16: Running on localhost at 2016/05/04 07:48:16
05/04/2016 07:48:16: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance  OutputDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu  DeviceId=0  timestamping=true  Truncated=false  speechTrain=[SGD=[epochSize=2560]]  speechTrain=[SGD=[maxEpochs=2]]  speechTrain=[SGD=[numMBsToShowResult=1]]  shareNodeValueMatrices=true



05/04/2016 07:48:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/04/2016 07:48:16: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "$DataDir$/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "$DataDir$/glob_0000.mlf"
                        labelMappingFile = "$DataDir$/state.list"
                        scpFile = "$DataDir$/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance
OutputDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

05/04/2016 07:48:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/04/2016 07:48:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/04/2016 07:48:16: precision = "float"
deviceId = 0
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
                        labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
                        scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance
OutputDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

05/04/2016 07:48:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/04/2016 07:48:16: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/ExperimentalHtkmlfReader/LSTM/FullUtterance/../../../ExperimentalHtkmlfReader/LSTM/FullUtterance
configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
                        labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
                        scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=false
05/04/2016 07:48:16: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/04/2016 07:48:16: Commands: speechTrain
05/04/2016 07:48:16: Precision = "float"
05/04/2016 07:48:16: CNTKModelPath: /tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn
05/04/2016 07:48:16: CNTKCommandTrainInfo: speechTrain : 2
05/04/2016 07:48:16: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

05/04/2016 07:48:16: ##############################################################################
05/04/2016 07:48:16: #                                                                            #
05/04/2016 07:48:16: # Action "train"                                                             #
05/04/2016 07:48:16: #                                                                            #
05/04/2016 07:48:16: ##############################################################################

05/04/2016 07:48:16: CNTKCommandTrainBegin: speechTrain
Reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.scp ... 948 entries
HTKDataDeserializer::HTKDataDeserializer: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
HTKDataDeserializer::HTKDataDeserializer: determined feature kind as 363-dimensional 'USER' with frame shift 10.0 ms
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MLFDataDeserializer::MLFDataDeserializer: read 252734 sequences
MLFDataDeserializer::MLFDataDeserializer: read 948 utterances

05/04/2016 07:48:17: Creating virgin network.

Post-processing network...

7 roots:
	ScaledLogLikelihood = Pass()
	ce = Pass()
	crExplicit = Negate()
	err = ErrorPrediction()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior.x = Mean()

Loop[0] --> Loop_LSTMoutput[1].lstmState.h.htp -> 35 nodes

	LSTMoutput[1].prevState.h	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[1].prevState.c	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ft.z	LSTMoutput[1].lstmState._privateInnards.ft
	LSTMoutput[1].lstmState._privateInnards.bft	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z	LSTMoutput[1].lstmState._privateInnards.it	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit	LSTMoutput[1].lstmState._privateInnards.ct
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ot.z
	LSTMoutput[1].lstmState._privateInnards.ot	LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.ht
	LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_LSTMoutput[2].lstmState.h.htp -> 35 nodes

	LSTMoutput[2].prevState.h	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[2].prevState.c	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ft.z	LSTMoutput[2].lstmState._privateInnards.ft
	LSTMoutput[2].lstmState._privateInnards.bft	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z	LSTMoutput[2].lstmState._privateInnards.it	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit	LSTMoutput[2].lstmState._privateInnards.ct
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ot.z
	LSTMoutput[2].lstmState._privateInnards.ot	LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.ht
	LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_LSTMoutput[3].lstmState.h.htp -> 35 nodes

	LSTMoutput[3].prevState.h	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[3].prevState.c	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ft.z	LSTMoutput[3].lstmState._privateInnards.ft
	LSTMoutput[3].lstmState._privateInnards.bft	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z	LSTMoutput[3].lstmState._privateInnards.it	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit	LSTMoutput[3].lstmState._privateInnards.ct
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ot.z
	LSTMoutput[3].lstmState._privateInnards.ot	LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.ht
	LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[3].lstmState.h.htp

Validating network. 283 nodes to process in pass 1.

Validating --> W = LearnableParameter() :  -> [132 x 256]
Validating --> z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> z.PlusArgs[0].TimesArgs[1].beta = Exp (z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft, LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (LSTMoutput[1].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it, LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ct = Plus (LSTMoutput[1].lstmState._privateInnards.bft, LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot, LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp = Times (LSTMoutput[1].lstmState.h.Wmr, LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft, LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (LSTMoutput[2].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it, LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ct = Plus (LSTMoutput[2].lstmState._privateInnards.bft, LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot, LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp = Times (LSTMoutput[2].lstmState.h.Wmr, LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft, LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (LSTMoutput[3].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it, LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ct = Plus (LSTMoutput[3].lstmState._privateInnards.bft, LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot, LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp = Times (LSTMoutput[3].lstmState.h.Wmr, LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0] = Times (W, z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior.x = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior.x) : [132] -> [132]
Validating --> ScaledLogLikelihood.x = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood.x) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crNode = CrossEntropyWithSoftmax (labels, z) : [132 x *], [132 x 1 x *] -> [1]
Validating --> ce = Pass (crNode) : [1] -> [1]
Validating --> crExplicit._negate.z.ElementTimesArgs[1] = LogSoftmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate.z = ElementTimes (labels, crExplicit._negate.z.ElementTimesArgs[1]) : [132 x *], [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate = ReduceElements (crExplicit._negate.z) : [132 x 1 x *] -> [1 x *]
Validating --> crExplicit = Negate (crExplicit._negate) : [1 x *] -> [1 x *]
Validating --> err = ErrorPrediction (labels, z) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 194 nodes to process in pass 2.

Validating --> LSTMoutput[1].prevState.h = PastValue (LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].prevState.c = PastValue (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.h = PastValue (LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.c = PastValue (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.h = PastValue (LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.c = PastValue (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 283 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/04/2016 07:48:17: Created model with 283 nodes on GPU 0.

05/04/2016 07:48:17: Training criterion node(s):
05/04/2016 07:48:17: 	ce = Pass

05/04/2016 07:48:17: Evaluation criterion node(s):

05/04/2016 07:48:17: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ScaledLogLikelihood Gradient[132 x 1 x *]] [ScaledLogLikelihood.x Gradient[132 x 1 x *]] [crExplicit Gradient[1 x *]] [crExplicit Value[1 x *]] [crExplicit._negate Gradient[1 x *]] [crExplicit._negate Value[1 x *]] [crExplicit._negate.z Gradient[132 x 1 x *]] [crExplicit._negate.z Value[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Gradient[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Value[132 x 1 x *]] [err Gradient[1]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior.x Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x1f601a8: {[B Value[132]] }
0x203b528: {[labels Value[132 x *]] }
0x2c2dc48: {[W Value[132 x 256]] }
0x2c30838: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d04d78: {[z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d07a28: {[LSTMoutput[3].lstmState.h.Wmr Value[256 x 1024]] }
0x2d099c8: {[logPrior.x Value[132]] }
0x2d0a2a8: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x2d0b1e8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d0b438: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d0ba38: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].prevState.h Value[256 x 1 x *]] }
0x2d0bea8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d11118: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d11f58: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d12168: {[LSTMoutput[2].lstmState.h.Wmr Value[256 x 1024]] }
0x2d15148: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d16ef8: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x2d1dc88: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d1eb48: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d1f128: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d20fe8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d21688: {[LSTMoutput[1].lstmState.h.Wmr Value[256 x 1024]] }
0x2d23a88: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0x2d24f58: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2d275b8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d29958: {[featNorm.meanVector Value[33 x 1]] }
0x2d2a218: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d2ae28: {[featNorm.invStdDevVector Value[33 x 1]] }
0x2d2e0d8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d2e178: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d2eee8: {[features Value[1 x 363 x *]] }
0x2d30fc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d33338: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].prevState.h Value[256 x 1 x *]] }
0x2d343c8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d369d8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2d37168: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d383f8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2d38ec8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d39898: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d3a898: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d3a9c8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d3d048: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d3d688: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d3efe8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d40578: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d41918: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].prevState.h Value[256 x 1 x *]] }
0x2d42ac8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d43448: {[LSTMoutput[1].prevState.c Value[1024 x 1 x *]] }
0x2d44418: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2d44518: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d47538: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d47b78: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d4aa58: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d4b558: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d4ceb8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2d4cff8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d4fe68: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d4ffb8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d53178: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d54b98: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d57d88: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d5a9e8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d5b208: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d5d3b8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d5e6e8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d60cb8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d615c8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d61728: {[LSTMoutput[1].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Value[1024 x 1 x *]] }
0x2d62678: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d65c38: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d66278: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d668d8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d66b28: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d69138: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d6b658: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d6c778: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d6e098: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d6e508: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2d6e948: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d71a98: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d760d8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d76d78: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d77478: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d79d58: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d7c1e8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0x2d7cb48: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d7d2d8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d7f0f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Value[1024 x 1 x *]] }
0x2d7f198: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d81168: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d84558: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2d845f8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d84db8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d87b28: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0x2d8a108: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0x2d8ce48: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2d8d3e8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x2d904e8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0x7fabcb300948: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x7fabcb300bf8: {[err Value[1]] }
0x7fabcb300e78: {[ce Value[1]] }
0x7fabcb3021c8: {[z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb302408: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7fabcb302648: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb302888: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7fabcb302ac8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb302d08: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0x7fabcb302f48: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb303438: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb303678: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb3038b8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb303bf8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb303e38: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb304078: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb3043b8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb3045f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb304838: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb304b38: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb305938: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb305b78: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb305db8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb3060f8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb306338: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb306578: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb3068b8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb306af8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb306d38: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb307038: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb307e38: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb308078: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb3082b8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb3085f8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb308838: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb308a78: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb308db8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0x7fabcb308ff8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0x7fabcb309238: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb309538: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0x7fabcb30a338: {[logPrior Value[132]] }
0x7fabcb31c668: {[featNorm Value[33 x 1 x *]] [realFeatures Value[363 x 1 x *]] }
0x7fabcb31cdd8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb31d418: {[feashift Value[33 x 1 x *]] }
0x7fabcb31da48: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb31fc68: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x7fabcb3205e8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb320748: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb3208a8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb320a08: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb320b68: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb320cc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb320e28: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb320f88: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb3210e8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb3213e8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0x7fabcb322a98: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb322bf8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb322d58: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb322eb8: {[LSTMoutput[1].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x7fabcb323018: {[LSTMoutput[1].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7fabcb323178: {[LSTMoutput[1].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7fabcb3232d8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb323438: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb323598: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb3236f8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb323858: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb3239b8: {[LSTMoutput[1].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x7fabcb323b18: {[LSTMoutput[1].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7fabcb323c78: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb323dd8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb323f38: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb324098: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7fabcb3241f8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb326388: {[LSTMoutput[1].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7fabcb3264e8: {[LSTMoutput[1].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7fabcb326648: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb3267a8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb326908: {[LSTMoutput[1].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x7fabcb326a68: {[LSTMoutput[1].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7fabcb326bc8: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb326d28: {[LSTMoutput[1].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7fabcb326e88: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb326fe8: {[LSTMoutput[1].lstmState.h.htp Value[256 x 1 x *]] }
0x7fabcb327148: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb327308: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb3274c8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb327688: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb327848: {[LSTMoutput[1].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb327a08: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb327bc8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb327d88: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0x7fabcb327f48: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb328108: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb3282c8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb328488: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb328648: {[LSTMoutput[2].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x7fabcb328808: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7fabcb3289c8: {[LSTMoutput[2].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7fabcb328b88: {[LSTMoutput[1].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb328d48: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb328f08: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb3290c8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb329288: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb329448: {[LSTMoutput[2].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x7fabcb329608: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7fabcb3297c8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb329988: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb329b48: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb329d08: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7fabcb329ec8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32a088: {[LSTMoutput[2].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7fabcb32a248: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7fabcb32a408: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32a5c8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32a788: {[LSTMoutput[2].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x7fabcb32a948: {[LSTMoutput[1].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7fabcb32ab08: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32acc8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7fabcb32ae88: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32b048: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState.h.htp Value[256 x 1 x *]] }
0x7fabcb32b208: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [W Gradient[132 x 256]] [z Value[132 x 1 x *]] }
0x7fabcb32b3c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb32b588: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [ScaledLogLikelihood.x Value[132 x 1 x *]] [crNode Value[1]] [z.PlusArgs[0] Value[132 x 1 x *]] }
0x7fabcb32b748: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.Wmr Gradient[256 x 1024]] [z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb32b908: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb32bac8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32bc88: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb32be48: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0x7fabcb32c008: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32c1c8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb32c388: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32c548: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32c708: {[LSTMoutput[3].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0x7fabcb32c8c8: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0x7fabcb32ca88: {[LSTMoutput[3].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0x7fabcb32cc48: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb32ce08: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32cfc8: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb32d188: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32d348: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32d508: {[LSTMoutput[3].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0x7fabcb32d6c8: {[LSTMoutput[1].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0x7fabcb32d888: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0x7fabcb32da48: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7fabcb32dc08: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32ddc8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7fabcb32df88: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32e148: {[LSTMoutput[3].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0x7fabcb32e308: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0x7fabcb32e4c8: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32e688: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32e848: {[LSTMoutput[3].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0x7fabcb32ea08: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0x7fabcb32ebc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7fabcb32ed88: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0x7fabcb32ef48: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0x7fabcb32f108: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp Value[256 x 1 x *]] }
0x7fabcb32f808: {[ce Gradient[1]] }
0x7fabcb32f9c8: {[crNode Gradient[1]] [z.PlusArgs[0] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x7fabcb32fb88: {[LSTMoutput[1].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [z Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb32fd48: {[B Gradient[132]] }
0x7fabcb32ff08: {[LSTMoutput[1].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState.h.htp Gradient[256 x 1 x *]] }
0x7fabcb3300c8: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0x7fabcb330288: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] }
0x7fabcb330448: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] }
0x7fabcb330608: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb3307c8: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] }
0x7fabcb330988: {[LSTMoutput[1].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] }
0x7fabcb330b48: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb330d08: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb330ec8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7fabcb331088: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7fabcb331248: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7fabcb331408: {[LSTMoutput[1].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] }
0x7fabcb3315c8: {[LSTMoutput[1].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] }
0x7fabcb331788: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it Gradient[1024 x 1 x *]] }
0x7fabcb331948: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb331b08: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x7fabcb331cc8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x7fabcb331e88: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb332048: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7fabcb332208: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x7fabcb3323c8: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb332588: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb332748: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0x7fabcb332908: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].prevState.h Gradient[256 x 1 x *]] }
0x7fabcb332ac8: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] }
0x7fabcb332c88: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7fabcb332e48: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb333008: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7fabcb3331c8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7fabcb333388: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7fabcb333548: {[LSTMoutput[1].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Gradient[1024 x 1 x *]] }
0x7fabcb333708: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb3338c8: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb333a88: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb333c48: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb333e08: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0x7fabcb333fc8: {[LSTMoutput[1].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] }
0x7fabcb334188: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] }
0x7fabcb334348: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7fabcb334508: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb3346c8: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0x7fabcb334888: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0x7fabcb334a48: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0x7fabcb334c08: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb334dc8: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb334f88: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb335148: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb335308: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x7fabcb3354c8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb335688: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb335848: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb335a08: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb335bc8: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0x7fabcb335d88: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x7fabcb335f48: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb336548: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb336708: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb3368c8: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb336a88: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0x7fabcb336c48: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0x7fabcb336e08: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7fabcb336fc8: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7fabcb337188: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7fabcb337348: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0x7fabcb337508: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }


05/04/2016 07:48:17: Precomputing --> 3 PreCompute nodes found.

05/04/2016 07:48:17: 	featNorm.meanVector = Mean()
05/04/2016 07:48:17: 	featNorm.invStdDevVector = InvStdDev()
05/04/2016 07:48:17: 	logPrior.x = Mean()

05/04/2016 07:48:18: Precomputing --> Completed.


05/04/2016 07:48:18: Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/04/2016 07:48:18: Starting minibatch loop.
05/04/2016 07:48:19:  Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.88242524 * 348; err = 0.99137931 * 348; time = 1.1321s; samplesPerSecond = 307.4
05/04/2016 07:48:20:  Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.61489723 * 168; err = 0.93452381 * 168; time = 0.5064s; samplesPerSecond = 331.8
05/04/2016 07:48:21:  Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.45420760 * 198; err = 0.87373737 * 198; time = 0.5946s; samplesPerSecond = 333.0
05/04/2016 07:48:21:  Epoch[ 1 of 2]-Minibatch[   4-   4, 3.12%]: ce = 4.39046981 * 258; err = 0.83333333 * 258; time = 0.7738s; samplesPerSecond = 333.4
05/04/2016 07:48:22:  Epoch[ 1 of 2]-Minibatch[   5-   5, 3.91%]: ce = 57.29652651 * 248; err = 0.92338710 * 248; time = 0.7493s; samplesPerSecond = 331.0
05/04/2016 07:48:23:  Epoch[ 1 of 2]-Minibatch[   6-   6, 4.69%]: ce = 5.41497905 * 358; err = 0.91620112 * 358; time = 1.1147s; samplesPerSecond = 321.1
05/04/2016 07:48:23:  Epoch[ 1 of 2]-Minibatch[   7-   7, 5.47%]: ce = 4.44218351 * 98; err = 0.88775510 * 98; time = 0.2851s; samplesPerSecond = 343.7
05/04/2016 07:48:24:  Epoch[ 1 of 2]-Minibatch[   8-   8, 6.25%]: ce = 4.20048336 * 278; err = 0.77697842 * 278; time = 0.8344s; samplesPerSecond = 333.2
05/04/2016 07:48:25:  Epoch[ 1 of 2]-Minibatch[   9-   9, 7.03%]: ce = 4.66156684 * 288; err = 0.92361111 * 288; time = 0.8769s; samplesPerSecond = 328.4
05/04/2016 07:48:26:  Epoch[ 1 of 2]-Minibatch[  10-  10, 7.81%]: ce = 4.35901920 * 258; err = 0.86434109 * 258; time = 0.7658s; samplesPerSecond = 336.9
05/04/2016 07:48:26:  Epoch[ 1 of 2]-Minibatch[  11-  11, 8.59%]: ce = 3.70348374 * 98; err = 0.67346939 * 98; time = 0.3022s; samplesPerSecond = 324.3
05/04/2016 07:48:26: Finished Epoch[ 1 of 2]: [Training] ce = 9.64985761 * 2598; err = 0.88722094 * 2598; totalSamplesSeen = 2598; learningRatePerSample = 0.025; epochTime=7.93671s
05/04/2016 07:48:26: SGD: Saving checkpoint model '/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn.1'

05/04/2016 07:48:27: Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.900000  momentum as time constant = 189.8 samples

05/04/2016 07:48:27: Starting minibatch loop.
05/04/2016 07:48:27:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.16283737 * 138; err = 0.82608696 * 138; time = 0.4088s; samplesPerSecond = 337.6
05/04/2016 07:48:28:  Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.31444468 * 318; err = 0.94654088 * 318; time = 0.9332s; samplesPerSecond = 340.8
05/04/2016 07:48:29:  Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.13243269 * 368; err = 0.88586957 * 368; time = 1.1277s; samplesPerSecond = 326.3
05/04/2016 07:48:29:  Epoch[ 2 of 2]-Minibatch[   4-   4, 3.12%]: ce = 3.75084204 * 98; err = 1.00000000 * 98; time = 0.2992s; samplesPerSecond = 327.5
05/04/2016 07:48:30:  Epoch[ 2 of 2]-Minibatch[   5-   5, 3.91%]: ce = 3.53811289 * 308; err = 0.81168831 * 308; time = 0.9146s; samplesPerSecond = 336.7
05/04/2016 07:48:31:  Epoch[ 2 of 2]-Minibatch[   6-   6, 4.69%]: ce = 3.79568458 * 258; err = 0.94186047 * 258; time = 0.7559s; samplesPerSecond = 341.3
05/04/2016 07:48:32:  Epoch[ 2 of 2]-Minibatch[   7-   7, 5.47%]: ce = 4.43607414 * 238; err = 0.97058824 * 238; time = 0.7164s; samplesPerSecond = 332.2
05/04/2016 07:48:33:  Epoch[ 2 of 2]-Minibatch[   8-   8, 6.25%]: ce = 4.03240876 * 268; err = 0.86194030 * 268; time = 0.7869s; samplesPerSecond = 340.6
05/04/2016 07:48:34:  Epoch[ 2 of 2]-Minibatch[   9-   9, 7.03%]: ce = 4.48105849 * 308; err = 0.95779221 * 308; time = 0.8816s; samplesPerSecond = 349.4
05/04/2016 07:48:34:  Epoch[ 2 of 2]-Minibatch[  10-  10, 7.81%]: ce = 4.29093424 * 288; err = 0.92708333 * 288; time = 0.8324s; samplesPerSecond = 346.0
05/04/2016 07:48:34: Finished Epoch[ 2 of 2]: [Training] ce = 4.11437621 * 2590; err = 0.90965251 * 2590; totalSamplesSeen = 5188; learningRatePerSample = 0.025; epochTime=7.65805s
05/04/2016 07:48:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160504074742.617940/Speech/ExperimentalHtkmlfReader/LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn'
05/04/2016 07:48:35: CNTKCommandTrainEnd: speechTrain

05/04/2016 07:48:35: Action "train" complete.

05/04/2016 07:48:35: __COMPLETED__