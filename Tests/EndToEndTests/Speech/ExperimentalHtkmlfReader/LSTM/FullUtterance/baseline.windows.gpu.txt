=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu DeviceId=0 timestamping=true Truncated=false speechTrain=[SGD=[epochSize=2560]] speechTrain=[SGD=[maxEpochs=2]] speechTrain=[SGD=[numMBsToShowResult=1]] shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: May  4 2016 00:18:19
		Last modified date: Sun Apr 17 20:54:07 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: f791064dc55b8bbbfbccf5265cb68431019ff646
		Built by svcphil on DPHAIM-24
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
05/04/2016 00:51:36: -------------------------------------------------------------------
05/04/2016 00:51:36: Build info: 

05/04/2016 00:51:36: 		Built time: May  4 2016 00:18:19
05/04/2016 00:51:36: 		Last modified date: Sun Apr 17 20:54:07 2016
05/04/2016 00:51:36: 		Build type: Release
05/04/2016 00:51:36: 		Build target: GPU
05/04/2016 00:51:36: 		With 1bit-SGD: no
05/04/2016 00:51:36: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
05/04/2016 00:51:36: 		CUB_PATH: C:\src\cub-1.4.1
05/04/2016 00:51:36: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
05/04/2016 00:51:36: 		Build Branch: HEAD
05/04/2016 00:51:36: 		Build SHA1: f791064dc55b8bbbfbccf5265cb68431019ff646
05/04/2016 00:51:36: 		Built by svcphil on DPHAIM-24
05/04/2016 00:51:36: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
05/04/2016 00:51:36: -------------------------------------------------------------------

05/04/2016 00:51:36: Running on DPHAIM-25 at 2016/05/04 00:51:36
05/04/2016 00:51:36: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu  DeviceId=0  timestamping=true  Truncated=false  speechTrain=[SGD=[epochSize=2560]]  speechTrain=[SGD=[maxEpochs=2]]  speechTrain=[SGD=[numMBsToShowResult=1]]  shareNodeValueMatrices=true



05/04/2016 00:51:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/04/2016 00:51:36: precision = "float"
deviceId = $DeviceId$
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "$DataDir$/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "$DataDir$/glob_0000.mlf"
                        labelMappingFile = "$DataDir$/state.list"
                        scpFile = "$DataDir$/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

05/04/2016 00:51:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/04/2016 00:51:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/04/2016 00:51:36: precision = "float"
deviceId = 0
command = speechTrain
// Note: These options are overridden from the command line in some test cases.
frameMode = false
truncated = true
parallelTrain = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
                        labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
                        scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
DeviceId=0
timestamping=true
Truncated=false
speechTrain=[SGD=[epochSize=2560]]
speechTrain=[SGD=[maxEpochs=2]]
speechTrain=[SGD=[numMBsToShowResult=1]]
shareNodeValueMatrices=true

05/04/2016 00:51:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/04/2016 00:51:36: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\ExperimentalHtkmlfReader\LSTM\FullUtterance
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        verbosity = 0
        randomize = true
        corpus = [
        ]
        deserializers = [
            [   
                type = "HTKDataDeserializer"        
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    features = [
                        dim = 363
                        scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
                    ]
                ]
            ]:
            [
                type = "MLFDataDeserializer"                
                module = "ExperimentalHTKMLFReader"
                inputs = [
                    labels = [
                        mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
                        labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
                        scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp"
                        dim = 132
                    ]
                ]
            ]
        ]
    ]
    BrainScriptNetworkBuilder = [
        useSelfStabilization = true
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
        LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
        [
            _privateInnards = [       // encapsulate the inner workings
                dh = prevState.h // previous values
                dc = prevState.c
                // parameter macros--these carry their own weight matrices
                B() = BS.Parameters.BiasParam (cellDim)
                W(v) = BS.Parameters.WeightParam (cellDim, inputDim)  * BS.Parameters.Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * BS.Parameters.Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* BS.Parameters.Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                bft = ft .* dc                                     // applied to cell(t-1)
                ct = bft + bit                                     // c(t) is sum of both
                ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
            ]
            c = _privateInnards.ct          // cell value
            h = if outputDim != cellDim     // output/hidden state
                then [                      // project
                    Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                    htp = Wmr * BS.Parameters.Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                ].htp         // TODO: ^^ extend BS syntax to allow to say: then [ Wmr = WeightParam(outputDim, cellDim) ] in Wmr * Stabilize (...)
                else _privateInnards.ht     // no projection
            dim = outputDim
        ]
        RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
        [
            prevState = previousHook (lstmState)
            inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
            lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
        ].lstmState // we return the state record (h,c)
        // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
        S(x) = BS.Parameters.Stabilize (x, enabled=useSelfStabilization)
        LSTMoutput[k:1..numLSTMLayers] =
            if k == 1
            then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
            else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
        // and add a softmax layer on top
        W = BS.Parameters.WeightParam (labelDim, hiddenDim)
        B = BS.Parameters.BiasParam   (labelDim)
        z = W * S(LSTMoutput[numLSTMLayers]) + B; // top-level input to Softmax
        // training
        useExplicitCriterion = false
        crNode = CrossEntropyWithSoftmax(labels, z)                 // this is the objective, as a node
        crExplicit = -(ReduceSum (labels .* LogSoftmax (z)))        // manually-defined per-sample objective
        ce = Pass (if useExplicitCriterion then crExplicit else crNode, tag='criterion')
        err = ErrorPrediction(labels, z, tag='evaluation')          // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Pass (z - logPrior, tag='output')     // using Pass() since we can't assign a tag to x - y
    ]
] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:truncated=false
05/04/2016 00:51:36: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/04/2016 00:51:36: Commands: speechTrain
05/04/2016 00:51:36: Precision = "float"
05/04/2016 00:51:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn
05/04/2016 00:51:36: CNTKCommandTrainInfo: speechTrain : 2
05/04/2016 00:51:36: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

05/04/2016 00:51:36: ##############################################################################
05/04/2016 00:51:36: #                                                                            #
05/04/2016 00:51:36: # Action "train"                                                             #
05/04/2016 00:51:36: #                                                                            #
05/04/2016 00:51:36: ##############################################################################

05/04/2016 00:51:36: CNTKCommandTrainBegin: speechTrain
Reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.scp ... 948 entries
HTKDataDeserializer::HTKDataDeserializer: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
HTKDataDeserializer::HTKDataDeserializer: determined feature kind as 363-dimensional 'USER' with frame shift 10.0 ms
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MLFDataDeserializer::MLFDataDeserializer: read 252734 sequences
MLFDataDeserializer::MLFDataDeserializer: read 948 utterances

05/04/2016 00:51:36: Creating virgin network.

Post-processing network...

7 roots:
	ScaledLogLikelihood = Pass()
	ce = Pass()
	crExplicit = Negate()
	err = ErrorPrediction()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior.x = Mean()

Loop[0] --> Loop_LSTMoutput[1].lstmState.h.htp -> 35 nodes

	LSTMoutput[1].prevState.h	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[1].prevState.c	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ft.z	LSTMoutput[1].lstmState._privateInnards.ft
	LSTMoutput[1].lstmState._privateInnards.bft	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[1].lstmState._privateInnards.it.z	LSTMoutput[1].lstmState._privateInnards.it	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.bit	LSTMoutput[1].lstmState._privateInnards.ct
	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[1].lstmState._privateInnards.ot.z
	LSTMoutput[1].lstmState._privateInnards.ot	LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[1].lstmState._privateInnards.ht
	LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[1].lstmState.h.htp

Loop[1] --> Loop_LSTMoutput[2].lstmState.h.htp -> 35 nodes

	LSTMoutput[2].prevState.h	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[2].prevState.c	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ft.z	LSTMoutput[2].lstmState._privateInnards.ft
	LSTMoutput[2].lstmState._privateInnards.bft	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[2].lstmState._privateInnards.it.z	LSTMoutput[2].lstmState._privateInnards.it	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.bit	LSTMoutput[2].lstmState._privateInnards.ct
	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[2].lstmState._privateInnards.ot.z
	LSTMoutput[2].lstmState._privateInnards.ot	LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[2].lstmState._privateInnards.ht
	LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[2].lstmState.h.htp

Loop[2] --> Loop_LSTMoutput[3].lstmState.h.htp -> 35 nodes

	LSTMoutput[3].prevState.h	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0]	LSTMoutput[3].prevState.c	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ft.z	LSTMoutput[3].lstmState._privateInnards.ft
	LSTMoutput[3].lstmState._privateInnards.bft	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]
	LSTMoutput[3].lstmState._privateInnards.it.z	LSTMoutput[3].lstmState._privateInnards.it	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z
	LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.bit	LSTMoutput[3].lstmState._privateInnards.ct
	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result	LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]	LSTMoutput[3].lstmState._privateInnards.ot.z
	LSTMoutput[3].lstmState._privateInnards.ot	LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]	LSTMoutput[3].lstmState._privateInnards.ht
	LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result	LSTMoutput[3].lstmState.h.htp

Validating network. 283 nodes to process in pass 1.

Validating --> W = LearnableParameter() :  -> [132 x 256]
Validating --> z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> z.PlusArgs[0].TimesArgs[1].beta = Exp (z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState.h.Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, featNorm) : [1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z = Plus (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft, LSTMoutput[1].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z = Plus (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it = Sigmoid (LSTMoutput[1].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it, LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ct = Plus (LSTMoutput[1].lstmState._privateInnards.bft, LSTMoutput[1].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z = Plus (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[1].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot, LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[1].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState.h.htp = Times (LSTMoutput[1].lstmState.h.Wmr, LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z = Plus (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft, LSTMoutput[2].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z = Plus (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it = Sigmoid (LSTMoutput[2].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it, LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ct = Plus (LSTMoutput[2].lstmState._privateInnards.bft, LSTMoutput[2].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z = Plus (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[2].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot, LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[2].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState.h.htp = Times (LSTMoutput[2].lstmState.h.Wmr, LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x = LearnableParameter() :  -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta = Exp (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x) : [1] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z = Plus (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bft = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft, LSTMoutput[3].prevState.c) : [1024 x 1 x *], [0] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z = Plus (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it = Sigmoid (LSTMoutput[3].lstmState._privateInnards.it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [0] -> [1]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [1] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024], [1024] -> [1024]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it, LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ct = Plus (LSTMoutput[3].lstmState._privateInnards.bft, LSTMoutput[3].lstmState._privateInnards.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ct) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z = Plus (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot = Sigmoid (LSTMoutput[3].lstmState._privateInnards.ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] = Tanh (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ht = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot, LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta, LSTMoutput[3].lstmState._privateInnards.ht) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState.h.htp = Times (LSTMoutput[3].lstmState.h.Wmr, LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0].TimesArgs[1].result = ElementTimes (z.PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].lstmState.h.htp) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> z.PlusArgs[0] = Times (W, z.PlusArgs[0].TimesArgs[1].result) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> logPrior.x = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior.x) : [132] -> [132]
Validating --> ScaledLogLikelihood.x = Minus (z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> ScaledLogLikelihood = Pass (ScaledLogLikelihood.x) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crNode = CrossEntropyWithSoftmax (labels, z) : [132 x *], [132 x 1 x *] -> [1]
Validating --> ce = Pass (crNode) : [1] -> [1]
Validating --> crExplicit._negate.z.ElementTimesArgs[1] = LogSoftmax (z) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate.z = ElementTimes (labels, crExplicit._negate.z.ElementTimesArgs[1]) : [132 x *], [132 x 1 x *] -> [132 x 1 x *]
Validating --> crExplicit._negate = ReduceElements (crExplicit._negate.z) : [132 x 1 x *] -> [1 x *]
Validating --> crExplicit = Negate (crExplicit._negate) : [1 x *] -> [1 x *]
Validating --> err = ErrorPrediction (labels, z) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 194 nodes to process in pass 2.

Validating --> LSTMoutput[1].prevState.h = PastValue (LSTMoutput[1].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].prevState.c = PastValue (LSTMoutput[1].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[1].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[1].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.h = PastValue (LSTMoutput[2].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].prevState.c = PastValue (LSTMoutput[2].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[2].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[2].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.h = PastValue (LSTMoutput[3].lstmState.h.htp) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].prevState.c = PastValue (LSTMoutput[3].lstmState._privateInnards.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta, LSTMoutput[3].prevState.c) : [1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] = ElementTimes (LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0], LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result = ElementTimes (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta, LSTMoutput[3].prevState.h) : [1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



131 out of 283 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/04/2016 00:51:37: Created model with 283 nodes on GPU 0.

05/04/2016 00:51:37: Training criterion node(s):
05/04/2016 00:51:37: 	ce = Pass

05/04/2016 00:51:37: Evaluation criterion node(s):

05/04/2016 00:51:37: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ScaledLogLikelihood Gradient[132 x 1 x *]] [ScaledLogLikelihood.x Gradient[132 x 1 x *]] [crExplicit Gradient[1 x *]] [crExplicit Value[1 x *]] [crExplicit._negate Gradient[1 x *]] [crExplicit._negate Value[1 x *]] [crExplicit._negate.z Gradient[132 x 1 x *]] [crExplicit._negate.z Value[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Gradient[132 x 1 x *]] [crExplicit._negate.z.ElementTimesArgs[1] Value[132 x 1 x *]] [err Gradient[1]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior.x Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0000003D3871EA70: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D3871F510: {[B Value[132]] }
0000003D3871FDD0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D3871FF10: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D50F039A0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0000003D50F03D60: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F03E00: {[LSTMoutput[2].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0000003D50F03EA0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F03F40: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F03FE0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F04080: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F04120: {[LSTMoutput[3].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0000003D50F041C0: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F04260: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.Wmr Gradient[256 x 1024]] [z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F04300: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0000003D50F043A0: {[LSTMoutput[3].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0000003D50F04440: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F044E0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F04620: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D50F046C0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F04760: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F04800: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F048A0: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F04B20: {[LSTMoutput[2].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0000003D50F04EE0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0000003D50F04F80: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F05020: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0000003D50F05340: {[LSTMoutput[2].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0000003D50F053E0: {[LSTMoutput[1].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0000003D50F05480: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D50F05660: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D50F057A0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F05840: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F058E0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [W Gradient[132 x 256]] [z Value[132 x 1 x *]] }
0000003D50F05980: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F05A20: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [ScaledLogLikelihood.x Value[132 x 1 x *]] [crNode Value[1]] [z.PlusArgs[0] Value[132 x 1 x *]] }
0000003D50F05C00: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F05CA0: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0000003D50F05D40: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState.h.htp Value[256 x 1 x *]] }
0000003D50F05DE0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F05F20: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0000003D50F05FC0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F06060: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[2].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0000003D50F06100: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F061A0: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0000003D50F062E0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F066A0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F06880: {[LSTMoutput[1].lstmState.h.htp Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F069C0: {[LSTMoutput[1].lstmState._privateInnards.it Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F06A60: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F06BA0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F06E20: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F06F60: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F071E0: {[LSTMoutput[2].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0000003D50F07280: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0000003D50F07320: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D50F07500: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F075A0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D50F07640: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F076E0: {[LSTMoutput[2].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0000003D50F07780: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F0B9C0: {[LSTMoutput[1].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0000003D50F0BA60: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0000003D50F0BB00: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F0BC40: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F0BCE0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D50F0BF60: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D50F0C000: {[crNode Gradient[1]] [z.PlusArgs[0] Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0000003D50F0C0A0: {[LSTMoutput[1].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState.h.htp Gradient[256 x 1 x *]] }
0000003D50F0C320: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D50F0C3C0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D50F0C500: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D50F0C640: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D50F0C6E0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D50F0C780: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0000003D50F0C820: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D50F0C8C0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0000003D50F0C960: {[LSTMoutput[1].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [z Gradient[132 x 1 x *]] [z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F0CAA0: {[B Gradient[132]] }
0000003D50F0CBE0: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Gradient[1]] [z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] }
0000003D50F0CD20: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] }
0000003D50F0CDC0: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] }
0000003D50F0CF00: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D50F0CFA0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0000003D50F0D220: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F0D2C0: {[LSTMoutput[1].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] }
0000003D50F0D360: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0000003D50F0D400: {[LSTMoutput[3].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0000003D50F0D4A0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] }
0000003D50F0D540: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F0D680: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F0D720: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0000003D50F0D7C0: {[LSTMoutput[3].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0000003D50F0D860: {[ce Gradient[1]] }
0000003D50F0D9A0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0000003D50F0DAE0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState.h.htp Value[256 x 1 x *]] }
0000003D50F0DB80: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F0DC20: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0000003D50F0DCC0: {[LSTMoutput[3].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0000003D50F0DD60: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].prevState.h Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D50F0DE00: {[LSTMoutput[1].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] }
0000003D50F0DF40: {[LSTMoutput[1].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] }
0000003D50F0E080: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D50F0E120: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D50F0E1C0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it Gradient[1024 x 1 x *]] }
0000003D50F0E260: {[LSTMoutput[2].lstmState.h.Wmr Value[256 x 1024]] }
0000003D50F0E300: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0000003D50F0E620: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D50F0E6C0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F0EA80: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F0EC60: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D50F0EE40: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0000003D50F0F2A0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F0F520: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0000003D50F0F660: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0000003D50F0F7A0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D50F162C0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D50F16540: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D50F16EA0: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Value[1]] }
0000003D50F17E40: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0000003D50F18C00: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D50F18DE0: {[LSTMoutput[1].lstmState.h.Wmr Value[256 x 1024]] }
0000003D50F19740: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D50F46A50: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F46AF0: {[W Value[132 x 256]] }
0000003D50F46B90: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] }
0000003D50F46C30: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.ht.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0000003D50F46CD0: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0000003D50F46D70: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F46E10: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0000003D50F46EB0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] }
0000003D50F46F50: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0000003D50F47090: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F47130: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F471D0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F47270: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0000003D50F473B0: {[LSTMoutput[1].lstmState._privateInnards.bit Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bft Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] }
0000003D50F47590: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] }
0000003D50F47630: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F476D0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0000003D50F47770: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F47810: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Gradient[1024]] }
0000003D50F479F0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0000003D50F47A90: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].prevState.h Gradient[256 x 1 x *]] }
0000003D50F47B30: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ht Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F47C70: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F47D10: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F47E50: {[LSTMoutput[3].lstmState.h.Wmr Value[256 x 1024]] }
0000003D50F47EF0: {[LSTMoutput[1].lstmState._privateInnards.ft Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Gradient[1024 x 1 x *]] }
0000003D50F47F90: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F48030: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F480D0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Gradient[1]] }
0000003D50F48170: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F48210: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z Gradient[1024 x 1 x *]] }
0000003D50F482B0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].lstmState._privateInnards.it.z Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F48350: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F483F0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F48490: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0000003D50F48530: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F48670: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Gradient[1024 x 1 x *]] }
0000003D50F48710: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0000003D50F487B0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F48850: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F48D80: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0000003D50F48E20: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Gradient[256 x 1 x *]] }
0000003D50F49640: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Gradient[1]] }
0000003D50F49820: {[z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D50F49AA0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0000003D50F49C80: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Gradient[1]] [LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta.x Gradient[1]] }
0000003D50F4A4A0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0000003D513AD4B0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513AE3B0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513AE950: {[featNorm.meanVector Value[33 x 1]] }
0000003D513AEB30: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513AEBD0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513AF490: {[featNorm.invStdDevVector Value[33 x 1]] }
0000003D513AF8F0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513AFA30: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513AFCB0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513AFF30: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].prevState.h Value[256 x 1 x *]] }
0000003D513AFFD0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513B0250: {[features Value[1 x 363 x *]] }
0000003D513B04D0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513B0750: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513B7270: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0000003D513B7630: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513B7810: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513B7950: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513B7C70: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513B8170: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513B82B0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513B83F0: {[featNorm Value[33 x 1 x *]] [realFeatures Value[363 x 1 x *]] }
0000003D513B8490: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513B8530: {[feashift Value[33 x 1 x *]] }
0000003D513B8710: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513B88F0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0000003D513B8A30: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513B8AD0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513B8DF0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] }
0000003D513B96B0: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513B9750: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513B97F0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513B99D0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513B9BB0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513B9C50: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513B9D90: {[LSTMoutput[1].prevState.c Value[1024 x 1 x *]] }
0000003D513B9ED0: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513BA150: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513BA470: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BA510: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0000003D513BA5B0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].lstmState.h.Wmr Gradient[256 x 1024]] [LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BA6F0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Gradient[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BA790: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513BA970: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513BAA10: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D513BAAB0: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513BABF0: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513BAC90: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513BAE70: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513BAF10: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[33 x 1 x *]] [LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BB190: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BB550: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513BB690: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513BB730: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513BB7D0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513BB870: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513BB910: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513BB9B0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BBA50: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BBAF0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BBB90: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0000003D513BBC30: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513BBCD0: {[logPrior Value[132]] }
0000003D513BBE10: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0000003D513BBEB0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BC090: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D513BC1D0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513BC3B0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0000003D513BC450: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BC4F0: {[LSTMoutput[1].lstmState._privateInnards.ct Value[1024 x 1 x *]] }
0000003D513BC590: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513BC630: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513BC6D0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513BC770: {[LSTMoutput[1].lstmState._privateInnards.ot.z Value[1024 x 1 x *]] }
0000003D513BC8B0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].prevState.h Value[256 x 1 x *]] }
0000003D513BCB30: {[LSTMoutput[1].lstmState._privateInnards.bft Value[1024 x 1 x *]] }
0000003D513BCC70: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513BCD10: {[LSTMoutput[1].lstmState._privateInnards.ot Value[1024 x 1 x *]] }
0000003D513BCDB0: {[LSTMoutput[1].lstmState._privateInnards.ht Value[1024 x 1 x *]] }
0000003D513BCE50: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].result Value[1024 x 1 x *]] }
0000003D513BCEF0: {[LSTMoutput[1].lstmState._privateInnards.it.z Value[1024 x 1 x *]] }
0000003D513BCF90: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D513BD030: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513BD210: {[LSTMoutput[1].lstmState._privateInnards.it Value[1024 x 1 x *]] }
0000003D513BD2B0: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D513BD3F0: {[LSTMoutput[1].lstmState.h.htp Value[256 x 1 x *]] }
0000003D513BD5D0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BD670: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BD8F0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BDAD0: {[LSTMoutput[1].lstmState._privateInnards.ft.z Value[1024 x 1 x *]] }
0000003D513BDB70: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D513BDC10: {[LSTMoutput[1].lstmState._privateInnards.bit Value[1024 x 1 x *]] }
0000003D513BDD50: {[LSTMoutput[1].lstmState._privateInnards.ft Value[1024 x 1 x *]] }
0000003D513BDDF0: {[LSTMoutput[1].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[2].prevState.c Value[1024 x 1 x *]] }
0000003D513BDF30: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D513BDFD0: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BE110: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513BE250: {[LSTMoutput[1].lstmState._privateInnards.ht.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0000003D513BE2F0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BE390: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513BE430: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].result Value[1024 x 1 x *]] }
0000003D513BE4D0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BE570: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BE6B0: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].result Value[256 x 1 x *]] }
0000003D513BE7F0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0000003D513BE890: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513BE9D0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513BEB10: {[LSTMoutput[2].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].result Value[256 x 1 x *]] [LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] }
0000003D513F1140: {[ce Value[1]] }
0000003D513F11E0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513F1280: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513F1320: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513F13C0: {[LSTMoutput[3].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0000003D513F1460: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F1500: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F1640: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513F1780: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F1A00: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513F1B40: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0000003D513F1BE0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513F1C80: {[err Value[1]] }
0000003D513F1DC0: {[LSTMoutput[1].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F1F00: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513F2220: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].lstmState._privateInnards.ct Gradient[1024 x 1 x *]] [LSTMoutput[3].prevState.c Value[1024 x 1 x *]] }
0000003D513F2360: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513F2720: {[LSTMoutput[1].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0000003D513F27C0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F2860: {[LSTMoutput[1].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513F29A0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F2A40: {[LSTMoutput[2].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513F2AE0: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F2CC0: {[z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F2E00: {[LSTMoutput[2].lstmState.h.htp.TimesArgs[1].beta Value[1]] }
0000003D513F2FE0: {[LSTMoutput[1].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].beta Value[1]] }
0000003D513F31C0: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513F3260: {[LSTMoutput[1].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[1].beta Value[1]] }
0000003D513F3440: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513F34E0: {[labels Value[132 x *]] }
0000003D513F3620: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D513F3940: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0000003D513F4AC0: {[LSTMoutput[2].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Value[1]] }
0000003D513F56A0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513F5B00: {[LSTMoutput[2].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta Value[1]] }
0000003D513F6320: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513F6780: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].beta.x Value[1]] }
0000003D513F6820: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513F74A0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513F79A0: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0000003D513F7B80: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0000003D513F7EA0: {[logPrior.x Value[132]] }
0000003D513F7F40: {[LSTMoutput[3].lstmState._privateInnards.it.z.PlusArgs[1].ElementTimesArgs[0] Value[1024]] }
0000003D513F8260: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[1].ElementTimesArgs[1].beta.x Value[1]] }
0000003D513F8760: {[LSTMoutput[3].lstmState._privateInnards.bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].beta.x Gradient[1]] [LSTMoutput[3].prevState.h Value[256 x 1 x *]] }
0000003D513F88A0: {[LSTMoutput[3].lstmState._privateInnards.ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0000003D513F8DA0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0000003D513F8EE0: {[LSTMoutput[3].lstmState._privateInnards.ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }


05/04/2016 00:51:37: Precomputing --> 3 PreCompute nodes found.

05/04/2016 00:51:37: 	featNorm.meanVector = Mean()
05/04/2016 00:51:37: 	featNorm.invStdDevVector = InvStdDev()
05/04/2016 00:51:37: 	logPrior.x = Mean()

05/04/2016 00:51:38: Precomputing --> Completed.


05/04/2016 00:51:39: Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/04/2016 00:51:39: Starting minibatch loop.
05/04/2016 00:51:41:  Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.88306536 * 308; err = 0.99025974 * 308; time = 2.2053s; samplesPerSecond = 139.7
05/04/2016 00:51:44:  Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.62618899 * 408; err = 0.84068627 * 408; time = 3.1379s; samplesPerSecond = 130.0
05/04/2016 00:51:47:  Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.56298699 * 378; err = 0.94708995 * 378; time = 2.7264s; samplesPerSecond = 138.6
05/04/2016 00:51:50:  Epoch[ 1 of 2]-Minibatch[   4-   4, 3.13%]: ce = 3.76631656 * 478; err = 0.78661088 * 478; time = 3.6696s; samplesPerSecond = 130.3
05/04/2016 00:51:52:  Epoch[ 1 of 2]-Minibatch[   5-   5, 3.91%]: ce = 8763.16010989 * 158; err = 0.93037975 * 158; time = 1.1527s; samplesPerSecond = 137.1
05/04/2016 00:51:54:  Epoch[ 1 of 2]-Minibatch[   6-   6, 4.69%]: ce = 4.56298450 * 258; err = 0.89922481 * 258; time = 1.8963s; samplesPerSecond = 136.1
05/04/2016 00:51:56:  Epoch[ 1 of 2]-Minibatch[   7-   7, 5.47%]: ce = 4.37957317 * 328; err = 0.87500000 * 328; time = 2.3685s; samplesPerSecond = 138.5
05/04/2016 00:51:58:  Epoch[ 1 of 2]-Minibatch[   8-   8, 6.25%]: ce = 4.65104167 * 288; err = 0.90625000 * 288; time = 2.0810s; samplesPerSecond = 138.4
05/04/2016 00:51:58: Finished Epoch[ 1 of 2]: [Training] ce = 535.88676075 * 2604; err = 0.88671275 * 2604; totalSamplesSeen = 2604; learningRatePerSample = 0.025; epochTime=19.2383s
05/04/2016 00:51:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn.1'

05/04/2016 00:51:59: Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.900000  momentum as time constant = 189.8 samples

05/04/2016 00:51:59: Starting minibatch loop.
05/04/2016 00:52:03:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.26512518 * 508; err = 0.85433071 * 508; time = 3.9148s; samplesPerSecond = 129.8
05/04/2016 00:52:04:  Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: ce = 3.77295993 * 228; err = 0.82456140 * 228; time = 1.6508s; samplesPerSecond = 138.1
05/04/2016 00:52:05:  Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: ce = 3.83270264 * 88; err = 0.89772727 * 88; time = 0.6498s; samplesPerSecond = 135.4
05/04/2016 00:52:06:  Epoch[ 2 of 2]-Minibatch[   4-   4, 3.13%]: ce = 4.20982009 * 208; err = 0.91826923 * 208; time = 1.5077s; samplesPerSecond = 138.0
05/04/2016 00:52:08:  Epoch[ 2 of 2]-Minibatch[   5-   5, 3.91%]: ce = 4.20819523 * 198; err = 0.91919192 * 198; time = 1.4365s; samplesPerSecond = 137.8
05/04/2016 00:52:11:  Epoch[ 2 of 2]-Minibatch[   6-   6, 4.69%]: ce = 3.93088581 * 458; err = 0.93231441 * 458; time = 3.2942s; samplesPerSecond = 139.0
05/04/2016 00:52:13:  Epoch[ 2 of 2]-Minibatch[   7-   7, 5.47%]: ce = 3.87346892 * 258; err = 0.91860465 * 258; time = 1.8640s; samplesPerSecond = 138.4
05/04/2016 00:52:15:  Epoch[ 2 of 2]-Minibatch[   8-   8, 6.25%]: ce = 3.73194927 * 218; err = 0.79816514 * 218; time = 1.5787s; samplesPerSecond = 138.1
05/04/2016 00:52:16:  Epoch[ 2 of 2]-Minibatch[   9-   9, 7.03%]: ce = 3.93201402 * 238; err = 0.81932773 * 238; time = 1.7277s; samplesPerSecond = 137.8
05/04/2016 00:52:18:  Epoch[ 2 of 2]-Minibatch[  10-  10, 7.81%]: ce = 4.68575164 * 248; err = 0.92741935 * 248; time = 1.7931s; samplesPerSecond = 138.3
05/04/2016 00:52:18: Finished Epoch[ 2 of 2]: [Training] ce = 4.06951430 * 2650; err = 0.88188679 * 2650; totalSamplesSeen = 5254; learningRatePerSample = 0.025; epochTime=19.4179s
05/04/2016 00:52:18: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160504005053.411297\Speech\ExperimentalHtkmlfReader\LSTM_FullUtterance@release_gpu/models/cntkSpeech.dnn'
05/04/2016 00:52:19: CNTKCommandTrainEnd: speechTrain

05/04/2016 00:52:19: Action "train" complete.

05/04/2016 00:52:19: __COMPLETED__