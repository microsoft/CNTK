=== Running C:\Program Files\Microsoft MPI\Bin\/mpiexec.exe -n 3 E:\NetScale\CNTK\git_repos\cplx_master2\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN/cntk.config currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN DeviceId=-1 numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
ping [requestnodes (after change)]: all 3 nodes responded
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
mpihelper: we are cog 2 in a gearbox of 3
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
MPI Rank 0: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank0
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Jan  6 2016 21:48:57
MPI Rank 0: 		Last modified date: Mon Jan  4 12:27:16 2016
MPI Rank 0: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 0: 		Build Branch: 
MPI Rank 0: 		Build SHA1: 
MPI Rank 0: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 0: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master2\Source\CNTK\
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on Amitaga-Win-DT3 at 2016/01/07 07:10:20
MPI Rank 0: command line: 
MPI Rank 0: E:\NetScale\CNTK\git_repos\cplx_master2\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN/cntk.config currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN DeviceId=-1 numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 0: configparameters: cntk.config:currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 0: configparameters: cntk.config:deviceId=-1
MPI Rank 0: configparameters: cntk.config:numCPUThreads=8
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=double
MPI Rank 0: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 8 CPU threads
MPI Rank 0: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 	Prior = Mean
MPI Rank 0: 	ScaledLogLikelihood = Minus
MPI Rank 0: 	PosteriorProb = Softmax
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 	MeanOfFeatures = Mean
MPI Rank 0: 	InvStdOfFeatures = InvStdDev
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 0: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 12 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 1 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 10 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: Validating for node PosteriorProb, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: 
MPI Rank 0: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: SGD using CPU.
MPI Rank 0: 
MPI Rank 0: Training criterion node(s):
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: Evaluation criterion node(s):
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0: #PLUS#
MPI Rank 0: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: #NLop5#
MPI Rank 0: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 0: #PLUSBP#
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: SamplesSeen = 640; TrainLossPerSample =  4.46944908; EvalErr[0]PerSample = 0.90781250; TotalTime = 7.5056s; SamplesPerSecond = 85.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.22299987; EvalErr[0]PerSample = 0.90156250; TotalTime = 7.8311s; SamplesPerSecond = 81.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.93971343; EvalErr[0]PerSample = 0.84687500; TotalTime = 7.4492s; SamplesPerSecond = 85.9
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.92341692; EvalErr[0]PerSample = 0.90468750; TotalTime = 8.2283s; SamplesPerSecond = 77.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84074483; EvalErr[0]PerSample = 0.91093750; TotalTime = 7.4305s; SamplesPerSecond = 86.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71252184; EvalErr[0]PerSample = 0.88437500; TotalTime = 7.4401s; SamplesPerSecond = 86.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.51563464; EvalErr[0]PerSample = 0.82500000; TotalTime = 7.5600s; SamplesPerSecond = 84.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.49349060; EvalErr[0]PerSample = 0.81093750; TotalTime = 7.6162s; SamplesPerSecond = 84.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.34740070; EvalErr[0]PerSample = 0.76562500; TotalTime = 7.4855s; SamplesPerSecond = 85.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.51960918; EvalErr[0]PerSample = 0.79843750; TotalTime = 7.6526s; SamplesPerSecond = 83.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.24656049; EvalErr[0]PerSample = 0.80312500; TotalTime = 7.8507s; SamplesPerSecond = 81.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.33397669; EvalErr[0]PerSample = 0.80000000; TotalTime = 8.3949s; SamplesPerSecond = 76.2
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.17780980; EvalErr[0]PerSample = 0.77031250; TotalTime = 7.4430s; SamplesPerSecond = 86.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.09845902; EvalErr[0]PerSample = 0.76875000; TotalTime = 7.6497s; SamplesPerSecond = 83.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.06458212; EvalErr[0]PerSample = 0.72968750; TotalTime = 7.7519s; SamplesPerSecond = 82.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91633510; EvalErr[0]PerSample = 0.69531250; TotalTime = 7.9419s; SamplesPerSecond = 80.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.90607468; EvalErr[0]PerSample = 0.73281250; TotalTime = 8.7274s; SamplesPerSecond = 73.3
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74095059; EvalErr[0]PerSample = 0.65937500; TotalTime = 6.8098s; SamplesPerSecond = 94.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.67087924; EvalErr[0]PerSample = 0.67343750; TotalTime = 8.4536s; SamplesPerSecond = 75.7
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.67609083; EvalErr[0]PerSample = 0.66406250; TotalTime = 8.2219s; SamplesPerSecond = 77.8
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.54732903; EvalErr[0]PerSample = 0.62968750; TotalTime = 8.0603s; SamplesPerSecond = 79.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61925710; EvalErr[0]PerSample = 0.67343750; TotalTime = 7.5840s; SamplesPerSecond = 84.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.52388480; EvalErr[0]PerSample = 0.65781250; TotalTime = 8.0501s; SamplesPerSecond = 79.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47544601; EvalErr[0]PerSample = 0.63437500; TotalTime = 7.7582s; SamplesPerSecond = 82.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.43265158; EvalErr[0]PerSample = 0.61406250; TotalTime = 6.1274s; SamplesPerSecond = 104.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41728740; EvalErr[0]PerSample = 0.63125000; TotalTime = 4.8683s; SamplesPerSecond = 131.5
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17674793; EvalErr[0]PerSample = 0.57812500; TotalTime = 4.8321s; SamplesPerSecond = 132.4
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31020940; EvalErr[0]PerSample = 0.64062500; TotalTime = 4.8266s; SamplesPerSecond = 132.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26400612; EvalErr[0]PerSample = 0.61093750; TotalTime = 4.6844s; SamplesPerSecond = 136.6
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15885172; EvalErr[0]PerSample = 0.58281250; TotalTime = 4.4403s; SamplesPerSecond = 144.1
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.22712855; EvalErr[0]PerSample = 0.59218750; TotalTime = 5.0005s; SamplesPerSecond = 128.0
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25604782; EvalErr[0]PerSample = 0.60625000; TotalTime = 5.5427s; SamplesPerSecond = 115.5
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0070483; EvalErrPerSample = 0.72827148; AvgLearningRatePerSample = 0.015625; EpochTime=227.265
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.066114
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.301901
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.13223658; EvalErr[0]PerSample = 0.57725694; TotalTime = 5.9374s; SamplesPerSecond = 388.0
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.325544
MPI Rank 0: Async gradient aggregation wait time: 0.189039
MPI Rank 0: Actual gradient aggregation time: 0.442466
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12726818; EvalErr[0]PerSample = 0.59375000; TotalTime = 6.0557s; SamplesPerSecond = 422.7
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.312439
MPI Rank 0: Async gradient aggregation wait time: 1.1e-005
MPI Rank 0: Actual gradient aggregation time: 0.27387
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.18923682; EvalErr[0]PerSample = 0.58437500; TotalTime = 5.9977s; SamplesPerSecond = 426.8
MPI Rank 0: Async gradient aggregation wait time: 1.1e-005
MPI Rank 0: Actual gradient aggregation time: 0.271872
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.327007
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.11532284; EvalErr[0]PerSample = 0.57968750; TotalTime = 6.0016s; SamplesPerSecond = 426.6
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.411833
MPI Rank 0: Async gradient aggregation wait time: 0.009734
MPI Rank 0: Actual gradient aggregation time: 0.586265
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.01746278; EvalErr[0]PerSample = 0.55625000; TotalTime = 5.9982s; SamplesPerSecond = 426.8
MPI Rank 0: Async gradient aggregation wait time: 1.2e-005
MPI Rank 0: Actual gradient aggregation time: 0.373941
MPI Rank 0: Async gradient aggregation wait time: 1.1e-005
MPI Rank 0: Actual gradient aggregation time: 0.348507
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06105301; EvalErr[0]PerSample = 0.57617188; TotalTime = 6.0451s; SamplesPerSecond = 423.5
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.373514
MPI Rank 0: Async gradient aggregation wait time: 0.189196
MPI Rank 0: Actual gradient aggregation time: 0.425109
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.12283592; EvalErr[0]PerSample = 0.56054688; TotalTime = 6.1432s; SamplesPerSecond = 416.7
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.403779
MPI Rank 0: Async gradient aggregation wait time: 4e-006
MPI Rank 0: Actual gradient aggregation time: 0.595437
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06473750; EvalErr[0]PerSample = 0.56953125; TotalTime = 6.1891s; SamplesPerSecond = 413.6
MPI Rank 0: Async gradient aggregation wait time: 0.189996
MPI Rank 0: Actual gradient aggregation time: 0.121157
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1036702; EvalErrPerSample = 0.57451172; AvgLearningRatePerSample = 0.001953125; EpochTime=49.0094
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1e-005
MPI Rank 0: Actual gradient aggregation time: 0.568332
MPI Rank 0: Async gradient aggregation wait time: 9e-006
MPI Rank 0: Actual gradient aggregation time: 0.781774
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.04372754; EvalErr[0]PerSample = 0.54318576; TotalTime = 11.2374s; SamplesPerSecond = 820.1
MPI Rank 0: Async gradient aggregation wait time: 0.189996
MPI Rank 0: Actual gradient aggregation time: 1.0346
MPI Rank 0: Async gradient aggregation wait time: 1.1e-005
MPI Rank 0: Actual gradient aggregation time: 0.773221
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.94811890; EvalErr[0]PerSample = 0.52695313; TotalTime = 11.2428s; SamplesPerSecond = 910.8
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.989734; EvalErrPerSample = 0.53388672; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=23.4389
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.3e-005
MPI Rank 0: Actual gradient aggregation time: 0.505232
MPI Rank 0: Async gradient aggregation wait time: 1.2e-005
MPI Rank 0: Actual gradient aggregation time: 0.630072
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.89718928; EvalErr[0]PerSample = 0.51736111; TotalTime = 10.5874s; SamplesPerSecond = 870.5
MPI Rank 0: Async gradient aggregation wait time: 0.1894
MPI Rank 0: Actual gradient aggregation time: 1.04928
MPI Rank 0: Async gradient aggregation wait time: 1.1e-005
MPI Rank 0: Actual gradient aggregation time: 0.697183
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88234725; EvalErr[0]PerSample = 0.51093750; TotalTime = 11.2251s; SamplesPerSecond = 912.2
MPI Rank 0: Async gradient aggregation wait time: 9e-006
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8894112; EvalErrPerSample = 0.51376953; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=22.561
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank1
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Jan  6 2016 21:48:57
MPI Rank 1: 		Last modified date: Mon Jan  4 12:27:16 2016
MPI Rank 1: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 1: 		Build Branch: 
MPI Rank 1: 		Build SHA1: 
MPI Rank 1: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 1: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master2\Source\CNTK\
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on Amitaga-Win-DT3 at 2016/01/07 07:10:20
MPI Rank 1: command line: 
MPI Rank 1: E:\NetScale\CNTK\git_repos\cplx_master2\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN/cntk.config currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN DeviceId=-1 numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 1: configparameters: cntk.config:currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 1: configparameters: cntk.config:deviceId=-1
MPI Rank 1: configparameters: cntk.config:numCPUThreads=8
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=double
MPI Rank 1: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 8 CPU threads
MPI Rank 1: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	ScaledLogLikelihood = Minus
MPI Rank 1: 	MeanOfFeatures = Mean
MPI Rank 1: 	InvStdOfFeatures = InvStdDev
MPI Rank 1: 	Prior = Mean
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 	PosteriorProb = Softmax
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 1: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 14 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: Validating for node PosteriorProb, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 1: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 1: 
MPI Rank 1: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: SGD using CPU.
MPI Rank 1: 
MPI Rank 1: Training criterion node(s):
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: Evaluation criterion node(s):
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1: #PLUS#
MPI Rank 1: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: #NLop5#
MPI Rank 1: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 1: #PLUSBP#
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: SamplesSeen = 640; TrainLossPerSample =  4.46944908; EvalErr[0]PerSample = 0.90781250; TotalTime = 8.8171s; SamplesPerSecond = 72.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.22299987; EvalErr[0]PerSample = 0.90156250; TotalTime = 10.2505s; SamplesPerSecond = 62.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.93971343; EvalErr[0]PerSample = 0.84687500; TotalTime = 9.6596s; SamplesPerSecond = 66.3
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.92341692; EvalErr[0]PerSample = 0.90468750; TotalTime = 9.1176s; SamplesPerSecond = 70.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84074483; EvalErr[0]PerSample = 0.91093750; TotalTime = 9.0013s; SamplesPerSecond = 71.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71252184; EvalErr[0]PerSample = 0.88437500; TotalTime = 9.6425s; SamplesPerSecond = 66.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.51563464; EvalErr[0]PerSample = 0.82500000; TotalTime = 9.4458s; SamplesPerSecond = 67.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.49349060; EvalErr[0]PerSample = 0.81093750; TotalTime = 9.7014s; SamplesPerSecond = 66.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.34740070; EvalErr[0]PerSample = 0.76562500; TotalTime = 9.7078s; SamplesPerSecond = 65.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.51960918; EvalErr[0]PerSample = 0.79843750; TotalTime = 9.5628s; SamplesPerSecond = 66.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.24656049; EvalErr[0]PerSample = 0.80312500; TotalTime = 9.2538s; SamplesPerSecond = 69.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.33397669; EvalErr[0]PerSample = 0.80000000; TotalTime = 9.3834s; SamplesPerSecond = 68.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.17780980; EvalErr[0]PerSample = 0.77031250; TotalTime = 9.2993s; SamplesPerSecond = 68.8
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.09845902; EvalErr[0]PerSample = 0.76875000; TotalTime = 10.4548s; SamplesPerSecond = 61.2
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.06458212; EvalErr[0]PerSample = 0.72968750; TotalTime = 9.4905s; SamplesPerSecond = 67.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91633510; EvalErr[0]PerSample = 0.69531250; TotalTime = 10.0421s; SamplesPerSecond = 63.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.90607468; EvalErr[0]PerSample = 0.73281250; TotalTime = 9.2191s; SamplesPerSecond = 69.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74095059; EvalErr[0]PerSample = 0.65937500; TotalTime = 8.4875s; SamplesPerSecond = 75.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.67087924; EvalErr[0]PerSample = 0.67343750; TotalTime = 10.2093s; SamplesPerSecond = 62.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.67609083; EvalErr[0]PerSample = 0.66406250; TotalTime = 9.5599s; SamplesPerSecond = 66.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.54732903; EvalErr[0]PerSample = 0.62968750; TotalTime = 4.8595s; SamplesPerSecond = 131.7
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61925710; EvalErr[0]PerSample = 0.67343750; TotalTime = 4.9599s; SamplesPerSecond = 129.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.52388480; EvalErr[0]PerSample = 0.65781250; TotalTime = 4.8120s; SamplesPerSecond = 133.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47544601; EvalErr[0]PerSample = 0.63437500; TotalTime = 4.7779s; SamplesPerSecond = 134.0
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.43265158; EvalErr[0]PerSample = 0.61406250; TotalTime = 4.7718s; SamplesPerSecond = 134.1
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41728740; EvalErr[0]PerSample = 0.63125000; TotalTime = 4.4610s; SamplesPerSecond = 143.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17674793; EvalErr[0]PerSample = 0.57812500; TotalTime = 5.2676s; SamplesPerSecond = 121.5
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31020940; EvalErr[0]PerSample = 0.64062500; TotalTime = 4.2707s; SamplesPerSecond = 149.9
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26400612; EvalErr[0]PerSample = 0.61093750; TotalTime = 2.5535s; SamplesPerSecond = 250.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15885172; EvalErr[0]PerSample = 0.58281250; TotalTime = 2.5137s; SamplesPerSecond = 254.6
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.22712855; EvalErr[0]PerSample = 0.59218750; TotalTime = 2.5769s; SamplesPerSecond = 248.4
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25604782; EvalErr[0]PerSample = 0.60625000; TotalTime = 2.5871s; SamplesPerSecond = 247.4
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0070483; EvalErrPerSample = 0.72827148; AvgLearningRatePerSample = 0.015625; EpochTime=238.763
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.011093
MPI Rank 1: Async gradient aggregation wait time: 5e-006
MPI Rank 1: Actual gradient aggregation time: 0.010034
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.13223658; EvalErr[0]PerSample = 0.57725694; TotalTime = 6.3078s; SamplesPerSecond = 365.3
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009899
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010517
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12726818; EvalErr[0]PerSample = 0.59375000; TotalTime = 6.0484s; SamplesPerSecond = 423.3
MPI Rank 1: Async gradient aggregation wait time: 1.1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009538
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.013955
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.18923682; EvalErr[0]PerSample = 0.58437500; TotalTime = 5.9729s; SamplesPerSecond = 428.6
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010567
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010555
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.11532284; EvalErr[0]PerSample = 0.57968750; TotalTime = 6.1061s; SamplesPerSecond = 419.3
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010462
MPI Rank 1: Async gradient aggregation wait time: 6e-006
MPI Rank 1: Actual gradient aggregation time: 0.010151
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.01746278; EvalErr[0]PerSample = 0.55625000; TotalTime = 6.0104s; SamplesPerSecond = 425.9
MPI Rank 1: Async gradient aggregation wait time: 1.1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010051
MPI Rank 1: Async gradient aggregation wait time: 1.1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009359
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06105301; EvalErr[0]PerSample = 0.57617188; TotalTime = 5.9615s; SamplesPerSecond = 429.4
MPI Rank 1: Async gradient aggregation wait time: 1.1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009622
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010305
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.12283592; EvalErr[0]PerSample = 0.56054688; TotalTime = 6.1922s; SamplesPerSecond = 413.4
MPI Rank 1: Async gradient aggregation wait time: 5e-006
MPI Rank 1: Actual gradient aggregation time: 0.010026
MPI Rank 1: Async gradient aggregation wait time: 1.1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010844
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06473750; EvalErr[0]PerSample = 0.56953125; TotalTime = 6.0960s; SamplesPerSecond = 420.0
MPI Rank 1: Async gradient aggregation wait time: 9e-006
MPI Rank 1: Actual gradient aggregation time: 0.010067
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1036702; EvalErrPerSample = 0.57451172; AvgLearningRatePerSample = 0.001953125; EpochTime=48.8836
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010543
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009802
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.04372754; EvalErr[0]PerSample = 0.54318576; TotalTime = 12.1746s; SamplesPerSecond = 757.0
MPI Rank 1: Async gradient aggregation wait time: 9e-006
MPI Rank 1: Actual gradient aggregation time: 0.010333
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.011117
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.94811890; EvalErr[0]PerSample = 0.52695313; TotalTime = 10.9177s; SamplesPerSecond = 937.9
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.989734; EvalErrPerSample = 0.53388672; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=23.3529
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.010071
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009619
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.89718928; EvalErr[0]PerSample = 0.51736111; TotalTime = 11.5659s; SamplesPerSecond = 796.8
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.01022
MPI Rank 1: Async gradient aggregation wait time: 1e-005
MPI Rank 1: Actual gradient aggregation time: 0.009609
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88234725; EvalErr[0]PerSample = 0.51093750; TotalTime = 10.8320s; SamplesPerSecond = 945.3
MPI Rank 1: Async gradient aggregation wait time: 8e-006
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8894112; EvalErrPerSample = 0.51376953; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=22.7997
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: Redirecting stderr to file C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank2
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Jan  6 2016 21:48:57
MPI Rank 2: 		Last modified date: Mon Jan  4 12:27:16 2016
MPI Rank 2: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
MPI Rank 2: 		Build Branch: 
MPI Rank 2: 		Build SHA1: 
MPI Rank 2: 		Built by amitaga on Amitaga-Win-DT3           
MPI Rank 2: 		Build Path: E:\NetScale\CNTK\git_repos\cplx_master2\Source\CNTK\
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on Amitaga-Win-DT3 at 2016/01/07 07:10:21
MPI Rank 2: command line: 
MPI Rank 2: E:\NetScale\CNTK\git_repos\cplx_master2\x64\debug\cntk.exe configFile=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN/cntk.config currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN DeviceId=-1 numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = -1
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\DNN
MPI Rank 2: configparameters: cntk.config:currentDirectory=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: configparameters: cntk.config:DataDir=E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data
MPI Rank 2: configparameters: cntk.config:deviceId=-1
MPI Rank 2: configparameters: cntk.config:numCPUThreads=8
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=double
MPI Rank 2: configparameters: cntk.config:RunDir=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=64]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = double
MPI Rank 2: Using 8 CPU threads
MPI Rank 2: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160106231018.691457\Speech\DNN_ParallelNoQuantizationBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file E:\NetScale\CNTK\git_repos\cplx_master2\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 	PosteriorProb = Softmax
MPI Rank 2: 	MeanOfFeatures = Mean
MPI Rank 2: 	ScaledLogLikelihood = Minus
MPI Rank 2: 	Prior = Mean
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 	InvStdOfFeatures = InvStdDev
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for CrossEntropyWithSoftmax CrossEntropyWithSoftmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for PosteriorProb Softmax operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for MeanOfFeatures Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for Prior Mean operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for EvalErrorPrediction ErrorPrediction operation
MPI Rank 2: FormNestedNetwork: WARNING: Was called twice for InvStdOfFeatures InvStdDev operation
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 19 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node PosteriorProb, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> PosteriorProb = Softmax(HLast[132, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 8 out of 19 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 0], LogOfPrior[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 0]) -> [132 [132 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132 [132 {1}], 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512 [512 {1}], 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512 [512 {1}], 363]
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 0], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 0], B0[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512 [512 {1}], 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 0], B1[512, 1]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 0]) -> [512 [512 {1}], MBSize 0]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 0]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132 [132 {1}], 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 0], B2[132, 1]) -> [132 [132 {1}], MBSize 0]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 0], HLast[132, MBSize 0]) -> [1 [1 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363 [363 {1}], MBSize 0]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 0]) -> [363 [363 {1}], 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: SGD using CPU.
MPI Rank 2: 
MPI Rank 2: Training criterion node(s):
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: Evaluation criterion node(s):
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2: #PLUS#
MPI Rank 2: Tensor Op: Op 15: 512 x 64 {1,512} op 512 x 1 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: #NLop5#
MPI Rank 2: Tensor Op: Op 5: 512 x 64 {1,512} -> 512 x 64 {1,512}
MPI Rank 2: #PLUSBP#
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.13%]: SamplesSeen = 640; TrainLossPerSample =  4.46944908; EvalErr[0]PerSample = 0.90781250; TotalTime = 5.7374s; SamplesPerSecond = 111.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.22299987; EvalErr[0]PerSample = 0.90156250; TotalTime = 5.9096s; SamplesPerSecond = 108.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.93971343; EvalErr[0]PerSample = 0.84687500; TotalTime = 5.9043s; SamplesPerSecond = 108.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.92341692; EvalErr[0]PerSample = 0.90468750; TotalTime = 5.9502s; SamplesPerSecond = 107.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84074483; EvalErr[0]PerSample = 0.91093750; TotalTime = 6.0418s; SamplesPerSecond = 105.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71252184; EvalErr[0]PerSample = 0.88437500; TotalTime = 5.8783s; SamplesPerSecond = 108.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.51563464; EvalErr[0]PerSample = 0.82500000; TotalTime = 5.4733s; SamplesPerSecond = 116.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.49349060; EvalErr[0]PerSample = 0.81093750; TotalTime = 5.5382s; SamplesPerSecond = 115.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.34740070; EvalErr[0]PerSample = 0.76562500; TotalTime = 5.9525s; SamplesPerSecond = 107.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.51960918; EvalErr[0]PerSample = 0.79843750; TotalTime = 6.0052s; SamplesPerSecond = 106.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.24656049; EvalErr[0]PerSample = 0.80312500; TotalTime = 5.9294s; SamplesPerSecond = 107.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.33397669; EvalErr[0]PerSample = 0.80000000; TotalTime = 5.6173s; SamplesPerSecond = 113.9
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.17780980; EvalErr[0]PerSample = 0.77031250; TotalTime = 5.9802s; SamplesPerSecond = 107.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.09845902; EvalErr[0]PerSample = 0.76875000; TotalTime = 5.9667s; SamplesPerSecond = 107.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.06458212; EvalErr[0]PerSample = 0.72968750; TotalTime = 6.1392s; SamplesPerSecond = 104.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91633510; EvalErr[0]PerSample = 0.69531250; TotalTime = 5.9357s; SamplesPerSecond = 107.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.90607468; EvalErr[0]PerSample = 0.73281250; TotalTime = 6.1926s; SamplesPerSecond = 103.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74095059; EvalErr[0]PerSample = 0.65937500; TotalTime = 5.8400s; SamplesPerSecond = 109.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.67087924; EvalErr[0]PerSample = 0.67343750; TotalTime = 5.8333s; SamplesPerSecond = 109.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.67609083; EvalErr[0]PerSample = 0.66406250; TotalTime = 6.1079s; SamplesPerSecond = 104.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.54732903; EvalErr[0]PerSample = 0.62968750; TotalTime = 6.2853s; SamplesPerSecond = 101.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61925710; EvalErr[0]PerSample = 0.67343750; TotalTime = 6.0686s; SamplesPerSecond = 105.5
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.52388480; EvalErr[0]PerSample = 0.65781250; TotalTime = 5.9121s; SamplesPerSecond = 108.3
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47544601; EvalErr[0]PerSample = 0.63437500; TotalTime = 5.7369s; SamplesPerSecond = 111.6
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.43265158; EvalErr[0]PerSample = 0.61406250; TotalTime = 6.3346s; SamplesPerSecond = 101.0
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41728740; EvalErr[0]PerSample = 0.63125000; TotalTime = 6.0484s; SamplesPerSecond = 105.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17674793; EvalErr[0]PerSample = 0.57812500; TotalTime = 6.2653s; SamplesPerSecond = 102.2
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31020940; EvalErr[0]PerSample = 0.64062500; TotalTime = 5.7823s; SamplesPerSecond = 110.7
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26400612; EvalErr[0]PerSample = 0.61093750; TotalTime = 5.8808s; SamplesPerSecond = 108.8
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15885172; EvalErr[0]PerSample = 0.58281250; TotalTime = 5.7989s; SamplesPerSecond = 110.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.22712855; EvalErr[0]PerSample = 0.59218750; TotalTime = 6.7104s; SamplesPerSecond = 95.4
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25604782; EvalErr[0]PerSample = 0.60625000; TotalTime = 5.8360s; SamplesPerSecond = 109.7
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0070483; EvalErrPerSample = 0.72827148; AvgLearningRatePerSample = 0.015625; EpochTime=190.644
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.191186
MPI Rank 2: Async gradient aggregation wait time: 0.120218
MPI Rank 2: Actual gradient aggregation time: 0.620144
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: SamplesSeen = 2304; TrainLossPerSample =  2.13223658; EvalErr[0]PerSample = 0.57725694; TotalTime = 5.7265s; SamplesPerSecond = 402.3
MPI Rank 2: Async gradient aggregation wait time: 0.054516
MPI Rank 2: Actual gradient aggregation time: 0.617895
MPI Rank 2: Async gradient aggregation wait time: 0.116797
MPI Rank 2: Actual gradient aggregation time: 0.606944
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.12726818; EvalErr[0]PerSample = 0.59375000; TotalTime = 6.0543s; SamplesPerSecond = 422.8
MPI Rank 2: Async gradient aggregation wait time: 0.104655
MPI Rank 2: Actual gradient aggregation time: 0.591093
MPI Rank 2: Async gradient aggregation wait time: 0.071063
MPI Rank 2: Actual gradient aggregation time: 0.589835
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.18923682; EvalErr[0]PerSample = 0.58437500; TotalTime = 5.9717s; SamplesPerSecond = 428.7
MPI Rank 2: Async gradient aggregation wait time: 0.077784
MPI Rank 2: Actual gradient aggregation time: 0.593211
MPI Rank 2: Async gradient aggregation wait time: 0.109635
MPI Rank 2: Actual gradient aggregation time: 0.606858
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.11532284; EvalErr[0]PerSample = 0.57968750; TotalTime = 6.0738s; SamplesPerSecond = 421.5
MPI Rank 2: Async gradient aggregation wait time: 0.116115
MPI Rank 2: Actual gradient aggregation time: 0.609555
MPI Rank 2: Async gradient aggregation wait time: 0.123964
MPI Rank 2: Actual gradient aggregation time: 0.586095
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.01746278; EvalErr[0]PerSample = 0.55625000; TotalTime = 6.0363s; SamplesPerSecond = 424.1
MPI Rank 2: Async gradient aggregation wait time: 0.115057
MPI Rank 2: Actual gradient aggregation time: 0.569827
MPI Rank 2: Async gradient aggregation wait time: 0.082266
MPI Rank 2: Actual gradient aggregation time: 0.596191
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06105301; EvalErr[0]PerSample = 0.57617188; TotalTime = 5.9882s; SamplesPerSecond = 427.5
MPI Rank 2: Async gradient aggregation wait time: 0.033502
MPI Rank 2: Actual gradient aggregation time: 0.671787
MPI Rank 2: Async gradient aggregation wait time: 0.120471
MPI Rank 2: Actual gradient aggregation time: 0.586869
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.12283592; EvalErr[0]PerSample = 0.56054688; TotalTime = 6.1658s; SamplesPerSecond = 415.2
MPI Rank 2: Async gradient aggregation wait time: 0.086088
MPI Rank 2: Actual gradient aggregation time: 0.622697
MPI Rank 2: Async gradient aggregation wait time: 0.106403
MPI Rank 2: Actual gradient aggregation time: 0.600061
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.06473750; EvalErr[0]PerSample = 0.56953125; TotalTime = 6.1917s; SamplesPerSecond = 413.5
MPI Rank 2: Async gradient aggregation wait time: 0.290116
MPI Rank 2: Actual gradient aggregation time: 0.216052
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1036702; EvalErrPerSample = 0.57451172; AvgLearningRatePerSample = 0.001953125; EpochTime=48.7417
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.36857
MPI Rank 2: Actual gradient aggregation time: 1.17742
MPI Rank 2: Async gradient aggregation wait time: 0.355566
MPI Rank 2: Actual gradient aggregation time: 1.01097
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  2.04372754; EvalErr[0]PerSample = 0.54318576; TotalTime = 10.9682s; SamplesPerSecond = 840.2
MPI Rank 2: Async gradient aggregation wait time: 0.367862
MPI Rank 2: Actual gradient aggregation time: 1.15827
MPI Rank 2: Async gradient aggregation wait time: 0.325056
MPI Rank 2: Actual gradient aggregation time: 1.09008
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.94811890; EvalErr[0]PerSample = 0.52695313; TotalTime = 11.4067s; SamplesPerSecond = 897.7
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 1.989734; EvalErrPerSample = 0.53388672; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=23.2
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 64), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 1.2e-005
MPI Rank 2: Actual gradient aggregation time: 1.04909
MPI Rank 2: Async gradient aggregation wait time: 0.238716
MPI Rank 2: Actual gradient aggregation time: 1.15944
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: SamplesSeen = 9216; TrainLossPerSample =  1.89718928; EvalErr[0]PerSample = 0.51736111; TotalTime = 10.4305s; SamplesPerSecond = 883.6
MPI Rank 2: Async gradient aggregation wait time: 0.373122
MPI Rank 2: Actual gradient aggregation time: 1.16018
MPI Rank 2: Async gradient aggregation wait time: 0.411096
MPI Rank 2: Actual gradient aggregation time: 1.07429
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.88234725; EvalErr[0]PerSample = 0.51093750; TotalTime = 11.3444s; SamplesPerSecond = 902.7
MPI Rank 2: Async gradient aggregation wait time: 0.00373
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.8894112; EvalErrPerSample = 0.51376953; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=22.5056
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: __COMPLETED__
MPI Rank 2: ~MPIWrapper
