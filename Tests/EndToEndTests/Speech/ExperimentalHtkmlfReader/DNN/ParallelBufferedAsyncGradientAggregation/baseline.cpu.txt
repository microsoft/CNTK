=== Running mpiexec -n 3 /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank0
Redirecting stderr to file /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank1
Redirecting stderr to file /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr_speechTrain.logrank2
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Nov 29 2015 23:23:51
MPI Rank 0: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 0: 		Build type: debug
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2015/11/29 23:28:08
MPI Rank 0: command line: 
MPI Rank 0: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=-1
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=-1
MPI Rank 0: configparameters: cntk.config:numCPUThreads=2
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=double
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 2 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward propagation.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Printing Gradient Computation Node Order ... 
MPI Rank 0: 
MPI Rank 0: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 0: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 0: B2[132, 1] = LearnableParameter
MPI Rank 0: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 0: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 0: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 0: B1[512, 1] = LearnableParameter
MPI Rank 0: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 0: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 0: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 0: B0[512, 1] = LearnableParameter
MPI Rank 0: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 0: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 0: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 0: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 0: features[363, 3] = InputValue
MPI Rank 0: W0[512, 363] = LearnableParameter
MPI Rank 0: W1[512, 512] = LearnableParameter
MPI Rank 0: W2[132, 512] = LearnableParameter
MPI Rank 0: labels[132, 3] = InputValue
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: SGD using CPU.
MPI Rank 0: GetTrainCriterionNodes  ...
MPI Rank 0: GetEvalCriterionNodes  ...
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for gradient computing
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 1.05006s; TotalTimePerSample = 1.64071ms; SamplesPerSecond = 609
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 0.98657s; TotalTimePerSample = 1.54152ms; SamplesPerSecond = 648
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.94979s; TotalTimePerSample = 1.48405ms; SamplesPerSecond = 673
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 0.92628s; TotalTimePerSample = 1.44731ms; SamplesPerSecond = 690
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 0.76487s; TotalTimePerSample = 1.19510ms; SamplesPerSecond = 836
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.74740s; TotalTimePerSample = 1.16782ms; SamplesPerSecond = 856
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 0.84256s; TotalTimePerSample = 1.31650ms; SamplesPerSecond = 759
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 0.76841s; TotalTimePerSample = 1.20063ms; SamplesPerSecond = 832
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.70811s; TotalTimePerSample = 1.10643ms; SamplesPerSecond = 903
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.83737s; TotalTimePerSample = 1.30838ms; SamplesPerSecond = 764
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.80692s; TotalTimePerSample = 1.26082ms; SamplesPerSecond = 793
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.88943s; TotalTimePerSample = 1.38973ms; SamplesPerSecond = 719
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 0.92627s; TotalTimePerSample = 1.44730ms; SamplesPerSecond = 690
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 0.78304s; TotalTimePerSample = 1.22351ms; SamplesPerSecond = 817
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 0.91308s; TotalTimePerSample = 1.42669ms; SamplesPerSecond = 700
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 0.91463s; TotalTimePerSample = 1.42911ms; SamplesPerSecond = 699
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 0.81649s; TotalTimePerSample = 1.27577ms; SamplesPerSecond = 783
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.98264s; TotalTimePerSample = 1.53538ms; SamplesPerSecond = 651
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 0.77053s; TotalTimePerSample = 1.20395ms; SamplesPerSecond = 830
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.87648s; TotalTimePerSample = 1.36949ms; SamplesPerSecond = 730
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.70825s; TotalTimePerSample = 1.10665ms; SamplesPerSecond = 903
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.83083s; TotalTimePerSample = 1.29817ms; SamplesPerSecond = 770
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 0.81892s; TotalTimePerSample = 1.27956ms; SamplesPerSecond = 781
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.93411s; TotalTimePerSample = 1.45954ms; SamplesPerSecond = 685
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.78274s; TotalTimePerSample = 1.22303ms; SamplesPerSecond = 817
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 0.75536s; TotalTimePerSample = 1.18025ms; SamplesPerSecond = 847
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.80553s; TotalTimePerSample = 1.25864ms; SamplesPerSecond = 794
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 0.80136s; TotalTimePerSample = 1.25213ms; SamplesPerSecond = 798
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.84782s; TotalTimePerSample = 1.32472ms; SamplesPerSecond = 754
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.87247s; TotalTimePerSample = 1.36324ms; SamplesPerSecond = 733
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 0.75342s; TotalTimePerSample = 1.17723ms; SamplesPerSecond = 849
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.82901s; TotalTimePerSample = 1.29533ms; SamplesPerSecond = 772
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=27.008283
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.11006760; EvalErr[0]PerSample = 0.57161458; TotalTime = 1.22008s; TotalTimePerSample = 0.52955ms; SamplesPerSecond = 1888
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08344055; EvalErr[0]PerSample = 0.57500000; TotalTime = 1.30052s; TotalTimePerSample = 0.50802ms; SamplesPerSecond = 1968
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06587458; EvalErr[0]PerSample = 0.56796875; TotalTime = 1.29726s; TotalTimePerSample = 0.50674ms; SamplesPerSecond = 1973
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.10937064; EvalErr[0]PerSample = 0.60859375; TotalTime = 1.25050s; TotalTimePerSample = 0.48848ms; SamplesPerSecond = 2047
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02788461; EvalErr[0]PerSample = 0.56562500; TotalTime = 1.29326s; TotalTimePerSample = 0.50518ms; SamplesPerSecond = 1979
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.24576823; EvalErr[0]PerSample = 0.60117188; TotalTime = 1.33346s; TotalTimePerSample = 0.52088ms; SamplesPerSecond = 1919
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15226292; EvalErr[0]PerSample = 0.58125000; TotalTime = 1.29547s; TotalTimePerSample = 0.50604ms; SamplesPerSecond = 1976
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.26731511; EvalErr[0]PerSample = 0.62617188; TotalTime = 1.27949s; TotalTimePerSample = 0.49980ms; SamplesPerSecond = 2000
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1359209; EvalErrPerSample = 0.58808594; AvgLearningRatePerSample = 0.001953125; EpochTime=10.388479
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.38080818; EvalErr[0]PerSample = 0.66710069; TotalTime = 2.65834s; TotalTimePerSample = 0.28845ms; SamplesPerSecond = 3466
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.22297658; EvalErr[0]PerSample = 0.60244141; TotalTime = 2.66820s; TotalTimePerSample = 0.26057ms; SamplesPerSecond = 3837
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2901877; EvalErrPerSample = 0.62949219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.45035
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.06740633; EvalErr[0]PerSample = 0.54676649; TotalTime = 2.57109s; TotalTimePerSample = 0.27898ms; SamplesPerSecond = 3584
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.03252134; EvalErr[0]PerSample = 0.54667969; TotalTime = 2.64420s; TotalTimePerSample = 0.25822ms; SamplesPerSecond = 3872
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 2.0474117; EvalErrPerSample = 0.546875; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.515902
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Nov 29 2015 23:23:51
MPI Rank 1: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 1: 		Build type: debug
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2015/11/29 23:28:09
MPI Rank 1: command line: 
MPI Rank 1: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=-1
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=-1
MPI Rank 1: configparameters: cntk.config:numCPUThreads=2
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=double
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 2 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward propagation.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Printing Gradient Computation Node Order ... 
MPI Rank 1: 
MPI Rank 1: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 1: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 1: B2[132, 1] = LearnableParameter
MPI Rank 1: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 1: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 1: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 1: B1[512, 1] = LearnableParameter
MPI Rank 1: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 1: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 1: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 1: B0[512, 1] = LearnableParameter
MPI Rank 1: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 1: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 1: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 1: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 1: features[363, 3] = InputValue
MPI Rank 1: W0[512, 363] = LearnableParameter
MPI Rank 1: W1[512, 512] = LearnableParameter
MPI Rank 1: W2[132, 512] = LearnableParameter
MPI Rank 1: labels[132, 3] = InputValue
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: SGD using CPU.
MPI Rank 1: GetTrainCriterionNodes  ...
MPI Rank 1: GetEvalCriterionNodes  ...
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for gradient computing
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 0.98621s; TotalTimePerSample = 1.54095ms; SamplesPerSecond = 648
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 0.90488s; TotalTimePerSample = 1.41387ms; SamplesPerSecond = 707
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.91648s; TotalTimePerSample = 1.43200ms; SamplesPerSecond = 698
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 0.78185s; TotalTimePerSample = 1.22164ms; SamplesPerSecond = 818
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 0.74109s; TotalTimePerSample = 1.15795ms; SamplesPerSecond = 863
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.73455s; TotalTimePerSample = 1.14773ms; SamplesPerSecond = 871
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 0.77507s; TotalTimePerSample = 1.21104ms; SamplesPerSecond = 825
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 0.76861s; TotalTimePerSample = 1.20095ms; SamplesPerSecond = 832
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.86308s; TotalTimePerSample = 1.34856ms; SamplesPerSecond = 741
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.93630s; TotalTimePerSample = 1.46297ms; SamplesPerSecond = 683
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.91768s; TotalTimePerSample = 1.43387ms; SamplesPerSecond = 697
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.90741s; TotalTimePerSample = 1.41783ms; SamplesPerSecond = 705
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 0.75467s; TotalTimePerSample = 1.17918ms; SamplesPerSecond = 848
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 0.72665s; TotalTimePerSample = 1.13539ms; SamplesPerSecond = 880
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 0.73925s; TotalTimePerSample = 1.15508ms; SamplesPerSecond = 865
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 0.74195s; TotalTimePerSample = 1.15930ms; SamplesPerSecond = 862
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 0.74005s; TotalTimePerSample = 1.15633ms; SamplesPerSecond = 864
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.82265s; TotalTimePerSample = 1.28539ms; SamplesPerSecond = 777
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 0.72004s; TotalTimePerSample = 1.12506ms; SamplesPerSecond = 888
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.82779s; TotalTimePerSample = 1.29342ms; SamplesPerSecond = 773
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.97820s; TotalTimePerSample = 1.52844ms; SamplesPerSecond = 654
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.98065s; TotalTimePerSample = 1.53227ms; SamplesPerSecond = 652
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 0.74414s; TotalTimePerSample = 1.16271ms; SamplesPerSecond = 860
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.81706s; TotalTimePerSample = 1.27665ms; SamplesPerSecond = 783
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.70541s; TotalTimePerSample = 1.10221ms; SamplesPerSecond = 907
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 0.69547s; TotalTimePerSample = 1.08667ms; SamplesPerSecond = 920
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.71637s; TotalTimePerSample = 1.11933ms; SamplesPerSecond = 893
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 0.79518s; TotalTimePerSample = 1.24247ms; SamplesPerSecond = 804
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.67430s; TotalTimePerSample = 1.05359ms; SamplesPerSecond = 949
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.90868s; TotalTimePerSample = 1.41981ms; SamplesPerSecond = 704
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 0.68645s; TotalTimePerSample = 1.07258ms; SamplesPerSecond = 932
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.62030s; TotalTimePerSample = 0.96923ms; SamplesPerSecond = 1031
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=25.635575
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.11006760; EvalErr[0]PerSample = 0.57161458; TotalTime = 1.26647s; TotalTimePerSample = 0.54968ms; SamplesPerSecond = 1819
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08344055; EvalErr[0]PerSample = 0.57500000; TotalTime = 1.24967s; TotalTimePerSample = 0.48815ms; SamplesPerSecond = 2048
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06587458; EvalErr[0]PerSample = 0.56796875; TotalTime = 1.32093s; TotalTimePerSample = 0.51599ms; SamplesPerSecond = 1938
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.10937064; EvalErr[0]PerSample = 0.60859375; TotalTime = 1.22544s; TotalTimePerSample = 0.47869ms; SamplesPerSecond = 2089
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02788461; EvalErr[0]PerSample = 0.56562500; TotalTime = 1.31825s; TotalTimePerSample = 0.51494ms; SamplesPerSecond = 1941
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.24576823; EvalErr[0]PerSample = 0.60117188; TotalTime = 1.27302s; TotalTimePerSample = 0.49727ms; SamplesPerSecond = 2010
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15226292; EvalErr[0]PerSample = 0.58125000; TotalTime = 1.29393s; TotalTimePerSample = 0.50544ms; SamplesPerSecond = 1978
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.26731511; EvalErr[0]PerSample = 0.62617188; TotalTime = 1.34394s; TotalTimePerSample = 0.52497ms; SamplesPerSecond = 1904
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1359209; EvalErrPerSample = 0.58808594; AvgLearningRatePerSample = 0.001953125; EpochTime=10.388483
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.38080818; EvalErr[0]PerSample = 0.66710069; TotalTime = 2.60428s; TotalTimePerSample = 0.28258ms; SamplesPerSecond = 3538
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.22297658; EvalErr[0]PerSample = 0.60244141; TotalTime = 2.63995s; TotalTimePerSample = 0.25781ms; SamplesPerSecond = 3878
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2901877; EvalErrPerSample = 0.62949219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.450352
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.06740633; EvalErr[0]PerSample = 0.54676649; TotalTime = 2.66006s; TotalTimePerSample = 0.28863ms; SamplesPerSecond = 3464
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.03252134; EvalErr[0]PerSample = 0.54667969; TotalTime = 2.73810s; TotalTimePerSample = 0.26739ms; SamplesPerSecond = 3739
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 2.0474117; EvalErrPerSample = 0.546875; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.515901
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Nov 29 2015 23:23:51
MPI Rank 2: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 2: 		Build type: debug
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2015/11/29 23:28:09
MPI Rank 2: command line: 
MPI Rank 2: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=-1 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = -1
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=-1
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=-1
MPI Rank 2: configparameters: cntk.config:numCPUThreads=2
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=double
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = double
MPI Rank 2: Using 2 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20151129232808.482155/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_cpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward propagation.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Printing Gradient Computation Node Order ... 
MPI Rank 2: 
MPI Rank 2: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 2: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 2: B2[132, 1] = LearnableParameter
MPI Rank 2: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 2: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 2: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 2: B1[512, 1] = LearnableParameter
MPI Rank 2: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 2: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 2: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 2: B0[512, 1] = LearnableParameter
MPI Rank 2: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 2: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 2: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 2: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 2: features[363, 3] = InputValue
MPI Rank 2: W0[512, 363] = LearnableParameter
MPI Rank 2: W1[512, 512] = LearnableParameter
MPI Rank 2: W2[132, 512] = LearnableParameter
MPI Rank 2: labels[132, 3] = InputValue
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: SGD using CPU.
MPI Rank 2: GetTrainCriterionNodes  ...
MPI Rank 2: GetEvalCriterionNodes  ...
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for gradient computing
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.36628272; EvalErr[0]PerSample = 0.90937500; TotalTime = 1.05044s; TotalTimePerSample = 1.64132ms; SamplesPerSecond = 609
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15914991; EvalErr[0]PerSample = 0.89218750; TotalTime = 0.97861s; TotalTimePerSample = 1.52908ms; SamplesPerSecond = 653
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.99837967; EvalErr[0]PerSample = 0.86875000; TotalTime = 0.85467s; TotalTimePerSample = 1.33543ms; SamplesPerSecond = 748
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86616341; EvalErr[0]PerSample = 0.86250000; TotalTime = 0.70158s; TotalTimePerSample = 1.09622ms; SamplesPerSecond = 912
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80082643; EvalErr[0]PerSample = 0.87968750; TotalTime = 0.72532s; TotalTimePerSample = 1.13331ms; SamplesPerSecond = 882
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73336112; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.93667s; TotalTimePerSample = 1.46354ms; SamplesPerSecond = 683
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57119384; EvalErr[0]PerSample = 0.82031250; TotalTime = 0.98838s; TotalTimePerSample = 1.54435ms; SamplesPerSecond = 647
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.44001005; EvalErr[0]PerSample = 0.81562500; TotalTime = 0.82814s; TotalTimePerSample = 1.29397ms; SamplesPerSecond = 772
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.36131109; EvalErr[0]PerSample = 0.77343750; TotalTime = 0.84054s; TotalTimePerSample = 1.31334ms; SamplesPerSecond = 761
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.39817487; EvalErr[0]PerSample = 0.85000000; TotalTime = 0.72648s; TotalTimePerSample = 1.13512ms; SamplesPerSecond = 880
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.25116276; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.85561s; TotalTimePerSample = 1.33690ms; SamplesPerSecond = 748
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.35774005; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.75299s; TotalTimePerSample = 1.17654ms; SamplesPerSecond = 849
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.19791351; EvalErr[0]PerSample = 0.76406250; TotalTime = 0.71131s; TotalTimePerSample = 1.11142ms; SamplesPerSecond = 899
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.06449990; EvalErr[0]PerSample = 0.71718750; TotalTime = 0.86854s; TotalTimePerSample = 1.35710ms; SamplesPerSecond = 736
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.05357361; EvalErr[0]PerSample = 0.74218750; TotalTime = 0.74654s; TotalTimePerSample = 1.16648ms; SamplesPerSecond = 857
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.02144079; EvalErr[0]PerSample = 0.74531250; TotalTime = 0.81399s; TotalTimePerSample = 1.27186ms; SamplesPerSecond = 786
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.89890004; EvalErr[0]PerSample = 0.69687500; TotalTime = 0.94249s; TotalTimePerSample = 1.47264ms; SamplesPerSecond = 679
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.74598358; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.97771s; TotalTimePerSample = 1.52767ms; SamplesPerSecond = 654
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.83604141; EvalErr[0]PerSample = 0.70625000; TotalTime = 0.98391s; TotalTimePerSample = 1.53735ms; SamplesPerSecond = 650
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.62522562; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.97827s; TotalTimePerSample = 1.52855ms; SamplesPerSecond = 654
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.65507979; EvalErr[0]PerSample = 0.66562500; TotalTime = 0.98015s; TotalTimePerSample = 1.53149ms; SamplesPerSecond = 652
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.59593989; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.95403s; TotalTimePerSample = 1.49067ms; SamplesPerSecond = 670
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.51177605; EvalErr[0]PerSample = 0.62343750; TotalTime = 0.81176s; TotalTimePerSample = 1.26837ms; SamplesPerSecond = 788
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42438840; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.73366s; TotalTimePerSample = 1.14634ms; SamplesPerSecond = 872
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40372959; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.89174s; TotalTimePerSample = 1.39335ms; SamplesPerSecond = 717
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.48277420; EvalErr[0]PerSample = 0.63906250; TotalTime = 0.87333s; TotalTimePerSample = 1.36458ms; SamplesPerSecond = 732
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.34181483; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.93299s; TotalTimePerSample = 1.45779ms; SamplesPerSecond = 685
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.22951559; EvalErr[0]PerSample = 0.57656250; TotalTime = 0.76407s; TotalTimePerSample = 1.19386ms; SamplesPerSecond = 837
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.32715885; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.88457s; TotalTimePerSample = 1.38215ms; SamplesPerSecond = 723
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21143816; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.94557s; TotalTimePerSample = 1.47745ms; SamplesPerSecond = 676
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.29118500; EvalErr[0]PerSample = 0.60156250; TotalTime = 0.76803s; TotalTimePerSample = 1.20005ms; SamplesPerSecond = 833
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19155470; EvalErr[0]PerSample = 0.56406250; TotalTime = 0.63405s; TotalTimePerSample = 0.99070ms; SamplesPerSecond = 1009
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 3.0129278; EvalErrPerSample = 0.7277832; AvgLearningRatePerSample = 0.015625; EpochTime=27.442994
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.11006760; EvalErr[0]PerSample = 0.57161458; TotalTime = 1.22369s; TotalTimePerSample = 0.53112ms; SamplesPerSecond = 1882
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.08344055; EvalErr[0]PerSample = 0.57500000; TotalTime = 1.29456s; TotalTimePerSample = 0.50569ms; SamplesPerSecond = 1977
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06587458; EvalErr[0]PerSample = 0.56796875; TotalTime = 1.31949s; TotalTimePerSample = 0.51543ms; SamplesPerSecond = 1940
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.10937064; EvalErr[0]PerSample = 0.60859375; TotalTime = 1.23266s; TotalTimePerSample = 0.48151ms; SamplesPerSecond = 2076
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02788461; EvalErr[0]PerSample = 0.56562500; TotalTime = 1.30219s; TotalTimePerSample = 0.50867ms; SamplesPerSecond = 1965
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.24576823; EvalErr[0]PerSample = 0.60117188; TotalTime = 1.26356s; TotalTimePerSample = 0.49358ms; SamplesPerSecond = 2026
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.15226292; EvalErr[0]PerSample = 0.58125000; TotalTime = 1.31502s; TotalTimePerSample = 0.51368ms; SamplesPerSecond = 1946
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.26731511; EvalErr[0]PerSample = 0.62617188; TotalTime = 1.27542s; TotalTimePerSample = 0.49821ms; SamplesPerSecond = 2007
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1359209; EvalErrPerSample = 0.58808594; AvgLearningRatePerSample = 0.001953125; EpochTime=10.388477
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.38080818; EvalErr[0]PerSample = 0.66710069; TotalTime = 2.44951s; TotalTimePerSample = 0.26579ms; SamplesPerSecond = 3762
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.22297658; EvalErr[0]PerSample = 0.60244141; TotalTime = 2.70662s; TotalTimePerSample = 0.26432ms; SamplesPerSecond = 3783
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2901877; EvalErrPerSample = 0.62949219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.450346
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.06740633; EvalErr[0]PerSample = 0.54676649; TotalTime = 2.47475s; TotalTimePerSample = 0.26853ms; SamplesPerSecond = 3724
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.03252134; EvalErr[0]PerSample = 0.54667969; TotalTime = 2.76024s; TotalTimePerSample = 0.26955ms; SamplesPerSecond = 3709
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 2.0474117; EvalErrPerSample = 0.546875; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=5.51589
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: __COMPLETED__
MPI Rank 2: ~MPIWrapper
