=== Running mpiexec -n 3 /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
Redirecting stderr to file /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank0
Redirecting stderr to file /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank1
Redirecting stderr to file /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr_speechTrain.logrank2
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: Build info: 
MPI Rank 0: 
MPI Rank 0: 		Built time: Nov 29 2015 23:23:51
MPI Rank 0: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 0: 		Build type: debug
MPI Rank 0: 		Math lib: acml
MPI Rank 0: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 0: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 		Build Branch: master
MPI Rank 0: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 0: -------------------------------------------------------------------
MPI Rank 0: running on localhost at 2015/11/29 23:25:43
MPI Rank 0: command line: 
MPI Rank 0: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: DeviceId=0
MPI Rank 0: numCPUThreads=2
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: 
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.config:command=speechTrain
MPI Rank 0: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 0: configparameters: cntk.config:deviceId=0
MPI Rank 0: configparameters: cntk.config:numCPUThreads=2
MPI Rank 0: configparameters: cntk.config:parallelTrain=true
MPI Rank 0: configparameters: cntk.config:precision=double
MPI Rank 0: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 0: configparameters: cntk.config:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 0: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: command: speechTrain 
MPI Rank 0: precision = double
MPI Rank 0: Using 2 CPU threads
MPI Rank 0: CNTKModelPath: /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 0: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward propagation.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Printing Gradient Computation Node Order ... 
MPI Rank 0: 
MPI Rank 0: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 0: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 0: B2[132, 1] = LearnableParameter
MPI Rank 0: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 0: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 0: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 0: B1[512, 1] = LearnableParameter
MPI Rank 0: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 0: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 0: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 0: B0[512, 1] = LearnableParameter
MPI Rank 0: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 0: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 0: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 0: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 0: features[363, 3] = InputValue
MPI Rank 0: W0[512, 363] = LearnableParameter
MPI Rank 0: W1[512, 512] = LearnableParameter
MPI Rank 0: W2[132, 512] = LearnableParameter
MPI Rank 0: labels[132, 3] = InputValue
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 0: 
MPI Rank 0: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node EvalErrorPrediction, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 0: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 0: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 0: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 0: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 0: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 0: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 0: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 0: 
MPI Rank 0: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: SGD using GPU 0.
MPI Rank 0: GetTrainCriterionNodes  ...
MPI Rank 0: GetEvalCriterionNodes  ...
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for gradient computing
MPI Rank 0: 
MPI Rank 0: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 	NodeName: InvStdOfFeatures
MPI Rank 0: 	NodeName: MeanOfFeatures
MPI Rank 0: 	NodeName: Prior
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node InvStdOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node MeanOfFeatures, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 0: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: Validating for node Prior, final verification.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 0: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 0: 
MPI Rank 0: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop.
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.26603s; TotalTimePerSample = 0.41567ms; SamplesPerSecond = 2405
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.23449s; TotalTimePerSample = 0.36638ms; SamplesPerSecond = 2729
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22424s; TotalTimePerSample = 0.35038ms; SamplesPerSecond = 2854
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.22625s; TotalTimePerSample = 0.35352ms; SamplesPerSecond = 2828
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.21468s; TotalTimePerSample = 0.33544ms; SamplesPerSecond = 2981
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22579s; TotalTimePerSample = 0.35279ms; SamplesPerSecond = 2834
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.22261s; TotalTimePerSample = 0.34782ms; SamplesPerSecond = 2875
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.22547s; TotalTimePerSample = 0.35230ms; SamplesPerSecond = 2838
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.24014s; TotalTimePerSample = 0.37523ms; SamplesPerSecond = 2665
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.23094s; TotalTimePerSample = 0.36084ms; SamplesPerSecond = 2771
MPI Rank 0: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.22505s; TotalTimePerSample = 0.35163ms; SamplesPerSecond = 2843
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.22440s; TotalTimePerSample = 0.35062ms; SamplesPerSecond = 2852
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.22582s; TotalTimePerSample = 0.35285ms; SamplesPerSecond = 2834
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.23086s; TotalTimePerSample = 0.36071ms; SamplesPerSecond = 2772
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.22479s; TotalTimePerSample = 0.35123ms; SamplesPerSecond = 2847
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.21091s; TotalTimePerSample = 0.32955ms; SamplesPerSecond = 3034
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.22531s; TotalTimePerSample = 0.35205ms; SamplesPerSecond = 2840
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.22370s; TotalTimePerSample = 0.34953ms; SamplesPerSecond = 2860
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.20999s; TotalTimePerSample = 0.32811ms; SamplesPerSecond = 3047
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.20926s; TotalTimePerSample = 0.32698ms; SamplesPerSecond = 3058
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.22354s; TotalTimePerSample = 0.34928ms; SamplesPerSecond = 2863
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.22053s; TotalTimePerSample = 0.34458ms; SamplesPerSecond = 2902
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.21453s; TotalTimePerSample = 0.33520ms; SamplesPerSecond = 2983
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.22578s; TotalTimePerSample = 0.35278ms; SamplesPerSecond = 2834
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.21689s; TotalTimePerSample = 0.33889ms; SamplesPerSecond = 2950
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.22732s; TotalTimePerSample = 0.35518ms; SamplesPerSecond = 2815
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.22560s; TotalTimePerSample = 0.35250ms; SamplesPerSecond = 2836
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.22474s; TotalTimePerSample = 0.35115ms; SamplesPerSecond = 2847
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.23224s; TotalTimePerSample = 0.36287ms; SamplesPerSecond = 2755
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.22147s; TotalTimePerSample = 0.34605ms; SamplesPerSecond = 2889
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.23080s; TotalTimePerSample = 0.36062ms; SamplesPerSecond = 2773
MPI Rank 0:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.21754s; TotalTimePerSample = 0.33990ms; SamplesPerSecond = 2942
MPI Rank 0: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.222838
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.10515053; EvalErr[0]PerSample = 0.56770833; TotalTime = 0.83631s; TotalTimePerSample = 0.36298ms; SamplesPerSecond = 2754
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.07710528; EvalErr[0]PerSample = 0.56914062; TotalTime = 0.69338s; TotalTimePerSample = 0.27085ms; SamplesPerSecond = 3692
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06009947; EvalErr[0]PerSample = 0.56367188; TotalTime = 0.72420s; TotalTimePerSample = 0.28289ms; SamplesPerSecond = 3534
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09985912; EvalErr[0]PerSample = 0.60898438; TotalTime = 0.48740s; TotalTimePerSample = 0.19039ms; SamplesPerSecond = 5252
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02133028; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.40792s; TotalTimePerSample = 0.15934ms; SamplesPerSecond = 6275
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.23836126; EvalErr[0]PerSample = 0.59023437; TotalTime = 0.50000s; TotalTimePerSample = 0.19531ms; SamplesPerSecond = 5119
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.16973375; EvalErr[0]PerSample = 0.58632812; TotalTime = 0.55144s; TotalTimePerSample = 0.21541ms; SamplesPerSecond = 4642
MPI Rank 0:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.18375111; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.64615s; TotalTimePerSample = 0.25240ms; SamplesPerSecond = 3961
MPI Rank 0: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1219119; EvalErrPerSample = 0.58330078; AvgLearningRatePerSample = 0.001953125; EpochTime=4.938777
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.36016346; EvalErr[0]PerSample = 0.67154948; TotalTime = 0.94544s; TotalTimePerSample = 0.10259ms; SamplesPerSecond = 9747
MPI Rank 0:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.16580543; EvalErr[0]PerSample = 0.60068359; TotalTime = 0.78678s; TotalTimePerSample = 0.07683ms; SamplesPerSecond = 13015
MPI Rank 0: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2495964; EvalErrPerSample = 0.63022461; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.84879
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.00308410; EvalErr[0]PerSample = 0.54079861; TotalTime = 0.70828s; TotalTimePerSample = 0.07685ms; SamplesPerSecond = 13011
MPI Rank 0:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.96679954; EvalErr[0]PerSample = 0.54326172; TotalTime = 0.74867s; TotalTimePerSample = 0.07311ms; SamplesPerSecond = 13677
MPI Rank 0: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9829983; EvalErrPerSample = 0.54199219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.628572
MPI Rank 0: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: Build info: 
MPI Rank 1: 
MPI Rank 1: 		Built time: Nov 29 2015 23:23:51
MPI Rank 1: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 1: 		Build type: debug
MPI Rank 1: 		Math lib: acml
MPI Rank 1: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 1: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 		Build Branch: master
MPI Rank 1: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 1: -------------------------------------------------------------------
MPI Rank 1: running on localhost at 2015/11/29 23:25:44
MPI Rank 1: command line: 
MPI Rank 1: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: DeviceId=0
MPI Rank 1: numCPUThreads=2
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: 
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.config:command=speechTrain
MPI Rank 1: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 1: configparameters: cntk.config:deviceId=0
MPI Rank 1: configparameters: cntk.config:numCPUThreads=2
MPI Rank 1: configparameters: cntk.config:parallelTrain=true
MPI Rank 1: configparameters: cntk.config:precision=double
MPI Rank 1: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 1: configparameters: cntk.config:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 1: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: command: speechTrain 
MPI Rank 1: precision = double
MPI Rank 1: Using 2 CPU threads
MPI Rank 1: CNTKModelPath: /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 1: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward propagation.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Printing Gradient Computation Node Order ... 
MPI Rank 1: 
MPI Rank 1: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 1: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 1: B2[132, 1] = LearnableParameter
MPI Rank 1: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 1: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 1: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 1: B1[512, 1] = LearnableParameter
MPI Rank 1: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 1: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 1: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 1: B0[512, 1] = LearnableParameter
MPI Rank 1: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 1: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 1: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 1: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 1: features[363, 3] = InputValue
MPI Rank 1: W0[512, 363] = LearnableParameter
MPI Rank 1: W1[512, 512] = LearnableParameter
MPI Rank 1: W2[132, 512] = LearnableParameter
MPI Rank 1: labels[132, 3] = InputValue
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 1: 
MPI Rank 1: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node EvalErrorPrediction, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 1: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 1: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 1: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 1: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 1: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 1: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 1: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 1: 
MPI Rank 1: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: SGD using GPU 0.
MPI Rank 1: GetTrainCriterionNodes  ...
MPI Rank 1: GetEvalCriterionNodes  ...
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for gradient computing
MPI Rank 1: 
MPI Rank 1: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 	NodeName: InvStdOfFeatures
MPI Rank 1: 	NodeName: MeanOfFeatures
MPI Rank 1: 	NodeName: Prior
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node InvStdOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node MeanOfFeatures, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 1: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: Validating for node Prior, final verification.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 1: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 1: 
MPI Rank 1: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop.
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.26915s; TotalTimePerSample = 0.42054ms; SamplesPerSecond = 2377
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.24768s; TotalTimePerSample = 0.38700ms; SamplesPerSecond = 2583
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22398s; TotalTimePerSample = 0.34997ms; SamplesPerSecond = 2857
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.21747s; TotalTimePerSample = 0.33980ms; SamplesPerSecond = 2942
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.22340s; TotalTimePerSample = 0.34906ms; SamplesPerSecond = 2864
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22030s; TotalTimePerSample = 0.34422ms; SamplesPerSecond = 2905
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.22945s; TotalTimePerSample = 0.35852ms; SamplesPerSecond = 2789
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.22488s; TotalTimePerSample = 0.35138ms; SamplesPerSecond = 2845
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.21707s; TotalTimePerSample = 0.33917ms; SamplesPerSecond = 2948
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.21457s; TotalTimePerSample = 0.33527ms; SamplesPerSecond = 2982
MPI Rank 1: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.21791s; TotalTimePerSample = 0.34048ms; SamplesPerSecond = 2937
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.22539s; TotalTimePerSample = 0.35217ms; SamplesPerSecond = 2839
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.21708s; TotalTimePerSample = 0.33918ms; SamplesPerSecond = 2948
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.21860s; TotalTimePerSample = 0.34157ms; SamplesPerSecond = 2927
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.22327s; TotalTimePerSample = 0.34886ms; SamplesPerSecond = 2866
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.25138s; TotalTimePerSample = 0.39278ms; SamplesPerSecond = 2545
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.23106s; TotalTimePerSample = 0.36103ms; SamplesPerSecond = 2769
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.22440s; TotalTimePerSample = 0.35062ms; SamplesPerSecond = 2852
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.22186s; TotalTimePerSample = 0.34666ms; SamplesPerSecond = 2884
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.23849s; TotalTimePerSample = 0.37264ms; SamplesPerSecond = 2683
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.22509s; TotalTimePerSample = 0.35171ms; SamplesPerSecond = 2843
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.21662s; TotalTimePerSample = 0.33846ms; SamplesPerSecond = 2954
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.21957s; TotalTimePerSample = 0.34308ms; SamplesPerSecond = 2914
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.22623s; TotalTimePerSample = 0.35349ms; SamplesPerSecond = 2828
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.23809s; TotalTimePerSample = 0.37201ms; SamplesPerSecond = 2688
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.22745s; TotalTimePerSample = 0.35539ms; SamplesPerSecond = 2813
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.21545s; TotalTimePerSample = 0.33664ms; SamplesPerSecond = 2970
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.22086s; TotalTimePerSample = 0.34510ms; SamplesPerSecond = 2897
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.22246s; TotalTimePerSample = 0.34760ms; SamplesPerSecond = 2876
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.22151s; TotalTimePerSample = 0.34610ms; SamplesPerSecond = 2889
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.22932s; TotalTimePerSample = 0.35831ms; SamplesPerSecond = 2790
MPI Rank 1:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.20634s; TotalTimePerSample = 0.32240ms; SamplesPerSecond = 3101
MPI Rank 1: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.246561
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.10515053; EvalErr[0]PerSample = 0.56770833; TotalTime = 0.84040s; TotalTimePerSample = 0.36476ms; SamplesPerSecond = 2741
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.07710528; EvalErr[0]PerSample = 0.56914062; TotalTime = 0.68280s; TotalTimePerSample = 0.26672ms; SamplesPerSecond = 3749
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06009947; EvalErr[0]PerSample = 0.56367188; TotalTime = 0.72402s; TotalTimePerSample = 0.28282ms; SamplesPerSecond = 3535
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09985912; EvalErr[0]PerSample = 0.60898438; TotalTime = 0.47187s; TotalTimePerSample = 0.18432ms; SamplesPerSecond = 5425
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02133028; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.40074s; TotalTimePerSample = 0.15654ms; SamplesPerSecond = 6388
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.23836126; EvalErr[0]PerSample = 0.59023437; TotalTime = 0.53172s; TotalTimePerSample = 0.20770ms; SamplesPerSecond = 4814
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.16973375; EvalErr[0]PerSample = 0.58632812; TotalTime = 0.56953s; TotalTimePerSample = 0.22247ms; SamplesPerSecond = 4494
MPI Rank 1:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.18375111; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.63509s; TotalTimePerSample = 0.24808ms; SamplesPerSecond = 4030
MPI Rank 1: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1219119; EvalErrPerSample = 0.58330078; AvgLearningRatePerSample = 0.001953125; EpochTime=4.936097
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.36016346; EvalErr[0]PerSample = 0.67154948; TotalTime = 0.90919s; TotalTimePerSample = 0.09865ms; SamplesPerSecond = 10136
MPI Rank 1:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.16580543; EvalErr[0]PerSample = 0.60068359; TotalTime = 0.79832s; TotalTimePerSample = 0.07796ms; SamplesPerSecond = 12827
MPI Rank 1: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2495964; EvalErrPerSample = 0.63022461; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.851062
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.00308410; EvalErr[0]PerSample = 0.54079861; TotalTime = 0.71186s; TotalTimePerSample = 0.07724ms; SamplesPerSecond = 12946
MPI Rank 1:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.96679954; EvalErr[0]PerSample = 0.54326172; TotalTime = 0.73508s; TotalTimePerSample = 0.07179ms; SamplesPerSecond = 13930
MPI Rank 1: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9829983; EvalErrPerSample = 0.54199219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.632037
MPI Rank 1: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: Build info: 
MPI Rank 2: 
MPI Rank 2: 		Built time: Nov 29 2015 23:23:51
MPI Rank 2: 		Last modified date: Sun Nov 29 17:25:48 2015
MPI Rank 2: 		Build type: debug
MPI Rank 2: 		Math lib: acml
MPI Rank 2: 		CUDA_PATH: /usr/local/cuda-7.0
MPI Rank 2: 		CUDA_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 		Build Branch: master
MPI Rank 2: 		Build SHA1: 6899808a682d07090989b3018a6ddd1d3293ee4b
MPI Rank 2: -------------------------------------------------------------------
MPI Rank 2: running on localhost at 2015/11/29 23:25:44
MPI Rank 2: command line: 
MPI Rank 2: /home/mluser/src/cplx_master/build/debug/bin/cntk configFile=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.config currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. DeviceId=0 numCPUThreads=2 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr 
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = 0
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: DeviceId=0
MPI Rank 2: numCPUThreads=2
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: 
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.config:command=speechTrain
MPI Rank 2: configparameters: cntk.config:ConfigDir=/home/mluser/src/cplx_master/Tests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.config:currentDirectory=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:DataDir=/home/mluser/src/cplx_master/Tests/Speech/Data
MPI Rank 2: configparameters: cntk.config:deviceId=0
MPI Rank 2: configparameters: cntk.config:numCPUThreads=2
MPI Rank 2: configparameters: cntk.config:parallelTrain=true
MPI Rank 2: configparameters: cntk.config:precision=double
MPI Rank 2: configparameters: cntk.config:RunDir=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu
MPI Rank 2: configparameters: cntk.config:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='eval')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/mluser/src/cplx_master/Tests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.config:stderr=/tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/stderr
MPI Rank 2: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: command: speechTrain 
MPI Rank 2: precision = double
MPI Rank 2: Using 2 CPU threads
MPI Rank 2: CNTKModelPath: /tmp/cntk-test-20151129232542.912160/Speech/DNN_ParallelBufferedAsyncGradientAggregation@debug_gpu/models/cntkSpeech.dnn
MPI Rank 2: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/mluser/src/cplx_master/Tests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/mluser/src/cplx_master/Tests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward propagation.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Printing Gradient Computation Node Order ... 
MPI Rank 2: 
MPI Rank 2: CrossEntropyWithSoftmax[0, 0] = CrossEntropyWithSoftmax(labels[132, 3], HLast[0, 0])
MPI Rank 2: HLast[0, 0] = Plus(W2*H1[0, 0], B2[132, 1])
MPI Rank 2: B2[132, 1] = LearnableParameter
MPI Rank 2: W2*H1[0, 0] = Times(W2[132, 512], H2[0, 0])
MPI Rank 2: H2[0, 0] = Sigmoid(W1*H1+B1[0, 0])
MPI Rank 2: W1*H1+B1[0, 0] = Plus(W1*H1[0, 0], B1[512, 1])
MPI Rank 2: B1[512, 1] = LearnableParameter
MPI Rank 2: W1*H1[0, 0] = Times(W1[512, 512], H1[0, 0])
MPI Rank 2: H1[0, 0] = Sigmoid(W0*features+B0[0, 0])
MPI Rank 2: W0*features+B0[0, 0] = Plus(W0*features[0, 0], B0[512, 1])
MPI Rank 2: B0[512, 1] = LearnableParameter
MPI Rank 2: W0*features[0, 0] = Times(W0[512, 363], MVNormalizedFeatures[0, 0])
MPI Rank 2: MVNormalizedFeatures[0, 0] = PerDimMeanVarNormalization(features[363, 3], MeanOfFeatures[0, 0], InvStdOfFeatures[0, 0])
MPI Rank 2: InvStdOfFeatures[0, 0] = InvStdDev(features[363, 3])
MPI Rank 2: MeanOfFeatures[0, 0] = Mean(features[363, 3])
MPI Rank 2: features[363, 3] = InputValue
MPI Rank 2: W0[512, 363] = LearnableParameter
MPI Rank 2: W1[512, 512] = LearnableParameter
MPI Rank 2: W2[132, 512] = LearnableParameter
MPI Rank 2: labels[132, 3] = InputValue
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 12 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node CrossEntropyWithSoftmax, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 11 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 22 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: Validating for node ScaledLogLikelihood, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: Validating --> LogOfPrior = Log(Prior[132, 1]) -> [132, 1]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus(HLast[132, MBSize 3], LogOfPrior[132, 1]) -> [132, MBSize 3]
MPI Rank 2: 
MPI Rank 2: 10 out of 22 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 20 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction. 9 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node EvalErrorPrediction, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> W2 = LearnableParameter -> [132, 512]
MPI Rank 2: Validating --> W1 = LearnableParameter -> [512, 512]
MPI Rank 2: Validating --> W0 = LearnableParameter -> [512, 363]
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization(features[363, MBSize 3], MeanOfFeatures[363, 1], InvStdOfFeatures[363, 1]) -> [363, MBSize 3]
MPI Rank 2: Validating --> W0*features = Times(W0[512, 363], MVNormalizedFeatures[363, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B0 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus(W0*features[512, MBSize 3], B0[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H1 = Sigmoid(W0*features+B0[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W1*H1 = Times(W1[512, 512], H1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> B1 = LearnableParameter -> [512, 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus(W1*H1[512, MBSize 3], B1[512, 1]) -> [512, MBSize 3]
MPI Rank 2: Validating --> H2 = Sigmoid(W1*H1+B1[512, MBSize 3]) -> [512, MBSize 3]
MPI Rank 2: Validating --> W2*H1 = Times(W2[132, 512], H2[512, MBSize 3]) -> [132, MBSize 3]
MPI Rank 2: Validating --> B2 = LearnableParameter -> [132, 1]
MPI Rank 2: Validating --> HLast = Plus(W2*H1[132, MBSize 3], B2[132, 1]) -> [132, MBSize 3]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction(labels[132, MBSize 3], HLast[132, MBSize 3]) -> [1, 1]
MPI Rank 2: 
MPI Rank 2: 9 out of 20 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: SGD using GPU 0.
MPI Rank 2: GetTrainCriterionNodes  ...
MPI Rank 2: GetEvalCriterionNodes  ...
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for gradient computing
MPI Rank 2: 
MPI Rank 2: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 	NodeName: InvStdOfFeatures
MPI Rank 2: 	NodeName: MeanOfFeatures
MPI Rank 2: 	NodeName: Prior
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node InvStdOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node MeanOfFeatures, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> features = InputValue -> [363, MBSize 3]
MPI Rank 2: Validating --> MeanOfFeatures = Mean(features[363, MBSize 3]) -> [363, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating for node Prior. 2 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: Validating for node Prior, final verification.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue -> [132, MBSize 3]
MPI Rank 2: Validating --> Prior = Mean(labels[132, MBSize 3]) -> [132, 1]
MPI Rank 2: 
MPI Rank 2: 1 out of 2 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: Set Max Temp Mem Size For Convolution Nodes to 0 samples.
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000 
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop.
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[   1-  10 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.40318406; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.26887s; TotalTimePerSample = 0.42011ms; SamplesPerSecond = 2380
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  11-  20 of 320]: SamplesSeen = 640; TrainLossPerSample =  4.15980357; EvalErr[0]PerSample = 0.87187500; TotalTime = 0.24095s; TotalTimePerSample = 0.37649ms; SamplesPerSecond = 2656
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  21-  30 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.98424210; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22479s; TotalTimePerSample = 0.35124ms; SamplesPerSecond = 2847
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  31-  40 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.86209050; EvalErr[0]PerSample = 0.87656250; TotalTime = 0.22984s; TotalTimePerSample = 0.35912ms; SamplesPerSecond = 2784
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  41-  50 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.80597620; EvalErr[0]PerSample = 0.88593750; TotalTime = 0.23544s; TotalTimePerSample = 0.36787ms; SamplesPerSecond = 2718
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  51-  60 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.73511552; EvalErr[0]PerSample = 0.87812500; TotalTime = 0.22769s; TotalTimePerSample = 0.35577ms; SamplesPerSecond = 2810
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  61-  70 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.57260725; EvalErr[0]PerSample = 0.81875000; TotalTime = 0.22112s; TotalTimePerSample = 0.34551ms; SamplesPerSecond = 2894
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  71-  80 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.42293687; EvalErr[0]PerSample = 0.80468750; TotalTime = 0.22299s; TotalTimePerSample = 0.34843ms; SamplesPerSecond = 2870
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  81-  90 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.34304309; EvalErr[0]PerSample = 0.76718750; TotalTime = 0.22693s; TotalTimePerSample = 0.35458ms; SamplesPerSecond = 2820
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[  91- 100 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.37037793; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.21953s; TotalTimePerSample = 0.34302ms; SamplesPerSecond = 2915
MPI Rank 2: WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 101- 110 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.21606065; EvalErr[0]PerSample = 0.76093750; TotalTime = 0.22613s; TotalTimePerSample = 0.35333ms; SamplesPerSecond = 2830
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 111- 120 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.31610118; EvalErr[0]PerSample = 0.78437500; TotalTime = 0.22527s; TotalTimePerSample = 0.35198ms; SamplesPerSecond = 2841
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 121- 130 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.14285888; EvalErr[0]PerSample = 0.75000000; TotalTime = 0.22950s; TotalTimePerSample = 0.35859ms; SamplesPerSecond = 2788
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 131- 140 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01821991; EvalErr[0]PerSample = 0.70937500; TotalTime = 0.22713s; TotalTimePerSample = 0.35489ms; SamplesPerSecond = 2817
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 141- 150 of 320]: SamplesSeen = 640; TrainLossPerSample =  3.01218944; EvalErr[0]PerSample = 0.73906250; TotalTime = 0.22346s; TotalTimePerSample = 0.34916ms; SamplesPerSecond = 2863
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 151- 160 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.98947652; EvalErr[0]PerSample = 0.73593750; TotalTime = 0.22049s; TotalTimePerSample = 0.34452ms; SamplesPerSecond = 2902
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 161- 170 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.86297716; EvalErr[0]PerSample = 0.70000000; TotalTime = 0.21677s; TotalTimePerSample = 0.33870ms; SamplesPerSecond = 2952
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 171- 180 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.71901077; EvalErr[0]PerSample = 0.68593750; TotalTime = 0.22365s; TotalTimePerSample = 0.34945ms; SamplesPerSecond = 2861
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 181- 190 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.80860596; EvalErr[0]PerSample = 0.71250000; TotalTime = 0.24013s; TotalTimePerSample = 0.37520ms; SamplesPerSecond = 2665
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 191- 200 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.60590434; EvalErr[0]PerSample = 0.64687500; TotalTime = 0.22276s; TotalTimePerSample = 0.34806ms; SamplesPerSecond = 2873
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 201- 210 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.63920069; EvalErr[0]PerSample = 0.66875000; TotalTime = 0.22514s; TotalTimePerSample = 0.35178ms; SamplesPerSecond = 2842
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 211- 220 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.58372597; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.25425s; TotalTimePerSample = 0.39726ms; SamplesPerSecond = 2517
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 221- 230 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.50997096; EvalErr[0]PerSample = 0.62031250; TotalTime = 0.22736s; TotalTimePerSample = 0.35525ms; SamplesPerSecond = 2814
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 231- 240 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.42126950; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.22368s; TotalTimePerSample = 0.34951ms; SamplesPerSecond = 2861
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 241- 250 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.40125789; EvalErr[0]PerSample = 0.65156250; TotalTime = 0.21826s; TotalTimePerSample = 0.34104ms; SamplesPerSecond = 2932
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 251- 260 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.47110816; EvalErr[0]PerSample = 0.63281250; TotalTime = 0.23169s; TotalTimePerSample = 0.36201ms; SamplesPerSecond = 2762
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 261- 270 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.33215267; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.22564s; TotalTimePerSample = 0.35255ms; SamplesPerSecond = 2836
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 271- 280 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.21936103; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.22492s; TotalTimePerSample = 0.35144ms; SamplesPerSecond = 2845
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 281- 290 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.31959580; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.22512s; TotalTimePerSample = 0.35175ms; SamplesPerSecond = 2842
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 291- 300 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.19592881; EvalErr[0]PerSample = 0.61718750; TotalTime = 0.22232s; TotalTimePerSample = 0.34737ms; SamplesPerSecond = 2878
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 301- 310 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.28411654; EvalErr[0]PerSample = 0.60000000; TotalTime = 0.22843s; TotalTimePerSample = 0.35692ms; SamplesPerSecond = 2801
MPI Rank 2:  Epoch[ 1 of 4]-Minibatch[ 311- 320 of 320]: SamplesSeen = 640; TrainLossPerSample =  2.18307184; EvalErr[0]PerSample = 0.55781250; TotalTime = 0.19308s; TotalTimePerSample = 0.30169ms; SamplesPerSecond = 3314
MPI Rank 2: Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 2.9972357; EvalErrPerSample = 0.72426758; AvgLearningRatePerSample = 0.015625; EpochTime=7.293783
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[   1-  10 of 80]: SamplesSeen = 2304; TrainLossPerSample =  2.10515053; EvalErr[0]PerSample = 0.56770833; TotalTime = 0.85816s; TotalTimePerSample = 0.37247ms; SamplesPerSecond = 2684
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  11-  20 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.07710528; EvalErr[0]PerSample = 0.56914062; TotalTime = 0.67481s; TotalTimePerSample = 0.26360ms; SamplesPerSecond = 3793
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  21-  30 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.06009947; EvalErr[0]PerSample = 0.56367188; TotalTime = 0.71504s; TotalTimePerSample = 0.27931ms; SamplesPerSecond = 3580
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  31-  40 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.09985912; EvalErr[0]PerSample = 0.60898438; TotalTime = 0.47191s; TotalTimePerSample = 0.18434ms; SamplesPerSecond = 5424
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  41-  50 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.02133028; EvalErr[0]PerSample = 0.56875000; TotalTime = 0.40279s; TotalTimePerSample = 0.15734ms; SamplesPerSecond = 6355
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  51-  60 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.23836126; EvalErr[0]PerSample = 0.59023437; TotalTime = 0.52942s; TotalTimePerSample = 0.20681ms; SamplesPerSecond = 4835
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  61-  70 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.16973375; EvalErr[0]PerSample = 0.58632812; TotalTime = 0.54795s; TotalTimePerSample = 0.21404ms; SamplesPerSecond = 4671
MPI Rank 2:  Epoch[ 2 of 4]-Minibatch[  71-  80 of 80]: SamplesSeen = 2560; TrainLossPerSample =  2.18375111; EvalErr[0]PerSample = 0.60312500; TotalTime = 0.66156s; TotalTimePerSample = 0.25842ms; SamplesPerSecond = 3869
MPI Rank 2: Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 2.1219119; EvalErrPerSample = 0.58330078; AvgLearningRatePerSample = 0.001953125; EpochTime=4.936091
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.36016346; EvalErr[0]PerSample = 0.67154948; TotalTime = 0.89229s; TotalTimePerSample = 0.09682ms; SamplesPerSecond = 10328
MPI Rank 2:  Epoch[ 3 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  2.16580543; EvalErr[0]PerSample = 0.60068359; TotalTime = 0.84729s; TotalTimePerSample = 0.08274ms; SamplesPerSecond = 12085
MPI Rank 2: Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 2.2495964; EvalErrPerSample = 0.63022461; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.851054
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119 
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[   1-  10 of 20]: SamplesSeen = 9216; TrainLossPerSample =  2.00308410; EvalErr[0]PerSample = 0.54079861; TotalTime = 0.72789s; TotalTimePerSample = 0.07898ms; SamplesPerSecond = 12661
MPI Rank 2:  Epoch[ 4 of 4]-Minibatch[  11-  20 of 20]: SamplesSeen = 10240; TrainLossPerSample =  1.96679954; EvalErr[0]PerSample = 0.54326172; TotalTime = 0.73439s; TotalTimePerSample = 0.07172ms; SamplesPerSecond = 13943
MPI Rank 2: Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 1.9829983; EvalErrPerSample = 0.54199219; AvgLearningRatePerSample = 9.7656251e-05; EpochTime=1.632004
MPI Rank 2: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: __COMPLETED__
MPI Rank 2: ~MPIWrapper
