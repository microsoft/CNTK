-------------------------------------------------------------------
Build info: 

		Built time: Aug 24 2016 18:50:02
		Last modified date: Mon Aug 22 13:48:06 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1\
		CUDNN_PATH: C:\NVIDIA\cudnn-5.0\cuda
		Build Branch: fseide/cudnn5
		Build SHA1: 5f14fcaea07dc1d87a1841115818ca6065ae69f8
		Built by fseide on FSEIDE-GPU
		Build Path: C:\work\cntk\Source\CNTK\
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
		Device[1]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
		Device[2]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
		Device[3]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
		Device[4]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
		Device[5]: cores = 4608; computeCapability = 5.2; type = "GeForce GTX TITAN X"; memory = 12288 MB
-------------------------------------------------------------------

Running on FSEIDE-GPU at 2016/08/24 19:41:27
Command line: 
..\..\..\..\x64\Release\CNTK.exe  currentDirectory=c:\work\CNTK\Tests\EndToEndTests\Speech\Data  configFile=c:\work\CNTK\Tests\EndToEndTests\Speech\LSTM\cntk.cntk  RunDir=c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance  DataDir=.  DeviceId=auto  makeMode=false  truncated=false  speechTrain=[reader=[nbruttsineachrecurrentiter=2]]  speechTrain=[SGD=[epochSize=2560]]  speechTrain=[SGD=[maxEpochs=2]]  speechTrain=[SGD=[numMBsToShowResult=1]]  modelSelector=2  shareNodeValueMatrices=true  stderr=x


Configuration After Processing and Variable Resolution:

configparameters: cntk.cntk:// Note: These options are overridden from the command line in some test cases.=true
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:currentDirectory=c:\work\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=.
configparameters: cntk.cntk:deviceId=auto
configparameters: cntk.cntk:frameMode=false
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:modelSelector=2
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain={
    action = "train"
    modelPath = "c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance/models/cntkSpeech.dnn"
    BrainScriptNetworkBuilder = {
        useLayerNorm = false
        // dimensions (needed for both model and readers)
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        innerCellDim  = 1024
        hiddenDim     = 256
        numLSTMLayers = 3        // number of hidden LSTM model layers
        modelUsingCuDNN5 = Sequential
        (
            MeanVarNorm :
            (_ => OptimizedRNNStack(ParameterTensor {0:0, initOutputRank=-1, init='heNormal', initValueScale=1/10}, _, hiddenDim, numLayers=numLSTMLayers, bidirectional=true)) :
            DenseLayer {labelDim, init='heUniform', initValueScale=1/3}
        )
        modelUsingLayersLikeCuDNN5 = Sequential
        (
            MeanVarNorm :
            LayerStack {numLSTMLayers, _ => Sequential (
                (x => Splice (
                    RecurrentLSTMLayer {hiddenDim, init='heUniform', initValueScale=1/10} (x) :
                    RecurrentLSTMLayer {hiddenDim, goBackwards=true, init='heUniform', initValueScale=1/10} (x)
                ))
            )} :
            DenseLayer {labelDim, init='heUniform', initValueScale=1/3}
        )
        modelUsingLayers = Sequential
        (
            MeanVarNorm :
            LayerStack {numLSTMLayers, _ => Sequential (
                if useLayerNorm then LayerNormalizationLayer{} else Identity :
                RecurrentLSTMLayer {hiddenDim, cellShape=innerCellDim, init='heUniform', initValueScale=1/3}
            )} :
            DenseLayer {labelDim, init='heUniform', initValueScale=1/3}
        )
        modelRegressionTest (features) =
        {
            useSelfStabilization = true
            featNorm = MeanVarNorm(features)
            // we define the LSTM locally for now, since the one in CNTK.core.bs has a slightly changed configuration that breaks this test
            Stabilize (x, enabled=true) =
                if enabled
                then {
beta = Exp (BS.Parameters.BiasParam ((1))) 
                    result = beta .* x
                }.result
                else x
            LSTMP (outputDim, cellDim=outputDim, x, inputDim=x.dim, prevState, enableSelfStabilization=false) =
            {
                _privateInnards = {       // encapsulate the inner workings
                    dh = prevState.h // previous values
                    dc = prevState.c
                    // parameter macros--these carry their own weight matrices
                    B() = BS.Parameters.BiasParam (cellDim)
                    W(v) = BS.Parameters.WeightParam (cellDim, Inferred)  * Stabilize (v, enabled=enableSelfStabilization) // input-to-hidden
                    H(h) = BS.Parameters.WeightParam (cellDim, outputDim) * Stabilize (h, enabled=enableSelfStabilization) // hidden-to-hidden
                    C(c) = BS.Parameters.DiagWeightParam (cellDim)       .* Stabilize (c, enabled=enableSelfStabilization) // cell-to-hiddden (note: applied elementwise)
                    // note: the W(x) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
                    it = Sigmoid (W(x) + B() + H(dh) + C(dc))          // input gate(t)
                    bit = it .* Tanh (W(x) + (H(dh) + B()))            // applied to tanh of input network
                    ft = Sigmoid (W(x) + B() + H(dh) + C(dc))          // forget-me-not gate(t)
                    bft = ft .* dc                                     // applied to cell(t-1)
                    ct = bft + bit                                     // c(t) is sum of both
                    ot = Sigmoid (W(x) + B() + H(dh) + C(ct))          // output gate(t)
                    ht = ot .* Tanh (ct)                               // applied to tanh(cell(t))
                }
                c = _privateInnards.ct          // cell value
                h = if outputDim != cellDim     // output/hidden state
                    then {                      // project
                        Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
                        htp = Wmr * Stabilize (_privateInnards.ht, enabled=enableSelfStabilization)
                    }.htp         // TODO: ^^ extend BS syntax to allow to say: then { Wmr = WeightParam(outputDim, cellDim) } in Wmr * Stabilize (...)
                    else _privateInnards.ht     // no projection
                dim = outputDim
            }
            RecurrentLSTMP (outputDim, cellDim=outputDim.dim, x, inputDim=x.dim, previousHook=BS.RNNs.PreviousHC, enableSelfStabilization=false) =
            {
                prevState = previousHook (lstmState)
                inputDim1 = inputDim ; cellDim1 = cellDim ; enableSelfStabilization1 = enableSelfStabilization
                lstmState = LSTMP (outputDim, cellDim=cellDim1, x, inputDim=inputDim1, prevState, enableSelfStabilization=enableSelfStabilization1)
            }.lstmState // we return the state record (h,c)
            // define the stack of hidden LSTM layers  --TODO: change to RecurrentLSTMPStack(), change stabilizer config
            S(x) = Stabilize (x, enabled=useSelfStabilization)
            LSTMoutput[k:1..numLSTMLayers] =
                if k == 1
                then /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (featNorm),        inputDim=baseFeatDim, enableSelfStabilization=useSelfStabilization).h
                else /*BS.RNNs.*/ RecurrentLSTMP (hiddenDim, cellDim=innerCellDim, /*S*/ (LSTMoutput[k-1]), inputDim=hiddenDim,   enableSelfStabilization=useSelfStabilization).h
            // and add a softmax layer on top
            W = BS.Parameters.WeightParam (labelDim, Inferred)
            B = BS.Parameters.BiasParam   (labelDim)
            // (unnecessarily using explicit Times with inferInputRankToMap in order to have a test for inferInputRankToMap parameter)
            z = Times (W, S(LSTMoutput[numLSTMLayers]), inferInputRankToMap=0) + B; // top-level input to Softmax
        }.z
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = FlattenDimensions (Transpose (features), 1, 2)             //       and swapping them back to (featDim:1), for testing Transpose()
feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);  
        labels   = Input(labelDim, tag='label')
        // link model to inputs
models = [| modelRegressionTest; modelUsingLayers; modelUsingCuDNN5; modelUsingLayersLikeCuDNN5 |]  
model = models[2]     
        z = model (feashift)
        // link model to training
        ce  = /*Pass*/ SumElements (ReduceLogSum (z) - TransposeTimes (labels,          z),  tag='criterion')  // manually-defined per-sample objective
        err = /*Pass*/ SumElements (BS.Constants.One - TransposeTimes (labels, Hardmax (z)), tag='evaluation') // also track frame errors
        // decoding
        logPrior = LogPrior(labels)	 
        scaledLogLikelihood = Pass (z - logPrior, tag='output') // using Pass() since we can't assign a tag to x - y
        featureNodes = (features)
        labelNodes = (labels)
        criterionNodes = (ce)
        evaluationNodes = (err)
        outputNodes = (scaledLogLikelihood)
    }
    SGD = {
        epochSize = 20480 ; maxEpochs = 4 ; minibatchSize = 20
        learningRatesPerMB = 0.5 ; momentumAsTimeConstant = 2500
        numMBsToShowResult = 10
        keepCheckPointFiles = true       
    }
    reader = {
        readerType = "HTKMLFReader"
        randomize = "auto" ; readMethod = "blockRandomize"
        nbruttsineachrecurrentiter = 32
        miniBatchMode = "partial" ; verbosity = 0 ; useMersenneTwisterRand = true
        features = { dim =      363 ; type      = "real"     ; scpFile = "./glob_0000.scp" ; }
        labels   = { labelDim = 132 ; labelType = "category" ; mlfFile = "./glob_0000.mlf" ; labelMappingFile = "./state.list" }
    }
} [reader=[nbruttsineachrecurrentiter=2]] [SGD=[epochSize=2560]] [SGD=[maxEpochs=2]] [SGD=[numMBsToShowResult=1]]

configparameters: cntk.cntk:stderr=x
configparameters: cntk.cntk:traceLevel=1
configparameters: cntk.cntk:truncated=false
Commands: speechTrain
Precision = "float"
CNTKModelPath: c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance/models/cntkSpeech.dnn
CNTKCommandTrainInfo: speechTrain : 2
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

##############################################################################
#                                                                            #
# Action "train"                                                             #
#                                                                            #
##############################################################################

CNTKCommandTrainBegin: speechTrain
LockDevice: Locked GPU 0 to test availability.
LockDevice: Unlocked GPU 0 after testing.
LockDevice: Locked GPU 1 to test availability.
LockDevice: Unlocked GPU 1 after testing.
LockDevice: Locked GPU 2 to test availability.
LockDevice: Unlocked GPU 2 after testing.
LockDevice: Locked GPU 4 to test availability.
LockDevice: Unlocked GPU 4 after testing.
LockDevice: Locked GPU 5 to test availability.
LockDevice: Unlocked GPU 5 after testing.
LockDevice: Locked GPU 3 to test availability.
LockDevice: Unlocked GPU 3 after testing.
LockDevice: Locked GPU 0 for exclusive use.
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[132 x 0] as heUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 0] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[132] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1] <- 1.000000.

Post-processing network...

6 roots:
	ce = SumElements()
	err = SumElements()
	logPrior._ = Mean()
	scaledLogLikelihood = Pass()
	z.x._.invStdDev = InvStdDev()
	z.x._.mean = Mean()

Validating network. 28 nodes to process in pass 1.

Validating --> modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W = LearnableParameter() :  -> [132 x 0]
Validating --> z.x.weights = LearnableParameter() :  -> [0 x 0]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures.x = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> realFeatures = Reshape (realFeatures.x) : [363 x 1 x *] -> [363 x *]
Validating --> feashift = Slice (realFeatures) : [363 x *] -> [33 x *]
Validating --> z.x._.mean = Mean (feashift) : [33 x *] -> [33]
Validating --> z.x._.ElementTimesArgs[0] = Minus (feashift, z.x._.mean) : [33 x *], [33] -> [33 x *]
Validating --> z.x._.invStdDev = InvStdDev (feashift) : [33 x *] -> [33]
Validating --> z.x._ = ElementTimes (z.x._.ElementTimesArgs[0], z.x._.invStdDev) : [33 x *], [33] -> [33 x *]
Node 'z.x.weights' (LearnableParameter operation) operation: Tensor shape was inferred as [256 x 14648].
Node 'z.x.weights' (LearnableParameter operation): Initializing Parameter[256 x 14648] <- heNormal(seed=2, init dims=[14648 x 256], range=0.088388*0.100000, onCPU=true).
Validating --> z.x = OptimizedRNNStack (z.x.weights, z.x._) : [256 x 14648], [33 x *] -> [512 x *]
Node 'modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [132 x 512].
Node 'modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[132 x 512] <- heUniform(seed=1, init dims=[132 x 512], range=0.108253*0.333333, onCPU=true).
Validating --> z.x.PlusArgs[0] = Times (modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W, z.x) : [132 x 512], [512 x *] -> [132 x *]
Validating --> modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].b = LearnableParameter() :  -> [132]
Validating --> z = Plus (z.x.PlusArgs[0], modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].b) : [132 x *], [132] -> [132 x *]
Validating --> ce.matrix.MinusArgs[0].r = ReduceElements (z) : [132 x *] -> [1 x *]
Validating --> labels = InputValue() :  -> [132 x *]
Validating --> ce.matrix.MinusArgs[1] = TransposeTimes (labels, z) : [132 x *], [132 x *] -> [1 x *]
Validating --> ce.matrix = Minus (ce.matrix.MinusArgs[0].r, ce.matrix.MinusArgs[1]) : [1 x *], [1 x *] -> [1 x *]
Validating --> ce = SumElements (ce.matrix) : [1 x *] -> [1]
Validating --> BS.Constants.One = LearnableParameter() :  -> [1]
Validating --> err.matrix.MinusArgs[1].rightMatrix = Hardmax (z) : [132 x *] -> [132 x *]
Validating --> err.matrix.MinusArgs[1] = TransposeTimes (labels, err.matrix.MinusArgs[1].rightMatrix) : [132 x *], [132 x *] -> [1 x *]
Validating --> err.matrix = Minus (BS.Constants.One, err.matrix.MinusArgs[1]) : [1], [1 x *] -> [1 x *]
Validating --> err = SumElements (err.matrix) : [1 x *] -> [1]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> scaledLogLikelihood._ = Minus (z, logPrior) : [132 x *], [132] -> [132 x *]
Validating --> scaledLogLikelihood = Pass (scaledLogLikelihood._) : [132 x *] -> [132 x *]

Validating network. 22 nodes to process in pass 2.


Validating network, final pass.



10 out of 28 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

reading script file ./glob_0000.scp ... 948 entries
total 132 state names in state list ./state.list
htkmlfreader: reading MLF file ./glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
Created model with 28 nodes on GPU 0.

Training criterion node(s):
	ce = SumElements

Evaluation criterion node(s):
	err = SumElements


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 38 matrices, 24 are shared as 7, and 14 are not shared.

	{ ce.matrix : [1 x *]
	  err.matrix.MinusArgs[1].rightMatrix : [132 x *] }
	{ modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W : [132 x 512] (gradient)
	  z : [132 x *] }
	{ realFeatures : [363 x *]
	  z.x : [512 x *]
	  z.x._.ElementTimesArgs[0] : [33 x *] }
	{ ce.matrix.MinusArgs[0].r : [1 x *] (gradient)
	  modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].b : [132] (gradient) }
	{ ce.matrix : [1 x *] (gradient)
	  ce.matrix.MinusArgs[1] : [1 x *]
	  err.matrix.MinusArgs[1] : [1 x *]
	  z : [132 x *] (gradient)
	  z.x : [512 x *] (gradient) }
	{ ce : [1] (gradient)
	  err.matrix : [1 x *]
	  scaledLogLikelihood._ : [132 x *] }
	{ ce.matrix.MinusArgs[0].r : [1 x *]
	  feashift : [33 x *]
	  realFeatures.x : [363 x 1 x *]
	  z.x.PlusArgs[0] : [132 x *]
	  z.x.PlusArgs[0] : [132 x *] (gradient)
	  z.x._ : [33 x *]
	  z.x.weights : [256 x 14648] (gradient) }


Training 3817604 parameters in 3 out of 3 parameter tensors and 10 nodes with gradient:

	Node 'modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation) : [132 x 512]
	Node 'modelUsingCuDNN5.arrayOfFunctions[2].arrayOfFunctions[0].b' (LearnableParameter operation) : [132]
	Node 'z.x.weights' (LearnableParameter operation) : [256 x 14648]


Precomputing --> 3 PreCompute nodes found.

	z.x._.mean = Mean()
	z.x._.invStdDev = InvStdDev()
	logPrior._ = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

Precomputing --> Completed.


Starting Epoch 1: learning rate per sample = 0.025000  effective momentum = 0.992031  momentum as time constant = 2499.8 samples
minibatchiterator: epoch 0: frames [0..2560] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 1 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.88326551 * 886; err = 1.00000000 * 886; time = 0.9605s; samplesPerSecond = 922.5
 Epoch[ 1 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.54308110 * 226; err = 0.76106195 * 226; time = 0.1192s; samplesPerSecond = 1895.3
 Epoch[ 1 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.21947035 * 526; err = 0.82889734 * 526; time = 0.1602s; samplesPerSecond = 3282.4
 Epoch[ 1 of 2]-Minibatch[   4-   4, 3.13%]: ce = 4.44519585 * 946; err = 0.89217759 * 946; time = 0.4861s; samplesPerSecond = 1946.3
Finished Epoch[ 1 of 2]: [Training] ce = 4.55801325 * 2584; err = 0.90479876 * 2584; totalSamplesSeen = 2584; learningRatePerSample = 0.025; epochTime=1.7297s
SGD: Saving checkpoint model 'c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance/models/cntkSpeech.dnn.1'

Starting Epoch 2: learning rate per sample = 0.025000  effective momentum = 0.992031  momentum as time constant = 2499.8 samples
minibatchiterator: epoch 1: frames [2560..5120] (first utterance at frame 2584), data subset 0 of 1, with 1 datapasses

Starting minibatch loop.
 Epoch[ 2 of 2]-Minibatch[   1-   1, 0.78%]: ce = 4.29009743 * 594; err = 0.91582492 * 594; time = 0.3246s; samplesPerSecond = 1830.2
 Epoch[ 2 of 2]-Minibatch[   2-   2, 1.56%]: ce = 4.74679961 * 386; err = 0.95854922 * 386; time = 0.2126s; samplesPerSecond = 1815.9
 Epoch[ 2 of 2]-Minibatch[   3-   3, 2.34%]: ce = 4.01901425 * 884; err = 0.89705882 * 884; time = 0.5830s; samplesPerSecond = 1516.3
 Epoch[ 2 of 2]-Minibatch[   4-   4, 3.13%]: ce = 4.47513843 * 946; err = 0.91014799 * 946; time = 0.5102s; samplesPerSecond = 1854.0
Finished Epoch[ 2 of 2]: [Training] ce = 4.32984771 * 2810; err = 0.91387900 * 2810; totalSamplesSeen = 5394; learningRatePerSample = 0.025; epochTime=1.63393s
SGD: Saving checkpoint model 'c:\work\CNTK\Tests\EndToEndTests\Speech\RunDir\LSTM\FullUtterance/models/cntkSpeech.dnn'
CNTKCommandTrainEnd: speechTrain

Action "train" complete.

__COMPLETED__
