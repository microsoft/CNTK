=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 17:56:15
		Last modified date: Tue May  3 11:36:22 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
		Built by philly on 18750d26eb32
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
05/03/2016 18:11:55: -------------------------------------------------------------------
05/03/2016 18:11:55: Build info: 

05/03/2016 18:11:55: 		Built time: May  3 2016 17:56:15
05/03/2016 18:11:55: 		Last modified date: Tue May  3 11:36:22 2016
05/03/2016 18:11:55: 		Build type: release
05/03/2016 18:11:55: 		Build target: GPU
05/03/2016 18:11:55: 		With 1bit-SGD: no
05/03/2016 18:11:55: 		Math lib: acml
05/03/2016 18:11:55: 		CUDA_PATH: /usr/local/cuda-7.5
05/03/2016 18:11:55: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 18:11:55: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 18:11:55: 		Build Branch: HEAD
05/03/2016 18:11:55: 		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
05/03/2016 18:11:55: 		Built by philly on 18750d26eb32
05/03/2016 18:11:55: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/03/2016 18:11:55: -------------------------------------------------------------------

05/03/2016 18:11:55: Running on localhost at 2016/05/03 18:11:55
05/03/2016 18:11:55: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu  DeviceId=-1  timestamping=true



05/03/2016 18:11:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:11:55: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

05/03/2016 18:11:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:11:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:11:55: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

05/03/2016 18:11:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:11:55: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=-1
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:timestamping=true
configparameters: cntk.kaldi.cntk:truncated=true
05/03/2016 18:11:55: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 18:11:55: Commands: speechTrain
05/03/2016 18:11:55: Precision = "float"
05/03/2016 18:11:55: CNTKModelPath: /tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn
05/03/2016 18:11:55: CNTKCommandTrainInfo: speechTrain : 4
05/03/2016 18:11:55: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

05/03/2016 18:11:55: ##############################################################################
05/03/2016 18:11:55: #                                                                            #
05/03/2016 18:11:55: # Action "train"                                                             #
05/03/2016 18:11:55: #                                                                            #
05/03/2016 18:11:55: ##############################################################################

05/03/2016 18:11:55: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

05/03/2016 18:11:56: Creating virgin network.

Post-processing network...

6 roots:
	Err = ClassificationError()
	ScaledLogLikelihood = Minus()
	cr = CrossEntropyWithSoftmax()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior.x = Mean()

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ot.z.PlusArgs[0]	LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ft.z.PlusArgs[0]	LSTMoutput[1].dc	LSTMoutput[1].ft.z.PlusArgs[1].matrix
	LSTMoutput[1].ft.z.PlusArgs[1]	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].it.z.PlusArgs[0]	LSTMoutput[1].it.z.PlusArgs[1].matrix	LSTMoutput[1].it.z.PlusArgs[1]
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].bit.ElementTimesArgs[1].z
	LSTMoutput[1].bit.ElementTimesArgs[1]	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.PlusArgs[1].matrix	LSTMoutput[1].ot.z.PlusArgs[1]	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimesArgs[1]	LSTMoutput[1].mt
	LSTMoutput[1].output.TimesArgs[1]	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ot.z.PlusArgs[0]	LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ft.z.PlusArgs[0]	LSTMoutput[2].dc	LSTMoutput[2].ft.z.PlusArgs[1].matrix
	LSTMoutput[2].ft.z.PlusArgs[1]	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].it.z.PlusArgs[0]	LSTMoutput[2].it.z.PlusArgs[1].matrix	LSTMoutput[2].it.z.PlusArgs[1]
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].bit.ElementTimesArgs[1].z
	LSTMoutput[2].bit.ElementTimesArgs[1]	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.PlusArgs[1].matrix	LSTMoutput[2].ot.z.PlusArgs[1]	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimesArgs[1]	LSTMoutput[2].mt
	LSTMoutput[2].output.TimesArgs[1]	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ot.z.PlusArgs[0]	LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ft.z.PlusArgs[0]	LSTMoutput[3].dc	LSTMoutput[3].ft.z.PlusArgs[1].matrix
	LSTMoutput[3].ft.z.PlusArgs[1]	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].it.z.PlusArgs[0]	LSTMoutput[3].it.z.PlusArgs[1].matrix	LSTMoutput[3].it.z.PlusArgs[1]
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].bit.ElementTimesArgs[1].z
	LSTMoutput[3].bit.ElementTimesArgs[1]	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.PlusArgs[1].matrix	LSTMoutput[3].ot.z.PlusArgs[1]	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimesArgs[1]	LSTMoutput[3].mt
	LSTMoutput[3].output.TimesArgs[1]	LSTMoutput[3].output

Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [132 x 256]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0] = Plus (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0] = Plus (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z = Plus (LSTMoutput[1].ft.z.PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid (LSTMoutput[1].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes (LSTMoutput[1].ft, LSTMoutput[1].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0] = Plus (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z = Plus (LSTMoutput[1].it.z.PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid (LSTMoutput[1].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes (LSTMoutput[1].it, LSTMoutput[1].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus (LSTMoutput[1].bft, LSTMoutput[1].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus (LSTMoutput[1].ot.z.PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid (LSTMoutput[1].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes (LSTMoutput[1].ot, LSTMoutput[1].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.TimesArgs[1] = ElementTimes (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[1].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times (LSTMoutput[1].Wmr, LSTMoutput[1].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0] = Plus (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0] = Plus (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z = Plus (LSTMoutput[2].ft.z.PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid (LSTMoutput[2].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes (LSTMoutput[2].ft, LSTMoutput[2].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0] = Plus (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z = Plus (LSTMoutput[2].it.z.PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid (LSTMoutput[2].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes (LSTMoutput[2].it, LSTMoutput[2].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus (LSTMoutput[2].bft, LSTMoutput[2].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus (LSTMoutput[2].ot.z.PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid (LSTMoutput[2].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes (LSTMoutput[2].ot, LSTMoutput[2].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.TimesArgs[1] = ElementTimes (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[2].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times (LSTMoutput[2].Wmr, LSTMoutput[2].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0] = Plus (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0] = Plus (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z = Plus (LSTMoutput[3].ft.z.PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid (LSTMoutput[3].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes (LSTMoutput[3].ft, LSTMoutput[3].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0] = Plus (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z = Plus (LSTMoutput[3].it.z.PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid (LSTMoutput[3].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes (LSTMoutput[3].it, LSTMoutput[3].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus (LSTMoutput[3].bft, LSTMoutput[3].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus (LSTMoutput[3].ot.z.PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid (LSTMoutput[3].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes (LSTMoutput[3].ot, LSTMoutput[3].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.TimesArgs[1] = ElementTimes (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[3].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times (LSTMoutput[3].Wmr, LSTMoutput[3].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0] = Times (LSTMoutputW.PlusArgs[0].TimesArgs[0], LSTMoutputW.PlusArgs[0].TimesArgs[1]) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> LSTMoutputW = Plus (LSTMoutputW.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> Err = ClassificationError (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.x = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior.x) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (LSTMoutputW, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> LSTMoutput[1].dh = PastValue (LSTMoutput[1].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dh = PastValue (LSTMoutput[2].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dh = PastValue (LSTMoutput[3].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 18:11:56: Created model with 277 nodes on CPU.

05/03/2016 18:11:56: Training criterion node(s):
05/03/2016 18:11:56: 	cr = CrossEntropyWithSoftmax

05/03/2016 18:11:56: Evaluation criterion node(s):

05/03/2016 18:11:56: 	Err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior.x Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x2d76918: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2d76be8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2d77c08: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2d78588: {[LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2d78628: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2d89398: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2d894a8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].dh Value[256 x 1 x *]] }
0x2d8c3a8: {[labels Value[132 x *]] }
0x2d90438: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2d93648: {[LSTMoutput[1].Wmr Value[256 x 1024]] }
0x2d98b08: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2d99218: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2db9498: {[featNorm.invStdDevVector Value[33 x 1]] }
0x2de1a68: {[LSTMoutputW.PlusArgs[0].TimesArgs[0] Value[132 x 256]] }
0x2de2678: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2de9238: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e02fd8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e05e48: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e05ff8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e3d178: {[cr Value[1]] }
0x2e403d8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e40538: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e40698: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e407f8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e40958: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e40ab8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e40c18: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e40d78: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e40ed8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e411d8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e427e8: {[LSTMoutput[1].ct Value[1024 x 1 x *]] }
0x2e42948: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e42b08: {[LSTMoutput[1].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e42cc8: {[LSTMoutput[1].ot.z Value[1024 x 1 x *]] }
0x2e42e88: {[LSTMoutput[1].ot Value[1024 x 1 x *]] }
0x2e43048: {[LSTMoutput[1].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e43208: {[LSTMoutput[1].mt Value[1024 x 1 x *]] }
0x2e433c8: {[LSTMoutput[1].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2e43588: {[LSTMoutput[1].output Value[256 x 1 x *]] }
0x2e43748: {[LSTMoutput[1].Wmr Gradient[256 x 1024]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e43908: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e43ac8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e43c88: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e47588: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e48308: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e48788: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e48948: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e48df8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e49038: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e49278: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e495b8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e497f8: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e49a38: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e49d78: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e49fb8: {[LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e4a1f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e4a4f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e4b2f8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e4c118: {[LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x2e4c2d8: {[LSTMoutput[2].output Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2e4c498: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4c658: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2e4c818: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x2e4c9d8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e4cb98: {[LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e4cd58: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e4cf18: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].dh Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x2e4d0d8: {[LSTMoutput[1].bit Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z Gradient[1024 x 1 x *]] }
0x2e4d298: {[LSTMoutput[1].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2e4d458: {[LSTMoutput[1].it.z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4d618: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e4d7d8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2e4d998: {[LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2e4db58: {[LSTMoutput[1].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2e4dd18: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2e4ded8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Gradient[1024 x 1 x *]] }
0x2e4e098: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e4e258: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4e418: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2e4e5d8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e4e798: {[LSTMoutput[2].ot Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e4e958: {[LSTMoutput[1].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft Gradient[1024 x 1 x *]] }
0x2e4eb18: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft.z Gradient[1024 x 1 x *]] }
0x2e4ecd8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2e4ee98: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4f058: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2e4f218: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4f3d8: {[LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2e4f598: {[LSTMoutput[1].output Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2e4f758: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2e4f918: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x2e4fad8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2e4fc98: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2e4fe58: {[LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e50018: {[LSTMoutput[2].mt Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e501d8: {[LSTMoutput[2].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2e59aa8: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e71b08: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2e723a8: {[LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e72598: {[LSTMoutput[2].Wmr Value[256 x 1024]] }
0x2e72f58: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e739e8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e741f8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e74608: {[LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2eba478: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2ecb338: {[LSTMoutput[3].Wmr Value[256 x 1024]] }
0x2ecb5e8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2ecbf08: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2ecdfa8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2eceaa8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].dh Value[256 x 1 x *]] }
0x2ed4038: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2ed4c88: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2ed5208: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2ed52f8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2ee44b8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2ee67e8: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2ee6a28: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee6d68: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee6fa8: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2ee71e8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee7528: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee7768: {[LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2ee79a8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee7ca8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee8aa8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee8ce8: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2ee8f28: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee9268: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee94a8: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2ee96e8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2ee9a28: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2eeab98: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2eeafa8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2efb928: {[features Value[1 x 363 x *]] }
0x2efd378: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2f04478: {[LSTMoutput[1].ct Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ct Value[1024 x 1 x *]] }
0x2f04638: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2f047f8: {[LSTMoutput[3].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2f049b8: {[LSTMoutput[3].ot.z Value[1024 x 1 x *]] }
0x2f04b78: {[LSTMoutput[3].ot Value[1024 x 1 x *]] }
0x2f04d38: {[LSTMoutput[3].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2f04ef8: {[LSTMoutput[3].mt Value[1024 x 1 x *]] }
0x2f050b8: {[LSTMoutput[3].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2f05278: {[LSTMoutput[3].output Value[256 x 1 x *]] }
0x2f05438: {[LSTMoutputW.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].Wmr Gradient[256 x 1024]] }
0x2f055f8: {[LSTMoutputW.PlusArgs[0] Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2f057b8: {[LSTMoutputW Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[0] Gradient[132 x 256]] }
0x2f06238: {[cr Gradient[1]] }
0x2f063f8: {[LSTMoutputW Gradient[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].output.TimesArgs[1] Gradient[1024 x 1 x *]] }
0x2f065b8: {[LSTMoutputW.PlusArgs[0] Gradient[132 x 1 x *]] [LSTMoutput[3].output Gradient[256 x 1 x *]] }
0x2f06778: {[B Gradient[132]] }
0x2f06938: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2f06af8: {[LSTMoutput[3].mt Gradient[1024 x 1 x *]] }
0x2f06cb8: {[LSTMoutput[3].ot Gradient[1024 x 1 x *]] }
0x2f06e78: {[LSTMoutput[3].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2f07038: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ct Gradient[1024 x 1 x *]] }
0x2f071f8: {[LSTMoutput[3].ot.z Gradient[1024 x 1 x *]] }
0x2f073b8: {[LSTMoutput[3].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2f07578: {[LSTMoutput[3].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2f07ab8: {[LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2f07c78: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2f07e38: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2f07ff8: {[LSTMoutput[1].ft Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Gradient[1024 x 1 x *]] }
0x2f081b8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit Gradient[1024 x 1 x *]] }
0x2f08378: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Gradient[1024 x 1 x *]] }
0x2f08538: {[LSTMoutput[1].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2f0b6b8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x2f1c688: {[LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2f27f88: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2f3ab18: {[LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2f3b518: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2f508d8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2f54c38: {[LSTMoutput[1].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2f54d98: {[LSTMoutput[1].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2f54ef8: {[LSTMoutput[1].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2f55058: {[LSTMoutput[1].it.z Value[1024 x 1 x *]] }
0x2f551b8: {[LSTMoutput[1].it Value[1024 x 1 x *]] }
0x2f55318: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2f55478: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2f555d8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2f55738: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2f55898: {[LSTMoutput[1].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2f559f8: {[LSTMoutput[1].bit Value[1024 x 1 x *]] }
0x2f57b98: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2f57cf8: {[LSTMoutput[1].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2f57e58: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2f57fb8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2f58118: {[LSTMoutput[1].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2f58278: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2f583d8: {[LSTMoutput[1].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2f58538: {[LSTMoutput[1].ft.z Value[1024 x 1 x *]] }
0x2f58698: {[LSTMoutput[1].ft Value[1024 x 1 x *]] }
0x2f587f8: {[LSTMoutput[1].bft Value[1024 x 1 x *]] }
0x2f58958: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2f58ab8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2f5a4d8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2f5ada8: {[LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2f5cdc8: {[LSTMoutput[1].it Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Value[1024 x 1 x *]] }
0x2f5d2a8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2f66bb8: {[LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2f67f68: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2f8c698: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2f8cab8: {[featNorm.meanVector Value[33 x 1]] }
0x2f8dbd8: {[LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2f8de18: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2f8e118: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2f8ef98: {[logPrior Value[132]] }
0x2f912f8: {[LSTMoutput[2].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2f914b8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2f91678: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ct Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2f91838: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2fa1078: {[LSTMoutput[2].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2fa1238: {[LSTMoutput[2].output Value[256 x 1 x *]] }
0x2fa13f8: {[LSTMoutput[2].Wmr Gradient[256 x 1024]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2fa15b8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa1778: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2fa1938: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa1af8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa1cb8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2fa1e78: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa2038: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2fa21f8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2fa23b8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa2578: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2fa2738: {[LSTMoutput[2].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2fa28f8: {[LSTMoutput[2].ot.z Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa2ab8: {[LSTMoutput[2].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2fa2c78: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2fa2e38: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa2ff8: {[LSTMoutput[1].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2fa31b8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2fa3378: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa3538: {[LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ft.z Value[1024 x 1 x *]] }
0x2fa36f8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].dh Gradient[256 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft Value[1024 x 1 x *]] }
0x2fa38b8: {[LSTMoutput[1].dc Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Value[1024 x 1 x *]] }
0x2fa3a78: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2fa3c38: {[LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa3df8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2fa3fb8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2fa4178: {[LSTMoutput[1].ot Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa4338: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft.z Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z Value[1024 x 1 x *]] }
0x2fa44f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Value[1024 x 1 x *]] }
0x2fa46b8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2fa4878: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2fa4a38: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2fa4bf8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2fa4db8: {[LSTMoutput[1].mt Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2fa4f78: {[LSTMoutput[1].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit Value[1024 x 1 x *]] }
0x2fa7038: {[Err Value[1]] }
0x2faa128: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2faa5a8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2fb4228: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2fb4858: {[LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2fb4cf8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2fb7cd8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2fb7e98: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2fb8058: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2fb8218: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2fb83d8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2fb8af8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2fca858: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2fcad88: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2fccc98: {[feashift Value[33 x 1 x *]] }
0x2fccf48: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fcd588: {[realFeatures Value[363 x 1 x *]] }
0x2fcdbb8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2fcfdd8: {[featNorm Value[33 x 1 x *]] }
0x2fd0ce8: {[LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2fd22f8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2fd2518: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2fd2ff8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].dh Value[256 x 1 x *]] }
0x2fd3438: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2fd3808: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2fd3ab8: {[LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2fd6648: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2fd7618: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2fd7a38: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2fd7d88: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2fd8ba8: {[LSTMoutput[1].dc Value[1024 x 1 x *]] }
0x2fd9168: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2ff91b8: {[LSTMoutput[2].it Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Value[1024 x 1 x *]] }
0x2ff9b68: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2ffa008: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2ffa0a8: {[logPrior.x Value[132]] }
0x2ffa148: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2ffb798: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2ffd618: {[LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2ffee48: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x3017ac8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x3018258: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x3018c28: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x3018e58: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x3019418: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x302be58: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x302e5a8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x302f848: {[B Value[132]] }
0x3049478: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x3049638: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x30497f8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x30499b8: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x3049b78: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x3049d38: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x3049ef8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x304a0b8: {[LSTMoutput[1].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x304a278: {[LSTMoutput[1].ot.z Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x304a438: {[LSTMoutput[1].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x304a5f8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x304a7b8: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x304a978: {[LSTMoutput[1].bft Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x304ab38: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x304acf8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x304aeb8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ft.z Value[1024 x 1 x *]] }
0x304b078: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].dh Gradient[256 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft Value[1024 x 1 x *]] }
0x304b238: {[LSTMoutput[1].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Value[1024 x 1 x *]] }
0x304b3f8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x304b5b8: {[LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x304b778: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x304b938: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x304baf8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x304bcb8: {[LSTMoutput[1].ft.z Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z Value[1024 x 1 x *]] }
0x304be78: {[LSTMoutput[1].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it Value[1024 x 1 x *]] }
0x304c038: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x304c1f8: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x304c3b8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x304c578: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x304c738: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x304c8f8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit Value[1024 x 1 x *]] }
0x304cab8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ct Value[1024 x 1 x *]] }
0x304cc78: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x304ce38: {[LSTMoutput[2].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x304cff8: {[LSTMoutput[2].ot.z Value[1024 x 1 x *]] }
0x304d1b8: {[LSTMoutput[2].ot Value[1024 x 1 x *]] }
0x304d378: {[LSTMoutput[2].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x304d538: {[LSTMoutput[2].mt Value[1024 x 1 x *]] }
0x306a888: {[LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x306e0f8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x306e818: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x308b6d8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }


05/03/2016 18:11:56: Precomputing --> 3 PreCompute nodes found.

05/03/2016 18:11:56: 	featNorm.meanVector = Mean()
05/03/2016 18:11:56: 	featNorm.invStdDevVector = InvStdDev()
05/03/2016 18:11:56: 	logPrior.x = Mean()
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90157]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90158..180391]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

05/03/2016 18:12:00: Precomputing --> Completed.


05/03/2016 18:12:00: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

05/03/2016 18:12:00: Starting minibatch loop.
05/03/2016 18:12:07:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.80572449 * 6400; Err = 0.90265625 * 6400; time = 7.0955s; samplesPerSecond = 902.0
05/03/2016 18:12:15:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.59894348 * 6400; Err = 0.85390625 * 6400; time = 7.1566s; samplesPerSecond = 894.3
05/03/2016 18:12:22:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: cr = 5.52926760 * 5738; Err = 0.88654583 * 5738; time = 7.2470s; samplesPerSecond = 791.8
05/03/2016 18:12:29:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.56729365 * 1840; Err = 0.88369565 * 1840; time = 7.2128s; samplesPerSecond = 255.1
05/03/2016 18:12:32: Finished Epoch[ 1 of 4]: [Training] cr = 4.91752729 * 20546; Err = 0.88017132 * 20546; totalSamplesSeen = 20546; learningRatePerSample = 0.00078125001; epochTime=31.3601s
05/03/2016 18:12:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.1'

05/03/2016 18:12:32: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20546) with 1 datapasses

05/03/2016 18:12:32: Starting minibatch loop.
05/03/2016 18:12:39:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.47222778 * 6400; Err = 0.91109375 * 6400; time = 6.6447s; samplesPerSecond = 963.2
05/03/2016 18:12:46:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.39250305 * 6400; Err = 0.87343750 * 6400; time = 7.0994s; samplesPerSecond = 901.5
05/03/2016 18:12:53:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.39425597 * 4782; Err = 0.91447093 * 4782; time = 6.8490s; samplesPerSecond = 698.2
05/03/2016 18:13:00:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41530524 * 2238; Err = 0.93610366 * 2238; time = 6.8641s; samplesPerSecond = 326.0
05/03/2016 18:13:06:  Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: cr = 4.45681281 * 608; Err = 0.92927632 * 608; time = 6.7555s; samplesPerSecond = 90.0
05/03/2016 18:13:07: Finished Epoch[ 2 of 4]: [Training] cr = 4.42175839 * 20434; Err = 0.90310267 * 20434; totalSamplesSeen = 40980; learningRatePerSample = 0.00078125001; epochTime=35.0012s
05/03/2016 18:13:08: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.2'

05/03/2016 18:13:08: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40980) with 1 datapasses

05/03/2016 18:13:08: Starting minibatch loop.
05/03/2016 18:13:15:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.14042328 * 6400; Err = 0.83671875 * 6400; time = 7.5270s; samplesPerSecond = 850.3
05/03/2016 18:13:22:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.17684784 * 6400; Err = 0.86468750 * 6400; time = 6.6744s; samplesPerSecond = 958.9
05/03/2016 18:13:28:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.23903538 * 5330; Err = 0.89530957 * 5330; time = 6.3707s; samplesPerSecond = 836.6
05/03/2016 18:13:36:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41369312 * 2390; Err = 0.94016736 * 2390; time = 7.2484s; samplesPerSecond = 329.7
05/03/2016 18:13:39: Finished Epoch[ 3 of 4]: [Training] cr = 4.20693153 * 20682; Err = 0.87264288 * 20682; totalSamplesSeen = 61662; learningRatePerSample = 0.00078125001; epochTime=31.1018s
05/03/2016 18:13:39: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.3'

05/03/2016 18:13:39: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61662) with 1 datapasses

05/03/2016 18:13:39: Starting minibatch loop.
05/03/2016 18:13:48:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.06095673 * 6400; Err = 0.85125000 * 6400; time = 8.1197s; samplesPerSecond = 788.2
05/03/2016 18:13:55:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.12552338 * 6400; Err = 0.87437500 * 6400; time = 7.3969s; samplesPerSecond = 865.2
05/03/2016 18:14:02:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.13897583 * 5796; Err = 0.87370600 * 5796; time = 7.0316s; samplesPerSecond = 824.3
05/03/2016 18:14:09:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.05378643 * 1630; Err = 0.89018405 * 1630; time = 6.7044s; samplesPerSecond = 243.1
05/03/2016 18:14:13: Finished Epoch[ 4 of 4]: [Training] cr = 4.09726114 * 20366; Err = 0.86727880 * 20366; totalSamplesSeen = 82028; learningRatePerSample = 0.00078125001; epochTime=33.7124s
05/03/2016 18:14:14: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn'
05/03/2016 18:14:14: CNTKCommandTrainEnd: speechTrain

05/03/2016 18:14:14: Action "train" complete.

05/03/2016 18:14:14: __COMPLETED__