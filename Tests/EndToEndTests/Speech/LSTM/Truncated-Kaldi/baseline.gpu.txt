=== Running /data/sls/scratch/yzhang87/code/alpha/CNTK/build/release/bin/cntk configFile=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu DataDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data ConfigDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu DeviceId=0
-------------------------------------------------------------------
Build info: 

		Built time: Mar  8 2016 21:00:00
		Last modified date: Sat Mar  5 13:20:40 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/users/yzhang87/code/cub-1.4.1
		Build Branch: master
		Build SHA1: ee92cf1d1ca9bd094187aed852bb040fe35f9bcd (modified)
		Built by yzhang87 on Source/CNTK/buildinfo.h0
		Build Path: Source/CNTK/buildinfo.h1
-------------------------------------------------------------------
Changed current directory to '/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data'
-------------------------------------------------------------------
Build info: 

		Built time: Mar  8 2016 21:00:00
		Last modified date: Sat Mar  5 13:20:40 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/users/yzhang87/code/cub-1.4.1
		Build Branch: master
		Build SHA1: ee92cf1d1ca9bd094187aed852bb040fe35f9bcd (modified)
		Built by yzhang87 on Source/CNTK/buildinfo.h0
		Build Path: Source/CNTK/buildinfo.h1
-------------------------------------------------------------------
running on localhost at 2016/03/08 21:09:57
command line: 
/data/sls/scratch/yzhang87/code/alpha/CNTK/build/release/bin/cntk  configFile=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu  DataDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data  ConfigDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu  DeviceId=0

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
ConfigDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=0
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:truncated=true
<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
Commands: speechTrain 
Precision = "float"
CNTKModelPath: /tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn
CNTKCommandTrainInfo: speechTrain : 4
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

##############################################################################
#                                                                            #
# Action "train"                                                             #
#                                                                            #
##############################################################################

CNTKCommandTrainBegin: speechTrain
reading script file /data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /data/sls/scratch/yzhang87/code/alpha/CNTK/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
Node --> B = LearnableParameter
Node --> labels = InputValue
Node --> LSTMoutputW.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].Wmr = LearnableParameter
Node --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].Wmr = LearnableParameter
Node --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].Wmr = LearnableParameter
Node --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> features = InputValue
Node --> realFeatures = TransposeDimensions
Node --> feashift = RowSlice
Node --> featNorm.meanVector = Mean
Node --> featNorm.invStdDevVector = InvStdDev
Node --> featNorm = PerDimMeanVarNormalization
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dh = PastValue
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].ot.z.Plus_left = Plus
Node --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].ft.z.Plus_left = Plus
Node --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].dc = PastValue
Node --> LSTMoutput[1].ft.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[1].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].ft.z = Plus
Node --> LSTMoutput[1].ft = Sigmoid
Node --> LSTMoutput[1].bft = ElementTimes
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[1].it.z.Plus_left = Plus
Node --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[1].it.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[1].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].it.z = Plus
Node --> LSTMoutput[1].it = Sigmoid
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left = Times
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[1].bit.ElementTimes_right.z = Plus
Node --> LSTMoutput[1].bit.ElementTimes_right = Tanh
Node --> LSTMoutput[1].bit = ElementTimes
Node --> LSTMoutput[1].ct = Plus
Node --> LSTMoutput[1].ot.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[1].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[1].ot.z = Plus
Node --> LSTMoutput[1].ot = Sigmoid
Node --> LSTMoutput[1].mt.ElementTimes_right = Tanh
Node --> LSTMoutput[1].mt = ElementTimes
Node --> LSTMoutput[1].output.Times_right = ElementTimes
Node --> LSTMoutput[1].output = Times
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dh = PastValue
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].ot.z.Plus_left = Plus
Node --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].ft.z.Plus_left = Plus
Node --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].dc = PastValue
Node --> LSTMoutput[2].ft.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[2].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].ft.z = Plus
Node --> LSTMoutput[2].ft = Sigmoid
Node --> LSTMoutput[2].bft = ElementTimes
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[2].it.z.Plus_left = Plus
Node --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[2].it.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[2].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].it.z = Plus
Node --> LSTMoutput[2].it = Sigmoid
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left = Times
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[2].bit.ElementTimes_right.z = Plus
Node --> LSTMoutput[2].bit.ElementTimes_right = Tanh
Node --> LSTMoutput[2].bit = ElementTimes
Node --> LSTMoutput[2].ct = Plus
Node --> LSTMoutput[2].ot.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[2].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[2].ot.z = Plus
Node --> LSTMoutput[2].ot = Sigmoid
Node --> LSTMoutput[2].mt.ElementTimes_right = Tanh
Node --> LSTMoutput[2].mt = ElementTimes
Node --> LSTMoutput[2].output.Times_right = ElementTimes
Node --> LSTMoutput[2].output = Times
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dh = PastValue
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].ot.z.Plus_left = Plus
Node --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].ft.z.Plus_left = Plus
Node --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].dc = PastValue
Node --> LSTMoutput[3].ft.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[3].ft.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].ft.z = Plus
Node --> LSTMoutput[3].ft = Sigmoid
Node --> LSTMoutput[3].bft = ElementTimes
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = ElementTimes
Node --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times
Node --> LSTMoutput[3].it.z.Plus_left = Plus
Node --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp
Node --> LSTMoutput[3].it.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[3].it.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].it.z = Plus
Node --> LSTMoutput[3].it = Sigmoid
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left = Times
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left = Times
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter
Node --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right = Plus
Node --> LSTMoutput[3].bit.ElementTimes_right.z = Plus
Node --> LSTMoutput[3].bit.ElementTimes_right = Tanh
Node --> LSTMoutput[3].bit = ElementTimes
Node --> LSTMoutput[3].ct = Plus
Node --> LSTMoutput[3].ot.z.Plus_right.matrix = ElementTimes
Node --> LSTMoutput[3].ot.z.Plus_right = DiagTimes
Node --> LSTMoutput[3].ot.z = Plus
Node --> LSTMoutput[3].ot = Sigmoid
Node --> LSTMoutput[3].mt.ElementTimes_right = Tanh
Node --> LSTMoutput[3].mt = ElementTimes
Node --> LSTMoutput[3].output.Times_right = ElementTimes
Node --> LSTMoutput[3].output = Times
Node --> LSTMoutputW.Plus_left.Times_right = ElementTimes
Node --> LSTMoutputW.Plus_left = Times
Node --> LSTMoutputW = Plus
Node --> Err = ErrorPrediction
Node --> logPrior.x = Mean
Node --> logPrior = Log
Node --> ScaledLogLikelihood = Minus
Node --> cr = CrossEntropyWithSoftmax

Post-processing network...

6 roots:
	Err = ErrorPrediction
	ScaledLogLikelihood = Minus
	cr = CrossEntropyWithSoftmax
	featNorm.invStdDevVector = InvStdDev
	featNorm.meanVector = Mean
	logPrior.x = Mean

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ot.z.Plus_left.Plus_right
	LSTMoutput[1].ot.z.Plus_left	LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].ft.z.Plus_left.Plus_right
	LSTMoutput[1].ft.z.Plus_left	LSTMoutput[1].dc	LSTMoutput[1].ft.z.Plus_right.matrix
	LSTMoutput[1].ft.z.Plus_right	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[1].it.z.Plus_left.Plus_right
	LSTMoutput[1].it.z.Plus_left	LSTMoutput[1].it.z.Plus_right.matrix	LSTMoutput[1].it.z.Plus_right
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[1].bit.ElementTimes_right.z.Plus_right	LSTMoutput[1].bit.ElementTimes_right.z
	LSTMoutput[1].bit.ElementTimes_right	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.Plus_right.matrix	LSTMoutput[1].ot.z.Plus_right	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimes_right	LSTMoutput[1].mt
	LSTMoutput[1].output.Times_right	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ot.z.Plus_left.Plus_right
	LSTMoutput[2].ot.z.Plus_left	LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].ft.z.Plus_left.Plus_right
	LSTMoutput[2].ft.z.Plus_left	LSTMoutput[2].dc	LSTMoutput[2].ft.z.Plus_right.matrix
	LSTMoutput[2].ft.z.Plus_right	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[2].it.z.Plus_left.Plus_right
	LSTMoutput[2].it.z.Plus_left	LSTMoutput[2].it.z.Plus_right.matrix	LSTMoutput[2].it.z.Plus_right
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[2].bit.ElementTimes_right.z.Plus_right	LSTMoutput[2].bit.ElementTimes_right.z
	LSTMoutput[2].bit.ElementTimes_right	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.Plus_right.matrix	LSTMoutput[2].ot.z.Plus_right	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimes_right	LSTMoutput[2].mt
	LSTMoutput[2].output.Times_right	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ot.z.Plus_left.Plus_right
	LSTMoutput[3].ot.z.Plus_left	LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].ft.z.Plus_left.Plus_right
	LSTMoutput[3].ft.z.Plus_left	LSTMoutput[3].dc	LSTMoutput[3].ft.z.Plus_right.matrix
	LSTMoutput[3].ft.z.Plus_right	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right	LSTMoutput[3].it.z.Plus_left.Plus_right
	LSTMoutput[3].it.z.Plus_left	LSTMoutput[3].it.z.Plus_right.matrix	LSTMoutput[3].it.z.Plus_right
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left	LSTMoutput[3].bit.ElementTimes_right.z.Plus_right	LSTMoutput[3].bit.ElementTimes_right.z
	LSTMoutput[3].bit.ElementTimes_right	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.Plus_right.matrix	LSTMoutput[3].ot.z.Plus_right	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimes_right	LSTMoutput[3].mt
	LSTMoutput[3].output.Times_right	LSTMoutput[3].output
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for ScaledLogLikelihood Minus operation
FormNestedNetwork: WARNING: Was called twice for cr CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for featNorm.invStdDevVector InvStdDev operation
FormNestedNetwork: WARNING: Was called twice for featNorm.meanVector Mean operation
FormNestedNetwork: WARNING: Was called twice for logPrior.x Mean operation


Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue -> [132 x *]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132 x 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> features = InputValue -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions(features[1 x 363 x *]) -> [363 x 1 x *]
Validating --> feashift = RowSlice(realFeatures[363 x 1 x *]) -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33 x 1 x *], featNorm.meanVector[33 x 1], featNorm.invStdDevVector[33 x 1]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 33], LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024 x 1 x *], LSTMoutput[1].dc[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].it.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right = Tanh(LSTMoutput[1].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024 x 1 x *], LSTMoutput[1].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimes_right = Tanh(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024 x 1 x *], LSTMoutput[1].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.Times_right = ElementTimes(LSTMoutput[1].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256 x 1024], LSTMoutput[1].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024 x 1 x *], LSTMoutput[2].dc[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].it.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right = Tanh(LSTMoutput[2].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024 x 1 x *], LSTMoutput[2].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimes_right = Tanh(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024 x 1 x *], LSTMoutput[2].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.Times_right = ElementTimes(LSTMoutput[2].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256 x 1024], LSTMoutput[2].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024 x 1 x *], LSTMoutput[3].dc[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024]) -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].it.z.Plus_right.matrix[1024 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256]) -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1]) -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right[1024 x 1]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right = Tanh(LSTMoutput[3].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024 x 1 x *], LSTMoutput[3].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimes_right = Tanh(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024 x 1 x *], LSTMoutput[3].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.Times_right = ElementTimes(LSTMoutput[3].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256 x 1024], LSTMoutput[3].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left.Times_right = ElementTimes(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132 x 256], LSTMoutputW.Plus_left.Times_right[256 x 1 x *]) -> [132 x 1 x *]
Validating --> B = LearnableParameter -> [132]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132 x 1 x *], B[132]) -> [132 x 1 x *]
Validating --> Err = ErrorPrediction(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]
Validating --> logPrior.x = Mean(labels[132 x *]) -> [132]
Validating --> logPrior = Log(logPrior.x[132]) -> [132]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132 x 1 x *], logPrior[132]) -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> labels = InputValue -> [132 x *]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132 x 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> features = InputValue -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions(features[1 x 363 x *]) -> [363 x 1 x *]
Validating --> feashift = RowSlice(realFeatures[363 x 1 x *]) -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33 x 1 x *], featNorm.meanVector[33 x 1], featNorm.invStdDevVector[33 x 1]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 33], LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024 x 1 x *], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right = Tanh(LSTMoutput[1].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024 x 1 x *], LSTMoutput[1].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimes_right = Tanh(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024 x 1 x *], LSTMoutput[1].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.Times_right = ElementTimes(LSTMoutput[1].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256 x 1024], LSTMoutput[1].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024 x 1 x *], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right = Tanh(LSTMoutput[2].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024 x 1 x *], LSTMoutput[2].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimes_right = Tanh(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024 x 1 x *], LSTMoutput[2].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.Times_right = ElementTimes(LSTMoutput[2].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256 x 1024], LSTMoutput[2].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024 x 1 x *], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right = Tanh(LSTMoutput[3].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024 x 1 x *], LSTMoutput[3].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimes_right = Tanh(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024 x 1 x *], LSTMoutput[3].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.Times_right = ElementTimes(LSTMoutput[3].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256 x 1024], LSTMoutput[3].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left.Times_right = ElementTimes(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132 x 256], LSTMoutputW.Plus_left.Times_right[256 x 1 x *]) -> [132 x 1 x *]
Validating --> B = LearnableParameter -> [132]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132 x 1 x *], B[132]) -> [132 x 1 x *]
Validating --> Err = ErrorPrediction(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]
Validating --> logPrior.x = Mean(labels[132 x *]) -> [132]
Validating --> logPrior = Log(logPrior.x[132]) -> [132]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132 x 1 x *], logPrior[132]) -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]

Validating network. 45 nodes to process in pass 3.

Validating --> labels = InputValue -> [132 x *]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132 x 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> features = InputValue -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions(features[1 x 363 x *]) -> [363 x 1 x *]
Validating --> feashift = RowSlice(realFeatures[363 x 1 x *]) -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33 x 1 x *], featNorm.meanVector[33 x 1], featNorm.invStdDevVector[33 x 1]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 33], LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024 x 1 x *], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right = Tanh(LSTMoutput[1].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024 x 1 x *], LSTMoutput[1].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimes_right = Tanh(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024 x 1 x *], LSTMoutput[1].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.Times_right = ElementTimes(LSTMoutput[1].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256 x 1024], LSTMoutput[1].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024 x 1 x *], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right = Tanh(LSTMoutput[2].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024 x 1 x *], LSTMoutput[2].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimes_right = Tanh(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024 x 1 x *], LSTMoutput[2].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.Times_right = ElementTimes(LSTMoutput[2].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256 x 1024], LSTMoutput[2].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024 x 1 x *], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right = Tanh(LSTMoutput[3].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024 x 1 x *], LSTMoutput[3].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimes_right = Tanh(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024 x 1 x *], LSTMoutput[3].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.Times_right = ElementTimes(LSTMoutput[3].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256 x 1024], LSTMoutput[3].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left.Times_right = ElementTimes(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132 x 256], LSTMoutputW.Plus_left.Times_right[256 x 1 x *]) -> [132 x 1 x *]
Validating --> B = LearnableParameter -> [132]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132 x 1 x *], B[132]) -> [132 x 1 x *]
Validating --> Err = ErrorPrediction(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]
Validating --> logPrior.x = Mean(labels[132 x *]) -> [132]
Validating --> logPrior = Log(logPrior.x[132]) -> [132]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132 x 1 x *], logPrior[132]) -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]

Validating network, final pass.

Validating --> labels = InputValue -> [132 x *]
Validating --> LSTMoutputW.Plus_left.Times_left = LearnableParameter -> [132 x 256]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutputW.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter -> [256 x 1024]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].output.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].output.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> features = InputValue -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions(features[1 x 363 x *]) -> [363 x 1 x *]
Validating --> feashift = RowSlice(realFeatures[363 x 1 x *]) -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev(feashift[33 x 1 x *]) -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization(feashift[33 x 1 x *], featNorm.meanVector[33 x 1], featNorm.invStdDevVector[33 x 1]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 33], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], featNorm[33 x 1 x *]) -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 33], LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right[33 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[1].dh = PastValue(LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left.Plus_right = Times(LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_left = Plus(LSTMoutput[1].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left.Plus_right = Times(LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_left = Plus(LSTMoutput[1].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.Plus_right = DiagTimes(LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z = Plus(LSTMoutput[1].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid(LSTMoutput[1].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes(LSTMoutput[1].ft[1024 x 1 x *], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left.Plus_right = Times(LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_left = Plus(LSTMoutput[1].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.Plus_right = DiagTimes(LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z = Plus(LSTMoutput[1].it.z.Plus_left[1024 x 1 x *], LSTMoutput[1].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid(LSTMoutput[1].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right.z = Plus(LSTMoutput[1].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimes_right = Tanh(LSTMoutput[1].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes(LSTMoutput[1].it[1024 x 1 x *], LSTMoutput[1].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus(LSTMoutput[1].bft[1024 x 1 x *], LSTMoutput[1].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.Plus_right = DiagTimes(LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[1].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus(LSTMoutput[1].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[1].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid(LSTMoutput[1].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimes_right = Tanh(LSTMoutput[1].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes(LSTMoutput[1].ot[1024 x 1 x *], LSTMoutput[1].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.Times_right = ElementTimes(LSTMoutput[1].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times(LSTMoutput[1].Wmr[256 x 1024], LSTMoutput[1].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[1].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[2].dh = PastValue(LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left.Plus_right = Times(LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_left = Plus(LSTMoutput[2].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left.Plus_right = Times(LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_left = Plus(LSTMoutput[2].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.Plus_right = DiagTimes(LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z = Plus(LSTMoutput[2].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid(LSTMoutput[2].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes(LSTMoutput[2].ft[1024 x 1 x *], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left.Plus_right = Times(LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_left = Plus(LSTMoutput[2].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.Plus_right = DiagTimes(LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z = Plus(LSTMoutput[2].it.z.Plus_left[1024 x 1 x *], LSTMoutput[2].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid(LSTMoutput[2].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right.z = Plus(LSTMoutput[2].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimes_right = Tanh(LSTMoutput[2].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes(LSTMoutput[2].it[1024 x 1 x *], LSTMoutput[2].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus(LSTMoutput[2].bft[1024 x 1 x *], LSTMoutput[2].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.Plus_right = DiagTimes(LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[2].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus(LSTMoutput[2].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[2].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid(LSTMoutput[2].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimes_right = Tanh(LSTMoutput[2].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes(LSTMoutput[2].ot[1024 x 1 x *], LSTMoutput[2].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.Times_right = ElementTimes(LSTMoutput[2].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times(LSTMoutput[2].Wmr[256 x 1024], LSTMoutput[2].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left = Times(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector = LearnableParameter -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor = Exp(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[2].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left = LearnableParameter -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x = LearnableParameter -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor = Exp(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x[1 x 1]) -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right = LearnableParameter -> [1024]
Validating --> LSTMoutput[3].dh = PastValue(LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left.Plus_right = Times(LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_left = Plus(LSTMoutput[3].ot.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left.Plus_right = Times(LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_left = Plus(LSTMoutput[3].ft.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.Plus_right = DiagTimes(LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ft.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z = Plus(LSTMoutput[3].ft.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ft.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid(LSTMoutput[3].ft.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes(LSTMoutput[3].ft[1024 x 1 x *], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right = ElementTimes(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left.Plus_right = Times(LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left[1024 x 256], LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_left = Plus(LSTMoutput[3].it.z.Plus_left.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_left.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].dc[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.Plus_right = DiagTimes(LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].it.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z = Plus(LSTMoutput[3].it.z.Plus_left[1024 x 1 x *], LSTMoutput[3].it.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid(LSTMoutput[3].it.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right = ElementTimes(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].dh[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left = Times(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left[1024 x 256], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right[256 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z.Plus_right = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right[1024]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right.z = Plus(LSTMoutput[3].bit.ElementTimes_right.z.Plus_left[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimes_right = Tanh(LSTMoutput[3].bit.ElementTimes_right.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes(LSTMoutput[3].it[1024 x 1 x *], LSTMoutput[3].bit.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus(LSTMoutput[3].bft[1024 x 1 x *], LSTMoutput[3].bit[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right.matrix = ElementTimes(LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor[1 x 1], LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.Plus_right = DiagTimes(LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector[1024 x 1], LSTMoutput[3].ot.z.Plus_right.matrix[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus(LSTMoutput[3].ot.z.Plus_left[1024 x 1 x *], LSTMoutput[3].ot.z.Plus_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid(LSTMoutput[3].ot.z[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimes_right = Tanh(LSTMoutput[3].ct[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes(LSTMoutput[3].ot[1024 x 1 x *], LSTMoutput[3].mt.ElementTimes_right[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.Times_right = ElementTimes(LSTMoutput[3].output.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].mt[1024 x 1 x *]) -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times(LSTMoutput[3].Wmr[256 x 1024], LSTMoutput[3].output.Times_right[1024 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left.Times_right = ElementTimes(LSTMoutputW.Plus_left.Times_right.scalarScalingFactor[1 x 1], LSTMoutput[3].output[256 x 1 x *]) -> [256 x 1 x *]
Validating --> LSTMoutputW.Plus_left = Times(LSTMoutputW.Plus_left.Times_left[132 x 256], LSTMoutputW.Plus_left.Times_right[256 x 1 x *]) -> [132 x 1 x *]
Validating --> B = LearnableParameter -> [132]
Validating --> LSTMoutputW = Plus(LSTMoutputW.Plus_left[132 x 1 x *], B[132]) -> [132 x 1 x *]
Validating --> Err = ErrorPrediction(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]
Validating --> logPrior.x = Mean(labels[132 x *]) -> [132]
Validating --> logPrior = Log(logPrior.x[132]) -> [132]
Validating --> ScaledLogLikelihood = Minus(LSTMoutputW[132 x 1 x *], logPrior[132]) -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax(labels[132 x *], LSTMoutputW[132 x 1 x *]) -> [1]

130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
N9Microsoft3MSR4CNTK18ComputationNetworkE [
  B : LearnableParameter [132] ()
  cr : CrossEntropyWithSoftmax [1] (
    labels
    LSTMoutputW
  )
  Err : ErrorPrediction [1] (
    labels
    LSTMoutputW
  )
  feashift : RowSlice [33 x 1 x *] (
    realFeatures
  )
  featNorm : PerDimMeanVarNormalization [33 x 1 x *] (
    feashift
    featNorm.meanVector
    featNorm.invStdDevVector
  )
  featNorm.invStdDevVector : InvStdDev [33 x 1] (
    feashift
  )
  featNorm.meanVector : Mean [33 x 1] (
    feashift
  )
  features : InputValue [1 x 363 x *] ()
  labels : InputValue [132 x *] ()
  logPrior : Log [132] (
    logPrior.x
  )
  logPrior.x : Mean [132] (
    labels
  )
  LSTMoutput[1].bft : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].ft
    LSTMoutput[1].dc
  )
  LSTMoutput[1].bit : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].it
    LSTMoutput[1].bit.ElementTimes_right
  )
  LSTMoutput[1].bit.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z
  )
  LSTMoutput[1].bit.ElementTimes_right.z : Plus [1024 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_left
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_left : LearnableParameter [1024 x 33] ()
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right : ElementTimes [33 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right : Plus [1024 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].bit.ElementTimes_right.z.Plus_right.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[1].ct : Plus [1024 x 1 x *] (
    LSTMoutput[1].bft
    LSTMoutput[1].bit
  )
  LSTMoutput[1].dc : PastValue [1024 x 1 x *] (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].dh : PastValue [256 x 1 x *] (
    LSTMoutput[1].output
  )
  LSTMoutput[1].ft : Sigmoid [1024 x 1 x *] (
    LSTMoutput[1].ft.z
  )
  LSTMoutput[1].ft.z : Plus [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left
    LSTMoutput[1].ft.z.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_left
    LSTMoutput[1].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 33] ()
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [33 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[1].ft.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].ft.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ft.z.Plus_right.matrix
  )
  LSTMoutput[1].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[1].ft.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].it : Sigmoid [1024 x 1 x *] (
    LSTMoutput[1].it.z
  )
  LSTMoutput[1].it.z : Plus [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left
    LSTMoutput[1].it.z.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_left
    LSTMoutput[1].it.z.Plus_left.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 33] ()
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [33 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[1].it.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].it.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].it.z.Plus_right.matrix
  )
  LSTMoutput[1].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[1].it.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].dc
  )
  LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].mt : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].ot
    LSTMoutput[1].mt.ElementTimes_right
  )
  LSTMoutput[1].mt.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot : Sigmoid [1024 x 1 x *] (
    LSTMoutput[1].ot.z
  )
  LSTMoutput[1].ot.z : Plus [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left
    LSTMoutput[1].ot.z.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_left
    LSTMoutput[1].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 33] ()
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [33 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    featNorm
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[1].ot.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[1].dh
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].ot.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[1].ot.z.Plus_right.matrix
  )
  LSTMoutput[1].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[1].ot.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[1].ct
  )
  LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[1].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].output : Times [256 x 1 x *] (
    LSTMoutput[1].Wmr
    LSTMoutput[1].output.Times_right
  )
  LSTMoutput[1].output.Times_right : ElementTimes [1024 x 1 x *] (
    LSTMoutput[1].output.Times_right.scalarScalingFactor
    LSTMoutput[1].mt
  )
  LSTMoutput[1].output.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[1].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[1].output.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[1].Wmr : LearnableParameter [256 x 1024] ()
  LSTMoutput[2].bft : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].ft
    LSTMoutput[2].dc
  )
  LSTMoutput[2].bit : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].it
    LSTMoutput[2].bit.ElementTimes_right
  )
  LSTMoutput[2].bit.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z
  )
  LSTMoutput[2].bit.ElementTimes_right.z : Plus [1024 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_left
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right : Plus [1024 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].bit.ElementTimes_right.z.Plus_right.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[2].ct : Plus [1024 x 1 x *] (
    LSTMoutput[2].bft
    LSTMoutput[2].bit
  )
  LSTMoutput[2].dc : PastValue [1024 x 1 x *] (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].dh : PastValue [256 x 1 x *] (
    LSTMoutput[2].output
  )
  LSTMoutput[2].ft : Sigmoid [1024 x 1 x *] (
    LSTMoutput[2].ft.z
  )
  LSTMoutput[2].ft.z : Plus [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left
    LSTMoutput[2].ft.z.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_left
    LSTMoutput[2].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[2].ft.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].ft.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ft.z.Plus_right.matrix
  )
  LSTMoutput[2].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[2].ft.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].it : Sigmoid [1024 x 1 x *] (
    LSTMoutput[2].it.z
  )
  LSTMoutput[2].it.z : Plus [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left
    LSTMoutput[2].it.z.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_left
    LSTMoutput[2].it.z.Plus_left.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[2].it.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].it.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].it.z.Plus_right.matrix
  )
  LSTMoutput[2].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[2].it.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].dc
  )
  LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].mt : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].ot
    LSTMoutput[2].mt.ElementTimes_right
  )
  LSTMoutput[2].mt.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot : Sigmoid [1024 x 1 x *] (
    LSTMoutput[2].ot.z
  )
  LSTMoutput[2].ot.z : Plus [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left
    LSTMoutput[2].ot.z.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_left
    LSTMoutput[2].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[1].output
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[2].ot.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[2].dh
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].ot.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[2].ot.z.Plus_right.matrix
  )
  LSTMoutput[2].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[2].ot.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[2].ct
  )
  LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[2].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].output : Times [256 x 1 x *] (
    LSTMoutput[2].Wmr
    LSTMoutput[2].output.Times_right
  )
  LSTMoutput[2].output.Times_right : ElementTimes [1024 x 1 x *] (
    LSTMoutput[2].output.Times_right.scalarScalingFactor
    LSTMoutput[2].mt
  )
  LSTMoutput[2].output.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[2].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[2].output.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[2].Wmr : LearnableParameter [256 x 1024] ()
  LSTMoutput[3].bft : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].ft
    LSTMoutput[3].dc
  )
  LSTMoutput[3].bit : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].it
    LSTMoutput[3].bit.ElementTimes_right
  )
  LSTMoutput[3].bit.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z
  )
  LSTMoutput[3].bit.ElementTimes_right.z : Plus [1024 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_left
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right : Plus [1024 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].bit.ElementTimes_right.z.Plus_right.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[3].ct : Plus [1024 x 1 x *] (
    LSTMoutput[3].bft
    LSTMoutput[3].bit
  )
  LSTMoutput[3].dc : PastValue [1024 x 1 x *] (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].dh : PastValue [256 x 1 x *] (
    LSTMoutput[3].output
  )
  LSTMoutput[3].ft : Sigmoid [1024 x 1 x *] (
    LSTMoutput[3].ft.z
  )
  LSTMoutput[3].ft.z : Plus [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left
    LSTMoutput[3].ft.z.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_left
    LSTMoutput[3].ft.z.Plus_left.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].ft.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[3].ft.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].ft.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ft.z.Plus_right.matrix
  )
  LSTMoutput[3].ft.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[3].ft.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ft.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].it : Sigmoid [1024 x 1 x *] (
    LSTMoutput[3].it.z
  )
  LSTMoutput[3].it.z : Plus [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left
    LSTMoutput[3].it.z.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_left
    LSTMoutput[3].it.z.Plus_left.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].it.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[3].it.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].it.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].it.z.Plus_right.matrix
  )
  LSTMoutput[3].it.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[3].it.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].dc
  )
  LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].it.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].mt : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].ot
    LSTMoutput[3].mt.ElementTimes_right
  )
  LSTMoutput[3].mt.ElementTimes_right : Tanh [1024 x 1 x *] (
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot : Sigmoid [1024 x 1 x *] (
    LSTMoutput[3].ot.z
  )
  LSTMoutput[3].ot.z : Plus [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left
    LSTMoutput[3].ot.z.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_left
    LSTMoutput[3].ot.z.Plus_left.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left : Plus [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left : Times [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[2].output
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].ot.z.Plus_left.Plus_left.Plus_right : LearnableParameter [1024] ()
  LSTMoutput[3].ot.z.Plus_left.Plus_right : Times [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_left : LearnableParameter [1024 x 256] ()
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor
    LSTMoutput[3].dh
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_left.Plus_right.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].ot.z.Plus_right : DiagTimes [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector
    LSTMoutput[3].ot.z.Plus_right.matrix
  )
  LSTMoutput[3].ot.z.Plus_right.diagonalMatrixAsColumnVector : LearnableParameter [1024 x 1] ()
  LSTMoutput[3].ot.z.Plus_right.matrix : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor
    LSTMoutput[3].ct
  )
  LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x
  )
  LSTMoutput[3].ot.z.Plus_right.matrix.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].output : Times [256 x 1 x *] (
    LSTMoutput[3].Wmr
    LSTMoutput[3].output.Times_right
  )
  LSTMoutput[3].output.Times_right : ElementTimes [1024 x 1 x *] (
    LSTMoutput[3].output.Times_right.scalarScalingFactor
    LSTMoutput[3].mt
  )
  LSTMoutput[3].output.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutput[3].output.Times_right.scalarScalingFactor.x
  )
  LSTMoutput[3].output.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  LSTMoutput[3].Wmr : LearnableParameter [256 x 1024] ()
  LSTMoutputW : Plus [132 x 1 x *] (
    LSTMoutputW.Plus_left
    B
  )
  LSTMoutputW.Plus_left : Times [132 x 1 x *] (
    LSTMoutputW.Plus_left.Times_left
    LSTMoutputW.Plus_left.Times_right
  )
  LSTMoutputW.Plus_left.Times_left : LearnableParameter [132 x 256] ()
  LSTMoutputW.Plus_left.Times_right : ElementTimes [256 x 1 x *] (
    LSTMoutputW.Plus_left.Times_right.scalarScalingFactor
    LSTMoutput[3].output
  )
  LSTMoutputW.Plus_left.Times_right.scalarScalingFactor : Exp [1 x 1] (
    LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x
  )
  LSTMoutputW.Plus_left.Times_right.scalarScalingFactor.x : LearnableParameter [1 x 1] ()
  realFeatures : TransposeDimensions [363 x 1 x *] (
    features
  )
  ScaledLogLikelihood : Minus [132 x 1 x *] (
    LSTMoutputW
    logPrior
  )
]

SGD using GPU 0.

Training criterion node(s):
	cr = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Precomputing --> 3 PreCompute nodes found.

	NodeName: featNorm.meanVector
	NodeName: featNorm.invStdDevVector
	NodeName: logPrior.x
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90157]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90158..180391]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

Precomputing --> Completed.


Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

Starting minibatch loop.
 Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: SamplesSeen = 6400; TrainLossPerSample =  4.80572449; EvalErr[0]PerSample = 0.90281250; TotalTime = 1.9444s; SamplesPerSecond = 3291.5
 Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: SamplesSeen = 6400; TrainLossPerSample =  4.59893982; EvalErr[0]PerSample = 0.85390625; TotalTime = 2.0055s; SamplesPerSecond = 3191.2
 Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: SamplesSeen = 5738; TrainLossPerSample =  5.52913826; EvalErr[0]PerSample = 0.88654583; TotalTime = 2.1059s; SamplesPerSecond = 2724.7
 Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: SamplesSeen = 1840; TrainLossPerSample =  4.56729365; EvalErr[0]PerSample = 0.88369565; TotalTime = 2.0561s; SamplesPerSecond = 894.9
Finished Epoch[ 1 of 4]: [Training Set] TrainLossPerSample = 4.91749; TotalSamplesSeen = 20546; EvalErrPerSample = 0.88022; AvgLearningRatePerSample = 0.00078125001; EpochTime=8.90995
SGD: Saving checkpoint model '/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.1'

Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20546) with 1 datapasses

Starting minibatch loop.
 Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: SamplesSeen = 6400; TrainLossPerSample =  4.47223236; EvalErr[0]PerSample = 0.91109375; TotalTime = 1.9295s; SamplesPerSecond = 3316.9
 Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: SamplesSeen = 6400; TrainLossPerSample =  4.39250519; EvalErr[0]PerSample = 0.87343750; TotalTime = 1.9730s; SamplesPerSecond = 3243.8
 Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: SamplesSeen = 4782; TrainLossPerSample =  4.39425842; EvalErr[0]PerSample = 0.91447093; TotalTime = 2.1490s; SamplesPerSecond = 2225.2
 Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: SamplesSeen = 2238; TrainLossPerSample =  4.41530524; EvalErr[0]PerSample = 0.93610366; TotalTime = 2.0634s; SamplesPerSecond = 1084.6
 Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: SamplesSeen = 608; TrainLossPerSample =  4.45681281; EvalErr[0]PerSample = 0.92927632; TotalTime = 1.9828s; SamplesPerSecond = 306.6
Finished Epoch[ 2 of 4]: [Training Set] TrainLossPerSample = 4.421761; TotalSamplesSeen = 40980; EvalErrPerSample = 0.90310264; AvgLearningRatePerSample = 0.00078125001; EpochTime=10.3062
SGD: Saving checkpoint model '/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.2'

Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40980) with 1 datapasses

Starting minibatch loop.
 Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: SamplesSeen = 6400; TrainLossPerSample =  4.14042480; EvalErr[0]PerSample = 0.83671875; TotalTime = 1.9481s; SamplesPerSecond = 3285.2
 Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: SamplesSeen = 6400; TrainLossPerSample =  4.17684937; EvalErr[0]PerSample = 0.86468750; TotalTime = 1.2116s; SamplesPerSecond = 5282.1
 Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: SamplesSeen = 5330; TrainLossPerSample =  4.23903612; EvalErr[0]PerSample = 0.89530957; TotalTime = 1.2167s; SamplesPerSecond = 4380.6
 Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: SamplesSeen = 2390; TrainLossPerSample =  4.41369312; EvalErr[0]PerSample = 0.94016736; TotalTime = 1.7662s; SamplesPerSecond = 1353.2
Finished Epoch[ 3 of 4]: [Training Set] TrainLossPerSample = 4.2069325; TotalSamplesSeen = 61662; EvalErrPerSample = 0.87264287; AvgLearningRatePerSample = 0.00078125001; EpochTime=6.78418
SGD: Saving checkpoint model '/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.3'

Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61662) with 1 datapasses

Starting minibatch loop.
 Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: SamplesSeen = 6400; TrainLossPerSample =  4.06095642; EvalErr[0]PerSample = 0.85125000; TotalTime = 1.4609s; SamplesPerSecond = 4380.8
 Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: SamplesSeen = 6400; TrainLossPerSample =  4.12552368; EvalErr[0]PerSample = 0.87437500; TotalTime = 1.4510s; SamplesPerSecond = 4410.7
 Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: SamplesSeen = 5796; TrainLossPerSample =  4.13897583; EvalErr[0]PerSample = 0.87370600; TotalTime = 1.4256s; SamplesPerSecond = 4065.7
 Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: SamplesSeen = 1630; TrainLossPerSample =  4.05378643; EvalErr[0]PerSample = 0.89018405; TotalTime = 1.2056s; SamplesPerSecond = 1352.0
Finished Epoch[ 4 of 4]: [Training Set] TrainLossPerSample = 4.097261; TotalSamplesSeen = 82028; EvalErrPerSample = 0.86727881; AvgLearningRatePerSample = 0.00078125001; EpochTime=6.39426
SGD: Saving checkpoint model '/tmp/cntk-test-20160308210956.766531/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn'
CNTKCommandTrainEnd: speechTrain

Action "train" complete.

__COMPLETED__
