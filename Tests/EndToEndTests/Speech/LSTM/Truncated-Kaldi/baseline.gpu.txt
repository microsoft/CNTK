=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 17:56:15
		Last modified date: Tue May  3 11:36:22 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
		Built by philly on 18750d26eb32
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
05/03/2016 18:14:14: -------------------------------------------------------------------
05/03/2016 18:14:14: Build info: 

05/03/2016 18:14:14: 		Built time: May  3 2016 17:56:15
05/03/2016 18:14:14: 		Last modified date: Tue May  3 11:36:22 2016
05/03/2016 18:14:14: 		Build type: release
05/03/2016 18:14:14: 		Build target: GPU
05/03/2016 18:14:14: 		With 1bit-SGD: no
05/03/2016 18:14:14: 		Math lib: acml
05/03/2016 18:14:14: 		CUDA_PATH: /usr/local/cuda-7.5
05/03/2016 18:14:14: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 18:14:14: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 18:14:14: 		Build Branch: HEAD
05/03/2016 18:14:14: 		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
05/03/2016 18:14:14: 		Built by philly on 18750d26eb32
05/03/2016 18:14:14: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/03/2016 18:14:14: -------------------------------------------------------------------

05/03/2016 18:14:14: Running on localhost at 2016/05/03 18:14:14
05/03/2016 18:14:14: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu  DeviceId=0  timestamping=true



05/03/2016 18:14:14: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:14:14: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0
timestamping=true

05/03/2016 18:14:14: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:14:14: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:14:14: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0
timestamping=true

05/03/2016 18:14:14: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:14:14: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=0
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ClassificationError(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:timestamping=true
configparameters: cntk.kaldi.cntk:truncated=true
05/03/2016 18:14:14: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 18:14:14: Commands: speechTrain
05/03/2016 18:14:14: Precision = "float"
05/03/2016 18:14:14: CNTKModelPath: /tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn
05/03/2016 18:14:14: CNTKCommandTrainInfo: speechTrain : 4
05/03/2016 18:14:14: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

05/03/2016 18:14:14: ##############################################################################
05/03/2016 18:14:14: #                                                                            #
05/03/2016 18:14:14: # Action "train"                                                             #
05/03/2016 18:14:14: #                                                                            #
05/03/2016 18:14:14: ##############################################################################

05/03/2016 18:14:14: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

05/03/2016 18:14:15: Creating virgin network.

Post-processing network...

6 roots:
	Err = ClassificationError()
	ScaledLogLikelihood = Minus()
	cr = CrossEntropyWithSoftmax()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior.x = Mean()

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ot.z.PlusArgs[0]	LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ft.z.PlusArgs[0]	LSTMoutput[1].dc	LSTMoutput[1].ft.z.PlusArgs[1].matrix
	LSTMoutput[1].ft.z.PlusArgs[1]	LSTMoutput[1].ft.z	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].it.z.PlusArgs[0]	LSTMoutput[1].it.z.PlusArgs[1].matrix	LSTMoutput[1].it.z.PlusArgs[1]
	LSTMoutput[1].it.z	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].bit.ElementTimesArgs[1].z
	LSTMoutput[1].bit.ElementTimesArgs[1]	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot.z.PlusArgs[1].matrix	LSTMoutput[1].ot.z.PlusArgs[1]	LSTMoutput[1].ot.z
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimesArgs[1]	LSTMoutput[1].mt
	LSTMoutput[1].output.TimesArgs[1]	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ot.z.PlusArgs[0]	LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ft.z.PlusArgs[0]	LSTMoutput[2].dc	LSTMoutput[2].ft.z.PlusArgs[1].matrix
	LSTMoutput[2].ft.z.PlusArgs[1]	LSTMoutput[2].ft.z	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].it.z.PlusArgs[0]	LSTMoutput[2].it.z.PlusArgs[1].matrix	LSTMoutput[2].it.z.PlusArgs[1]
	LSTMoutput[2].it.z	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].bit.ElementTimesArgs[1].z
	LSTMoutput[2].bit.ElementTimesArgs[1]	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot.z.PlusArgs[1].matrix	LSTMoutput[2].ot.z.PlusArgs[1]	LSTMoutput[2].ot.z
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimesArgs[1]	LSTMoutput[2].mt
	LSTMoutput[2].output.TimesArgs[1]	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ot.z.PlusArgs[0]	LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ft.z.PlusArgs[0]	LSTMoutput[3].dc	LSTMoutput[3].ft.z.PlusArgs[1].matrix
	LSTMoutput[3].ft.z.PlusArgs[1]	LSTMoutput[3].ft.z	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].it.z.PlusArgs[0]	LSTMoutput[3].it.z.PlusArgs[1].matrix	LSTMoutput[3].it.z.PlusArgs[1]
	LSTMoutput[3].it.z	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].bit.ElementTimesArgs[1].z
	LSTMoutput[3].bit.ElementTimesArgs[1]	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot.z.PlusArgs[1].matrix	LSTMoutput[3].ot.z.PlusArgs[1]	LSTMoutput[3].ot.z
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimesArgs[1]	LSTMoutput[3].mt
	LSTMoutput[3].output.TimesArgs[1]	LSTMoutput[3].output

Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [132 x 256]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0] = Plus (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0] = Plus (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft.z = Plus (LSTMoutput[1].ft.z.PlusArgs[0], LSTMoutput[1].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid (LSTMoutput[1].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes (LSTMoutput[1].ft, LSTMoutput[1].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[0] = Plus (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it.z = Plus (LSTMoutput[1].it.z.PlusArgs[0], LSTMoutput[1].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid (LSTMoutput[1].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes (LSTMoutput[1].it, LSTMoutput[1].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus (LSTMoutput[1].bft, LSTMoutput[1].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot.z = Plus (LSTMoutput[1].ot.z.PlusArgs[0], LSTMoutput[1].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid (LSTMoutput[1].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes (LSTMoutput[1].ot, LSTMoutput[1].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.TimesArgs[1] = ElementTimes (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[1].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times (LSTMoutput[1].Wmr, LSTMoutput[1].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0] = Plus (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0] = Plus (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft.z = Plus (LSTMoutput[2].ft.z.PlusArgs[0], LSTMoutput[2].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid (LSTMoutput[2].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes (LSTMoutput[2].ft, LSTMoutput[2].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[0] = Plus (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it.z = Plus (LSTMoutput[2].it.z.PlusArgs[0], LSTMoutput[2].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid (LSTMoutput[2].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes (LSTMoutput[2].it, LSTMoutput[2].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus (LSTMoutput[2].bft, LSTMoutput[2].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot.z = Plus (LSTMoutput[2].ot.z.PlusArgs[0], LSTMoutput[2].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid (LSTMoutput[2].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes (LSTMoutput[2].ot, LSTMoutput[2].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.TimesArgs[1] = ElementTimes (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[2].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times (LSTMoutput[2].Wmr, LSTMoutput[2].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0] = Plus (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0] = Plus (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft.z = Plus (LSTMoutput[3].ft.z.PlusArgs[0], LSTMoutput[3].ft.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid (LSTMoutput[3].ft.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes (LSTMoutput[3].ft, LSTMoutput[3].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[0] = Plus (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it.z = Plus (LSTMoutput[3].it.z.PlusArgs[0], LSTMoutput[3].it.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid (LSTMoutput[3].it.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes (LSTMoutput[3].it, LSTMoutput[3].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus (LSTMoutput[3].bft, LSTMoutput[3].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ot.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot.z = Plus (LSTMoutput[3].ot.z.PlusArgs[0], LSTMoutput[3].ot.z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid (LSTMoutput[3].ot.z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes (LSTMoutput[3].ot, LSTMoutput[3].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.TimesArgs[1] = ElementTimes (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[3].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times (LSTMoutput[3].Wmr, LSTMoutput[3].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0] = Times (LSTMoutputW.PlusArgs[0].TimesArgs[0], LSTMoutputW.PlusArgs[0].TimesArgs[1]) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> LSTMoutputW = Plus (LSTMoutputW.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> Err = ClassificationError (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.x = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior.x) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (LSTMoutputW, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> LSTMoutput[1].dh = PastValue (LSTMoutput[1].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dh = PastValue (LSTMoutput[2].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dh = PastValue (LSTMoutput[3].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it.z.PlusArgs[1] = DiagTimes (LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it.z.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 18:14:15: Created model with 277 nodes on GPU 0.

05/03/2016 18:14:15: Training criterion node(s):
05/03/2016 18:14:15: 	cr = CrossEntropyWithSoftmax

05/03/2016 18:14:15: Evaluation criterion node(s):

05/03/2016 18:14:15: 	Err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior.x Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x1fdb748: {[B Value[132]] }
0x2b606f8: {[labels Value[132 x *]] }
0x2b63348: {[logPrior.x Value[132]] }
0x2b633e8: {[LSTMoutputW.PlusArgs[0].TimesArgs[0] Value[132 x 256]] }
0x2b66358: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2b66aa8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].dh Value[256 x 1 x *]] }
0x2b69478: {[LSTMoutput[3].Wmr Value[256 x 1024]] }
0x2b6a618: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2b6a7a8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2b6ba98: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2b6e7a8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2b6f7a8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2b713c8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2b717e8: {[LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2b71aa8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2df2c48: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2df3918: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2df3bb8: {[LSTMoutput[2].Wmr Value[256 x 1024]] }
0x2df6068: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2df83d8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2df93c8: {[LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2df9aa8: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2df9cd8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2dfa5b8: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2dfaf88: {[LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2dfd398: {[LSTMoutput[1].Wmr Value[256 x 1024]] }
0x2dfdd18: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2dffa28: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e023e8: {[featNorm.meanVector Value[33 x 1]] }
0x2e02c98: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].dh Value[256 x 1 x *]] }
0x2e03b98: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e03e28: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].dh Value[256 x 1 x *]] }
0x2e06c68: {[featNorm.invStdDevVector Value[33 x 1]] }
0x2e070d8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e07c38: {[features Value[1 x 363 x *]] }
0x2e09f18: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e0c638: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2e0e1e8: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e0f788: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e0f968: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e10b18: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e117e8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2e14618: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e15ac8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e16748: {[LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e17578: {[LSTMoutput[1].dc Value[1024 x 1 x *]] }
0x2e19238: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2e1b858: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e1bb28: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e1c538: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e1e9f8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e1f398: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e1f678: {[LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e21498: {[LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e21f68: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x2e234f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e23a88: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e26018: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e29448: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e2a8c8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e2ae58: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e2d258: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e2dc98: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e2efc8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e31b08: {[LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e334a8: {[LSTMoutput[1].it Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Value[1024 x 1 x *]] }
0x2e33bf8: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e34828: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e36e78: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e37dc8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e39218: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e39b68: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e3a5f8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e3aed8: {[LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e3cd98: {[LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e3ee38: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e41a48: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e45968: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e45dd8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e467b8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x2e46bc8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e47208: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e47378: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e486f8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e4cb88: {[LSTMoutput[2].it Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Value[1024 x 1 x *]] }
0x2e4d018: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e4dac8: {[LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e4f028: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x2e4fd08: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e52d98: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x2e52f58: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e56418: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e56cd8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e56d78: {[LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x2e57be8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x2e58aa8: {[LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Value[1 x 1]] }
0x2e5ac88: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e5d6b8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Value[1 x 1]] }
0x2e6c4a8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x2e6ca48: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6ce58: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6db48: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6df68: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6e148: {[cr Value[1]] }
0x2e6e718: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6eb88: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e6eed8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e709f8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e70d38: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e70f78: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e711b8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e71398: {[Err Value[1]] }
0x2e72968: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e72ba8: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e75be8: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e75e28: {[LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e76068: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e76368: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e77168: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e773a8: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e775e8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e77928: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e77b68: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e77da8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e780e8: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e78328: {[LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e78568: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e78868: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e79668: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e798a8: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e79ae8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e79e28: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e7a068: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e7a2a8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e7a5e8: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e7a828: {[LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x2e7aa68: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e7ad68: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x2e7bbe8: {[logPrior Value[132]] }
0x2e8b9b8: {[realFeatures Value[363 x 1 x *]] }
0x2e8c128: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e8c768: {[feashift Value[33 x 1 x *]] }
0x2e8cd98: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e8efb8: {[featNorm Value[33 x 1 x *]] }
0x2e8f938: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e8fa98: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e8fbf8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e8fd58: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e8feb8: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e90018: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e90178: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e902d8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e90438: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e90738: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x2e91d48: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e91ea8: {[LSTMoutput[1].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e92008: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e92168: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e922c8: {[LSTMoutput[1].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e92428: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e92588: {[LSTMoutput[1].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e926e8: {[LSTMoutput[1].ft.z Value[1024 x 1 x *]] }
0x2e92848: {[LSTMoutput[1].ft Value[1024 x 1 x *]] }
0x2e929a8: {[LSTMoutput[1].bft Value[1024 x 1 x *]] }
0x2e92b08: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e92c68: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e92dc8: {[LSTMoutput[1].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e92f28: {[LSTMoutput[1].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e93088: {[LSTMoutput[1].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e931e8: {[LSTMoutput[1].it.z Value[1024 x 1 x *]] }
0x2e93348: {[LSTMoutput[1].it Value[1024 x 1 x *]] }
0x2e934a8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e95638: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2e95798: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e958f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2e95a58: {[LSTMoutput[1].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e95bb8: {[LSTMoutput[1].bit Value[1024 x 1 x *]] }
0x2e95d18: {[LSTMoutput[1].ct Value[1024 x 1 x *]] }
0x2e95e78: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e95fd8: {[LSTMoutput[1].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e96138: {[LSTMoutput[1].ot.z Value[1024 x 1 x *]] }
0x2e96298: {[LSTMoutput[1].ot Value[1024 x 1 x *]] }
0x2e963f8: {[LSTMoutput[1].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e96558: {[LSTMoutput[1].mt Value[1024 x 1 x *]] }
0x2e96718: {[LSTMoutput[1].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2e968d8: {[LSTMoutput[1].output Value[256 x 1 x *]] }
0x2e96a98: {[LSTMoutput[1].Wmr Gradient[256 x 1024]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e96c58: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e96e18: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e96fd8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e97198: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e97358: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e97518: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e976d8: {[LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e97898: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e97a58: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e97c18: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e97dd8: {[LSTMoutput[1].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e97f98: {[LSTMoutput[1].ot.z Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e98158: {[LSTMoutput[1].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e98318: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e984d8: {[LSTMoutput[1].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e98698: {[LSTMoutput[1].bft Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e98858: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e98a18: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e98bd8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ft.z Value[1024 x 1 x *]] }
0x2e98d98: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].dh Gradient[256 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft Value[1024 x 1 x *]] }
0x2e98f58: {[LSTMoutput[1].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Value[1024 x 1 x *]] }
0x2e99118: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e992d8: {[LSTMoutput[1].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e99498: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e99658: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e99818: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e999d8: {[LSTMoutput[1].ft.z Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z Value[1024 x 1 x *]] }
0x2e99b98: {[LSTMoutput[1].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it Value[1024 x 1 x *]] }
0x2e99d58: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e99f18: {[LSTMoutput[1].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2e9a0d8: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9a298: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2e9a458: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e9a618: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit Value[1024 x 1 x *]] }
0x2e9a7d8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ct Value[1024 x 1 x *]] }
0x2e9a998: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e9ab58: {[LSTMoutput[2].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9ad18: {[LSTMoutput[2].ot.z Value[1024 x 1 x *]] }
0x2e9aed8: {[LSTMoutput[2].ot Value[1024 x 1 x *]] }
0x2e9b098: {[LSTMoutput[2].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e9b258: {[LSTMoutput[2].mt Value[1024 x 1 x *]] }
0x2e9b418: {[LSTMoutput[2].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2e9b5d8: {[LSTMoutput[2].output Value[256 x 1 x *]] }
0x2e9b798: {[LSTMoutput[2].Wmr Gradient[256 x 1024]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e9b958: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9bb18: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e9bcd8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9be98: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9c058: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e9c218: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9c3d8: {[LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2e9c598: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2e9c758: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9c918: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor.x Gradient[1 x 1]] }
0x2e9cad8: {[LSTMoutput[2].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e9cc98: {[LSTMoutput[2].ot.z Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9ce58: {[LSTMoutput[2].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e9d018: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e9d1d8: {[LSTMoutput[2].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9d398: {[LSTMoutput[1].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e9d558: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e9d718: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9d8d8: {[LSTMoutput[1].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ft.z Value[1024 x 1 x *]] }
0x2e9da98: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].dh Gradient[256 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft Value[1024 x 1 x *]] }
0x2e9dc58: {[LSTMoutput[1].dc Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Value[1024 x 1 x *]] }
0x2e9de18: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x2e9dfd8: {[LSTMoutput[2].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9e198: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[0] Value[1024 x 1 x *]] }
0x2e9e358: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e9e518: {[LSTMoutput[1].ot Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9e6d8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft.z Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z Value[1024 x 1 x *]] }
0x2e9e898: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Value[1024 x 1 x *]] }
0x2e9ea58: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x2e9ec18: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x2e9edd8: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9ef98: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x2e9f158: {[LSTMoutput[1].mt Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e9f318: {[LSTMoutput[1].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit Value[1024 x 1 x *]] }
0x2e9f4d8: {[LSTMoutput[1].ct Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ct Value[1024 x 1 x *]] }
0x2e9f698: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x2e9f858: {[LSTMoutput[3].ot.z.PlusArgs[1] Value[1024 x 1 x *]] }
0x2e9fa18: {[LSTMoutput[3].ot.z Value[1024 x 1 x *]] }
0x2e9fbd8: {[LSTMoutput[3].ot Value[1024 x 1 x *]] }
0x2e9fd98: {[LSTMoutput[3].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x2e9ff58: {[LSTMoutput[3].mt Value[1024 x 1 x *]] }
0x2ea0118: {[LSTMoutput[3].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x2ea02d8: {[LSTMoutput[3].output Value[256 x 1 x *]] }
0x2ea0498: {[LSTMoutputW.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].Wmr Gradient[256 x 1024]] }
0x2ea0658: {[LSTMoutputW.PlusArgs[0] Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2ea0818: {[LSTMoutputW Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[0] Gradient[132 x 256]] }
0x2ea1298: {[cr Gradient[1]] }
0x2ea1458: {[LSTMoutputW Gradient[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].output.TimesArgs[1] Gradient[1024 x 1 x *]] }
0x2ea1618: {[LSTMoutputW.PlusArgs[0] Gradient[132 x 1 x *]] [LSTMoutput[3].output Gradient[256 x 1 x *]] }
0x2ea17d8: {[B Gradient[132]] }
0x2ea1998: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2ea1b58: {[LSTMoutput[3].mt Gradient[1024 x 1 x *]] }
0x2ea1d18: {[LSTMoutput[3].ot Gradient[1024 x 1 x *]] }
0x2ea1ed8: {[LSTMoutput[3].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2ea2098: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ct Gradient[1024 x 1 x *]] }
0x2ea2258: {[LSTMoutput[3].ot.z Gradient[1024 x 1 x *]] }
0x2ea2418: {[LSTMoutput[3].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea25d8: {[LSTMoutput[3].ot.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea2b18: {[LSTMoutput[3].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2ea2cd8: {[LSTMoutput[3].ot.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2ea2e98: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2ea3058: {[LSTMoutput[1].ft Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Gradient[1024 x 1 x *]] }
0x2ea3218: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit Gradient[1024 x 1 x *]] }
0x2ea33d8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Gradient[1024 x 1 x *]] }
0x2ea3598: {[LSTMoutput[1].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x2ea3758: {[LSTMoutput[1].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x2ea3918: {[LSTMoutput[2].output Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea3ad8: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea3c98: {[LSTMoutput[2].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea3e58: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x2ea4018: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x2ea41d8: {[LSTMoutput[2].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea4398: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2ea4558: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].dh Gradient[256 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x2ea4718: {[LSTMoutput[1].bit Gradient[1024 x 1 x *]] [LSTMoutput[2].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z Gradient[1024 x 1 x *]] }
0x2ea48d8: {[LSTMoutput[1].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea4a98: {[LSTMoutput[1].it.z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea4c58: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea4e18: {[LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2ea4fd8: {[LSTMoutput[3].it.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2ea5198: {[LSTMoutput[1].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2ea5358: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].it.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2ea5518: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Gradient[1024 x 1 x *]] }
0x2ea56d8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea5898: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea5a58: {[LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2ea5c18: {[LSTMoutput[1].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea5dd8: {[LSTMoutput[2].ot Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2ea5f98: {[LSTMoutput[1].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it.z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft Gradient[1024 x 1 x *]] }
0x2ea6158: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft.z Gradient[1024 x 1 x *]] }
0x2ea6318: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea64d8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].ft.z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea6698: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[1].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x2ea6858: {[LSTMoutput[1].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea6a18: {[LSTMoutput[3].ft.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x2ea6bd8: {[LSTMoutput[1].output Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x2ea6d98: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ft.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x2ea6f58: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x2ea7118: {[LSTMoutput[2].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[2].ot.z.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea72d8: {[LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2ea7498: {[LSTMoutput[2].ot.z.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea7658: {[LSTMoutput[2].mt Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x2ea7818: {[LSTMoutput[2].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea79d8: {[LSTMoutput[2].ot.z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x2ea7b98: {[LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x2ea7d58: {[LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ct Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x2ea7f18: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor.x Gradient[1 x 1]] [LSTMoutput[3].ot.z.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }


05/03/2016 18:14:15: Precomputing --> 3 PreCompute nodes found.

05/03/2016 18:14:15: 	featNorm.meanVector = Mean()
05/03/2016 18:14:15: 	featNorm.invStdDevVector = InvStdDev()
05/03/2016 18:14:15: 	logPrior.x = Mean()
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90157]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90158..180391]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

05/03/2016 18:14:16: Precomputing --> Completed.


05/03/2016 18:14:16: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

05/03/2016 18:14:17: Starting minibatch loop.
05/03/2016 18:14:17:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.80572388 * 6400; Err = 0.90265625 * 6400; time = 0.8506s; samplesPerSecond = 7524.0
05/03/2016 18:14:18:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.59894165 * 6400; Err = 0.85390625 * 6400; time = 0.8274s; samplesPerSecond = 7735.4
05/03/2016 18:14:19:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: cr = 5.52926760 * 5738; Err = 0.88654583 * 5738; time = 0.8763s; samplesPerSecond = 6548.3
05/03/2016 18:14:20:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.56729365 * 1840; Err = 0.88369565 * 1840; time = 0.8359s; samplesPerSecond = 2201.3
05/03/2016 18:14:20: Finished Epoch[ 1 of 4]: [Training] cr = 4.91752653 * 20546; Err = 0.88017132 * 20546; totalSamplesSeen = 20546; learningRatePerSample = 0.00078125001; epochTime=3.73248s
05/03/2016 18:14:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.1'

05/03/2016 18:14:21: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20546) with 1 datapasses

05/03/2016 18:14:21: Starting minibatch loop.
05/03/2016 18:14:22:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.47222748 * 6400; Err = 0.91109375 * 6400; time = 0.7939s; samplesPerSecond = 8061.1
05/03/2016 18:14:22:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.39250214 * 6400; Err = 0.87343750 * 6400; time = 0.8097s; samplesPerSecond = 7903.8
05/03/2016 18:14:23:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.39425597 * 4782; Err = 0.91447093 * 4782; time = 0.8709s; samplesPerSecond = 5491.0
05/03/2016 18:14:24:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41530524 * 2238; Err = 0.93610366 * 2238; time = 0.8460s; samplesPerSecond = 2645.3
05/03/2016 18:14:25:  Epoch[ 2 of 4]-Minibatch[  41-  50, 4.88%]: cr = 4.45681281 * 608; Err = 0.92927632 * 608; time = 0.8145s; samplesPerSecond = 746.5
05/03/2016 18:14:25: Finished Epoch[ 2 of 4]: [Training] cr = 4.42175801 * 20434; Err = 0.90310267 * 20434; totalSamplesSeen = 40980; learningRatePerSample = 0.00078125001; epochTime=4.23111s
05/03/2016 18:14:25: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.2'

05/03/2016 18:14:25: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40980) with 1 datapasses

05/03/2016 18:14:25: Starting minibatch loop.
05/03/2016 18:14:26:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.14042267 * 6400; Err = 0.83671875 * 6400; time = 0.8058s; samplesPerSecond = 7942.1
05/03/2016 18:14:27:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.17684784 * 6400; Err = 0.86468750 * 6400; time = 0.8202s; samplesPerSecond = 7802.6
05/03/2016 18:14:28:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.23903612 * 5330; Err = 0.89530957 * 5330; time = 0.8703s; samplesPerSecond = 6124.3
05/03/2016 18:14:29:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.41369312 * 2390; Err = 0.94016736 * 2390; time = 0.8498s; samplesPerSecond = 2812.6
05/03/2016 18:14:29: Finished Epoch[ 3 of 4]: [Training] cr = 4.20693153 * 20682; Err = 0.87264288 * 20682; totalSamplesSeen = 61662; learningRatePerSample = 0.00078125001; epochTime=3.68612s
05/03/2016 18:14:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.3'

05/03/2016 18:14:30: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61662) with 1 datapasses

05/03/2016 18:14:30: Starting minibatch loop.
05/03/2016 18:14:30:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.06095642 * 6400; Err = 0.85125000 * 6400; time = 0.8018s; samplesPerSecond = 7982.1
05/03/2016 18:14:31:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.12552368 * 6400; Err = 0.87437500 * 6400; time = 0.8216s; samplesPerSecond = 7790.0
05/03/2016 18:14:32:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.13897583 * 5796; Err = 0.87370600 * 5796; time = 0.8683s; samplesPerSecond = 6675.3
05/03/2016 18:14:33:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.05378643 * 1630; Err = 0.89018405 * 1630; time = 0.8308s; samplesPerSecond = 1961.9
05/03/2016 18:14:33: Finished Epoch[ 4 of 4]: [Training] cr = 4.09726114 * 20366; Err = 0.86727880 * 20366; totalSamplesSeen = 82028; learningRatePerSample = 0.00078125001; epochTime=3.82117s
05/03/2016 18:14:34: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180812.240529/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn'
05/03/2016 18:14:34: CNTKCommandTrainEnd: speechTrain

05/03/2016 18:14:34: Action "train" complete.

05/03/2016 18:14:34: __COMPLETED__