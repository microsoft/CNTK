CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
08/16/2016 03:08:29: -------------------------------------------------------------------
08/16/2016 03:08:29: Build info: 

08/16/2016 03:08:29: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:08:29: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:08:29: 		Build type: Release
08/16/2016 03:08:29: 		Build target: GPU
08/16/2016 03:08:29: 		With 1bit-SGD: no
08/16/2016 03:08:29: 		Math lib: mkl
08/16/2016 03:08:29: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:08:29: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:08:29: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:08:29: 		Build Branch: HEAD
08/16/2016 03:08:29: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:08:29: 		Built by svcphil on Philly-Pool3
08/16/2016 03:08:29: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:08:29: -------------------------------------------------------------------
08/16/2016 03:08:30: -------------------------------------------------------------------
08/16/2016 03:08:30: GPU info:

08/16/2016 03:08:30: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/16/2016 03:08:30: -------------------------------------------------------------------

08/16/2016 03:08:30: Running on cntk-muc01 at 2016/08/16 03:08:30
08/16/2016 03:08:30: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true



08/16/2016 03:08:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:08:30: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:08:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:08:30: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:08:30: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:08:30: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:08:30: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
08/16/2016 03:08:30: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:08:30: Commands: speechTrain
08/16/2016 03:08:30: Precision = "float"
08/16/2016 03:08:30: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
08/16/2016 03:08:30: CNTKCommandTrainInfo: speechTrain : 3
08/16/2016 03:08:30: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 03:08:30: ##############################################################################
08/16/2016 03:08:30: #                                                                            #
08/16/2016 03:08:30: # Action "train"                                                             #
08/16/2016 03:08:30: #                                                                            #
08/16/2016 03:08:30: ##############################################################################

08/16/2016 03:08:30: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:08:30: Creating virgin network.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- 0.000000.
Node 'W0' (LearnableParameter operation): Initializing Parameter[512 x 363] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B0' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[512 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'B1' (LearnableParameter operation): Initializing Parameter[512 x 1] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[132 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
Node 'B2' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:08:30: Created model with 25 nodes on GPU 0.

08/16/2016 03:08:30: Training criterion node(s):
08/16/2016 03:08:30: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 03:08:30: Evaluation criterion node(s):
08/16/2016 03:08:30: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 19 are shared as 8, and 21 are not shared.

	{ H1 : [512 x 1 x *]
	  W0*features : [512 x *] (gradient) }
	{ W0*features+B0 : [512 x 1 x *] (gradient)
	  W1*H1 : [512 x 1 x *] }
	{ W0 : [512 x 363] (gradient)
	  W0*features+B0 : [512 x 1 x *] }
	{ B0 : [512 x 1] (gradient)
	  H1 : [512 x 1 x *] (gradient)
	  W1*H1+B1 : [512 x 1 x *] (gradient)
	  W2*H1 : [132 x 1 x *] }
	{ W1 : [512 x 512] (gradient)
	  W1*H1+B1 : [512 x 1 x *] }
	{ B1 : [512 x 1] (gradient)
	  H2 : [512 x 1 x *] (gradient)
	  HLast : [132 x 1 x *] (gradient) }
	{ H2 : [512 x 1 x *]
	  W1*H1 : [512 x 1 x *] (gradient) }
	{ HLast : [132 x 1 x *]
	  W2 : [132 x 512] (gradient) }


08/16/2016 03:08:30: Training 516740 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 03:08:30: 	Node 'B0' (LearnableParameter operation) : [512 x 1]
08/16/2016 03:08:30: 	Node 'B1' (LearnableParameter operation) : [512 x 1]
08/16/2016 03:08:30: 	Node 'B2' (LearnableParameter operation) : [132 x 1]
08/16/2016 03:08:30: 	Node 'W0' (LearnableParameter operation) : [512 x 363]
08/16/2016 03:08:30: 	Node 'W1' (LearnableParameter operation) : [512 x 512]
08/16/2016 03:08:30: 	Node 'W2' (LearnableParameter operation) : [132 x 512]


08/16/2016 03:08:30: Precomputing --> 3 PreCompute nodes found.

08/16/2016 03:08:30: 	MeanOfFeatures = Mean()
08/16/2016 03:08:30: 	InvStdOfFeatures = InvStdDev()
08/16/2016 03:08:30: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 03:08:33: Precomputing --> Completed.


08/16/2016 03:08:33: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/16/2016 03:08:33: Starting minibatch loop.
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.53638611 * 640; EvalClassificationError = 0.92031250 * 640; time = 0.0244s; samplesPerSecond = 26184.4
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.32517776 * 640; EvalClassificationError = 0.92500000 * 640; time = 0.0198s; samplesPerSecond = 32349.4
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 3.98246384 * 640; EvalClassificationError = 0.87187500 * 640; time = 0.0199s; samplesPerSecond = 32126.9
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.73673553 * 640; EvalClassificationError = 0.84531250 * 640; time = 0.0197s; samplesPerSecond = 32429.7
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.84021912 * 640; EvalClassificationError = 0.86406250 * 640; time = 0.0200s; samplesPerSecond = 32017.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.69831390 * 640; EvalClassificationError = 0.86250000 * 640; time = 0.0197s; samplesPerSecond = 32418.2
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.39593201 * 640; EvalClassificationError = 0.77031250 * 640; time = 0.0199s; samplesPerSecond = 32185.1
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.49749756 * 640; EvalClassificationError = 0.82968750 * 640; time = 0.0199s; samplesPerSecond = 32238.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.47295837 * 640; EvalClassificationError = 0.81093750 * 640; time = 0.0198s; samplesPerSecond = 32295.5
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.36483765 * 640; EvalClassificationError = 0.79843750 * 640; time = 0.0202s; samplesPerSecond = 31714.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.46790466 * 640; EvalClassificationError = 0.81718750 * 640; time = 0.0202s; samplesPerSecond = 31725.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.22105103 * 640; EvalClassificationError = 0.75625000 * 640; time = 0.0214s; samplesPerSecond = 29972.4
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.12504578 * 640; EvalClassificationError = 0.75312500 * 640; time = 0.0203s; samplesPerSecond = 31468.2
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 2.99507751 * 640; EvalClassificationError = 0.71875000 * 640; time = 0.0199s; samplesPerSecond = 32149.5
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 2.89601440 * 640; EvalClassificationError = 0.70000000 * 640; time = 0.0198s; samplesPerSecond = 32264.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.04739380 * 640; EvalClassificationError = 0.74218750 * 640; time = 0.0199s; samplesPerSecond = 32164.0
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.75064697 * 640; EvalClassificationError = 0.69375000 * 640; time = 0.0199s; samplesPerSecond = 32147.9
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.65537720 * 640; EvalClassificationError = 0.63750000 * 640; time = 0.0198s; samplesPerSecond = 32339.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.74816895 * 640; EvalClassificationError = 0.69062500 * 640; time = 0.0197s; samplesPerSecond = 32495.6
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.68736572 * 640; EvalClassificationError = 0.68593750 * 640; time = 0.0198s; samplesPerSecond = 32271.1
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.53269653 * 640; EvalClassificationError = 0.64375000 * 640; time = 0.0199s; samplesPerSecond = 32147.9
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.53923340 * 640; EvalClassificationError = 0.63750000 * 640; time = 0.0198s; samplesPerSecond = 32313.4
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.48909302 * 640; EvalClassificationError = 0.64218750 * 640; time = 0.0198s; samplesPerSecond = 32344.5
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.50032959 * 640; EvalClassificationError = 0.65156250 * 640; time = 0.0197s; samplesPerSecond = 32424.8
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.43569946 * 640; EvalClassificationError = 0.63125000 * 640; time = 0.0198s; samplesPerSecond = 32382.1
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.34294434 * 640; EvalClassificationError = 0.61562500 * 640; time = 0.0198s; samplesPerSecond = 32349.4
08/16/2016 03:08:33:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.20427856 * 640; EvalClassificationError = 0.57812500 * 640; time = 0.0198s; samplesPerSecond = 32245.1
08/16/2016 03:08:34:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.46885986 * 640; EvalClassificationError = 0.65468750 * 640; time = 0.0199s; samplesPerSecond = 32118.8
08/16/2016 03:08:34:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.22067261 * 640; EvalClassificationError = 0.58906250 * 640; time = 0.0199s; samplesPerSecond = 32241.8
08/16/2016 03:08:34:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.21785278 * 640; EvalClassificationError = 0.60781250 * 640; time = 0.0198s; samplesPerSecond = 32354.3
08/16/2016 03:08:34:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.20442505 * 640; EvalClassificationError = 0.57812500 * 640; time = 0.0197s; samplesPerSecond = 32469.2
08/16/2016 03:08:34:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.18215332 * 640; EvalClassificationError = 0.58593750 * 640; time = 0.0198s; samplesPerSecond = 32377.2
08/16/2016 03:08:34: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 2.99321270 * 20480; EvalClassificationError = 0.72216797 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=0.643655s
08/16/2016 03:08:34: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.1'

08/16/2016 03:08:34: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

08/16/2016 03:08:34: Starting minibatch loop.
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.08889847 * 2560; EvalClassificationError = 0.56367188 * 2560; time = 0.0330s; samplesPerSecond = 77669.9
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.00776215 * 2560; EvalClassificationError = 0.54218750 * 2560; time = 0.0264s; samplesPerSecond = 96958.7
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.99260178 * 2560; EvalClassificationError = 0.54257813 * 2560; time = 0.0264s; samplesPerSecond = 97046.9
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 1.98459930 * 2560; EvalClassificationError = 0.54648438 * 2560; time = 0.0265s; samplesPerSecond = 96753.5
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.97206421 * 2560; EvalClassificationError = 0.53984375 * 2560; time = 0.0264s; samplesPerSecond = 97091.1
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.91865616 * 2560; EvalClassificationError = 0.52109375 * 2560; time = 0.0265s; samplesPerSecond = 96706.0
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91066666 * 2560; EvalClassificationError = 0.52148438 * 2560; time = 0.0262s; samplesPerSecond = 97624.2
08/16/2016 03:08:34:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.89501343 * 2560; EvalClassificationError = 0.51992187 * 2560; time = 0.0265s; samplesPerSecond = 96603.8
08/16/2016 03:08:34: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.97128277 * 20480; EvalClassificationError = 0.53715820 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.219451s
08/16/2016 03:08:34: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'

08/16/2016 03:08:34: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

08/16/2016 03:08:34: Starting minibatch loop.
08/16/2016 03:08:34:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89820614 * 10240; EvalClassificationError = 0.52470703 * 10240; time = 0.0694s; samplesPerSecond = 147616.4
08/16/2016 03:08:34:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.91958103 * 10240; EvalClassificationError = 0.53974609 * 10240; time = 0.0552s; samplesPerSecond = 185359.5
08/16/2016 03:08:34: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.90889359 * 20480; EvalClassificationError = 0.53222656 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=0.130039s
08/16/2016 03:08:34: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
08/16/2016 03:08:34: CNTKCommandTrainEnd: speechTrain

08/16/2016 03:08:34: Action "train" complete.

08/16/2016 03:08:34: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
08/16/2016 03:08:36: -------------------------------------------------------------------
08/16/2016 03:08:36: Build info: 

08/16/2016 03:08:36: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:08:36: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:08:36: 		Build type: Release
08/16/2016 03:08:36: 		Build target: GPU
08/16/2016 03:08:36: 		With 1bit-SGD: no
08/16/2016 03:08:36: 		Math lib: mkl
08/16/2016 03:08:36: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:08:36: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:08:36: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:08:36: 		Build Branch: HEAD
08/16/2016 03:08:36: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:08:36: 		Built by svcphil on Philly-Pool3
08/16/2016 03:08:36: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:08:36: -------------------------------------------------------------------
08/16/2016 03:08:36: -------------------------------------------------------------------
08/16/2016 03:08:36: GPU info:

08/16/2016 03:08:36: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/16/2016 03:08:36: -------------------------------------------------------------------

08/16/2016 03:08:36: Running on cntk-muc01 at 2016/08/16 03:08:36
08/16/2016 03:08:36: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu  DeviceId=0  timestamping=true  makeMode=true



08/16/2016 03:08:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:08:36: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

08/16/2016 03:08:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:08:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:08:36: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

08/16/2016 03:08:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:08:36: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn"
    deviceId = 0
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = (new ComputationNetwork ([    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        Fit (features, labels, model, loss, metric) = [
z  = model (features)  
ce   = loss   (labels, z, tag='criterion')  
errs = metric (labels, z, tag='evaluation') 
            scaledLogLikelihood = Pass (z - LogPrior (labels), tag='output')
        ]
        M = 363
        H = 512
        J = 132
        model = Sequential (
            FeatureMVNLayer{} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {H, activation=Sigmoid} :
            DenseLayer {J}
        )
features = Input {M} 
        labels   = Input {J}
        fit = Fit (features, labels, model, CrossEntropyWithSoftmax, ClassificationError)
    ].fit))
    BrainScriptNetworkBuilder_plain = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ClassificationError
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [
           B = Parameter(rows, 1, init = 'fixedValue', value = 0)
           W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/)
           z = W*in+B
        ].z
        GBFF(f, in, rows, cols) = f(BFF(in, rows, cols))
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1], layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1], layerSizes[L], layerSizes[L-1])
        outZ = outLayer
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        useMersenneTwisterRand=true
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
08/16/2016 03:08:36: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:08:36: Commands: speechTrain
08/16/2016 03:08:36: Precision = "float"
08/16/2016 03:08:36: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn
08/16/2016 03:08:36: CNTKCommandTrainInfo: speechTrain : 3
08/16/2016 03:08:36: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 03:08:36: ##############################################################################
08/16/2016 03:08:36: #                                                                            #
08/16/2016 03:08:36: # Action "train"                                                             #
08/16/2016 03:08:36: #                                                                            #
08/16/2016 03:08:36: ##############################################################################

08/16/2016 03:08:36: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using GPU 0
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:08:36: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:08:37: Loaded model with 25 nodes on GPU 0.

08/16/2016 03:08:37: Training criterion node(s):
08/16/2016 03:08:37: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 03:08:37: Evaluation criterion node(s):
08/16/2016 03:08:37: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 19 are shared as 8, and 21 are not shared.

	{ B0 : [512 x 1] (gradient)
	  H1 : [512 x 1 x *1] (gradient)
	  W1*H1+B1 : [512 x 1 x *1] (gradient)
	  W2*H1 : [132 x 1 x *1] }
	{ H2 : [512 x 1 x *1]
	  W1*H1 : [512 x 1 x *1] (gradient) }
	{ H1 : [512 x 1 x *1]
	  W0*features : [512 x *1] (gradient) }
	{ W0*features+B0 : [512 x 1 x *1] (gradient)
	  W1*H1 : [512 x 1 x *1] }
	{ HLast : [132 x 1 x *1]
	  W2 : [132 x 512] (gradient) }
	{ W1 : [512 x 512] (gradient)
	  W1*H1+B1 : [512 x 1 x *1] }
	{ B1 : [512 x 1] (gradient)
	  H2 : [512 x 1 x *1] (gradient)
	  HLast : [132 x 1 x *1] (gradient) }
	{ W0 : [512 x 363] (gradient)
	  W0*features+B0 : [512 x 1 x *1] }


08/16/2016 03:08:37: Training 516740 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 03:08:37: 	Node 'B0' (LearnableParameter operation) : [512 x 1]
08/16/2016 03:08:37: 	Node 'B1' (LearnableParameter operation) : [512 x 1]
08/16/2016 03:08:37: 	Node 'B2' (LearnableParameter operation) : [132 x 1]
08/16/2016 03:08:37: 	Node 'W0' (LearnableParameter operation) : [512 x 363]
08/16/2016 03:08:37: 	Node 'W1' (LearnableParameter operation) : [512 x 512]
08/16/2016 03:08:37: 	Node 'W2' (LearnableParameter operation) : [132 x 512]

08/16/2016 03:08:37: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 03:08:37: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 03:08:37: Starting minibatch loop.
08/16/2016 03:08:37:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.89820614 * 10240; EvalClassificationError = 0.52470703 * 10240; time = 0.2717s; samplesPerSecond = 37687.7
08/16/2016 03:08:37:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.91958103 * 10240; EvalClassificationError = 0.53974609 * 10240; time = 0.0547s; samplesPerSecond = 187073.0
08/16/2016 03:08:37: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.90889359 * 20480; EvalClassificationError = 0.53222656 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=0.512024s
08/16/2016 03:08:37: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030157.855216\Speech_QuickE2E@release_gpu/models/cntkSpeech.dnn'
08/16/2016 03:08:37: CNTKCommandTrainEnd: speechTrain

08/16/2016 03:08:37: Action "train" complete.

08/16/2016 03:08:37: __COMPLETED__