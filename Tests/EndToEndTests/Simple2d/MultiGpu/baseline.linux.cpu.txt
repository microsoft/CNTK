CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu DeviceId=-1 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:57
		Last modified date: Mon Aug 15 23:39:17 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
08/16/2016 10:01:26: -------------------------------------------------------------------
08/16/2016 10:01:26: Build info: 

08/16/2016 10:01:26: 		Built time: Aug 16 2016 09:41:57
08/16/2016 10:01:26: 		Last modified date: Mon Aug 15 23:39:17 2016
08/16/2016 10:01:26: 		Build type: release
08/16/2016 10:01:26: 		Build target: GPU
08/16/2016 10:01:26: 		With 1bit-SGD: yes
08/16/2016 10:01:26: 		Math lib: mkl
08/16/2016 10:01:26: 		CUDA_PATH: /usr/local/cuda-7.5
08/16/2016 10:01:26: 		CUB_PATH: /usr/local/cub-1.4.1
08/16/2016 10:01:26: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/16/2016 10:01:26: 		Build Branch: HEAD
08/16/2016 10:01:26: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 10:01:26: 		Built by philly on 643085f7f8c2
08/16/2016 10:01:26: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/16/2016 10:01:26: -------------------------------------------------------------------
08/16/2016 10:01:27: -------------------------------------------------------------------
08/16/2016 10:01:27: GPU info:

08/16/2016 10:01:27: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:01:27: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:01:27: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:01:27: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:01:27: -------------------------------------------------------------------

08/16/2016 10:01:27: Running on localhost at 2016/08/16 10:01:27
08/16/2016 10:01:27: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu  DeviceId=-1  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



08/16/2016 10:01:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:01:27: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/16/2016 10:01:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:01:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:01:27: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/16/2016 10:01:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:01:27: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
configparameters: Multigpu.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=-1
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
08/16/2016 10:01:27: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 10:01:27: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
08/16/2016 10:01:27: Precision = "float"
08/16/2016 10:01:27: CNTKModelPath: /tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
08/16/2016 10:01:27: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
08/16/2016 10:01:27: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 10:01:27: ##############################################################################
08/16/2016 10:01:27: #                                                                            #
08/16/2016 10:01:27: # Action "train"                                                             #
08/16/2016 10:01:27: #                                                                            #
08/16/2016 10:01:27: ##############################################################################

08/16/2016 10:01:27: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using CPU

08/16/2016 10:01:27: Creating virgin network.
Node 'W0' (LearnableParameter operation): Initializing Parameter[50 x 2] <- 0.000000.
Node 'W0' (LearnableParameter operation): Initializing Parameter[50 x 2] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
Node 'B0' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'B0' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[50 x 50] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[50 x 50] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Node 'B1' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'B1' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[2 x 50] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[2 x 50] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Node 'B2' (LearnableParameter operation): Initializing Parameter[2 x 1] <- 0.000000.
Node 'B2' (LearnableParameter operation): Initializing Parameter[2 x 1] <- 0.000000.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 10:01:27: Created model with 25 nodes on CPU.

08/16/2016 10:01:27: Training criterion node(s):
08/16/2016 10:01:27: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 10:01:27: Evaluation criterion node(s):
08/16/2016 10:01:27: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 19 are shared as 8, and 21 are not shared.

	{ W0 : [50 x 2] (gradient)
	  W0*features+B0 : [50 x 1 x *] }
	{ H1 : [50 x 1 x *]
	  W0*features : [50 x *] (gradient) }
	{ W0*features+B0 : [50 x 1 x *] (gradient)
	  W1*H1 : [50 x 1 x *] }
	{ W1 : [50 x 50] (gradient)
	  W1*H1+B1 : [50 x 1 x *] }
	{ H2 : [50 x 1 x *]
	  W1*H1 : [50 x 1 x *] (gradient) }
	{ B0 : [50 x 1] (gradient)
	  H1 : [50 x 1 x *] (gradient)
	  W1*H1+B1 : [50 x 1 x *] (gradient)
	  W2*H1 : [2 x 1 x *] }
	{ HLast : [2 x 1 x *]
	  W2 : [2 x 50] (gradient) }
	{ B1 : [50 x 1] (gradient)
	  H2 : [50 x 1 x *] (gradient)
	  HLast : [2 x 1 x *] (gradient) }


08/16/2016 10:01:27: Training 2802 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 10:01:27: 	Node 'B0' (LearnableParameter operation) : [50 x 1]
08/16/2016 10:01:27: 	Node 'B1' (LearnableParameter operation) : [50 x 1]
08/16/2016 10:01:27: 	Node 'B2' (LearnableParameter operation) : [2 x 1]
08/16/2016 10:01:27: 	Node 'W0' (LearnableParameter operation) : [50 x 2]
08/16/2016 10:01:27: 	Node 'W1' (LearnableParameter operation) : [50 x 50]
08/16/2016 10:01:27: 	Node 'W2' (LearnableParameter operation) : [2 x 50]


08/16/2016 10:01:27: Precomputing --> 3 PreCompute nodes found.

08/16/2016 10:01:27: 	MeanOfFeatures = Mean()
08/16/2016 10:01:27: 	InvStdOfFeatures = InvStdDev()
08/16/2016 10:01:27: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 10:01:27: Precomputing --> Completed.


08/16/2016 10:01:27: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 10:01:27: Starting minibatch loop.
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.69846765 * 250; EvalClassificationError = 0.50400000 * 250; time = 0.0208s; samplesPerSecond = 12032.5
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.76129944 * 250; EvalClassificationError = 0.46400000 * 250; time = 0.0104s; samplesPerSecond = 24029.2
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.72963208 * 250; EvalClassificationError = 0.54400000 * 250; time = 0.0263s; samplesPerSecond = 9510.0
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74041528 * 250; EvalClassificationError = 0.56800000 * 250; time = 0.0289s; samplesPerSecond = 8665.2
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.70611035 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0197s; samplesPerSecond = 12660.8
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.74740723 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0259s; samplesPerSecond = 9634.3
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.75085840 * 250; EvalClassificationError = 0.40400000 * 250; time = 0.0103s; samplesPerSecond = 24163.9
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.78210742 * 250; EvalClassificationError = 0.48400000 * 250; time = 0.0168s; samplesPerSecond = 14848.3
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.70286572 * 250; EvalClassificationError = 0.47200000 * 250; time = 0.0170s; samplesPerSecond = 14742.3
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.69580322 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0292s; samplesPerSecond = 8552.3
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70703613 * 250; EvalClassificationError = 0.52400000 * 250; time = 0.0334s; samplesPerSecond = 7480.3
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74512988 * 250; EvalClassificationError = 0.50800000 * 250; time = 0.0104s; samplesPerSecond = 23941.8
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.70837598 * 250; EvalClassificationError = 0.47600000 * 250; time = 0.0166s; samplesPerSecond = 15043.0
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.69913086 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0166s; samplesPerSecond = 15038.5
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.70321875 * 250; EvalClassificationError = 0.53600000 * 250; time = 0.0206s; samplesPerSecond = 12148.9
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.69290918 * 250; EvalClassificationError = 0.52400000 * 250; time = 0.0260s; samplesPerSecond = 9610.2
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.74415527 * 250; EvalClassificationError = 0.52800000 * 250; time = 0.0107s; samplesPerSecond = 23353.6
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.73745117 * 250; EvalClassificationError = 0.52000000 * 250; time = 0.0166s; samplesPerSecond = 15081.1
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.71849609 * 250; EvalClassificationError = 0.50800000 * 250; time = 0.0168s; samplesPerSecond = 14905.8
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.71476953 * 250; EvalClassificationError = 0.50400000 * 250; time = 0.0136s; samplesPerSecond = 18331.1
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.69918457 * 250; EvalClassificationError = 0.52000000 * 250; time = 0.0290s; samplesPerSecond = 8620.1
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69749512 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0107s; samplesPerSecond = 23454.4
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70658887 * 250; EvalClassificationError = 0.54400000 * 250; time = 0.0104s; samplesPerSecond = 23973.9
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.69760742 * 250; EvalClassificationError = 0.56800000 * 250; time = 0.0199s; samplesPerSecond = 12538.9
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.69499219 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0135s; samplesPerSecond = 18504.8
08/16/2016 10:01:27:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.69291211 * 250; EvalClassificationError = 0.49200000 * 250; time = 0.0293s; samplesPerSecond = 8538.8
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.70718945 * 250; EvalClassificationError = 0.46000000 * 250; time = 0.0305s; samplesPerSecond = 8199.1
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.69039453 * 250; EvalClassificationError = 0.46800000 * 250; time = 0.0169s; samplesPerSecond = 14832.4
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70257422 * 250; EvalClassificationError = 0.52800000 * 250; time = 0.0167s; samplesPerSecond = 14931.6
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.71058984 * 250; EvalClassificationError = 0.42800000 * 250; time = 0.0166s; samplesPerSecond = 15085.7
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.69296875 * 250; EvalClassificationError = 0.45200000 * 250; time = 0.0167s; samplesPerSecond = 14995.2
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.69641211 * 250; EvalClassificationError = 0.51600000 * 250; time = 0.0168s; samplesPerSecond = 14916.5
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69531055 * 250; EvalClassificationError = 0.49200000 * 250; time = 0.0329s; samplesPerSecond = 7601.3
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.69090430 * 250; EvalClassificationError = 0.47600000 * 250; time = 0.0208s; samplesPerSecond = 12036.6
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68339063 * 250; EvalClassificationError = 0.48000000 * 250; time = 0.0168s; samplesPerSecond = 14893.4
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.67383984 * 250; EvalClassificationError = 0.45200000 * 250; time = 0.0330s; samplesPerSecond = 7576.2
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.65904102 * 250; EvalClassificationError = 0.26400000 * 250; time = 0.0104s; samplesPerSecond = 24010.8
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.64259766 * 250; EvalClassificationError = 0.36000000 * 250; time = 0.0135s; samplesPerSecond = 18487.0
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.60433398 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0167s; samplesPerSecond = 15004.2
08/16/2016 10:01:28:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.56497070 * 250; EvalClassificationError = 0.11600000 * 250; time = 0.0136s; samplesPerSecond = 18390.5
08/16/2016 10:01:28: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.70222344 * 10000; EvalClassificationError = 0.46820000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.776535s
08/16/2016 10:01:28: SGD: Saving checkpoint model '/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.1'

08/16/2016 10:01:28: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/16/2016 10:01:28: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 1, numGradientBits = 1).
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.50722371 * 250; EvalClassificationError = 0.14800000 * 250; time = 0.0397s; samplesPerSecond = 6295.5
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.45786101 * 250; EvalClassificationError = 0.12800000 * 250; time = 0.0285s; samplesPerSecond = 8776.9
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.37902995 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0178s; samplesPerSecond = 14020.5
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.34590577 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0176s; samplesPerSecond = 14178.0
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.29942918 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0174s; samplesPerSecond = 14344.7
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.28291648 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0301s; samplesPerSecond = 8297.1
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.25680062 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0530s; samplesPerSecond = 4715.7
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.21806843 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0388s; samplesPerSecond = 6450.9
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.22671616 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0293s; samplesPerSecond = 8533.6
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.20709374 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0177s; samplesPerSecond = 14159.5
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.18895447 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0365s; samplesPerSecond = 6855.7
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.17506560 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0441s; samplesPerSecond = 5669.8
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.18710038 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0252s; samplesPerSecond = 9901.0
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.18230681 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0205s; samplesPerSecond = 12218.4
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.18466931 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0175s; samplesPerSecond = 14290.6
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17889979 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0174s; samplesPerSecond = 14329.9
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.18170165 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0215s; samplesPerSecond = 11627.4
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.21059295 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0206s; samplesPerSecond = 12147.1
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.16428288 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0301s; samplesPerSecond = 8297.9
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17104948 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0500s; samplesPerSecond = 5002.3
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13190985 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0206s; samplesPerSecond = 12160.7
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.17235489 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0174s; samplesPerSecond = 14329.1
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.12426324 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0205s; samplesPerSecond = 12183.2
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.21852627 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0177s; samplesPerSecond = 14104.4
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.21640896 * 250; EvalClassificationError = 0.11200000 * 250; time = 0.0487s; samplesPerSecond = 5133.5
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.17959436 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0157s; samplesPerSecond = 15952.0
08/16/2016 10:01:28:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16189965 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0145s; samplesPerSecond = 17266.4
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13475075 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0175s; samplesPerSecond = 14282.4
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.16423768 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0333s; samplesPerSecond = 7510.0
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.14635259 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0298s; samplesPerSecond = 8393.5
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14974090 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0174s; samplesPerSecond = 14368.6
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.12504713 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0175s; samplesPerSecond = 14289.0
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16433451 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0371s; samplesPerSecond = 6744.0
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14200378 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0221s; samplesPerSecond = 11319.9
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13708748 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0208s; samplesPerSecond = 12010.0
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13991044 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0149s; samplesPerSecond = 16734.7
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.15786864 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0208s; samplesPerSecond = 12029.1
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.16220493 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0155s; samplesPerSecond = 16121.8
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13517917 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0199s; samplesPerSecond = 12571.7
08/16/2016 10:01:29:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15440438 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0217s; samplesPerSecond = 11501.1
08/16/2016 10:01:29: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.20309370 * 10000; EvalClassificationError = 0.08040000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=1.02227s
08/16/2016 10:01:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.2'

08/16/2016 10:01:29: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/16/2016 10:01:29: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 1, numGradientBits = 1).
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18478506 * 250; EvalClassificationError = 0.09600000 * 250; time = 0.0216s; samplesPerSecond = 11585.3
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.12741733 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0184s; samplesPerSecond = 13576.6
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.17535235 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0235s; samplesPerSecond = 10656.9
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.14042800 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0150s; samplesPerSecond = 16696.7
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.16643002 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0247s; samplesPerSecond = 10109.6
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.19327050 * 250; EvalClassificationError = 0.11200000 * 250; time = 0.0389s; samplesPerSecond = 6424.8
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.12260149 * 250; EvalClassificationError = 0.04000000 * 250; time = 0.0292s; samplesPerSecond = 8568.7
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.16504305 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0328s; samplesPerSecond = 7631.0
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.12425912 * 250; EvalClassificationError = 0.04000000 * 250; time = 0.0315s; samplesPerSecond = 7945.3
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.19996755 * 250; EvalClassificationError = 0.10800000 * 250; time = 0.0943s; samplesPerSecond = 2649.9
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14253075 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0703s; samplesPerSecond = 3554.8
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.12335900 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0494s; samplesPerSecond = 5064.0
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16695660 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0353s; samplesPerSecond = 7090.2
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.19907855 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0346s; samplesPerSecond = 7225.4
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.16895044 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0346s; samplesPerSecond = 7233.4
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.13285834 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0376s; samplesPerSecond = 6645.0
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14406293 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0176s; samplesPerSecond = 14231.2
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.20987060 * 250; EvalClassificationError = 0.09600000 * 250; time = 0.0171s; samplesPerSecond = 14639.6
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.19265041 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0389s; samplesPerSecond = 6432.9
08/16/2016 10:01:29:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.15040079 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0277s; samplesPerSecond = 9019.4
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.15551715 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0205s; samplesPerSecond = 12207.0
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13682837 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0212s; samplesPerSecond = 11784.1
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.17235013 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0174s; samplesPerSecond = 14356.3
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.14431340 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0176s; samplesPerSecond = 14196.5
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.13791050 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0184s; samplesPerSecond = 13580.3
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.14160704 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0175s; samplesPerSecond = 14275.1
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16921888 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0172s; samplesPerSecond = 14549.3
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.18580557 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0206s; samplesPerSecond = 12133.6
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.16487179 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0157s; samplesPerSecond = 15918.5
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.15450410 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0204s; samplesPerSecond = 12249.5
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18731137 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0540s; samplesPerSecond = 4628.8
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13205502 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0113s; samplesPerSecond = 22137.6
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.14591704 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0174s; samplesPerSecond = 14338.2
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.13912720 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0175s; samplesPerSecond = 14267.0
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.20110201 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0199s; samplesPerSecond = 12535.1
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.12560399 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0245s; samplesPerSecond = 10196.2
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18609894 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0184s; samplesPerSecond = 13563.4
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15309858 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0174s; samplesPerSecond = 14405.9
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.11872821 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0175s; samplesPerSecond = 14303.7
08/16/2016 10:01:30:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.12948843 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0178s; samplesPerSecond = 14041.0
08/16/2016 10:01:30: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15779327 * 10000; EvalClassificationError = 0.07250000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=1.10281s
08/16/2016 10:01:30: SGD: Saving checkpoint model '/tmp/cntk-test-20160816100054.995555/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn'
08/16/2016 10:01:30: CNTKCommandTrainEnd: Multigpu_Demo_Train

08/16/2016 10:01:30: Action "train" complete.


08/16/2016 10:01:30: ##############################################################################
08/16/2016 10:01:30: #                                                                            #
08/16/2016 10:01:30: # Action "test"                                                              #
08/16/2016 10:01:30: #                                                                            #
08/16/2016 10:01:30: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 2 are shared as 1, and 23 are not shared.

	{ PosteriorProb : [2 x 1 x *1]
	  ScaledLogLikelihood : [2 x 1 x *1] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 0.000192
08/16/2016 10:01:30: Minibatch[1-1]: EvalClassificationError = 0.05140962 * 603; CrossEntropyWithSoftmax = 0.10665885 * 603
08/16/2016 10:01:30: Final Results: Minibatch[1-1]: EvalClassificationError = 0.05140962 * 603; CrossEntropyWithSoftmax = 0.10665885 * 603; perplexity = 1.11255464

08/16/2016 10:01:30: Action "test" complete.

08/16/2016 10:01:30: __COMPLETED__
~MPIWrapper