CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Multigpu.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu DeviceId=0 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 03:09:16
		Last modified date: Fri Aug 12 05:28:23 2016
		Build type: Release
		Build target: GPU
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool1
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
08/16/2016 03:19:52: -------------------------------------------------------------------
08/16/2016 03:19:52: Build info: 

08/16/2016 03:19:52: 		Built time: Aug 16 2016 03:09:16
08/16/2016 03:19:52: 		Last modified date: Fri Aug 12 05:28:23 2016
08/16/2016 03:19:52: 		Build type: Release
08/16/2016 03:19:52: 		Build target: GPU
08/16/2016 03:19:52: 		Math lib: mkl
08/16/2016 03:19:52: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:19:52: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:19:52: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:19:52: 		Build Branch: HEAD
08/16/2016 03:19:52: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:19:52: 		Built by svcphil on Philly-Pool1
08/16/2016 03:19:52: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:19:52: -------------------------------------------------------------------
08/16/2016 03:19:53: -------------------------------------------------------------------
08/16/2016 03:19:53: GPU info:

08/16/2016 03:19:53: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:19:53: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:19:53: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:19:53: -------------------------------------------------------------------

08/16/2016 03:19:53: Running on DPHAIM-25 at 2016/08/16 03:19:53
08/16/2016 03:19:53: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Multigpu.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu  DeviceId=0  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



08/16/2016 03:19:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:19:53: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/16/2016 03:19:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:19:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:19:53: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/16/2016 03:19:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:19:53: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
configparameters: Multigpu.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:deviceId=0
configparameters: Multigpu.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models
configparameters: Multigpu.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ClassificationError"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
08/16/2016 03:19:53: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:19:53: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
08/16/2016 03:19:53: Precision = "float"
08/16/2016 03:19:53: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
08/16/2016 03:19:53: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
08/16/2016 03:19:53: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/16/2016 03:19:53: ##############################################################################
08/16/2016 03:19:53: #                                                                            #
08/16/2016 03:19:53: # Action "train"                                                             #
08/16/2016 03:19:53: #                                                                            #
08/16/2016 03:19:53: ##############################################################################

08/16/2016 03:19:53: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using GPU 0

08/16/2016 03:19:53: Creating virgin network.
Node 'W0' (LearnableParameter operation): Initializing Parameter[50 x 2] <- 0.000000.
Node 'W0' (LearnableParameter operation): Initializing Parameter[50 x 2] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'B0' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'B0' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[50 x 50] <- 0.000000.
Node 'W1' (LearnableParameter operation): Initializing Parameter[50 x 50] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Node 'B1' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'B1' (LearnableParameter operation): Initializing Parameter[50 x 1] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[2 x 50] <- 0.000000.
Node 'W2' (LearnableParameter operation): Initializing Parameter[2 x 50] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Node 'B2' (LearnableParameter operation): Initializing Parameter[2 x 1] <- 0.000000.
Node 'B2' (LearnableParameter operation): Initializing Parameter[2 x 1] <- 0.000000.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:19:54: Created model with 25 nodes on GPU 0.

08/16/2016 03:19:54: Training criterion node(s):
08/16/2016 03:19:54: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/16/2016 03:19:54: Evaluation criterion node(s):
08/16/2016 03:19:54: 	EvalClassificationError = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 40 matrices, 19 are shared as 8, and 21 are not shared.

	{ B1 : [50 x 1] (gradient)
	  H2 : [50 x 1 x *] (gradient)
	  HLast : [2 x 1 x *] (gradient) }
	{ W1 : [50 x 50] (gradient)
	  W1*H1+B1 : [50 x 1 x *] }
	{ B0 : [50 x 1] (gradient)
	  H1 : [50 x 1 x *] (gradient)
	  W1*H1+B1 : [50 x 1 x *] (gradient)
	  W2*H1 : [2 x 1 x *] }
	{ H1 : [50 x 1 x *]
	  W0*features : [50 x *] (gradient) }
	{ H2 : [50 x 1 x *]
	  W1*H1 : [50 x 1 x *] (gradient) }
	{ HLast : [2 x 1 x *]
	  W2 : [2 x 50] (gradient) }
	{ W0 : [50 x 2] (gradient)
	  W0*features+B0 : [50 x 1 x *] }
	{ W0*features+B0 : [50 x 1 x *] (gradient)
	  W1*H1 : [50 x 1 x *] }


08/16/2016 03:19:54: Training 2802 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/16/2016 03:19:54: 	Node 'B0' (LearnableParameter operation) : [50 x 1]
08/16/2016 03:19:54: 	Node 'B1' (LearnableParameter operation) : [50 x 1]
08/16/2016 03:19:54: 	Node 'B2' (LearnableParameter operation) : [2 x 1]
08/16/2016 03:19:54: 	Node 'W0' (LearnableParameter operation) : [50 x 2]
08/16/2016 03:19:54: 	Node 'W1' (LearnableParameter operation) : [50 x 50]
08/16/2016 03:19:54: 	Node 'W2' (LearnableParameter operation) : [2 x 50]


08/16/2016 03:19:54: Precomputing --> 3 PreCompute nodes found.

08/16/2016 03:19:54: 	MeanOfFeatures = Mean()
08/16/2016 03:19:54: 	InvStdOfFeatures = InvStdDev()
08/16/2016 03:19:54: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 03:19:54: Precomputing --> Completed.


08/16/2016 03:19:54: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 03:19:54: Starting minibatch loop.
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.70124231 * 250; EvalClassificationError = 0.52800000 * 250; time = 0.0171s; samplesPerSecond = 14629.3
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.76372424 * 250; EvalClassificationError = 0.46400000 * 250; time = 0.0156s; samplesPerSecond = 15976.5
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.72703027 * 250; EvalClassificationError = 0.54400000 * 250; time = 0.0158s; samplesPerSecond = 15853.9
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.73895923 * 250; EvalClassificationError = 0.56800000 * 250; time = 0.0157s; samplesPerSecond = 15952.0
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.70621924 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0157s; samplesPerSecond = 15907.4
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.74767041 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0158s; samplesPerSecond = 15831.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.75094434 * 250; EvalClassificationError = 0.45200000 * 250; time = 0.0158s; samplesPerSecond = 15822.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.78058936 * 250; EvalClassificationError = 0.48400000 * 250; time = 0.0157s; samplesPerSecond = 15880.1
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.70407129 * 250; EvalClassificationError = 0.50800000 * 250; time = 0.0157s; samplesPerSecond = 15927.6
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.69555762 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0157s; samplesPerSecond = 15926.6
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70626123 * 250; EvalClassificationError = 0.52400000 * 250; time = 0.0158s; samplesPerSecond = 15816.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74540430 * 250; EvalClassificationError = 0.50800000 * 250; time = 0.0157s; samplesPerSecond = 15884.1
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.70824414 * 250; EvalClassificationError = 0.47600000 * 250; time = 0.0158s; samplesPerSecond = 15815.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.69895020 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0157s; samplesPerSecond = 15895.2
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.70353223 * 250; EvalClassificationError = 0.52400000 * 250; time = 0.0157s; samplesPerSecond = 15937.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.69346387 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0158s; samplesPerSecond = 15825.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.74449902 * 250; EvalClassificationError = 0.52800000 * 250; time = 0.0157s; samplesPerSecond = 15903.3
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.73767969 * 250; EvalClassificationError = 0.52000000 * 250; time = 0.0157s; samplesPerSecond = 15895.2
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.71876855 * 250; EvalClassificationError = 0.48400000 * 250; time = 0.0157s; samplesPerSecond = 15889.2
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.71509473 * 250; EvalClassificationError = 0.50400000 * 250; time = 0.0158s; samplesPerSecond = 15836.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.69956152 * 250; EvalClassificationError = 0.52000000 * 250; time = 0.0157s; samplesPerSecond = 15888.1
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69785937 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0157s; samplesPerSecond = 15917.5
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70736035 * 250; EvalClassificationError = 0.54400000 * 250; time = 0.0157s; samplesPerSecond = 15923.6
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.69820508 * 250; EvalClassificationError = 0.56800000 * 250; time = 0.0158s; samplesPerSecond = 15839.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.69537109 * 250; EvalClassificationError = 0.49600000 * 250; time = 0.0156s; samplesPerSecond = 15981.6
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.69347266 * 250; EvalClassificationError = 0.51200000 * 250; time = 0.0162s; samplesPerSecond = 15477.0
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.70801172 * 250; EvalClassificationError = 0.46000000 * 250; time = 0.0157s; samplesPerSecond = 15921.5
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.69131641 * 250; EvalClassificationError = 0.46800000 * 250; time = 0.0158s; samplesPerSecond = 15823.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70370312 * 250; EvalClassificationError = 0.52800000 * 250; time = 0.0157s; samplesPerSecond = 15923.6
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.71200195 * 250; EvalClassificationError = 0.43600000 * 250; time = 0.0157s; samplesPerSecond = 15900.3
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.69506836 * 250; EvalClassificationError = 0.45200000 * 250; time = 0.0158s; samplesPerSecond = 15838.8
08/16/2016 03:19:54:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.69935352 * 250; EvalClassificationError = 0.51600000 * 250; time = 0.0158s; samplesPerSecond = 15830.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69887109 * 250; EvalClassificationError = 0.50000000 * 250; time = 0.0158s; samplesPerSecond = 15833.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.69604492 * 250; EvalClassificationError = 0.49200000 * 250; time = 0.0156s; samplesPerSecond = 15991.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.69011719 * 250; EvalClassificationError = 0.48800000 * 250; time = 0.0158s; samplesPerSecond = 15794.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.68419531 * 250; EvalClassificationError = 0.46000000 * 250; time = 0.0158s; samplesPerSecond = 15850.9
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.67551367 * 250; EvalClassificationError = 0.32400000 * 250; time = 0.0158s; samplesPerSecond = 15859.9
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.67028516 * 250; EvalClassificationError = 0.40000000 * 250; time = 0.0157s; samplesPerSecond = 15940.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.65152734 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0158s; samplesPerSecond = 15841.8
08/16/2016 03:19:55:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.63594727 * 250; EvalClassificationError = 0.22000000 * 250; time = 0.0157s; samplesPerSecond = 15917.5
08/16/2016 03:19:55: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.70729233 * 10000; EvalClassificationError = 0.47740000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.633908s
08/16/2016 03:19:55: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.1'

08/16/2016 03:19:55: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/16/2016 03:19:55: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 1, numGradientBits = 1).
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.61550018 * 250; EvalClassificationError = 0.27600000 * 250; time = 0.0399s; samplesPerSecond = 6268.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.59409242 * 250; EvalClassificationError = 0.28800000 * 250; time = 0.0380s; samplesPerSecond = 6577.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.53884306 * 250; EvalClassificationError = 0.20400000 * 250; time = 0.0379s; samplesPerSecond = 6604.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.52450125 * 250; EvalClassificationError = 0.15200000 * 250; time = 0.0374s; samplesPerSecond = 6683.4
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.49237463 * 250; EvalClassificationError = 0.16400000 * 250; time = 0.0374s; samplesPerSecond = 6678.4
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.44029644 * 250; EvalClassificationError = 0.11200000 * 250; time = 0.0376s; samplesPerSecond = 6645.4
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.40029475 * 250; EvalClassificationError = 0.13200000 * 250; time = 0.0370s; samplesPerSecond = 6763.7
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.34001918 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0378s; samplesPerSecond = 6611.8
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.31615756 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0380s; samplesPerSecond = 6582.1
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.27277486 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0375s; samplesPerSecond = 6672.4
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.24557418 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0375s; samplesPerSecond = 6662.2
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.21023629 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0372s; samplesPerSecond = 6712.5
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.22380673 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0376s; samplesPerSecond = 6640.6
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.20455512 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0375s; samplesPerSecond = 6666.1
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.20168480 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0377s; samplesPerSecond = 6623.4
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.19212741 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0373s; samplesPerSecond = 6699.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.19324124 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0374s; samplesPerSecond = 6679.5
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.21777418 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0372s; samplesPerSecond = 6729.3
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17514209 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0376s; samplesPerSecond = 6644.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17993773 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0376s; samplesPerSecond = 6649.8
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.13968032 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0376s; samplesPerSecond = 6641.3
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.17727753 * 250; EvalClassificationError = 0.09200000 * 250; time = 0.0373s; samplesPerSecond = 6699.0
08/16/2016 03:19:55:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.12898624 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0370s; samplesPerSecond = 6749.8
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.21880105 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0373s; samplesPerSecond = 6708.2
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.21850111 * 250; EvalClassificationError = 0.10800000 * 250; time = 0.0377s; samplesPerSecond = 6622.9
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.18102491 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0377s; samplesPerSecond = 6636.6
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16393427 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0372s; samplesPerSecond = 6714.3
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13832267 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0375s; samplesPerSecond = 6659.7
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.16506280 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0377s; samplesPerSecond = 6634.6
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.14733234 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0376s; samplesPerSecond = 6644.7
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.15041138 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0379s; samplesPerSecond = 6600.5
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.12665836 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0376s; samplesPerSecond = 6641.3
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16643186 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0373s; samplesPerSecond = 6699.5
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14422443 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0360s; samplesPerSecond = 6946.8
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.13888039 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0364s; samplesPerSecond = 6860.0
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.14108686 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0377s; samplesPerSecond = 6629.0
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.15887684 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0375s; samplesPerSecond = 6662.6
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.16247402 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0377s; samplesPerSecond = 6630.8
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13586729 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0377s; samplesPerSecond = 6631.1
08/16/2016 03:19:56:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.15528679 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0376s; samplesPerSecond = 6642.8
08/16/2016 03:19:56: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.24345139 * 10000; EvalClassificationError = 0.09720000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=1.50329s
08/16/2016 03:19:56: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.2'

08/16/2016 03:19:56: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/16/2016 03:19:56: Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 1, numGradientBits = 1).
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18398525 * 250; EvalClassificationError = 0.09600000 * 250; time = 0.0376s; samplesPerSecond = 6641.3
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.12825686 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0376s; samplesPerSecond = 6653.0
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.17547006 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0374s; samplesPerSecond = 6692.7
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.14044644 * 250; EvalClassificationError = 0.05600000 * 250; time = 0.0373s; samplesPerSecond = 6703.9
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.16673170 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0379s; samplesPerSecond = 6591.3
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.19317383 * 250; EvalClassificationError = 0.11200000 * 250; time = 0.0374s; samplesPerSecond = 6678.2
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.12349199 * 250; EvalClassificationError = 0.04000000 * 250; time = 0.0381s; samplesPerSecond = 6555.0
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.16427535 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0373s; samplesPerSecond = 6693.6
08/16/2016 03:19:56:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.12350212 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0376s; samplesPerSecond = 6652.3
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.19958846 * 250; EvalClassificationError = 0.10800000 * 250; time = 0.0377s; samplesPerSecond = 6625.1
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14269741 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0378s; samplesPerSecond = 6615.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.12369058 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0370s; samplesPerSecond = 6755.8
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16638059 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0375s; samplesPerSecond = 6669.5
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.20047975 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0373s; samplesPerSecond = 6704.2
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.16963457 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0371s; samplesPerSecond = 6744.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.13367401 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0372s; samplesPerSecond = 6724.0
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14477143 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0369s; samplesPerSecond = 6775.3
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.21046366 * 250; EvalClassificationError = 0.10000000 * 250; time = 0.0373s; samplesPerSecond = 6702.8
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.19247125 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0374s; samplesPerSecond = 6679.8
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.15027023 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0371s; samplesPerSecond = 6747.5
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.15612870 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0377s; samplesPerSecond = 6635.9
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13684548 * 250; EvalClassificationError = 0.04400000 * 250; time = 0.0373s; samplesPerSecond = 6697.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.17217344 * 250; EvalClassificationError = 0.08800000 * 250; time = 0.0377s; samplesPerSecond = 6638.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.14419519 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0375s; samplesPerSecond = 6666.8
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.13803181 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0375s; samplesPerSecond = 6659.6
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.14209585 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0374s; samplesPerSecond = 6680.2
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16967141 * 250; EvalClassificationError = 0.06800000 * 250; time = 0.0373s; samplesPerSecond = 6710.0
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.18647515 * 250; EvalClassificationError = 0.08400000 * 250; time = 0.0377s; samplesPerSecond = 6630.2
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.16511327 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0363s; samplesPerSecond = 6885.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.15550174 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0376s; samplesPerSecond = 6646.5
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18759246 * 250; EvalClassificationError = 0.09600000 * 250; time = 0.0373s; samplesPerSecond = 6695.4
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13178152 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0376s; samplesPerSecond = 6657.3
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.14624311 * 250; EvalClassificationError = 0.07200000 * 250; time = 0.0372s; samplesPerSecond = 6714.7
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.13930281 * 250; EvalClassificationError = 0.06400000 * 250; time = 0.0374s; samplesPerSecond = 6682.3
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.20110083 * 250; EvalClassificationError = 0.10400000 * 250; time = 0.0377s; samplesPerSecond = 6632.4
08/16/2016 03:19:57:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.12558937 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0369s; samplesPerSecond = 6776.5
08/16/2016 03:19:58:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18612014 * 250; EvalClassificationError = 0.07600000 * 250; time = 0.0376s; samplesPerSecond = 6647.2
08/16/2016 03:19:58:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15336297 * 250; EvalClassificationError = 0.08000000 * 250; time = 0.0374s; samplesPerSecond = 6684.3
08/16/2016 03:19:58:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.11885079 * 250; EvalClassificationError = 0.05200000 * 250; time = 0.0375s; samplesPerSecond = 6668.4
08/16/2016 03:19:58:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.12974982 * 250; EvalClassificationError = 0.06000000 * 250; time = 0.0381s; samplesPerSecond = 6568.7
08/16/2016 03:19:58: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15798453 * 10000; EvalClassificationError = 0.07300000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=1.49905s
08/16/2016 03:19:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn'
08/16/2016 03:19:58: CNTKCommandTrainEnd: Multigpu_Demo_Train

08/16/2016 03:19:58: Action "train" complete.


08/16/2016 03:19:58: ##############################################################################
08/16/2016 03:19:58: #                                                                            #
08/16/2016 03:19:58: # Action "test"                                                              #
08/16/2016 03:19:58: #                                                                            #
08/16/2016 03:19:58: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalClassificationError = ClassificationError()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalClassificationError = ClassificationError (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 2 are shared as 1, and 23 are not shared.

	{ PosteriorProb : [2 x 1 x *1]
	  ScaledLogLikelihood : [2 x 1 x *1] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 5.7e-005
08/16/2016 03:19:58: Minibatch[1-1]: EvalClassificationError = 0.05140962 * 603; CrossEntropyWithSoftmax = 0.10723887 * 603
08/16/2016 03:19:58: Final Results: Minibatch[1-1]: EvalClassificationError = 0.05140962 * 603; CrossEntropyWithSoftmax = 0.10723887 * 603; perplexity = 1.11320013

08/16/2016 03:19:58: Action "test" complete.

08/16/2016 03:19:58: __COMPLETED__
~MPIWrapper
