CPU info:
    CPU Model Name: Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz
    Hardware threads: 8
    Total Memory: 33417320 kB
-------------------------------------------------------------------
+ [[ -z C:\CNTKTestData ]]
+ [[ ! -d C:\CNTKTestData ]]
+ '[' Windows_NT == Windows_NT ']'
++ cygpath -au 'C:\CNTKTestData'
+ TestDataDir=/cygdrive/c/CNTKTestData
+ ImageDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image
+ MnistDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST
+ DataDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST
+ ConfigDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted
+ OutputDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/Output
+ ResnetModelDir=/cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/Classification/ResNet
+ cp /cygdrive/c/CNTKTestData/Image/MNIST/v0/Train-28x28_cntk_text.txt /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST
+ cp /cygdrive/c/CNTKTestData/Image/MNIST/v0/Test-28x28_cntk_text.txt /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST
+ cp /cygdrive/c/CNTKTestData/PreTrainedModels/ResNet/v0/ResNet_18.model /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/Classification/ResNet
+ '[' -d /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/Output ']'
+ '[' -d /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/Output/Models ']'
+ rm -rf /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/Output/Models
+ DeleteModelsAfterTest=0
+ '[' -f /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/01_OneHidden.cntk ']'
+ '[' -f /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/02_OneConv.cntk ']'
+ cntkrun 01_OneHidden.cntk 'stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ configFileName=01_OneHidden.cntk
+ additionalCNTKArgs='stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ '[' Windows_NT == Windows_NT ']'
++ cygpath -aw /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted
+ ConfigDir='C:\repos\cntk\Examples\Image\GettingStarted'
++ cygpath -aw /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu
+ RunDir='C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu'
++ cygpath -aw /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST
+ DataDir='C:\repos\cntk\Examples\Image\DataSets\MNIST'
++ cygpath -aw /cygdrive/c/repos/cntk/Tests/EndToEndTests/../../Examples/Image/DataSets/MNIST/../../GettingStarted/Output
+ OutputDir='C:\repos\cntk\Examples\Image\GettingStarted\Output'
+ CNTKArgs='configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output DeviceId=-1 timestamping=true stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ '[' '' '!=' '' ']'
+ modelsDir=/tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models
+ [[ 1 == 1 ]]
+ '[' -d /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models ']'
+ mkdir -p /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models
+ [[ 0 == 0 ]]
+ run /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
+ cmd=/cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe
+ shift
+ '[' '' == 1 ']'
+ echo === Running /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
=== Running /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output DeviceId=-1 timestamping=true stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]
+ /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
CNTK 2.0.beta3.0+ (zhouwang/evalwrapper-multioutputs ef4251, Nov 17 2016 19:59:53) on zhouwang4 at 2016/11/21 13:50:54

C:\repos\cntk\x64\release_CpuOnly\cntk.exe  configFile=C:\repos\cntk\Examples\Image\GettingStarted/01_OneHidden.cntk  currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST  RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu  DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST  ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted  OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output  DeviceId=-1  timestamping=true  stderr=-  command=trainNetwork  trainNetwork=[SGD=[maxEpochs=1]]
Changed current directory to C:\repos\cntk\Examples\Image\DataSets\MNIST
11/21/2016 13:50:54: Redirecting stderr to file -_trainNetwork.log
11/21/2016 13:50:54: -------------------------------------------------------------------
11/21/2016 13:50:54: Build info: 

11/21/2016 13:50:54: 		Built time: Nov 17 2016 19:59:53
11/21/2016 13:50:54: 		Last modified date: Wed Nov 16 20:54:22 2016
11/21/2016 13:50:54: 		Build type: Release
11/21/2016 13:50:54: 		Build target: CPU-only
11/21/2016 13:50:54: 		With ASGD: yes
11/21/2016 13:50:54: 		Math lib: mkl
11/21/2016 13:50:54: 		Build Branch: zhouwang/evalwrapper-multioutputs
11/21/2016 13:50:54: 		Build SHA1: ef4251e891cbdee7bb9723fb6e340b85671761cb (modified)
11/21/2016 13:50:54: 		Built by zhouwang on zhouwang4
11/21/2016 13:50:54: 		Build Path: C:\repos\cntk\Source\CNTK\
11/21/2016 13:50:55: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 01_OneHidden.cntk:command=trainNetwork
configparameters: 01_OneHidden.cntk:ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted
configparameters: 01_OneHidden.cntk:currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST
configparameters: 01_OneHidden.cntk:dataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST
configparameters: 01_OneHidden.cntk:deviceId=-1
configparameters: 01_OneHidden.cntk:modelPath=C:\repos\cntk\Examples\Image\GettingStarted\Output/Models/01_OneHidden
configparameters: 01_OneHidden.cntk:outputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output
configparameters: 01_OneHidden.cntk:precision=float
configparameters: 01_OneHidden.cntk:rootDir=..
configparameters: 01_OneHidden.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu
configparameters: 01_OneHidden.cntk:stderr=-
configparameters: 01_OneHidden.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "C:\repos\cntk\Examples\Image\DataSets\MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 01_OneHidden.cntk:timestamping=true
configparameters: 01_OneHidden.cntk:traceLevel=1
configparameters: 01_OneHidden.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        model(x) = {
            s1 = x * featScale
            h1 = DenseLayer {200, activation=ReLU} (s1) 
            z = LinearLayer {labelDim} (h1)
        }
        features = Input {imageShape}
        labels = Input {labelDim}
        out = model (features)
        ce   = CrossEntropyWithSoftmax (labels, out.z)
        errs = ClassificationError (labels, out.z)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (out.z)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 10
        learningRatesPerSample = 0.01*5:0.005
        momentumAsTimeConstant = 0
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "C:\repos\cntk\Examples\Image\DataSets\MNIST/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=1]]

11/21/2016 13:50:55: Commands: trainNetwork
11/21/2016 13:50:55: precision = "float"

11/21/2016 13:50:55: ##############################################################################
11/21/2016 13:50:55: #                                                                            #
11/21/2016 13:50:55: # trainNetwork command (train action)                                        #
11/21/2016 13:50:55: #                                                                            #
11/21/2016 13:50:55: ##############################################################################

11/21/2016 13:50:55: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[200 x 0] as glorotUniform later when dimensions are fully known.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	out.z = Plus()

Validating network. 15 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> out.z.W = LearnableParameter() :  -> [10 x 0]
Validating --> out.h1.arrayOfFunctions[0].W = LearnableParameter() :  -> [200 x 0]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> _out.s1 = LearnableParameter() :  -> [1]
Validating --> out.s1 = ElementTimes (features, _out.s1) : [28 x 28 x 1 x *], [1] -> [28 x 28 x 1 x *]
Node 'out.h1.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [200 x 28 x 28 x 1].
Node 'out.h1.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[200 x 28 x 28 x 1] <- glorotUniform(seed=2, init dims=[200 x 784], range=0.078087*1.000000, onCPU=true.
)Validating --> out.h1._.PlusArgs[0] = Times (out.h1.arrayOfFunctions[0].W, out.s1) : [200 x 28 x 28 x 1], [28 x 28 x 1 x *] -> [200 x *]
Validating --> out.h1.arrayOfFunctions[0].b = LearnableParameter() :  -> [200]
Validating --> out.h1._ = Plus (out.h1._.PlusArgs[0], out.h1.arrayOfFunctions[0].b) : [200 x *], [200] -> [200 x *]
Validating --> out.h1 = RectifiedLinear (out.h1._) : [200 x *] -> [200 x *]
Node 'out.z.W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 200].
Node 'out.z.W' (LearnableParameter operation): Initializing Parameter[10 x 200] <- glorotUniform(seed=1, init dims=[10 x 200], range=0.169031*1.000000, onCPU=true.
)Validating --> out.z.PlusArgs[0] = Times (out.z.W, out.h1) : [10 x 200], [200 x *] -> [10 x *]
Validating --> out.z.b = LearnableParameter() :  -> [10]
Validating --> out.z = Plus (out.z.PlusArgs[0], out.z.b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, out.z) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, out.z) : [10 x *], [10 x *] -> [1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

11/21/2016 13:50:55: 
Model has 15 nodes. Using CPU.

11/21/2016 13:50:55: Training criterion:   ce = CrossEntropyWithSoftmax
11/21/2016 13:50:55: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 10 are shared as 5, and 15 are not shared.

	{ out.h1 : [200 x *]
	  out.h1._.PlusArgs[0] : [200 x *] (gradient) }
	{ out.h1._ : [200 x *] (gradient)
	  out.z.PlusArgs[0] : [10 x *] }
	{ out.z : [10 x *] (gradient)
	  out.z.W : [10 x 200] (gradient) }
	{ out.h1 : [200 x *] (gradient)
	  out.h1.arrayOfFunctions[0].b : [200] (gradient) }
	{ out.h1._ : [200 x *]
	  out.h1.arrayOfFunctions[0].W : [200 x 28 x 28 x 1] (gradient) }


11/21/2016 13:50:55: Training 159010 parameters in 4 out of 4 parameter tensors and 10 nodes with gradient:

11/21/2016 13:50:55: 	Node 'out.h1.arrayOfFunctions[0].W' (LearnableParameter operation) : [200 x 28 x 28 x 1]
11/21/2016 13:50:55: 	Node 'out.h1.arrayOfFunctions[0].b' (LearnableParameter operation) : [200]
11/21/2016 13:50:55: 	Node 'out.z.W' (LearnableParameter operation) : [10 x 200]
11/21/2016 13:50:55: 	Node 'out.z.b' (LearnableParameter operation) : [10]

11/21/2016 13:50:55: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

11/21/2016 13:50:55: Starting Epoch 1: learning rate per sample = 0.010000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

11/21/2016 13:50:55: Starting minibatch loop.
11/21/2016 13:50:57:  Epoch[ 1 of 1]-Minibatch[   1- 500, 53.33%]: ce = 0.30943494 * 32000; errs = 9.447% * 32000; time = 1.9108s; samplesPerSecond = 16747.2
11/21/2016 13:50:58: Finished Epoch[ 1 of 1]: [Training] ce = 0.22920353 * 60000; errs = 6.972% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.0099999998; epochTime=2.81517s
11/21/2016 13:50:58: SGD: Saving checkpoint model 'C:\repos\cntk\Examples\Image\GettingStarted\Output/Models/01_OneHidden'

11/21/2016 13:50:58: Action "train" complete.

11/21/2016 13:50:58: __COMPLETED__
+ return 0
+ local ExitCode=0
+ [[ 0 == 1 ]]
+ return 0
+ cntkrun 02_OneConv.cntk 'stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ configFileName=02_OneConv.cntk
+ additionalCNTKArgs='stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ '[' Windows_NT == Windows_NT ']'
++ cygpath -aw 'C:\repos\cntk\Examples\Image\GettingStarted'
+ ConfigDir='C:\repos\cntk\Examples\Image\GettingStarted'
++ cygpath -aw 'C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu'
+ RunDir='C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu'
++ cygpath -aw 'C:\repos\cntk\Examples\Image\DataSets\MNIST'
+ DataDir='C:\repos\cntk\Examples\Image\DataSets\MNIST'
++ cygpath -aw 'C:\repos\cntk\Examples\Image\GettingStarted\Output'
+ OutputDir='C:\repos\cntk\Examples\Image\GettingStarted\Output'
+ CNTKArgs='configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output DeviceId=-1 timestamping=true stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]'
+ '[' '' '!=' '' ']'
+ modelsDir=/tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models
+ [[ 1 == 1 ]]
+ '[' -d /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models ']'
+ rm -rf /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models
+ mkdir -p /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/Models
+ [[ 0 == 0 ]]
+ run /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
+ cmd=/cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe
+ shift
+ '[' '' == 1 ']'
+ echo === Running /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
=== Running /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output DeviceId=-1 timestamping=true stderr=- command=trainNetwork trainNetwork=[SGD=[maxEpochs=1]]
+ /cygdrive/c/repos/cntk/x64/release_CpuOnly/cntk.exe 'configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk' 'currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu' 'DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST' 'ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted' 'OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output' DeviceId=-1 timestamping=true stderr=- command=trainNetwork 'trainNetwork=[SGD=[maxEpochs=1]]'
CNTK 2.0.beta3.0+ (zhouwang/evalwrapper-multioutputs ef4251, Nov 17 2016 19:59:53) on zhouwang4 at 2016/11/21 13:50:58

C:\repos\cntk\x64\release_CpuOnly\cntk.exe  configFile=C:\repos\cntk\Examples\Image\GettingStarted/02_OneConv.cntk  currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST  RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu  DataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST  ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted  OutputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output  DeviceId=-1  timestamping=true  stderr=-  command=trainNetwork  trainNetwork=[SGD=[maxEpochs=1]]
Changed current directory to C:\repos\cntk\Examples\Image\DataSets\MNIST
11/21/2016 13:50:58: Redirecting stderr to file -_trainNetwork.log
11/21/2016 13:50:58: -------------------------------------------------------------------
11/21/2016 13:50:58: Build info: 

11/21/2016 13:50:58: 		Built time: Nov 17 2016 19:59:53
11/21/2016 13:50:58: 		Last modified date: Wed Nov 16 20:54:22 2016
11/21/2016 13:50:58: 		Build type: Release
11/21/2016 13:50:58: 		Build target: CPU-only
11/21/2016 13:50:58: 		With ASGD: yes
11/21/2016 13:50:58: 		Math lib: mkl
11/21/2016 13:50:58: 		Build Branch: zhouwang/evalwrapper-multioutputs
11/21/2016 13:50:58: 		Build SHA1: ef4251e891cbdee7bb9723fb6e340b85671761cb (modified)
11/21/2016 13:50:58: 		Built by zhouwang on zhouwang4
11/21/2016 13:50:58: 		Build Path: C:\repos\cntk\Source\CNTK\
11/21/2016 13:50:58: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 02_OneConv.cntk:command=trainNetwork
configparameters: 02_OneConv.cntk:ConfigDir=C:\repos\cntk\Examples\Image\GettingStarted
configparameters: 02_OneConv.cntk:currentDirectory=C:\repos\cntk\Examples\Image\DataSets\MNIST
configparameters: 02_OneConv.cntk:dataDir=C:\repos\cntk\Examples\Image\DataSets\MNIST
configparameters: 02_OneConv.cntk:deviceId=-1
configparameters: 02_OneConv.cntk:modelPath=C:\repos\cntk\Examples\Image\GettingStarted\Output/Models/02_OneConv
configparameters: 02_OneConv.cntk:outputDir=C:\repos\cntk\Examples\Image\GettingStarted\Output
configparameters: 02_OneConv.cntk:precision=float
configparameters: 02_OneConv.cntk:rootDir=..
configparameters: 02_OneConv.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20161121145053.977226\EvalClientTests_CSEvalClientTest@release_cpu
configparameters: 02_OneConv.cntk:stderr=-
configparameters: 02_OneConv.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "C:\repos\cntk\Examples\Image\DataSets\MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 02_OneConv.cntk:timestamping=true
configparameters: 02_OneConv.cntk:traceLevel=1
configparameters: 02_OneConv.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        model = Sequential (
            Scale {featScale} :
            ConvolutionalLayer {16, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            DenseLayer {64} : ReLU : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels = Input (labelDim)
        ol = model (features)
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 0
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "C:\repos\cntk\Examples\Image\DataSets\MNIST/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=1]]

11/21/2016 13:50:58: Commands: trainNetwork
11/21/2016 13:50:58: precision = "float"

11/21/2016 13:50:58: ##############################################################################
11/21/2016 13:50:58: #                                                                            #
11/21/2016 13:50:58: # trainNetwork command (train action)                                        #
11/21/2016 13:50:58: #                                                                            #
11/21/2016 13:50:58: ##############################################################################

11/21/2016 13:50:58: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[64 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 21 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 0]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> ol.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> ol.x._.x.x._.x = ElementTimes (ol.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=3, init dims=[400 x 25], range=0.118818*1.000000, onCPU=true.
)Validating --> ol.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x._.x.x._.res.x = Plus (ol.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> ol.x._.x.x = RectifiedLinear (ol.x._.x.x._.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> _ol.x._.x = Pooling (ol.x._.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 14 x 14 x 16].
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[64 x 14 x 14 x 16] <- glorotUniform(seed=2, init dims=[64 x 3136], range=0.043301*1.000000, onCPU=true.
)Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _ol.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *] -> [64 x *]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *], [64] -> [64 x *]
Validating --> ol.x = RectifiedLinear (ol.x._.x) : [64 x *] -> [64 x *]
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 64].
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- glorotUniform(seed=1, init dims=[10 x 64], range=0.284747*1.000000, onCPU=true.
)Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, ol.x) : [10 x 64], [64 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *], [10 x *] -> [1]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.

ol.x._.x.x._.c: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_ol.x._.x: using GEMM convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

11/21/2016 13:50:58: 
Model has 21 nodes. Using CPU.

11/21/2016 13:50:58: Training criterion:   ce = CrossEntropyWithSoftmax
11/21/2016 13:50:58: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 37 matrices, 20 are shared as 9, and 17 are not shared.

	{ _ol.x._.x : [14 x 14 x 16 x *] (gradient)
	  ol.PlusArgs[0] : [10 x *]
	  ol.x._.x : [64 x *] (gradient) }
	{ model.arrayOfFunctions[6].W : [10 x 64] (gradient)
	  ol : [10 x *] (gradient) }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64] (gradient)
	  ol.x : [64 x *] (gradient) }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16] (gradient)
	  ol.x._.x : [64 x *] }
	{ ol.x._.x.x : [28 x 28 x 16 x *]
	  ol.x._.x.x._.c : [28 x 28 x 16 x *] (gradient) }
	{ _ol.x._.x : [14 x 14 x 16 x *]
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[1].b : [1 x 1 x 16] (gradient)
	  ol.x._.x.PlusArgs[0] : [64 x *]
	  ol.x._.x.x : [28 x 28 x 16 x *] (gradient) }
	{ ol.x : [64 x *]
	  ol.x._.x.PlusArgs[0] : [64 x *] (gradient) }
	{ model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16] (gradient)
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *] }


11/21/2016 13:50:58: Training 201834 parameters in 6 out of 6 parameter tensors and 16 nodes with gradient:

11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 16]
11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) : [64 x 14 x 14 x 16]
11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].b' (LearnableParameter operation) : [64]
11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) : [10 x 64]
11/21/2016 13:50:58: 	Node 'model.arrayOfFunctions[6].b' (LearnableParameter operation) : [10]

11/21/2016 13:50:58: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

11/21/2016 13:50:58: Starting Epoch 1: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

11/21/2016 13:50:58: Starting minibatch loop.
11/21/2016 13:51:10:  Epoch[ 1 of 1]-Minibatch[   1- 500, 53.33%]: ce = 0.42840219 * 32000; errs = 12.812% * 32000; time = 11.9852s; samplesPerSecond = 2670.0
11/21/2016 13:51:20: Finished Epoch[ 1 of 1]: [Training] ce = 0.29921478 * 60000; errs = 8.887% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=21.5414s
11/21/2016 13:51:20: SGD: Saving checkpoint model 'C:\repos\cntk\Examples\Image\GettingStarted\Output/Models/02_OneConv'

11/21/2016 13:51:20: Action "train" complete.

11/21/2016 13:51:20: __COMPLETED__
+ return 0
+ local ExitCode=0
+ [[ 0 == 1 ]]
+ return 0
+ cd /cygdrive/c/repos/cntk/x64/release_CpuOnly
+ ./CSEvalClientTest.exe
====== EvaluateModelSingleLayer ========
Output layer: out.z
-0.8439026
-0.7191153
3.229217
3.137152
-2.507879
2.206236
-1.625846
-2.128882
3.386673
-1.82515

====== EvaluateModelMultipleLayers ========
--- Output results ---
Output layer: out.h1
0.5434916
0.02476481
0
0
0
0
0
0
0
0
0
0.03591919
0.5279977
0
0
0
0
0.432332
0.8884268
0
0
0
0
1.374698
0.005274922
1.967969
0
0
0
0.2200412
0
0
0
0
0
0
0
0
0
0
0
0
0.4044029
0
0
0
0
0
0
0
0
0
0
0
2.616672
0
0
0
1.786213
0
0
0
0
0
0.3296922
0
1.510122
0
0
0.6982462
0
0
0.01940373
0.1219869
0
0
0
0
0
0
0
0
0
0
0
0
0
0.2306091
0.6465476
0
0.008351812
0
0
0
0
0
0
0
0
0.2418465
0
0
1.199936
0
0
0
0
0
0
0
0.1649539
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0.1445097
0
0
0
0
0
0.6980208
0
0
0.8325255
0
0
0.009732284
0
0
0
0
0
0
0
0
0
0
0
0
0
0.1411052
0
0
0
0
0
0
0
0
0
0
0
0.6307535
0
2.079847
0
0.4202148
0
0
0.7173507
0
0
0
0
0
0
0
0.2288694
0
0
0
0
0
0.5185459
0.4692782
0
0
0.3691321
0.8148292
0
0
0
0
0
1.813008
0
0.0511215
0
0
Output layer: out.z
0.1272945
-1.677788
2.142101
3.7772
-1.507416
1.59498
-2.206467
-1.994169
2.36597
-0.7697294

====== EvaluateExtendedNetworkSingleLayerNoInput ========
Expected values: 2 - 3
Actual Values  : 2 - 3

====== EvaluateMultipleModels ========
The file Test-28x28_cntk_text.txt was processed using 4 concurrent model(s) with an error rate of: 3.59 % (359 error(s) out of 10000 record(s)), and a throughput of 6,971.06 records/sec

====== EvaluateImageInputUsingFeatureVector ========
NDLBuilder Using CPU


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 3 matrices, 0 are shared as 0, and 3 are not shared.


INFO: conv1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further EvaluateImageInputUsingFeatureVector: Outcome = 340

====== EvaluateImageInputUsingImageApi ========
training may be biased; consider re-training instead.
INFO: rn4_3.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_3.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
WARNING: conv1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_3.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_3.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
INFO: conv1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn1_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn2_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn3_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_1.c_proj.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_2.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_2.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_3.c1.c.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
INFO: rn4_3.c2.y.y: loading pre-CuDNNv5 model: approximated mini-batch count of 625625 as 10010000 trained samples.
      Statistics in further training may be biased; consider re-training instead.
WARNING: conv1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn1_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn2_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_1.c1.c.y.y: loading pre-CuDNNv5 model:EvaluateImageInputUsingImageApi: Outcome = 340

====== CompareImageApiResults ========
Both image API calls returned the same output vector.

====== Evaluation Complete ========
 approximately converting variance statistics format
WARNING: rn3_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn3_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_1.c_proj.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_2.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_2.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_3.c1.c.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
WARNING: rn4_3.c2.y.y: loading pre-CuDNNv5 model: approximately converting variance statistics format
+ grep -i 'Inner Exception' /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/output.txt
+ grep -i 'Inner Exception' /tmp/cntk-test-20161121145053.977226/EvalClientTests_CSEvalClientTest@release_cpu/output.txt
+ exit 0