CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../02_BatchNormConv.cntk currentDirectory=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData RunDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu DataDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/.. OutputDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu DeviceId=0 timestamping=true batchNormalizationEngine=cudnn
-------------------------------------------------------------------
Build info: 

		Built time: Aug 23 2016 10:11:42
		Last modified date: Tue Aug 23 04:28:44 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.0
		Build Branch: HEAD
		Build SHA1: 66498cf414f4bbf6392730c2abfbef6a5eeb8f7b
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
08/23/2016 10:53:54: -------------------------------------------------------------------
08/23/2016 10:53:54: Build info: 

08/23/2016 10:53:54: 		Built time: Aug 23 2016 10:11:42
08/23/2016 10:53:54: 		Last modified date: Tue Aug 23 04:28:44 2016
08/23/2016 10:53:54: 		Build type: release
08/23/2016 10:53:54: 		Build target: GPU
08/23/2016 10:53:54: 		With 1bit-SGD: no
08/23/2016 10:53:54: 		Math lib: mkl
08/23/2016 10:53:54: 		CUDA_PATH: /usr/local/cuda-7.5
08/23/2016 10:53:54: 		CUB_PATH: /usr/local/cub-1.4.1
08/23/2016 10:53:54: 		CUDNN_PATH: /usr/local/cudnn-5.0
08/23/2016 10:53:54: 		Build Branch: HEAD
08/23/2016 10:53:54: 		Build SHA1: 66498cf414f4bbf6392730c2abfbef6a5eeb8f7b
08/23/2016 10:53:54: 		Built by philly on f67b30a647de
08/23/2016 10:53:54: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/23/2016 10:53:54: -------------------------------------------------------------------
08/23/2016 10:53:55: -------------------------------------------------------------------
08/23/2016 10:53:55: GPU info:

08/23/2016 10:53:55: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/23/2016 10:53:55: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/23/2016 10:53:55: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/23/2016 10:53:55: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/23/2016 10:53:55: -------------------------------------------------------------------

08/23/2016 10:53:55: Running on localhost at 2016/08/23 10:53:55
08/23/2016 10:53:55: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../02_BatchNormConv.cntk  currentDirectory=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData  RunDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu  DataDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/..  OutputDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu  DeviceId=0  timestamping=true  batchNormalizationEngine=cudnn



08/23/2016 10:53:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/23/2016 10:53:55: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
batchNormalizationEngine = "testMustOverrideBatchNormalizationEngine"
initOnCPUOnly=true
command = Train:Test
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
RunDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
DataDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/..
OutputDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
DeviceId=0
timestamping=true
batchNormalizationEngine=cudnn

08/23/2016 10:53:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/23/2016 10:53:55: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/23/2016 10:53:55: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
batchNormalizationEngine = "testMustOverrideBatchNormalizationEngine"
initOnCPUOnly=true
command = Train:Test
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
RunDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
DataDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/..
OutputDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
DeviceId=0
timestamping=true
batchNormalizationEngine=cudnn

08/23/2016 10:53:55: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/23/2016 10:53:55: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:batchNormalizationEngine=cudnn
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/..
configparameters: 02_BatchNormConv.cntk:currentDirectory=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:DataDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/BatchNormalization/Spatial/CuDNN/../02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 1024
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 2
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

08/23/2016 10:53:55: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/23/2016 10:53:55: Commands: Train Test
08/23/2016 10:53:55: Precision = "float"
08/23/2016 10:53:55: CNTKModelPath: /tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv
08/23/2016 10:53:55: CNTKCommandTrainInfo: Train : 2
08/23/2016 10:53:55: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

08/23/2016 10:53:55: ##############################################################################
08/23/2016 10:53:55: #                                                                            #
08/23/2016 10:53:55: # Action "train"                                                             #
08/23/2016 10:53:55: #                                                                            #
08/23/2016 10:53:55: ##############################################################################

08/23/2016 10:53:55: CNTKCommandTrainBegin: Train

08/23/2016 10:53:55: Creating virgin network.
NDLBuilder Using GPU 0
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node 'b' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'sc' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'm' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'var' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[64 x 15 x 15 x 3] <- 0.000000.
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- 0.000000.
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'b' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'sc' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 1.000000.
Node 'm' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'var' (LearnableParameter operation): Initializing Parameter[3 x 1] <- 0.000000.
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[64 x 15 x 15 x 3] <- gaussian(seed=1, range=0.007698*12.000000, onCPU=false).
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'h1.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- gaussian(seed=2, range=0.025000*1.500000, onCPU=false).
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 22 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 15 x 15 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> sc = LearnableParameter() :  -> [3 x 1]
Validating --> b = LearnableParameter() :  -> [3 x 1]
Validating --> m = LearnableParameter() :  -> [3 x 1]
Validating --> var = LearnableParameter() :  -> [3 x 1]
Validating --> y = BatchNormalization (featScaled, sc, b, m, var) : [32 x 32 x 3 x *], [3 x 1], [3 x 1], [3 x 1], [3 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1 = RectifiedLinear (y) : [32 x 32 x 3 x *] -> [32 x 32 x 3 x *]
Validating --> pool1 = MaxPooling (conv1) : [32 x 32 x 3 x *] -> [15 x 15 x 3 x *]
Validating --> h1.t = Times (h1.W, pool1) : [64 x 15 x 15 x 3], [15 x 15 x 3 x *] -> [64 x *]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *], [64 x 1] -> [64 x 1 x *]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *] -> [64 x 1 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x 1 x *] -> [10 x 1 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *], [10] -> [10 x 1 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 11 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 15 x 15 x 3, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 22 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/23/2016 10:53:55: Created model with 22 nodes on GPU 0.

08/23/2016 10:53:55: Training criterion node(s):
08/23/2016 10:53:55: 	CE = CrossEntropyWithSoftmax

08/23/2016 10:53:55: Evaluation criterion node(s):
08/23/2016 10:53:55: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 37 matrices, 18 are shared as 8, and 19 are not shared.

	{ conv1 : [32 x 32 x 3 x *]
	  sc : [3 x 1] (gradient) }
	{ pool1 : [15 x 15 x 3 x *]
	  y : [32 x 32 x 3 x *] (gradient) }
	{ b : [3 x 1] (gradient)
	  conv1 : [32 x 32 x 3 x *] (gradient)
	  h1.t : [64 x *] }
	{ h1.W : [64 x 15 x 15 x 3] (gradient)
	  h1.z : [64 x 1 x *] }
	{ h1.t : [64 x *] (gradient)
	  h1.y : [64 x 1 x *] }
	{ OutputNodes.t : [10 x 1 x *]
	  h1.z : [64 x 1 x *] (gradient)
	  pool1 : [15 x 15 x 3 x *] (gradient) }
	{ OutputNodes.W : [10 x 64] (gradient)
	  OutputNodes.z : [10 x 1 x *] (gradient) }
	{ h1.b : [64 x 1] (gradient)
	  h1.y : [64 x 1 x *] (gradient) }


08/23/2016 10:53:55: Training 43920 parameters in 6 out of 6 parameter tensors and 15 nodes with gradient:

08/23/2016 10:53:55: 	Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 64]
08/23/2016 10:53:55: 	Node 'OutputNodes.b' (LearnableParameter operation) : [10]
08/23/2016 10:53:55: 	Node 'b' (LearnableParameter operation) : [3 x 1]
08/23/2016 10:53:55: 	Node 'h1.W' (LearnableParameter operation) : [64 x 15 x 15 x 3]
08/23/2016 10:53:55: 	Node 'h1.b' (LearnableParameter operation) : [64 x 1]
08/23/2016 10:53:55: 	Node 'sc' (LearnableParameter operation) : [3 x 1]

08/23/2016 10:53:55: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/23/2016 10:53:55: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: samples [0..1024] (first sequence at sample 0), worker rank 0, total workers 1

08/23/2016 10:53:55: Starting minibatch loop.
08/23/2016 10:53:59: Finished Epoch[ 1 of 2]: [Training] CE = 2.32012272 * 1024; Err = 0.89355469 * 1024; totalSamplesSeen = 1024; learningRatePerSample = 0.00046874999; epochTime=3.602s
08/23/2016 10:53:59: SGD: Saving checkpoint model '/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv.1'

08/23/2016 10:53:59: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 2: samples [1024..2048] (first sequence at sample 1024), worker rank 0, total workers 1

08/23/2016 10:53:59: Starting minibatch loop.
08/23/2016 10:53:59: Finished Epoch[ 2 of 2]: [Training] CE = 2.24044609 * 1024; Err = 0.83984375 * 1024; totalSamplesSeen = 2048; learningRatePerSample = 0.00046874999; epochTime=0.01855s
08/23/2016 10:53:59: SGD: Saving checkpoint model '/tmp/cntk-test-20160823105326.772713/BatchNormalization/Spatial_CuDNN@release_gpu/Models/02_BatchNormConv'
08/23/2016 10:53:59: CNTKCommandTrainEnd: Train

08/23/2016 10:53:59: Action "train" complete.


08/23/2016 10:53:59: ##############################################################################
08/23/2016 10:53:59: #                                                                            #
08/23/2016 10:53:59: # Action "test"                                                              #
08/23/2016 10:53:59: #                                                                            #
08/23/2016 10:53:59: ##############################################################################

INFO: y: initialized samplesSeen from mbCount when loading pre-CuDNNv5 model

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 22 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 15 x 15 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> sc = LearnableParameter() :  -> [3 x 1]
Validating --> b = LearnableParameter() :  -> [3 x 1]
Validating --> m = LearnableParameter() :  -> [3 x 1]
Validating --> var = LearnableParameter() :  -> [3 x 1]
Validating --> y = BatchNormalization (featScaled, sc, b, m, var) : [32 x 32 x 3 x *1], [3 x 1], [3 x 1], [3 x 1], [3 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1 = RectifiedLinear (y) : [32 x 32 x 3 x *1] -> [32 x 32 x 3 x *1]
Validating --> pool1 = MaxPooling (conv1) : [32 x 32 x 3 x *1] -> [15 x 15 x 3 x *1]
Validating --> h1.t = Times (h1.W, pool1) : [64 x 15 x 15 x 3], [15 x 15 x 3 x *1] -> [64 x *1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [64 x *1], [64 x 1] -> [64 x 1 x *1]
Validating --> h1.y = RectifiedLinear (h1.z) : [64 x 1 x *1] -> [64 x 1 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x 1 x *1] -> [10 x 1 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x 1 x *1], [10] -> [10 x 1 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 11 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 15 x 15 x 3, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 22 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 22 matrices, 0 are shared as 0, and 22 are not shared.


BlockRandomizer::StartEpoch: epoch 1: samples [0..10000] (first sequence at sample 0), worker rank 0, total workers 1
08/23/2016 10:54:00: Minibatch[1-500]: Err = 0.80987500 * 8000; CE = 2.19471007 * 8000
08/23/2016 10:54:00: Minibatch[501-625]: Err = 0.82000000 * 2000; CE = 2.21734574 * 2000
08/23/2016 10:54:00: Final Results: Minibatch[1-625]: Err = 0.81190000 * 10000; CE = 2.19923720 * 10000; perplexity = 9.01813187

08/23/2016 10:54:00: Action "test" complete.

08/23/2016 10:54:00: __COMPLETED__