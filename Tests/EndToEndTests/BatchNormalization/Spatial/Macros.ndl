ConvReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue)
[
    W = LearnableParameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = ImageParameter(1, 1, outMap, init = fixedValue, value = bValue, imageLayout = $imageLayout$)
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true, imageLayout = $imageLayout$)
    p = Plus(c, b)
    y = RectifiedLinear(p)
]

ConvLocalReLULayer(inp, outMap, outWCount, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue)
[
    W = LearnableParameter(outWCount, inWCount, init = Gaussian, initValueScale = wScale)
    b = ImageParameter(1, 1, outMap, init = fixedValue, value = bValue, imageLayout = $imageLayout$)
    c = Convolution(W, inp, {kW, kH, inMap}, mapCount = outMap, stride = {hStride, vStride, inMap}, sharing = {false, false, false}, imageLayout = $imageLayout$)
    p = Plus(c, b)
    y = RectifiedLinear(p)
]

ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, bnTimeConst)
[
    b = LearnableParameter(outMap, 1, init = fixedValue, value = bValue)
    sc = LearnableParameter(outMap, 1, init = fixedValue, value = scValue)
    m = LearnableParameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = LearnableParameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true, imageLayout = $imageLayout$)
    y = BatchNormalization(c, sc, b, m, v, spatial = true, normalizationTimeConstant = bnTimeConst, imageLayout = $imageLayout$, engine=cudnn)
]

ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
[
    W = LearnableParameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    c = ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, bnTimeConst)
]

ConvBNReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
[
    c = ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
    y = RectifiedLinear(c)
]

ProjLayer(W, inp, outMap, hStride, vStride, bValue, scValue, bnTimeConst)
[
    b = LearnableParameter(outMap, 1, init = fixedValue, value = bValue)
    sc = LearnableParameter(outMap, 1, init = fixedValue, value = scValue)
    m = LearnableParameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = LearnableParameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    c = Convolution(W, inp, 1, 1, outMap, hStride, vStride, zeroPadding = false, imageLayout = $imageLayout$)
    y = BatchNormalization(c, sc, b, m, v, spatial = true, normalizationTimeConstant = bnTimeConst, imageLayout = $imageLayout$, engine=cudnn)
]

ResNetNode2(inp, outMap, inWCount, kW, kH, wScale, bValue, scValue, bnTimeConst)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, kW, kH, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, outMap, inWCount, kW, kH, 1, 1, wScale, bValue, scValue, bnTimeConst)
    p = Plus(c2, inp)
    y = RectifiedLinear(p)
]

ResNetNode2Inc(inp, outMap, inWCount, wCount, kW, kH, wScale, bValue, scValue, bnTimeConst, Wproj)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, kW, kH, 2, 2, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, outMap, wCount, kW, kH, 1, 1, wScale, bValue, scValue, bnTimeConst)
    
    # Projection convolution layer.
    c_proj = ProjLayer(Wproj, inp, outMap, 2, 2, bValue, scValue, bnTimeConst)
    #c_proj = Convolution(Wproj, inp, 1, 1, outMap, 2, 2, zeroPadding = false, imageLayout = $imageLayout$)
    
    p = Plus(c2, c_proj)
    y = RectifiedLinear(p)
]

ResNetNode2Inc2(inp, inMap, outMap, inWCount, wCount, kW, kH, wScale, w1Scale, bValue, scValue, bnTimeConst)
[
    pool = MaxPooling(inp, 1, 1, 2, 2, imageLayout = $imageLayout$)
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, kW, kH, 2, 2, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, inMap, wCount, kW, kH, 1, 1, w1Scale, bValue, scValue, bnTimeConst)
    c3 = ConvBNLayer(c1, inMap, wCount, kW, kH, 1, 1, w1Scale, bValue, scValue, bnTimeConst)
    
    p = Plus(c2, pool)
    r = RowStack(p, c3)
    y = RectifiedLinear(r)
]

DnnReLULayer(inDim, outDim, x, wScale, bValue)
[
    W = LearnableParameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = LearnableParameter(outDim, 1, init = fixedValue, value = bValue) 
    t = Times(W, x)
    z = Plus(t, b)
    y = RectifiedLinear(z)
]

DNNImageReLULayer(inW, inH, inC, outDim, x, wScale, bValue)
[
    W = ImageParameter(outDim, inW, inH, inC, init = Gaussian,   initValueScale = wScale, imageLayout=$imageLayout$) 
    b = LearnableParameter(outDim, 1,         init = fixedValue, value = bValue) 
    t = Times(W, x)
    z = Plus(t, b)
    y = RectifiedLinear(z)
]

DnnBNReLULayer(inDim, outDim, x, wScale, bValue, scValue, bnTimeConst)
[
    W = LearnableParameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = LearnableParameter(outDim, 1, init = fixedValue, value = bValue) 
    sc = LearnableParameter(outDim, 1, init = fixedValue, value = scValue) 
    m = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, v, spatial = false, normalizationTimeConstant = bnTimeConst, engine=cudnn)
    y = RectifiedLinear(bn)
]

DnnImageBNReLULayer(inW, inH, inC, outDim, x, wScale, bValue, scValue, bnTimeConst)
[
    W = ImageParameter(outDim, inW, inH, inC, init = Gaussian, initValueScale = wScale, imageLayout=$imageLayout$)
    b = LearnableParameter(outDim, 1, init = fixedValue, value = bValue) 
    sc = LearnableParameter(outDim, 1, init = fixedValue, value = scValue) 
    m = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, v, spatial = false, normalizationTimeConstant = bnTimeConst, engine=cudnn)
    y = RectifiedLinear(bn)
]

DnnLastLayer(hiddenDim, labelDim, x, wScale, bValue)
[
    W = LearnableParameter(labelDim, hiddenDim, init = Gaussian, initValueScale = wScale)
    b = LearnableParameter(labelDim, init = fixedValue, value = bValue)
    t = Times(W, x)
    z = Plus(t, b)
]

DnnImageLastLayer(inW, inH, inC, labelDim, x, wScale, bValue)
[
    W = ImageParameter(labelDim, inW, inH, inC, init = Gaussian, initValueScale = wScale, imageLayout=$imageLayout$)
    b = LearnableParameter(labelDim, init = fixedValue, value = bValue)
    t = Times(W, x)
    z = Plus(t, b)
]
