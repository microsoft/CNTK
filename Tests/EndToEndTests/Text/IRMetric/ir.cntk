
WorkingDir = C:\temp
RunDir = $WorkingDir$
ConfigDir = $WorkingDir$

MBSize = 1024
LRate = 0.0001
DeviceId = "auto"
modelPath = $RunDir$/Models/ir.net
MaxEpochs = 5

command = train
precision = float
train = [
    action = "train"
    numMBsToShowResult=500
    deviceId = $DeviceId$
    minibatchSize = $MBSize$
    modelPath = $modelPath$
    traceLevel = 3

    SGD = [
        epochSize=0
        learningRatesPerSample = $LRate$    #run 1 to 2 epochs, check the result and adjust this value
        momentumPerMB = 0.9
        maxEpochs=$MaxEpochs$
        gradientClippingWithTruncation=true
        clippingThresholdPerSample=1e10
    ]

    BrainScriptNetworkBuilder = (new ComputationNetwork [
        CROSSDim = 512:512:256:128:64

        # Dimensions for DeepCrossing layers 
        DeepCrossing = [
            OneLayer(input, inputSize, outputSize, activation) = [
               z = BFF(input, outputSize, inputSize).z
               act = activation(z)
            ].act
            
            OneLayer_NoBias(input, inputSize, outputSize) = [
               z = BFF(input, outputSize, inputSize).z
            ].z   
            
            LSTMLayer(input, inputSize, outputSize, cellSize, selector) = [ 
               lstm = BS.RNNs.RecurrentLSTMP(outputSize, cellDim=cellSize, input, inputDim=inputSize)
               result = selector(lstm.h)
            ].result
            
            OneLayer_Relu(input, inputSize, outputSize) = [
                z = BFF(input, outputSize, inputSize).z
                act = RectifiedLinear(z)
            ].act
            
            OneLayer_Sigmoid(input, inputSize, outputSize) = [
                act = SBFF(input, outputSize, inputSize).Eh
            ].act
            
            # residual layer light
            ResidualUnitLayer(input, inputSize, hiddenSize) = [
                l1 = OneLayer_Relu(input, inputSize, hiddenSize)
                l2 = BFF(l1, inputSize, hiddenSize).z
                act = RectifiedLinear(input + l2)
            ].act
        ]      

        # Feature dimensions
        QueryDim = 49293
        TitleDim = 49293
        NormalizedUrlDim = 49293
        GainDim = 1
        BingCountsDim = 36
        GroupIdDim = 1
        EDim = 56

        # has to be 3*EDim+SDim+DenseDim
        AllDim = 3 * EDim + BingCountsDim

        Query = SparseInput(QueryDim, tag="feature")
        Title = SparseInput(TitleDim, tag="feature")
        NormalizedUrl = SparseInput(NormalizedUrlDim, tag="feature")

        // Setting up non-text inputs
        Gain = Input(GainDim, tag="feature")
        BingCounts = Input(BingCountsDim, tag="feature")
        GroupId = Input(GroupIdDim, tag="feature")

        Q = DeepCrossing.OneLayer_Relu(Query, QueryDim, EDim)
        T = DeepCrossing.OneLayer_Relu(Title, TitleDim, EDim)
        U = DeepCrossing.OneLayer_Relu(NormalizedUrl, NormalizedUrlDim, EDim)

        # Deep Crossing Network
        RS0 = Dropout(Splice(Q : T : U))
        R0 = Splice(RS0 : BingCounts)
        R1 = DeepCrossing.ResidualUnitLayer(R0, AllDim, CROSSDim[0])
        s = DeepCrossing.OneLayer_NoBias(R1, AllDim, GainDim)

        // training criteria
        irm = LambdaRank(Gain, s, GroupId, tag='criterion')   // this is the training objective
        irm1 = NDCG1Eval(Gain, s, GroupId, tag='eval')
        outputNodes = (s)

    ])

    reader = [
    # reader to use
        readerType = "CNTKTextFormatReader"
        randomize=false
        file = $DataDir$/train.tsv
        input = [
            Query = [
                alias = "Query"
                dim = 49293 
                format = "sparse"
            ]
            Title = [
                alias = "Title"
                dim = 49293 
                format = "sparse"
            ]
            NormalizedUrl = [
                alias = "NormalizedUrl"
                dim = 49293 
                format = "sparse"
            ]
            Gain = [
                alias = "Gain"
                dim = 1 
                format = "dense"
            ]
            BingCounts = [
                alias = "BingCounts"
                dim = 36 
                format = "dense"
            ]
            GroupId = [
                alias = "GroupId"
                dim = 1 
                format = "dense"
            ]
        ]
    ]
]
