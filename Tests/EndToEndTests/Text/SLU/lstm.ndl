load=ndlMacroDefine
run=ndlCreateNetwork

ndlMacroDefine=[
    # Macro definitions
    DelayNode(x)
    {
        D=Delay(x, delayInput=Dout, delayTime=1);
    }


    MeanVarNorm(x)=[
	xMean = Mean(x);
    	xStdDev = InvStdDev(x)
    	xNorm=PerDimMeanVarNormalization(x,xMean,xStdDev)
    ]
 
    #inline Rectified Linear Feed Forward
    RFF_R(x1, w1, b1)=RectifiedLinear(Plus(Times(w1,x1),b1))
    #Feed Forward
    FF(X1, W1, B1)
    [
        T=Times(W1,X1);
        P=Plus(T, B1);
    ]
    #Base feed Forward network, defines Bias and wieght parameters
    BFF(in, rows, cols)
    {
        B=Parameter(rows, init="fixedValue", value=0)
        W=Parameter(rows, cols)
        FF = FF(in, w, b)
    }
    #RectifiedLinear Base Feed Forward
    RBFF(in,rowCount,colCount)
    {
        BFF = BFF(in, rowCount, colCount);
        RL = RectifiedLinear(BFF);
    }
    #Rectified Linear Feed Forward
    RFF(X2,W2,B2)=[
        FF = FF(X2, W2, B2);
        RL = RectifiedLinear(FF);
    ]
    #RectifiedLinear Feed Forward with Dropout
    RFFD(X3,W3,B3)
    {
        RFF=RFF(X3, W3, B3)
        DO=Dropout(RFF)
    }
    #Sigmoid Base Feed Forward
    SBFF(in,rowCount,colCount)
     {
        BFF = BFF(in, rowCount, colCount);
        S = Sigmoid(BFF);
    }
    #Sigmoid Feed Forward
    SFF(X2,W2,B2)=[
        FF = FF(X2, W2, B2);
        S = Sigmoid(FF);
    ]
    #Sigmoid Feed Forward with Dropout
    SFFD(X3,W3,B3)
    {
        SFF=SFF(X3, W3, B3)
        DO=Dropout(SFF)
    }
    #Sigmoid Feed Forward with Dropout
    SBFFD(in,rowCount,colCount)
    {
        SBFF=SBFF(in,rowCount,colCount)
        DO=Dropout(SBFF)
    }
    #SoftMax Feed Forward
    SMFF(x,y,z, labels)
    {
        FF = FF(x,y,z);
        SM = CrossEntropyWithSoftmax(labels, FF)
    }
    #SoftMax Base Feed Forward
    SMBFF(x,r,c, labels)
    {
        BFF = BFF(x,r,c);
        SM = CrossEntropyWithSoftmax(labels, BFF)
    }
    
    RFFD_R(x1, w1, b1)={Dropout(RectifiedLinear(Plus(Times(w1,x1),b1)))}

    LogPrior(labels)
    {
	Prior=Mean(labels)
	LogPrior=Log(Prior)
    }   

    #Sigmoid Base Feed Forward with multiple input
    SBFF_multi(in1, in2, rowCount, colCount1, colCount2)
     {
        BFF1 = BFF(in1, rowCount, colCount1);
        BFF2 = BFF(in2, rowCount, colCount2);
        B=Parameter(rowCount, init="fixedValue", value=0.1)
        
        BFF_final = Plus(BFF1, BFF2)
        S = Sigmoid(BFF_final);
    }

     BFF_multi(in1, in2, rowCount, colCount1, colCount2)
     {
        BFF1 = BFF(in1, rowCount, colCount1);
        BFF2 = BFF(in2, rowCount, colCount2);
        B=Parameter(rowCount, init="fixedValue", value=0.1)
        
        BFF_final = Plus(BFF1, BFF2)
    }

    LSTMComponent(inputDim, outputDim, in)
    {
        Wxo = Parameter(outputDim, inputDim, init="uniform", initValueScale=6);
        Wxi = Parameter(outputDim, inputDim, init="uniform", initValueScale=6);
        Wxf = Parameter(outputDim, inputDim, init="uniform", initValueScale=6);
        Wxc = Parameter(outputDim, inputDim, init="uniform", initValueScale=6);

        bo = Parameter(outputDim, 1, init="fixedValue", value=-1.0);
        bc = Parameter(outputDim, 1, init="fixedValue", value=0.0);
        bi = Parameter(outputDim, 1, init="fixedValue", value=-1.0);
        bf = Parameter(outputDim, 1, init="fixedValue", value=-1.0);

        Whi = Parameter(outputDim, outputDim, init="uniform", initValueScale=6);
        Wci = Parameter(outputDim, 1,         init="uniform", initValueScale=6);
        Whf = Parameter(outputDim, outputDim, init="uniform", initValueScale=6);
        Wcf = Parameter(outputDim, 1,         init="uniform", initValueScale=6);
        Who = Parameter(outputDim, outputDim, init="uniform", initValueScale=6);
        Wco = Parameter(outputDim, 1,         init="uniform", initValueScale=6);
        Whc = Parameter(outputDim, outputDim, init="uniform", initValueScale=6);

        delayHI = Delay(outputDim, outputTest, delayTime=1);
        delayHF = Delay(outputDim, outputTest, delayTime=1);
        delayHO = Delay(outputDim, outputTest, delayTime=1);
        delayHC = Delay(outputDim, outputTest, delayTime=1);
        delayCI = Delay(outputDim, ct, delayTime=1);
        delayCF = Delay(outputDim, ct, delayTime=1);
        delayCC = Delay(outputDim, ct, delayTime=1);

        WxiInput = Times(Wxi, in);
        WhidelayHI = Times(Whi, delayHI);
        WcidelayCI = DiagTimes(Wci, delayCI);

        it = Sigmoid (Plus ( Plus (Plus (WxiInput, bi), WhidelayHI), WcidelayCI));

        WxcInput = Times(Wxc, in);
        WhcdelayHC = Times(Whc, delayHC);
        bit = ElementTimes(it, Tanh( Plus(WxcInput, Plus(WhcdelayHC, bc))));
        
        Wxfinput = Times(Wxf, in);
        WhfdelayHF = Times(Whf, delayHF);
        WcfdelayCF = DiagTimes(Wcf, delayCF);

        ft = Sigmoid( Plus (Plus (Plus(Wxfinput, bf), WhfdelayHF), WcfdelayCF));

        bft = ElementTimes(ft, delayCC);

        ct = Plus(bft, bit);

        Wxoinput = Times(Wxo, in);
        WhodelayHO = Times(Who, delayHO);
        Wcoct = DiagTimes(Wco, ct);

        ot = Sigmoid( Plus( Plus( Plus(Wxoinput, bo), WhodelayHO), Wcoct));

        outputTest = ElementTimes(ot, Tanh(ct));
        
        
    }


]


ndlCreateNetwork=[

	#define basic i/o
	featDim=2832
    # should be inputDim * 3
    inputDim=944
    lookupDim=50
    lookupedDim=150
	labelDim=127
	hiddenDim=300

	features=Input(featDim, tag="feature")
	labels=Input(labelDim, tag="label")

	# define network
    Wlookup = Parameter(lookupDim, inputDim, init="uniform", initValueScale=6);
    featLookuped = LookupTable(Wlookup, features, init="uniform", initValueScale=6);
    
    LSTMoutput = LSTMComponent(lookupedDim, hiddenDim, featLookuped, init="uniform", initValueScale=6);
    W1 = Parameter(labelDim, hiddenDim, init="uniform", initValueScale=6);

    LSTMoutputW1 = Times(W1, LSTMoutput, tag="output");

    ce = CrossEntropyWithSoftmax(labels, LSTMoutputW1,tag="criterion");
    err = CrossEntropyWithSoftmax(labels,LSTMoutputW1,tag="evaluation");
    
#    logPrior = LogPrior(labels)	 

#    ScaledLogLikelihood=Minus(LSTMoutputW1,logPrior,tag="output")
    outputs=SoftMax(LSTMoutputW1,tag="output")

]
