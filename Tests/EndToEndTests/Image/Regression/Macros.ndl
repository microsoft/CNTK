ConvReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [
    W = Parameter(outMap, inWCount, init = "gaussian", initValueScale = wScale)
    b = Parameter(outMap, 1, init = "gaussian", initValueScale = bValue, learningRateMultiplier = 1)
	sc = Parameter(outMap, 1, init = "gaussian", initValueScale = 1)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = false, imageLayout = "cudnn")
    bn = BatchNormalization(c, sc, b, m, isd, spatial = true, imageLayout = "cudnn")
    y = RectifiedLinear(bn);
]

DNNImageReLULayer(inW, inH, inC, outDim, x, wScale, bValue) = [
    W = ImageParameter(outDim, inW, inH, inC, init = "gaussian", initValueScale = wScale, imageLayout = "cudnn")
    b = Parameter(outDim, 1, init = "gaussian", initValueScale = bValue, learningRateMultiplier = 1) 
    sc = Parameter(outDim, 1, init = "gaussian", initValueScale = 1)
    m = Parameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, isd, spatial = false)
    y = RectifiedLinear(bn)
]

DNNLastLayer(hiddenDim, labelDim, x, wScale, bValue) = [
    W = Parameter(labelDim, hiddenDim, init = "gaussian", initValueScale = wScale)
    b = Parameter(labelDim, init = "gaussian", initValueScale = bValue, learningRateMultiplier = 1)
    t = Times(W, x)
    out = Plus(t, b)
]