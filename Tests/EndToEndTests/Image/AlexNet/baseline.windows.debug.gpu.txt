Copying test data to local directory
=== Running /cygdrive/c/repo/cntk_github5/cntk/x64/debug/cntk.exe configFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.config currentDirectory=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData RunDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu DataDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData ConfigDir=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet DeviceId=0
-------------------------------------------------------------------
Build info: 

		Built time: Jan 28 2016 13:36:22
		Last modified date: Thu Jan 28 13:25:59 2016
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 31a164602c629d10741761443e6e46b2ab787ad5
		Built by eldak on ELDAK-0           
		Build Path: c:\repo\cntk_github5\CNTK\Source\CNTK\
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jan 28 2016 13:36:22
		Last modified date: Thu Jan 28 13:25:59 2016
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 31a164602c629d10741761443e6e46b2ab787ad5
		Built by eldak on ELDAK-0           
		Build Path: c:\repo\cntk_github5\CNTK\Source\CNTK\
-------------------------------------------------------------------
running on ELDAK-0 at 2016/01/28 14:53:56
command line: 
C:\repo\cntk_github5\cntk\x64\debug\cntk.exe configFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.config currentDirectory=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData RunDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu DataDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData ConfigDir=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet DeviceId=0 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
ModelDir = "$RunDir$/models"
ndlMacros=$ConfigDir$/Macros.ndl
precision=float
deviceId=Auto
command=Train:AddTop5Eval:Test
parallelTrain=false
traceLevel=1
numMBsToShowResult=100
Train=[
    action=train
    modelPath=$ModelDir$/AlexNet
    NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/AlexNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=16
        learningRatesPerMB=0.01*20:0.003*12:0.001*28:0.0003
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0005
        dropoutRate=0*5:0.5
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=1
            ]
        ]
        numMBsToShowResult=100
    ]
    reader=[
        readerType=ImageReader
        file=$ConfigDir$/train_map.txt
        randomize=Auto
        numCPUThreads = 1 
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=$ConfigDir$/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
AddTop5Eval=[    
    action=edit
    CurModel=$ModelDir$/AlexNet
    NewModel=$ModelDir$/AlexNet.Top5
    editPath=$ConfigDir$/add_top5_layer.mel
]
Test=[
    action=test
    modelPath=$ModelDir$/AlexNet.Top5
    minibatchSize=16
     NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/AlexNet.ndl
    ]
    reader=[
        readerType=ImageReader
        numCPUThreads = 1
        file=$ConfigDir$/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=$ConfigDir$/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
currentDirectory=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
RunDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu
DataDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
ConfigDir=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
ModelDir = "F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models"
ndlMacros=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/Macros.ndl
precision=float
deviceId=Auto
command=Train:AddTop5Eval:Test
parallelTrain=false
traceLevel=1
numMBsToShowResult=100
Train=[
    action=train
    modelPath=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet
    NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=16
        learningRatesPerMB=0.01*20:0.003*12:0.001*28:0.0003
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0005
        dropoutRate=0*5:0.5
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=1
            ]
        ]
        numMBsToShowResult=100
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/train_map.txt
        randomize=Auto
        numCPUThreads = 1 
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
AddTop5Eval=[    
    action=edit
    CurModel=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet
    NewModel=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet.Top5
    editPath=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/add_top5_layer.mel
]
Test=[
    action=test
    modelPath=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet.Top5
    minibatchSize=16
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.ndl
    ]
    reader=[
        readerType=ImageReader
        numCPUThreads = 1
        file=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
currentDirectory=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
RunDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu
DataDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
ConfigDir=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: AlexNet.config:AddTop5Eval=[    
    action=edit
    CurModel=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet
    NewModel=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet.Top5
    editPath=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/add_top5_layer.mel
]

configparameters: AlexNet.config:command=Train:AddTop5Eval:Test
configparameters: AlexNet.config:ConfigDir=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet
configparameters: AlexNet.config:currentDirectory=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
configparameters: AlexNet.config:DataDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu\TestData
configparameters: AlexNet.config:deviceId=0
configparameters: AlexNet.config:ModelDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models
configparameters: AlexNet.config:ndlMacros=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/Macros.ndl
configparameters: AlexNet.config:numMBsToShowResult=100
configparameters: AlexNet.config:parallelTrain=false
configparameters: AlexNet.config:precision=float
configparameters: AlexNet.config:RunDir=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu
configparameters: AlexNet.config:Test=[
    action=test
    modelPath=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet.Top5
    minibatchSize=16
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.ndl
    ]
    reader=[
        readerType=ImageReader
        numCPUThreads = 1
        file=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]

configparameters: AlexNet.config:traceLevel=1
configparameters: AlexNet.config:Train=[
    action=train
    modelPath=F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet
    NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/AlexNet.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=16
        learningRatesPerMB=0.01*20:0.003*12:0.001*28:0.0003
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0005
        dropoutRate=0*5:0.5
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=1
            ]
        ]
        numMBsToShowResult=100
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/train_map.txt
        randomize=Auto
        numCPUThreads = 1 
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=C:\repo\cntk_github5\cntk\tests\EndToEndTests\Image\AlexNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: Train AddTop5Eval Test 
precision = float
CNTKModelPath: F:\cygwin64\tmp\cntk-test-20160128155330.820671\Image_AlexNet@debug_gpu/models/AlexNet
CNTKCommandTrainInfo: Train : 3
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	OutputNodes.z = Plus
	Err = ErrorPrediction
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node OutputNodes.z. 45 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z. 28 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

16 out of 45 nodes do not share the minibatch layout with the input data.


Validating for node Err. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node CE. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

SGD using GPU 0.

Training criterion node(s):
	CE = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
No PreCompute nodes found, skipping PreCompute step
Set Max Temp Mem Size For Convolution Nodes to 0 samples.
Starting Epoch 1: learning rate per sample = 0.000625  effective momentum = 0.900000  momentum as time constant = 151.9 samples

Starting minibatch loop.
 Epoch[ 1 of 3]-Minibatch[   1- 100]: SamplesSeen = 1600; TrainLossPerSample =  7.42966797; EvalErr[0]PerSample = 1.00000000; TotalTime = 31.2538s; SamplesPerSecond = 51.2
Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 7.2399459; EvalErrPerSample = 0.99933308; AvgLearningRatePerSample = 0.00062499999; EpochTime=56.2334
Starting Epoch 2: learning rate per sample = 0.000625  effective momentum = 0.900000  momentum as time constant = 151.9 samples

Starting minibatch loop.
 Epoch[ 2 of 3]-Minibatch[   1- 100, 100.00%]: SamplesSeen = 1600; TrainLossPerSample =  6.90161499; EvalErr[0]PerSample = 0.99875000; TotalTime = 28.6861s; SamplesPerSecond = 55.8
Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 6.9208598; EvalErrPerSample = 0.99899966; AvgLearningRatePerSample = 0.00062499999; EpochTime=53.6826
Starting Epoch 3: learning rate per sample = 0.000625  effective momentum = 0.900000  momentum as time constant = 151.9 samples

Starting minibatch loop.
 Epoch[ 3 of 3]-Minibatch[   1- 100, 100.00%]: SamplesSeen = 1600; TrainLossPerSample =  6.87744995; EvalErr[0]PerSample = 0.99812500; TotalTime = 28.9379s; SamplesPerSecond = 55.3
Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 6.8854518; EvalErrPerSample = 0.99799931; AvgLearningRatePerSample = 0.00062499999; EpochTime=53.9703
CNTKCommandTrainEnd: Train
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax
	Err = ErrorPrediction
	OutputNodes.z = Plus
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation


Validating for node CE. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node Err. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 45 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z. 28 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

16 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

4 roots:
	CE = CrossEntropyWithSoftmax
	errTop5 = ErrorPrediction
	Err = ErrorPrediction
	OutputNodes.z = Plus
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for errTop5 ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation


Validating for node CE. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node errTop5. 48 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

Validating for node errTop5. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

Validating for node errTop5, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

18 out of 48 nodes do not share the minibatch layout with the input data.


Validating for node Err. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 45 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z. 28 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

16 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

4 roots:
	Err = ErrorPrediction
	errTop5 = ErrorPrediction
	OutputNodes.z = Plus
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for errTop5 ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node Err. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> Err = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.


Validating for node errTop5. 48 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

Validating for node errTop5. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

Validating for node errTop5, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> unnamed125 = LearnableParameter -> [1 [1 {1}], 1]
Validating --> errTop5 = ErrorPrediction(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0], unnamed125[1, 1]) -> [1 [1 {1}], 1]

18 out of 48 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 45 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z. 28 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]

16 out of 45 nodes do not share the minibatch layout with the input data.


Validating for node CE. 47 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE. 29 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.W = LearnableParameter -> [1000 [1000 {1}], 4096]
Validating --> h2.W = LearnableParameter -> [4096 [4096 {1}], 4096]
Validating --> h1.W = LearnableParameter -> [4096 [4096 {1}], 9216]
Validating --> conv5.W = LearnableParameter -> [256 [256 {1}], 2304]
Validating --> conv4.W = LearnableParameter -> [256 [256 {1}], 3456]
Validating --> conv3.W = LearnableParameter -> [384 [384 {1}], 1728]
Validating --> conv2.W = LearnableParameter -> [192 [192 {1}], 1600]
Validating --> conv1.W = LearnableParameter -> [64 [64 {1}], 363]
Validating --> features = InputValue -> [150528 [224 x 224 x 3 {1,224,50176}], MBSize 0]
Validating --> conv1.c = Convolution(conv1.W[64, 363], features[150528 [224 x 224 x 3 {1,224,50176}] {W=224, H=3, C=224}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.b = LearnableParameter -> [64 [1 x 1 x 64 {1,1,1}], 1]
Validating --> conv1.z = Plus(conv1.c[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0], conv1.b[64 [1 x 1 x 64 {1,1,1}], 1]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> conv1.y = RectifiedLinear(conv1.z[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [200704 [56 x 56 x 64 {1,56,3136}], MBSize 0]
Validating --> pool1 = MaxPooling(conv1.y[200704 [56 x 56 x 64 {1,56,3136}] {W=56, H=64, C=56}, MBSize 0]) -> [46656 [27 x 27 x 64 {1,27,729}], MBSize 0]
Validating --> conv2.c = Convolution(conv2.W[192, 1600], pool1[46656 [27 x 27 x 64 {1,27,729}] {W=27, H=64, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.b = LearnableParameter -> [192 [1 x 1 x 192 {1,1,1}], 1]
Validating --> conv2.z = Plus(conv2.c[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0], conv2.b[192 [1 x 1 x 192 {1,1,1}], 1]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> conv2.y = RectifiedLinear(conv2.z[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [139968 [27 x 27 x 192 {1,27,729}], MBSize 0]
Validating --> pool2 = MaxPooling(conv2.y[139968 [27 x 27 x 192 {1,27,729}] {W=27, H=192, C=27}, MBSize 0]) -> [32448 [13 x 13 x 192 {1,13,169}], MBSize 0]
Validating --> conv3.c = Convolution(conv3.W[384, 1728], pool2[32448 [13 x 13 x 192 {1,13,169}] {W=13, H=192, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.b = LearnableParameter -> [384 [1 x 1 x 384 {1,1,1}], 1]
Validating --> conv3.z = Plus(conv3.c[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0], conv3.b[384 [1 x 1 x 384 {1,1,1}], 1]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv3.y = RectifiedLinear(conv3.z[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [64896 [13 x 13 x 384 {1,13,169}], MBSize 0]
Validating --> conv4.c = Convolution(conv4.W[256, 3456], conv3.y[64896 [13 x 13 x 384 {1,13,169}] {W=13, H=384, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv4.z = Plus(conv4.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv4.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv4.y = RectifiedLinear(conv4.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.c = Convolution(conv5.W[256, 2304], conv4.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.b = LearnableParameter -> [256 [1 x 1 x 256 {1,1,1}], 1]
Validating --> conv5.z = Plus(conv5.c[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0], conv5.b[256 [1 x 1 x 256 {1,1,1}], 1]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> conv5.y = RectifiedLinear(conv5.z[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [43264 [13 x 13 x 256 {1,13,169}], MBSize 0]
Validating --> pool3 = MaxPooling(conv5.y[43264 [13 x 13 x 256 {1,13,169}] {W=13, H=256, C=13}, MBSize 0]) -> [9216 [6 x 6 x 256 {1,6,36}], MBSize 0]
Validating --> h1.t = Times(h1.W[4096, 9216], pool3[9216 [6 x 6 x 256 {1,6,36}] {W=6, H=256, C=6}, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h1.z = Plus(h1.t[4096, MBSize 0], h1.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1.y = RectifiedLinear(h1.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h1_d = Dropout(h1.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.t = Times(h2.W[4096, 4096], h1_d[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.b = LearnableParameter -> [4096 [4096 {1}], 1]
Validating --> h2.z = Plus(h2.t[4096, MBSize 0], h2.b[4096, 1]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2.y = RectifiedLinear(h2.z[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> h2_d = Dropout(h2.y[4096, MBSize 0]) -> [4096 [4096 {1}], MBSize 0]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000, 4096], h2_d[4096, MBSize 0]) -> [1000 [1000 {1}], MBSize 0]
Validating --> OutputNodes.b = LearnableParameter -> [1000 [1000 {1}], 1]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000, MBSize 0], OutputNodes.b[1000, 1]) -> [1000 [1000 {1}], MBSize 0]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000, MBSize 0], OutputNodes.z[1000, MBSize 0]) -> [1 [1 {1}], 1]

17 out of 47 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
CUDA error 11 [c:\tools\cub-1.4.1\cub\device\dispatch/dispatch_radix_sort.cuh, 796]: invalid argument
Minibatch[1-32]: Samples Seen = 500    Err: ErrorPrediction/Sample = 1    errTop5: ErrorPrediction/Sample = 0.992    CE: CrossEntropyWithSoftmax/Sample = 6.9566009    
Final Results: Minibatch[1-32]: Samples Seen = 500    Err: ErrorPrediction/Sample = 1    errTop5: ErrorPrediction/Sample = 0.992    CE: CrossEntropyWithSoftmax/Sample = 6.9566009    Perplexity = 1050.0582    
__COMPLETED__
