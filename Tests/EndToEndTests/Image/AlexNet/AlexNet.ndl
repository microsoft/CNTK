load=ndlMacros
run=DNN

ndlMacros = [
    ImageW = 227
    ImageH = 227
    ImageC = 3
    LabelDim = 1000

    features = ImageInput(ImageW, ImageH, ImageC, tag = feature, imageLayout = "cudnn")
    labels = Input(LabelDim, tag = label)
    
    conv1WScale = 0.95
    conv1BValue = 0
    conv2WScale = 2
    conv2BValue = 1
    conv3WScale = 2.07
    conv3BValue = 0
    conv4WScale = 2.9
    conv4BValue = 1
    conv5WScale = 2.4
    conv5BValue = 1
    fc1WScale = 6.4
    fc1BValue = 1
    fc2WScale = 3.2
    fc2BValue = 1
    fc3WScale = 3.2
    fc3BValue = 1
]

DNN=[
    # conv1
    kW1 = 11
    kH1 = 11
    cMap1 = 64
    hStride1 = 4
    vStride1 = 4
    # weight[cMap1, kW1 * kH1 * ImageC]
    conv1 = ConvReLULayer(features, cMap1, 363, kW1, kH1, hStride1, vStride1, conv1WScale, conv1BValue)
    
    # pool1
    pool1W = 3
    pool1H = 3
    pool1hStride = 2
    pool1vStride = 2
    pool1 = MaxPooling(conv1, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout = "cudnn")

    # conv2
    kW2 = 5
    kH2 = 5
    cMap2 = 192
    hStride2 = 1
    vStride2 = 1
    # weight[cMap2, kW2 * kH2 * cMap1]
    conv2 = ConvReLULayer(pool1, cMap2, 1600, kW2, kH2, hStride2, vStride2, conv2WScale, conv2BValue)

    # pool2
    pool2W = 3
    pool2H = 3
    pool2hStride = 2
    pool2vStride = 2
    pool2 = MaxPooling(conv2, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout = "cudnn")

    # conv3
    kW3 = 3
    kH3 = 3
    cMap3 = 384
    hStride3 = 1
    vStride3 = 1
    # weight[cMap3, kW3 * kH3 * cMap2]
    conv3 = ConvReLULayer(pool2, cMap3, 1728, kW3, kH3, hStride3, vStride3, conv3WScale, conv3BValue)
    
    # conv4
    kW4 = 3
    kH4 = 3
    cMap4 = 256
    hStride4 = 1
    vStride4 = 1
    # weight[cMap4, kW4 * kH4 * cMap3]
    conv4 = ConvReLULayer(conv3, cMap4, 3456, kW4, kH4, hStride4, vStride4, conv4WScale, conv4BValue)

    # conv5
    kW5 = 3
    kH5 = 3
    cMap5 = 256
    hStride5 = 1
    vStride5 = 1
    # weight[cMap5, kW5 * kH5 * cMap4]
    conv5 = ConvReLULayer(conv4, cMap5, 2304, kW5, kH5, hStride5, vStride5, conv5WScale, conv5BValue)
    
    # pool3
    pool3W = 3
    pool3H = 3
    pool3hStride = 2
    pool3vStride = 2
    pool3 = MaxPooling(conv5, pool3W, pool3H, pool3hStride, pool3vStride, imageLayout = "cudnn")

    hiddenDim = 4096
    h1 = DNNImageReLULayer(6, 6, 256, hiddenDim, pool3, fc1WScale, fc1BValue)
    h1_d = Dropout(h1)
    h2 = DNNReLULayer(hiddenDim, hiddenDim, h1_d, fc2WScale, fc2BValue)
    h2_d = Dropout(h2)
    ol = DNNLastLayer(hiddenDim, labelDim, h2_d, fc3WScale, fc3BValue)
    
    ce = CrossEntropyWithSoftmax(labels, ol, tag = "criterion")
    err = ClassificationError(labels, ol, tag = "evaluation")
    OutputNodes = ol
]
