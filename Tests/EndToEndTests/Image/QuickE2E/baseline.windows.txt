CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
08/16/2016 03:05:47: -------------------------------------------------------------------
08/16/2016 03:05:47: Build info: 

08/16/2016 03:05:47: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:05:47: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:05:47: 		Build type: Release
08/16/2016 03:05:47: 		Build target: GPU
08/16/2016 03:05:47: 		With 1bit-SGD: no
08/16/2016 03:05:47: 		Math lib: mkl
08/16/2016 03:05:47: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:05:47: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:05:47: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:05:47: 		Build Branch: HEAD
08/16/2016 03:05:47: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:05:47: 		Built by svcphil on Philly-Pool3
08/16/2016 03:05:47: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:05:47: -------------------------------------------------------------------
08/16/2016 03:05:47: -------------------------------------------------------------------
08/16/2016 03:05:47: GPU info:

08/16/2016 03:05:47: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
08/16/2016 03:05:47: -------------------------------------------------------------------

08/16/2016 03:05:47: Running on cntk-muc00 at 2016/08/16 03:05:47
08/16/2016 03:05:47: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu  DeviceId=0  timestamping=true



08/16/2016 03:05:47: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:05:47: precision = "float"
command = train:test
deviceId = $DeviceId$
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:05:47: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:05:47: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:05:47: precision = "float"
command = train:test
deviceId = 0
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DeviceId=0
timestamping=true

08/16/2016 03:05:47: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:05:47: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

08/16/2016 03:05:47: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:05:47: Commands: train test
08/16/2016 03:05:47: Precision = "float"
08/16/2016 03:05:47: Using 4 CPU threads.
08/16/2016 03:05:47: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn
08/16/2016 03:05:47: CNTKCommandTrainInfo: train : 5
08/16/2016 03:05:47: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

08/16/2016 03:05:47: ##############################################################################
08/16/2016 03:05:47: #                                                                            #
08/16/2016 03:05:47: # Action "train"                                                             #
08/16/2016 03:05:47: #                                                                            #
08/16/2016 03:05:47: ##############################################################################

08/16/2016 03:05:47: CNTKCommandTrainBegin: train
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:05:48: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[16 x 25] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[16 x 25] <- uniform(seed=1, range=0.050000*10.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[32 x 400] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[32 x 400] <- uniform(seed=2, range=0.050000*10.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[128 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- uniform(seed=4, range=0.050000*1.000000, onCPU=true).
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10 x 1] <- uniform(seed=6, range=0.050000*1.000000, onCPU=true).

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()

Validating network. 28 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 0]
Validating --> h1.W = LearnableParameter() :  -> [128 x 0]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.x = Reshape (pool2) : [4 x 4 x 32 x *] -> [512 x *]
Node 'h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [128 x 512].
Node 'h1.W' (LearnableParameter operation): Initializing Parameter[128 x 512] <- uniform(seed=3, range=0.050000*1.000000, onCPU=true).
Validating --> h1.z.PlusArgs[0] = Times (h1.W, h1.x) : [128 x 512], [512 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1 = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Node 'ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 128].
Node 'ol.W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- uniform(seed=5, range=0.050000*1.000000, onCPU=true).
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ClassificationError (labels, ol) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 28 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:05:48: Created model with 28 nodes on GPU 0.

08/16/2016 03:05:48: Training criterion node(s):
08/16/2016 03:05:48: 	ce = CrossEntropyWithSoftmax

08/16/2016 03:05:48: Evaluation criterion node(s):
08/16/2016 03:05:48: 	err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 51 matrices, 32 are shared as 14, and 19 are not shared.

	{ h1.W : [128 x 512] (gradient)
	  h1.z : [128 x *] }
	{ ol : [10 x 1 x *]
	  ol.W : [10 x 128] (gradient) }
	{ h1.z.PlusArgs[0] : [128 x *]
	  pool2 : [4 x 4 x 32 x *] (gradient) }
	{ conv2_act.convPlusB : [8 x 8 x 32 x *] (gradient)
	  pool1 : [12 x 12 x 16 x *] (gradient)
	  pool2 : [4 x 4 x 32 x *] }
	{ conv1_act : [24 x 24 x 16 x *] (gradient)
	  conv1_act.convB : [1 x 1 x 16] (gradient) }
	{ h1 : [128 x *]
	  h1.z.PlusArgs[0] : [128 x *] (gradient) }
	{ conv1_act.convPlusB : [24 x 24 x 16 x *] (gradient)
	  pool1 : [12 x 12 x 16 x *] }
	{ h1.x : [512 x *] (gradient)
	  h1.z : [128 x *] (gradient)
	  ol.out.PlusArgs[0] : [10 x *] }
	{ conv1_act : [24 x 24 x 16 x *]
	  conv1_act.conv : [24 x 24 x 16 x *] (gradient) }
	{ conv2_act : [8 x 8 x 32 x *] (gradient)
	  conv2_act.convB : [1 x 1 x 32] (gradient)
	  h1.x : [512 x *] }
	{ h1 : [128 x *] (gradient)
	  h1.b : [128] (gradient)
	  ol : [10 x 1 x *] (gradient) }
	{ conv2_act.convPlusB : [8 x 8 x 32 x *]
	  conv2_act.convW : [32 x 400] (gradient) }
	{ conv1_act.convPlusB : [24 x 24 x 16 x *]
	  conv1_act.convW : [16 x 25] (gradient) }
	{ conv2_act : [8 x 8 x 32 x *]
	  conv2_act.conv : [8 x 8 x 32 x *] (gradient) }


08/16/2016 03:05:48: Training 80202 parameters in 8 out of 8 parameter tensors and 23 nodes with gradient:

08/16/2016 03:05:48: 	Node 'conv1_act.convB' (LearnableParameter operation) : [1 x 1 x 16]
08/16/2016 03:05:48: 	Node 'conv1_act.convW' (LearnableParameter operation) : [16 x 25]
08/16/2016 03:05:48: 	Node 'conv2_act.convB' (LearnableParameter operation) : [1 x 1 x 32]
08/16/2016 03:05:48: 	Node 'conv2_act.convW' (LearnableParameter operation) : [32 x 400]
08/16/2016 03:05:48: 	Node 'h1.W' (LearnableParameter operation) : [128 x 512]
08/16/2016 03:05:48: 	Node 'h1.b' (LearnableParameter operation) : [128]
08/16/2016 03:05:48: 	Node 'ol.W' (LearnableParameter operation) : [10 x 128]
08/16/2016 03:05:48: 	Node 'ol.b' (LearnableParameter operation) : [10 x 1]

08/16/2016 03:05:48: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 03:05:48: Starting Epoch 1: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..1000] (first sequence at sample 0), data subset 0 of 1

08/16/2016 03:05:48: Starting minibatch loop.
08/16/2016 03:05:48:  Epoch[ 1 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.34058716 * 1000; err = 0.90000000 * 1000; time = 0.2184s; samplesPerSecond = 4577.8
08/16/2016 03:05:48: Finished Epoch[ 1 of 5]: [Training] ce = 2.34058716 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 1000; learningRatePerSample = 2e-006; epochTime=0.219079s
08/16/2016 03:05:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn.1'

08/16/2016 03:05:48: Starting Epoch 2: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [1000..2000] (first sequence at sample 1000), data subset 0 of 1

08/16/2016 03:05:48: Starting minibatch loop.
08/16/2016 03:05:48:  Epoch[ 2 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33913232 * 1000; err = 0.90000000 * 1000; time = 0.0395s; samplesPerSecond = 25289.6
08/16/2016 03:05:48: Finished Epoch[ 2 of 5]: [Training] ce = 2.33913232 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 2000; learningRatePerSample = 2e-006; epochTime=0.039715s
08/16/2016 03:05:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn.2'

08/16/2016 03:05:48: Starting Epoch 3: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [2000..3000] (first sequence at sample 2000), data subset 0 of 1

08/16/2016 03:05:48: Starting minibatch loop.
08/16/2016 03:05:48:  Epoch[ 3 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33706079 * 1000; err = 0.90000000 * 1000; time = 0.0393s; samplesPerSecond = 25429.8
08/16/2016 03:05:48: Finished Epoch[ 3 of 5]: [Training] ce = 2.33706079 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 3000; learningRatePerSample = 2e-006; epochTime=0.039494s
08/16/2016 03:05:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn.3'

08/16/2016 03:05:48: Starting Epoch 4: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 3: frames [3000..4000] (first sequence at sample 3000), data subset 0 of 1

08/16/2016 03:05:48: Starting minibatch loop.
08/16/2016 03:05:48:  Epoch[ 4 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33478516 * 1000; err = 0.90000000 * 1000; time = 0.0393s; samplesPerSecond = 25414.3
08/16/2016 03:05:48: Finished Epoch[ 4 of 5]: [Training] ce = 2.33478516 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 4000; learningRatePerSample = 2e-006; epochTime=0.039532s
08/16/2016 03:05:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn.4'

08/16/2016 03:05:48: Starting Epoch 5: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [4000..5000] (first sequence at sample 4000), data subset 0 of 1

08/16/2016 03:05:48: Starting minibatch loop.
08/16/2016 03:05:48:  Epoch[ 5 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33273975 * 1000; err = 0.90000000 * 1000; time = 0.0399s; samplesPerSecond = 25048.2
08/16/2016 03:05:48: Finished Epoch[ 5 of 5]: [Training] ce = 2.33273975 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 5000; learningRatePerSample = 2e-006; epochTime=0.040119s
08/16/2016 03:05:48: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn'
08/16/2016 03:05:48: CNTKCommandTrainEnd: train

08/16/2016 03:05:48: Action "train" complete.


08/16/2016 03:05:48: ##############################################################################
08/16/2016 03:05:48: #                                                                            #
08/16/2016 03:05:48: # Action "test"                                                              #
08/16/2016 03:05:48: #                                                                            #
08/16/2016 03:05:48: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()

Validating network. 28 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 512]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.x = Reshape (pool2) : [4 x 4 x 32 x *1] -> [512 x *1]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, h1.x) : [128 x 512], [512 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1 = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ClassificationError (labels, ol) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 28 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 28 matrices, 0 are shared as 0, and 28 are not shared.


BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1
08/16/2016 03:05:49: Final Results: Minibatch[1-1]: err = 0.90000000 * 100; ce = 2.33152878 * 100; perplexity = 10.29366624

08/16/2016 03:05:49: Action "test" complete.

08/16/2016 03:05:49: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu DeviceId=0 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
08/16/2016 03:05:51: -------------------------------------------------------------------
08/16/2016 03:05:51: Build info: 

08/16/2016 03:05:51: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:05:51: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:05:51: 		Build type: Release
08/16/2016 03:05:51: 		Build target: GPU
08/16/2016 03:05:51: 		With 1bit-SGD: no
08/16/2016 03:05:51: 		Math lib: mkl
08/16/2016 03:05:51: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:05:51: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:05:51: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:05:51: 		Build Branch: HEAD
08/16/2016 03:05:51: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:05:51: 		Built by svcphil on Philly-Pool3
08/16/2016 03:05:51: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:05:51: -------------------------------------------------------------------
08/16/2016 03:05:51: -------------------------------------------------------------------
08/16/2016 03:05:51: GPU info:

08/16/2016 03:05:51: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
08/16/2016 03:05:51: -------------------------------------------------------------------

08/16/2016 03:05:51: Running on cntk-muc00 at 2016/08/16 03:05:51
08/16/2016 03:05:51: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E/cntk.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu  DeviceId=0  timestamping=true  makeMode=true



08/16/2016 03:05:51: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:05:51: precision = "float"
command = train:test
deviceId = $DeviceId$
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

08/16/2016 03:05:51: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:05:51: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:05:51: precision = "float"
command = train:test
deviceId = 0
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
DeviceId=0
timestamping=true
makeMode=true

08/16/2016 03:05:51: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:05:51: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data
configparameters: cntk.cntk:deviceId=0
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Test_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = conv + convB;
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : 0/*inDim, gets inferred*/), init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            b = ParameterTensor( outDim,                              init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
            z = W * x + b
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, 0/*inDim, gets inferred*/, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            b = Parameter(outDim, 1,                         init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
            out = W * x + b
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, kW1 * kH1, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, kW1 * kH1 * cMap1, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer(4 * 4 * cMap2, h1Dim, FlattenDimensions (pool2, 1, 3), 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ClassificationError(labels, ol, tag="evaluation")
    ]
    SGD = [
        epochSize = 1000
        minibatchSize = 100
        learningRatesPerSample=0.000002
        momentumAsTimeConstant=1000
        maxEpochs = 5
        keepCheckPointFiles = true
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Tests\EndToEndTests\Image\Data/Train_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

08/16/2016 03:05:51: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:05:51: Commands: train test
08/16/2016 03:05:51: Precision = "float"
08/16/2016 03:05:51: Using 4 CPU threads.
08/16/2016 03:05:51: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn
08/16/2016 03:05:51: CNTKCommandTrainInfo: train : 5
08/16/2016 03:05:51: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

08/16/2016 03:05:51: ##############################################################################
08/16/2016 03:05:51: #                                                                            #
08/16/2016 03:05:51: # Action "train"                                                             #
08/16/2016 03:05:51: #                                                                            #
08/16/2016 03:05:51: ##############################################################################

08/16/2016 03:05:51: CNTKCommandTrainBegin: train
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:05:51: Starting from checkpoint. Loading network from 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn.4'.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()

Validating network. 28 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 512]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.x = Reshape (pool2) : [4 x 4 x 32 x *] -> [512 x *]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, h1.x) : [128 x 512], [512 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1 = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ClassificationError (labels, ol) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 28 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:05:52: Loaded model with 28 nodes on GPU 0.

08/16/2016 03:05:52: Training criterion node(s):
08/16/2016 03:05:52: 	ce = CrossEntropyWithSoftmax

08/16/2016 03:05:52: Evaluation criterion node(s):
08/16/2016 03:05:52: 	err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 51 matrices, 32 are shared as 14, and 19 are not shared.

	{ conv2_act : [8 x 8 x 32 x *]
	  conv2_act.conv : [8 x 8 x 32 x *] (gradient) }
	{ conv1_act.convPlusB : [24 x 24 x 16 x *] (gradient)
	  pool1 : [12 x 12 x 16 x *] }
	{ h1 : [128 x *]
	  h1.z.PlusArgs[0] : [128 x *] (gradient) }
	{ conv1_act : [24 x 24 x 16 x *]
	  conv1_act.conv : [24 x 24 x 16 x *] (gradient) }
	{ conv1_act : [24 x 24 x 16 x *] (gradient)
	  conv1_act.convB : [1 x 1 x 16] (gradient) }
	{ conv2_act.convPlusB : [8 x 8 x 32 x *]
	  conv2_act.convW : [32 x 400] (gradient) }
	{ conv2_act.convPlusB : [8 x 8 x 32 x *] (gradient)
	  pool1 : [12 x 12 x 16 x *] (gradient)
	  pool2 : [4 x 4 x 32 x *] }
	{ h1.z.PlusArgs[0] : [128 x *]
	  pool2 : [4 x 4 x 32 x *] (gradient) }
	{ h1.x : [512 x *] (gradient)
	  h1.z : [128 x *] (gradient)
	  ol.out.PlusArgs[0] : [10 x *] }
	{ ol : [10 x 1 x *]
	  ol.W : [10 x 128] (gradient) }
	{ h1.W : [128 x 512] (gradient)
	  h1.z : [128 x *] }
	{ conv1_act.convPlusB : [24 x 24 x 16 x *]
	  conv1_act.convW : [16 x 25] (gradient) }
	{ conv2_act : [8 x 8 x 32 x *] (gradient)
	  conv2_act.convB : [1 x 1 x 32] (gradient)
	  h1.x : [512 x *] }
	{ h1 : [128 x *] (gradient)
	  h1.b : [128] (gradient)
	  ol : [10 x 1 x *] (gradient) }


08/16/2016 03:05:52: Training 80202 parameters in 8 out of 8 parameter tensors and 23 nodes with gradient:

08/16/2016 03:05:52: 	Node 'conv1_act.convB' (LearnableParameter operation) : [1 x 1 x 16]
08/16/2016 03:05:52: 	Node 'conv1_act.convW' (LearnableParameter operation) : [16 x 25]
08/16/2016 03:05:52: 	Node 'conv2_act.convB' (LearnableParameter operation) : [1 x 1 x 32]
08/16/2016 03:05:52: 	Node 'conv2_act.convW' (LearnableParameter operation) : [32 x 400]
08/16/2016 03:05:52: 	Node 'h1.W' (LearnableParameter operation) : [128 x 512]
08/16/2016 03:05:52: 	Node 'h1.b' (LearnableParameter operation) : [128]
08/16/2016 03:05:52: 	Node 'ol.W' (LearnableParameter operation) : [10 x 128]
08/16/2016 03:05:52: 	Node 'ol.b' (LearnableParameter operation) : [10 x 1]

08/16/2016 03:05:52: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 03:05:52: Starting Epoch 5: learning rate per sample = 0.000002  effective momentum = 0.904837  momentum as time constant = 1000.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [4000..5000] (first sequence at sample 4000), data subset 0 of 1

08/16/2016 03:05:52: Starting minibatch loop.
08/16/2016 03:05:52:  Epoch[ 5 of 5]-Minibatch[   1-  10, 100.00%]: ce = 2.33273975 * 1000; err = 0.90000000 * 1000; time = 0.2187s; samplesPerSecond = 4572.2
08/16/2016 03:05:52: Finished Epoch[ 5 of 5]: [Training] ce = 2.33273975 * 1000; err = 0.90000000 * 1000; totalSamplesSeen = 5000; learningRatePerSample = 2e-006; epochTime=0.219282s
08/16/2016 03:05:52: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030158.863578\Image_QuickE2E@release_gpu/models/cntk.dnn'
08/16/2016 03:05:52: CNTKCommandTrainEnd: train

08/16/2016 03:05:52: Action "train" complete.


08/16/2016 03:05:52: ##############################################################################
08/16/2016 03:05:52: #                                                                            #
08/16/2016 03:05:52: # Action "test"                                                              #
08/16/2016 03:05:52: #                                                                            #
08/16/2016 03:05:52: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()

Validating network. 28 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 512]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.x = Reshape (pool2) : [4 x 4 x 32 x *1] -> [512 x *1]
Validating --> h1.z.PlusArgs[0] = Times (h1.W, h1.x) : [128 x 512], [512 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.z.PlusArgs[0], h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1 = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.out.PlusArgs[0] = Times (ol.W, h1) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol = Plus (ol.out.PlusArgs[0], ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ClassificationError (labels, ol) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.


conv1_act.conv: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool1: using cuDNN convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2_act.conv: using cuDNN convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

pool2: using cuDNN convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 28 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 28 matrices, 0 are shared as 0, and 28 are not shared.


BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1
08/16/2016 03:05:52: Final Results: Minibatch[1-1]: err = 0.90000000 * 100; ce = 2.33152878 * 100; perplexity = 10.29366624

08/16/2016 03:05:52: Action "test" complete.

08/16/2016 03:05:52: __COMPLETED__