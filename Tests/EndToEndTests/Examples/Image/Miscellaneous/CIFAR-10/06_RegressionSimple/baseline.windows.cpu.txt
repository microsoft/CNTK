CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/Examples/Image/Miscellaneous/CIFAR-10
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
Done copying data
Starting cntk run
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release_CpuOnly/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu DeviceId=-1 timestamping=true [command=TrainConvNet:Test] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug 31 2016 02:21:23
		Last modified date: Tue Aug 30 21:29:19 2016
		Build type: Release
		Build target: CPU-only
		With 1bit-SGD: no
		Math lib: mkl
		Build Branch: HEAD
		Build SHA1: 13ac044134e71a0c6c71822731f2a5a46631254c
		Built by svcphil on dphaim-26-new
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu
08/31/2016 02:26:18: Redirecting stderr to file -_TrainConvNet_Test.log
08/31/2016 02:26:18: -------------------------------------------------------------------
08/31/2016 02:26:18: Build info: 

08/31/2016 02:26:18: 		Built time: Aug 31 2016 02:21:23
08/31/2016 02:26:18: 		Last modified date: Tue Aug 30 21:29:19 2016
08/31/2016 02:26:18: 		Build type: Release
08/31/2016 02:26:18: 		Build target: CPU-only
08/31/2016 02:26:18: 		With 1bit-SGD: no
08/31/2016 02:26:18: 		Math lib: mkl
08/31/2016 02:26:18: 		Build Branch: HEAD
08/31/2016 02:26:18: 		Build SHA1: 13ac044134e71a0c6c71822731f2a5a46631254c
08/31/2016 02:26:18: 		Built by svcphil on dphaim-26-new
08/31/2016 02:26:18: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/31/2016 02:26:18: -------------------------------------------------------------------

08/31/2016 02:26:18: Running on DPHAIM-25 at 2016/08/31 02:26:18
08/31/2016 02:26:18: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release_CpuOnly\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu  DeviceId=-1  timestamping=true  [command=TrainConvNet:Test]  stderr=-


Configuration After Processing and Variable Resolution:

configparameters: 06_RegressionSimple.cntk:command=TrainConvNet:Test
configparameters: 06_RegressionSimple.cntk:configDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 06_RegressionSimple.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu
configparameters: 06_RegressionSimple.cntk:dataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu
configparameters: 06_RegressionSimple.cntk:deviceId=-1
configparameters: 06_RegressionSimple.cntk:makeMode=false
configparameters: 06_RegressionSimple.cntk:modelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/Models
configparameters: 06_RegressionSimple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/Models/06_RegressionSimple.cmf
configparameters: 06_RegressionSimple.cntk:outputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu
configparameters: 06_RegressionSimple.cntk:rootDir=.
configparameters: 06_RegressionSimple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu
configparameters: 06_RegressionSimple.cntk:stderr=-
configparameters: 06_RegressionSimple.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:timestamping=true
configparameters: 06_RegressionSimple.cntk:traceLevel=1
configparameters: 06_RegressionSimple.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

08/31/2016 02:26:18: Commands: TrainConvNet Test
08/31/2016 02:26:18: Precision = "float"
08/31/2016 02:26:18: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/Models/06_RegressionSimple.cmf
08/31/2016 02:26:18: CNTKCommandTrainInfo: TrainConvNet : 2
08/31/2016 02:26:18: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

08/31/2016 02:26:18: ##############################################################################
08/31/2016 02:26:18: #                                                                            #
08/31/2016 02:26:18: # Action "train"                                                             #
08/31/2016 02:26:18: #                                                                            #
08/31/2016 02:26:18: ##############################################################################

08/31/2016 02:26:18: CNTKCommandTrainBegin: TrainConvNet

08/31/2016 02:26:18: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.333333.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.003608*1.500000, onCPU=true).
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.020000*1.500000, onCPU=true).
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *], [3 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/31/2016 02:26:20: Created model with 16 nodes on CPU.

08/31/2016 02:26:20: Training criterion node(s):
08/31/2016 02:26:20: 	rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 13 are shared as 6, and 14 are not shared.

	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }
	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  rmse.z : [1 x 1] }
	{ ol.ol.b : [3] (gradient)
	  sqerr : [1] }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }


08/31/2016 02:26:20: Training 307603 parameters in 4 out of 4 parameter tensors and 11 nodes with gradient:

08/31/2016 02:26:20: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
08/31/2016 02:26:20: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
08/31/2016 02:26:20: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
08/31/2016 02:26:20: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

08/31/2016 02:26:20: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/31/2016 02:26:20: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

08/31/2016 02:26:20: Starting minibatch loop.
08/31/2016 02:26:21:  Epoch[ 1 of 2]-Minibatch[ -48-   1]: rmse = 0.04725225 * 128; time = 0.7006s; samplesPerSecond = 182.7
08/31/2016 02:26:21:  Epoch[ 1 of 2]-Minibatch[ -47-   2]: rmse = 0.04474125 * 128; time = 0.0085s; samplesPerSecond = 15078.3
08/31/2016 02:26:21:  Epoch[ 1 of 2]-Minibatch[ -46-   3]: rmse = 0.04304755 * 128; time = 0.0185s; samplesPerSecond = 6906.2
08/31/2016 02:26:21:  Epoch[ 1 of 2]-Minibatch[ -45-   4]: rmse = 0.03843500 * 128; time = 0.0174s; samplesPerSecond = 7354.2
08/31/2016 02:26:21:  Epoch[ 1 of 2]-Minibatch[ -44-   5]: rmse = 0.03246009 * 128; time = 0.0173s; samplesPerSecond = 7407.8
08/31/2016 02:26:22:  Epoch[ 1 of 2]-Minibatch[   1-  50]: rmse = 0.00671040 * 5760; time = 0.7878s; samplesPerSecond = 7311.2
08/31/2016 02:26:23:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.00159911 * 6400; time = 0.8704s; samplesPerSecond = 7353.0
08/31/2016 02:26:24:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.00089835 * 6400; time = 0.8711s; samplesPerSecond = 7346.9
08/31/2016 02:26:24:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.00065103 * 6400; time = 0.8726s; samplesPerSecond = 7334.4
08/31/2016 02:26:25:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.00054643 * 6400; time = 0.8706s; samplesPerSecond = 7351.4
08/31/2016 02:26:26:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.00049440 * 6400; time = 0.8755s; samplesPerSecond = 7310.5
08/31/2016 02:26:27:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.00045979 * 6400; time = 0.8740s; samplesPerSecond = 7322.8
08/31/2016 02:26:28: Finished Epoch[ 1 of 2]: [Training] rmse = 0.00194110 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=7.61944s
08/31/2016 02:26:28: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/Models/06_RegressionSimple.cmf.1'

08/31/2016 02:26:28: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

08/31/2016 02:26:28: Starting minibatch loop.
08/31/2016 02:26:28:  Epoch[ 2 of 2]-Minibatch[ -48-   1, 0.29%]: rmse = 0.00047396 * 128; time = 0.0719s; samplesPerSecond = 1780.0
08/31/2016 02:26:28:  Epoch[ 2 of 2]-Minibatch[ -47-   2, 0.57%]: rmse = 0.00056500 * 128; time = 0.0172s; samplesPerSecond = 7462.7
08/31/2016 02:26:28:  Epoch[ 2 of 2]-Minibatch[ -46-   3, 0.86%]: rmse = 0.00034001 * 128; time = 0.0174s; samplesPerSecond = 7371.1
08/31/2016 02:26:28:  Epoch[ 2 of 2]-Minibatch[ -45-   4, 1.14%]: rmse = 0.00066539 * 128; time = 0.0172s; samplesPerSecond = 7457.0
08/31/2016 02:26:28:  Epoch[ 2 of 2]-Minibatch[ -44-   5, 1.43%]: rmse = 0.00036179 * 128; time = 0.0172s; samplesPerSecond = 7427.6
08/31/2016 02:26:29:  Epoch[ 2 of 2]-Minibatch[   1-  50, 14.29%]: rmse = 0.00044087 * 5760; time = 0.7851s; samplesPerSecond = 7336.7
08/31/2016 02:26:30:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.00043483 * 6400; time = 0.8719s; samplesPerSecond = 7340.1
08/31/2016 02:26:31:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00042969 * 6400; time = 0.8730s; samplesPerSecond = 7330.9
08/31/2016 02:26:31:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00041264 * 6400; time = 0.8719s; samplesPerSecond = 7340.5
08/31/2016 02:26:32:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00041354 * 6400; time = 0.8733s; samplesPerSecond = 7328.5
08/31/2016 02:26:33:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00040806 * 6400; time = 0.8736s; samplesPerSecond = 7325.8
08/31/2016 02:26:34:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00041202 * 6400; time = 0.8723s; samplesPerSecond = 7337.1
08/31/2016 02:26:35: Finished Epoch[ 2 of 2]: [Training] rmse = 0.00042059 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=6.93794s
08/31/2016 02:26:35: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160831022617.740599\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_cpu/Models/06_RegressionSimple.cmf'
08/31/2016 02:26:35: CNTKCommandTrainEnd: TrainConvNet

08/31/2016 02:26:35: Action "train" complete.


08/31/2016 02:26:35: ##############################################################################
08/31/2016 02:26:35: #                                                                            #
08/31/2016 02:26:35: # Action "test"                                                              #
08/31/2016 02:26:35: #                                                                            #
08/31/2016 02:26:35: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *1], [3 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 16 matrices, 0 are shared as 0, and 16 are not shared.


08/31/2016 02:26:37: Minibatch[1-20]: rmse = 0.00097925 * 10000
08/31/2016 02:26:37: Final Results: Minibatch[1-20]: rmse = 0.00097925 * 10000

08/31/2016 02:26:37: Action "test" complete.

08/31/2016 02:26:37: __COMPLETED__