CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3530 @ 2.80GHz
    Hardware threads: 4
    Total Memory: 12580404 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/Examples/Image/Miscellaneous/CIFAR-10
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
Done copying data
Starting cntk run
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DeviceId=0 timestamping=true [command=TrainConvNet:Test] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug 29 2016 03:04:18
		Last modified date: Mon Aug 29 02:50:40 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-5.1\cuda
		Build Branch: HEAD
		Build SHA1: 575c8be1b55bed98be08db589880eb297e83e26e
		Built by svcphil on Philly-Pool1
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
08/29/2016 04:14:52: Redirecting stderr to file -_TrainConvNet_Test.log
08/29/2016 04:14:52: -------------------------------------------------------------------
08/29/2016 04:14:52: Build info: 

08/29/2016 04:14:52: 		Built time: Aug 29 2016 03:04:18
08/29/2016 04:14:52: 		Last modified date: Mon Aug 29 02:50:40 2016
08/29/2016 04:14:52: 		Build type: Release
08/29/2016 04:14:52: 		Build target: GPU
08/29/2016 04:14:52: 		With 1bit-SGD: no
08/29/2016 04:14:52: 		Math lib: mkl
08/29/2016 04:14:52: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/29/2016 04:14:52: 		CUB_PATH: c:\src\cub-1.4.1
08/29/2016 04:14:52: 		CUDNN_PATH: c:\NVIDIA\cudnn-5.1\cuda
08/29/2016 04:14:52: 		Build Branch: HEAD
08/29/2016 04:14:52: 		Build SHA1: 575c8be1b55bed98be08db589880eb297e83e26e
08/29/2016 04:14:52: 		Built by svcphil on Philly-Pool1
08/29/2016 04:14:52: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/29/2016 04:14:52: -------------------------------------------------------------------
08/29/2016 04:14:52: -------------------------------------------------------------------
08/29/2016 04:14:52: GPU info:

08/29/2016 04:14:52: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8090 MB
08/29/2016 04:14:52: -------------------------------------------------------------------

08/29/2016 04:14:52: Running on cntk-muc00 at 2016/08/29 04:14:52
08/29/2016 04:14:52: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DeviceId=0  timestamping=true  [command=TrainConvNet:Test]  stderr=-


Configuration After Processing and Variable Resolution:

configparameters: 06_RegressionSimple.cntk:command=TrainConvNet:Test
configparameters: 06_RegressionSimple.cntk:configDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 06_RegressionSimple.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:dataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:deviceId=0
configparameters: 06_RegressionSimple.cntk:makeMode=false
configparameters: 06_RegressionSimple.cntk:modelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models
configparameters: 06_RegressionSimple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf
configparameters: 06_RegressionSimple.cntk:outputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:rootDir=.
configparameters: 06_RegressionSimple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:stderr=-
configparameters: 06_RegressionSimple.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:timestamping=true
configparameters: 06_RegressionSimple.cntk:traceLevel=1
configparameters: 06_RegressionSimple.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

08/29/2016 04:14:52: Commands: TrainConvNet Test
08/29/2016 04:14:52: Precision = "float"
08/29/2016 04:14:52: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf
08/29/2016 04:14:52: CNTKCommandTrainInfo: TrainConvNet : 2
08/29/2016 04:14:52: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

08/29/2016 04:14:52: ##############################################################################
08/29/2016 04:14:52: #                                                                            #
08/29/2016 04:14:52: # Action "train"                                                             #
08/29/2016 04:14:52: #                                                                            #
08/29/2016 04:14:52: ##############################################################################

08/29/2016 04:14:52: CNTKCommandTrainBegin: TrainConvNet

08/29/2016 04:14:52: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.333333.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.003608*1.500000, onCPU=true).
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.020000*1.500000, onCPU=true).
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *], [3 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/29/2016 04:14:53: Created model with 16 nodes on GPU 0.

08/29/2016 04:14:53: Training criterion node(s):
08/29/2016 04:14:53: 	rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 13 are shared as 6, and 14 are not shared.

	{ ol.ol.b : [3] (gradient)
	  sqerr : [1] }
	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  rmse.z : [1 x 1] }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }
	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }


08/29/2016 04:14:53: Training 307603 parameters in 4 out of 4 parameter tensors and 11 nodes with gradient:

08/29/2016 04:14:53: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
08/29/2016 04:14:53: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
08/29/2016 04:14:53: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
08/29/2016 04:14:53: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

08/29/2016 04:14:53: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/29/2016 04:14:53: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

08/29/2016 04:14:53: Starting minibatch loop.
08/29/2016 04:14:54:  Epoch[ 1 of 2]-Minibatch[ -48-   1]: rmse = 0.04725225 * 128; time = 0.8877s; samplesPerSecond = 144.2
08/29/2016 04:14:54:  Epoch[ 1 of 2]-Minibatch[ -47-   2]: rmse = 0.04474124 * 128; time = 0.0015s; samplesPerSecond = 83605.5
08/29/2016 04:14:54:  Epoch[ 1 of 2]-Minibatch[ -46-   3]: rmse = 0.04304753 * 128; time = 0.0232s; samplesPerSecond = 5523.4
08/29/2016 04:14:54:  Epoch[ 1 of 2]-Minibatch[ -45-   4]: rmse = 0.03843500 * 128; time = 0.0186s; samplesPerSecond = 6899.9
08/29/2016 04:14:54:  Epoch[ 1 of 2]-Minibatch[ -44-   5]: rmse = 0.03246011 * 128; time = 0.0194s; samplesPerSecond = 6599.3
08/29/2016 04:14:55:  Epoch[ 1 of 2]-Minibatch[   1-  50]: rmse = 0.00671040 * 5760; time = 0.8636s; samplesPerSecond = 6669.6
08/29/2016 04:14:56:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.00159911 * 6400; time = 0.9513s; samplesPerSecond = 6727.4
08/29/2016 04:14:57:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.00089835 * 6400; time = 0.9589s; samplesPerSecond = 6674.3
08/29/2016 04:14:58:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.00065105 * 6400; time = 0.9462s; samplesPerSecond = 6764.1
08/29/2016 04:14:59:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.00054645 * 6400; time = 0.9510s; samplesPerSecond = 6730.1
08/29/2016 04:15:00:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.00049439 * 6400; time = 0.9676s; samplesPerSecond = 6614.1
08/29/2016 04:15:01:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.00045994 * 6400; time = 0.9626s; samplesPerSecond = 6648.5
08/29/2016 04:15:02: Finished Epoch[ 1 of 2]: [Training] rmse = 0.00194038 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=8.47981s
08/29/2016 04:15:02: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf.1'

08/29/2016 04:15:02: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

08/29/2016 04:15:02: Starting minibatch loop.
08/29/2016 04:15:02:  Epoch[ 2 of 2]-Minibatch[ -48-   1, 0.29%]: rmse = 0.00054643 * 128; time = 0.0696s; samplesPerSecond = 1838.8
08/29/2016 04:15:02:  Epoch[ 2 of 2]-Minibatch[ -47-   2, 0.57%]: rmse = 0.00078913 * 128; time = 0.0189s; samplesPerSecond = 6766.8
08/29/2016 04:15:02:  Epoch[ 2 of 2]-Minibatch[ -46-   3, 0.86%]: rmse = 0.00044333 * 128; time = 0.0186s; samplesPerSecond = 6881.4
08/29/2016 04:15:02:  Epoch[ 2 of 2]-Minibatch[ -45-   4, 1.14%]: rmse = 0.00114372 * 128; time = 0.0183s; samplesPerSecond = 7004.1
08/29/2016 04:15:02:  Epoch[ 2 of 2]-Minibatch[ -44-   5, 1.43%]: rmse = 0.00082691 * 128; time = 0.0195s; samplesPerSecond = 6569.8
08/29/2016 04:15:03:  Epoch[ 2 of 2]-Minibatch[   1-  50, 14.29%]: rmse = 0.00076751 * 5760; time = 0.8585s; samplesPerSecond = 6709.5
08/29/2016 04:15:04:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.00070223 * 6400; time = 0.9548s; samplesPerSecond = 6702.9
08/29/2016 04:15:05:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00061868 * 6400; time = 0.9541s; samplesPerSecond = 6708.2
08/29/2016 04:15:06:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00042097 * 6400; time = 0.9551s; samplesPerSecond = 6700.6
08/29/2016 04:15:06:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00054774 * 6400; time = 0.9513s; samplesPerSecond = 6727.9
08/29/2016 04:15:07:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00068145 * 6400; time = 0.9536s; samplesPerSecond = 6711.1
08/29/2016 04:15:08:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00044102 * 6400; time = 0.9459s; samplesPerSecond = 6765.7
08/29/2016 04:15:09: Finished Epoch[ 2 of 2]: [Training] rmse = 0.00058600 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=7.56757s
08/29/2016 04:15:09: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160829041042.517324\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf'
08/29/2016 04:15:09: CNTKCommandTrainEnd: TrainConvNet

08/29/2016 04:15:09: Action "train" complete.


08/29/2016 04:15:09: ##############################################################################
08/29/2016 04:15:09: #                                                                            #
08/29/2016 04:15:09: # Action "test"                                                              #
08/29/2016 04:15:09: #                                                                            #
08/29/2016 04:15:09: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *1], [3 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 16 matrices, 0 are shared as 0, and 16 are not shared.


08/29/2016 04:15:11: Minibatch[1-20]: rmse = 0.00097573 * 10000
08/29/2016 04:15:11: Final Results: Minibatch[1-20]: rmse = 0.00097573 * 10000

08/29/2016 04:15:11: Action "test" complete.

08/29/2016 04:15:11: __COMPLETED__