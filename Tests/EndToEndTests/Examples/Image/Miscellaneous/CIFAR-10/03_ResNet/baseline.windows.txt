CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 02:54:53
		Last modified date: Fri Aug 12 05:31:21 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool3
		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
08/16/2016 03:02:40: Redirecting stderr to file -_Train_Test.log
08/16/2016 03:02:40: -------------------------------------------------------------------
08/16/2016 03:02:40: Build info: 

08/16/2016 03:02:40: 		Built time: Aug 16 2016 02:54:53
08/16/2016 03:02:40: 		Last modified date: Fri Aug 12 05:31:21 2016
08/16/2016 03:02:40: 		Build type: Release
08/16/2016 03:02:40: 		Build target: GPU
08/16/2016 03:02:40: 		With 1bit-SGD: no
08/16/2016 03:02:40: 		Math lib: mkl
08/16/2016 03:02:40: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:02:40: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:02:40: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:02:40: 		Build Branch: HEAD
08/16/2016 03:02:40: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:02:40: 		Built by svcphil on Philly-Pool3
08/16/2016 03:02:40: 		Build Path: c:\Jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:02:40: -------------------------------------------------------------------
08/16/2016 03:02:41: -------------------------------------------------------------------
08/16/2016 03:02:41: GPU info:

08/16/2016 03:02:41: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:02:41: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:02:41: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:02:41: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:02:41: -------------------------------------------------------------------

08/16/2016 03:02:41: Running on DPHAIM-24 at 2016/08/16 03:02:41
08/16/2016 03:02:41: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



08/16/2016 03:02:41: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:02:41: makeMode = true
RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
parallelTrain = "false"
command = Train:Test
stderr = "$OutputDir$/03_ResNet"
traceLevel = 1
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train = [
    action = "train"
    modelPath = "$ModelDir$/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        firstMBsToShowResult = 10
        numMBsToShowResult = 200
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/16/2016 03:02:41: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:02:41: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:02:41: makeMode = true
RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models"
ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
parallelTrain = "false"
command = Train:Test
stderr = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/03_ResNet"
traceLevel = 1
Proj16to32Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt"
Proj32to64Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt"
Train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        firstMBsToShowResult = 10
        numMBsToShowResult = 200
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/16/2016 03:02:42: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:02:42: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ResNet.cntk:command=Train:Test
configparameters: 03_ResNet.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 03_ResNet.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
configparameters: 03_ResNet.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData
configparameters: 03_ResNet.cntk:deviceId=0
configparameters: 03_ResNet.cntk:imageLayout=cudnn
configparameters: 03_ResNet.cntk:initOnCPUOnly=true
configparameters: 03_ResNet.cntk:makeMode=true
configparameters: 03_ResNet.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models
configparameters: 03_ResNet.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 03_ResNet.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
configparameters: 03_ResNet.cntk:parallelTrain=false
configparameters: 03_ResNet.cntk:precision=float
configparameters: 03_ResNet.cntk:prefetch=true
configparameters: 03_ResNet.cntk:Proj16to32Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt
configparameters: 03_ResNet.cntk:Proj32to64Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt
configparameters: 03_ResNet.cntk:RootDir=.
configparameters: 03_ResNet.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu
configparameters: 03_ResNet.cntk:stderr=-
configparameters: 03_ResNet.cntk:Test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
    minibatchSize = 512
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize = "none"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "center"
            cropRatio = 1
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
] [minibatchSize=16]

configparameters: 03_ResNet.cntk:timestamping=true
configparameters: 03_ResNet.cntk:traceLevel=1
configparameters: 03_ResNet.cntk:Train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/03_ResNet.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 1.0*80:0.1*40:0.01
        momentumPerMB = 0.9
        maxEpochs = 160
        L2RegWeight = 0.0001
        dropoutRate = 0
        firstMBsToShowResult = 10
        numMBsToShowResult = 200
        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    ]
    reader = [
        readerType = "ImageReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize = "auto"
        features = [
            width = 32
            height = 32
            channels = 3
            cropType = "random"
            cropRatio = 0.8
            jitterType = "uniRatio"
            interpolations = "linear"
            meanFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels = [
            labelDim = 10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

08/16/2016 03:02:42: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:02:42: Commands: Train Test
08/16/2016 03:02:42: Precision = "float"
08/16/2016 03:02:42: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet
08/16/2016 03:02:42: CNTKCommandTrainInfo: Train : 1
08/16/2016 03:02:42: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

08/16/2016 03:02:42: ##############################################################################
08/16/2016 03:02:42: #                                                                            #
08/16/2016 03:02:42: # Action "train"                                                             #
08/16/2016 03:02:42: #                                                                            #
08/16/2016 03:02:42: ##############################################################################

08/16/2016 03:02:42: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:02:43: Creating virgin network.
Node 'conv1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 27] <- 0.000000.
Node 'conv1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- 0.000000.
Node 'rn1_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn2_1_Wproj' (LearnableParameter operation): Initializing Parameter[32 x 16] <- 0.000000.
Node 'rn2_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 144] <- 0.000000.
Node 'rn2_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- 0.000000.
Node 'rn2_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- 0.000000.
Node 'rn2_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- 0.000000.
Node 'rn2_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- 0.000000.
Node 'rn2_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- 0.000000.
Node 'rn2_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn3_1_Wproj' (LearnableParameter operation): Initializing Parameter[64 x 32] <- 0.000000.
Node 'rn3_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 288] <- 0.000000.
Node 'rn3_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- 0.000000.
Node 'rn3_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- 0.000000.
Node 'rn3_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- 0.000000.
Node 'rn3_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- 0.000000.
Node 'rn3_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- 0.000000.
Node 'rn3_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- 0.000000.
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node 'conv1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 27] <- gaussian(seed=1, range=0.038490*0.260000, onCPU=false).
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'conv1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'conv1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'conv1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=2, range=0.016667*7.070000, onCPU=false).
Node 'rn1_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=3, range=0.016667*7.070000, onCPU=false).
Node 'rn1_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=4, range=0.016667*7.070000, onCPU=false).
Node 'rn1_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=5, range=0.016667*7.070000, onCPU=false).
Node 'rn1_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=6, range=0.016667*7.070000, onCPU=false).
Node 'rn1_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.W' (LearnableParameter operation): Initializing Parameter[16 x 144] <- gaussian(seed=7, range=0.016667*7.070000, onCPU=false).
Node 'rn1_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'rn1_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn1_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'rn2_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 144] <- gaussian(seed=8, range=0.016667*7.070000, onCPU=false).
Node 'rn2_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- gaussian(seed=9, range=0.011785*7.070000, onCPU=false).
Node 'rn2_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_1.c_proj.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_1.c_proj.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- gaussian(seed=10, range=0.011785*7.070000, onCPU=false).
Node 'rn2_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- gaussian(seed=11, range=0.011785*7.070000, onCPU=false).
Node 'rn2_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- gaussian(seed=12, range=0.011785*7.070000, onCPU=false).
Node 'rn2_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 288] <- gaussian(seed=13, range=0.011785*7.070000, onCPU=false).
Node 'rn2_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'rn2_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn2_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'rn3_1.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 288] <- gaussian(seed=14, range=0.011785*7.070000, onCPU=false).
Node 'rn3_1.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_1.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- gaussian(seed=15, range=0.008333*7.070000, onCPU=false).
Node 'rn3_1.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_1.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_1.c_proj.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_1.c_proj.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- gaussian(seed=16, range=0.008333*7.070000, onCPU=false).
Node 'rn3_2.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_2.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- gaussian(seed=17, range=0.008333*7.070000, onCPU=false).
Node 'rn3_2.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_2.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_2.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- gaussian(seed=18, range=0.008333*7.070000, onCPU=false).
Node 'rn3_3.c1.c.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_3.c1.c.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c1.c.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.W' (LearnableParameter operation): Initializing Parameter[64 x 576] <- gaussian(seed=19, range=0.008333*7.070000, onCPU=false).
Node 'rn3_3.c2.c.b' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.c.sc' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'rn3_3.c2.c.m' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'rn3_3.c2.c.isd' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- gaussian(seed=20, range=0.025000*0.400000, onCPU=false).
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ClassificationError()
	OutputNodes.z = Plus()

Validating network. 184 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_3.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_3.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_3.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_3.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_3.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ClassificationError (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 75 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


109 out of 184 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:02:44: Created model with 184 nodes on GPU 0.

08/16/2016 03:02:44: Training criterion node(s):
08/16/2016 03:02:44: 	CE = CrossEntropyWithSoftmax

08/16/2016 03:02:44: Evaluation criterion node(s):
08/16/2016 03:02:44: 	Err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.

	{ rn1_1.c1.c.W : [16 x 144] (gradient)
	  rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_1.p : [32 x 32 x 16 x *] }
	{ rn1_1.c2.W : [16 x 144] (gradient)
	  rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
	{ rn1_1.c2.c.sc : [16 x 1] (gradient)
	  rn1_1.p : [32 x 32 x 16 x *] (gradient) }
	{ conv1.c.W : [16 x 27] (gradient)
	  rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_1.c1.y : [32 x 32 x 16 x *] }
	{ conv1.c.c.sc : [16 x 1] (gradient)
	  conv1.y : [32 x 32 x 16 x *] (gradient)
	  rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_2.c1.y : [32 x 32 x 16 x *] }
	{ rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
	  rn1_1.y : [32 x 32 x 16 x *] }
	{ rn1_2.c1.c.W : [16 x 144] (gradient)
	  rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_2.p : [32 x 32 x 16 x *] }
	{ rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
	  rn1_2.y : [32 x 32 x 16 x *] }
	{ conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
	  conv1.y : [32 x 32 x 16 x *] }
	{ rn1_1.c2.c.b : [16 x 1] (gradient)
	  rn1_2.c2.c.c : [32 x 32 x 16 x *] }
	{ conv1.c.c.b : [16 x 1] (gradient)
	  rn1_1.c2.c.c : [32 x 32 x 16 x *] }
	{ rn1_3.c1.c.c.sc : [16 x 1] (gradient)
	  rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
	  rn1_3.y : [32 x 32 x 16 x *] (gradient) }
	{ rn2_3.c2.c.sc : [32 x 1] (gradient)
	  rn2_3.p : [16 x 16 x 32 x *] (gradient) }
	{ rn1_1.c1.c.c.sc : [16 x 1] (gradient)
	  rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
	  rn1_1.y : [32 x 32 x 16 x *] (gradient)
	  rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_3.c1.y : [32 x 32 x 16 x *] }
	{ rn1_2.c2.W : [16 x 144] (gradient)
	  rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
	{ rn2_1.c_proj.sc : [32 x 1] (gradient)
	  rn2_1.p : [16 x 16 x 32 x *] (gradient) }
	{ rn2_2.c2.c.b : [32 x 1] (gradient)
	  rn2_3.c2.c.c : [16 x 16 x 32 x *] }
	{ rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
	  rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
	  rn2_2.c1.y : [16 x 16 x 32 x *] }
	{ rn2_3.c1.c.W : [32 x 288] (gradient)
	  rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
	  rn2_3.p : [16 x 16 x 32 x *] }
	{ rn2_2.c1.c.c.sc : [32 x 1] (gradient)
	  rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
	  rn2_2.y : [16 x 16 x 32 x *] (gradient)
	  rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
	  rn3_1.c1.y : [8 x 8 x 64 x *] }
	{ rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
	  rn2_3.y : [16 x 16 x 32 x *] }
	{ rn2_3.c2.W : [32 x 288] (gradient)
	  rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
	{ rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
	  rn2_2.y : [16 x 16 x 32 x *] }
	{ rn2_3.c2.c.b : [32 x 1] (gradient)
	  rn3_1.c2.c.c : [8 x 8 x 64 x *] }
	{ rn1_3.c2.c.sc : [16 x 1] (gradient)
	  rn1_3.p : [32 x 32 x 16 x *] (gradient) }
	{ rn2_2.c1.c.W : [32 x 288] (gradient)
	  rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
	  rn2_2.p : [16 x 16 x 32 x *] }
	{ rn2_1.c1.c.W : [32 x 144] (gradient)
	  rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
	{ rn2_2.c2.c.sc : [32 x 1] (gradient)
	  rn2_2.p : [16 x 16 x 32 x *] (gradient) }
	{ rn2_1.c2.c.sc : [32 x 1] (gradient)
	  rn2_1.c_proj.c : [16 x 16 x 32 x *] }
	{ rn1_3.c2.W : [16 x 144] (gradient)
	  rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
	{ rn1_2.c2.c.b : [16 x 1] (gradient)
	  rn1_3.c2.c.c : [32 x 32 x 16 x *] }
	{ rn2_2.c2.W : [32 x 288] (gradient)
	  rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
	{ rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
	  rn1_3.y : [32 x 32 x 16 x *] }
	{ rn1_3.c2.c.b : [16 x 1] (gradient)
	  rn2_1.c2.c.c : [16 x 16 x 32 x *] }
	{ rn2_1.c2.c.b : [32 x 1] (gradient)
	  rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
	  rn2_1.p : [16 x 16 x 32 x *] }
	{ rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
	  rn2_1.y : [16 x 16 x 32 x *] }
	{ rn1_2.c2.c.sc : [16 x 1] (gradient)
	  rn1_2.p : [32 x 32 x 16 x *] (gradient) }
	{ rn2_1.c2.W : [32 x 288] (gradient)
	  rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
	{ rn1_3.c1.c.W : [16 x 144] (gradient)
	  rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
	  rn1_3.p : [32 x 32 x 16 x *] }
	{ rn1_2.c1.c.c.sc : [16 x 1] (gradient)
	  rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
	  rn1_2.y : [32 x 32 x 16 x *] (gradient)
	  rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
	  rn2_1.c1.y : [16 x 16 x 32 x *] }
	{ rn2_1.c1.c.c.sc : [32 x 1] (gradient)
	  rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
	  rn2_1.y : [16 x 16 x 32 x *] (gradient)
	  rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
	  rn2_3.c1.y : [16 x 16 x 32 x *] }
	{ OutputNodes.t : [10 x *] (gradient)
	  rn3_2.c1.c.c.sc : [64 x 1] (gradient)
	  rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
	  rn3_2.y : [8 x 8 x 64 x *] (gradient) }
	{ rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
	  rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
	  rn3_2.c1.y : [8 x 8 x 64 x *] }
	{ rn3_3.c1.c.W : [64 x 576] (gradient)
	  rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
	  rn3_3.p : [8 x 8 x 64 x *] }
	{ rn3_1.c_proj.sc : [64 x 1] (gradient)
	  rn3_1.p : [8 x 8 x 64 x *] (gradient) }
	{ rn3_2.c2.W : [64 x 576] (gradient)
	  rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
	{ rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
	  rn3_2.y : [8 x 8 x 64 x *] }
	{ rn2_3.c1.c.c.sc : [32 x 1] (gradient)
	  rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
	  rn2_3.y : [16 x 16 x 32 x *] (gradient) }
	{ rn3_2.c2.c.sc : [64 x 1] (gradient)
	  rn3_2.p : [8 x 8 x 64 x *] (gradient) }
	{ rn3_1.c2.W : [64 x 576] (gradient)
	  rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
	{ rn3_1.c2.c.sc : [64 x 1] (gradient)
	  rn3_1.c_proj.c : [8 x 8 x 64 x *] }
	{ rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
	  rn3_3.y : [8 x 8 x 64 x *] }
	{ pool : [1 x 1 x 64 x *]
	  rn3_3.c2.c.sc : [64 x 1] (gradient)
	  rn3_3.p : [8 x 8 x 64 x *] (gradient) }
	{ rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
	  rn3_1.y : [8 x 8 x 64 x *] }
	{ rn3_2.c1.c.W : [64 x 576] (gradient)
	  rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
	  rn3_2.p : [8 x 8 x 64 x *] }
	{ rn3_1.c1.c.c.sc : [64 x 1] (gradient)
	  rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
	  rn3_1.y : [8 x 8 x 64 x *] (gradient)
	  rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
	  rn3_3.c1.y : [8 x 8 x 64 x *] }
	{ OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
	  OutputNodes.z : [10 x *] (gradient) }
	{ rn3_2.c2.c.b : [64 x 1] (gradient)
	  rn3_3.c2.c.c : [8 x 8 x 64 x *] }
	{ rn3_1.c2.c.b : [64 x 1] (gradient)
	  rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
	  rn3_1.p : [8 x 8 x 64 x *] }
	{ rn3_1.c1.c.W : [64 x 288] (gradient)
	  rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
	{ OutputNodes.t : [10 x *]
	  rn3_3.c1.c.c.sc : [64 x 1] (gradient)
	  rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
	  rn3_3.y : [8 x 8 x 64 x *] (gradient) }
	{ pool : [1 x 1 x 64 x *] (gradient)
	  rn3_3.c2.W : [64 x 576] (gradient) }


08/16/2016 03:02:44: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:

08/16/2016 03:02:44: 	Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
08/16/2016 03:02:44: 	Node 'OutputNodes.b' (LearnableParameter operation) : [10]
08/16/2016 03:02:44: 	Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
08/16/2016 03:02:44: 	Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
08/16/2016 03:02:44: 	Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
08/16/2016 03:02:44: 	Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
08/16/2016 03:02:44: 	Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
08/16/2016 03:02:44: 	Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
08/16/2016 03:02:44: 	Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
08/16/2016 03:02:44: 	Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
08/16/2016 03:02:44: 	Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
08/16/2016 03:02:44: 	Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
08/16/2016 03:02:44: 	Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
08/16/2016 03:02:44: 	Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
08/16/2016 03:02:44: 	Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
08/16/2016 03:02:44: 	Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
08/16/2016 03:02:44: 	Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
08/16/2016 03:02:44: 	Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]

08/16/2016 03:02:44: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 03:02:44: Starting Epoch 1: learning rate per sample = 0.062500  effective momentum = 0.900000  momentum as time constant = 151.9 samples

08/16/2016 03:02:44: Starting minibatch loop.
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-198-   1, 12.50%]: CE = 2.28929901 * 16; Err = 0.93750000 * 16; time = 6.1759s; samplesPerSecond = 2.6
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-197-   2, 25.00%]: CE = 2.48783112 * 16; Err = 0.87500000 * 16; time = 0.0299s; samplesPerSecond = 534.7
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-196-   3, 37.50%]: CE = 2.45939255 * 16; Err = 1.00000000 * 16; time = 0.0241s; samplesPerSecond = 665.1
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-195-   4, 50.00%]: CE = 2.45850372 * 16; Err = 0.93750000 * 16; time = 0.3919s; samplesPerSecond = 40.8
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-194-   5, 62.50%]: CE = 2.81107521 * 16; Err = 1.00000000 * 16; time = 0.0296s; samplesPerSecond = 541.0
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-193-   6, 75.00%]: CE = 3.09775257 * 16; Err = 0.93750000 * 16; time = 0.0297s; samplesPerSecond = 538.5
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-192-   7, 87.50%]: CE = 2.75336170 * 16; Err = 0.87500000 * 16; time = 0.0298s; samplesPerSecond = 536.4
08/16/2016 03:02:51:  Epoch[ 1 of 1]-Minibatch[-191-   8, 100.00%]: CE = 2.37117195 * 16; Err = 1.00000000 * 16; time = 0.0294s; samplesPerSecond = 543.9
08/16/2016 03:02:51: Finished Epoch[ 1 of 1]: [Training] CE = 2.59104848 * 128; Err = 0.94531250 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0625; epochTime=6.74537s
08/16/2016 03:02:51: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816030038.674053\Examples\Image\Miscellaneous\CIFAR-10_03_ResNet@release_gpu/Models/03_ResNet'
08/16/2016 03:02:52: CNTKCommandTrainEnd: Train

08/16/2016 03:02:52: Action "train" complete.


08/16/2016 03:02:52: ##############################################################################
08/16/2016 03:02:52: #                                                                            #
08/16/2016 03:02:52: # Action "test"                                                              #
08/16/2016 03:02:52: #                                                                            #
08/16/2016 03:02:52: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ClassificationError()
	OutputNodes.z = Plus()

Validating network. 184 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_3.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_3.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_3.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_3.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_3.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ClassificationError (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 75 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


109 out of 184 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 184 matrices, 0 are shared as 0, and 184 are not shared.


08/16/2016 03:02:58: Minibatch[1-100]: Err = 0.90187500 * 1600; CE = 2.30284081 * 1600
08/16/2016 03:02:58: Minibatch[101-200]: Err = 0.90125000 * 1600; CE = 2.30324179 * 1600
08/16/2016 03:02:59: Minibatch[201-300]: Err = 0.88812500 * 1600; CE = 2.30240505 * 1600
08/16/2016 03:02:59: Minibatch[301-400]: Err = 0.89562500 * 1600; CE = 2.30294870 * 1600
08/16/2016 03:03:00: Minibatch[401-500]: Err = 0.90312500 * 1600; CE = 2.30448233 * 1600
08/16/2016 03:03:00: Minibatch[501-600]: Err = 0.90937500 * 1600; CE = 2.30241966 * 1600
08/16/2016 03:03:00: Minibatch[601-625]: Err = 0.90250000 * 400; CE = 2.30519349 * 400
08/16/2016 03:03:00: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30314188 * 10000; perplexity = 10.00556937

08/16/2016 03:03:00: Action "test" complete.

08/16/2016 03:03:00: __COMPLETED__