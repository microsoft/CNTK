Looking for data in: /hdfs/public/CNTKTestData
Copying test data to local directory
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] Train=[reader=[randomize=none]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 17:56:15
		Last modified date: Tue May  3 11:36:22 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
		Built by philly on 18750d26eb32
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
05/03/2016 18:09:16: Redirecting stderr to file -_Train_Test.log
05/03/2016 18:09:16: -------------------------------------------------------------------
05/03/2016 18:09:16: Build info: 

05/03/2016 18:09:16: 		Built time: May  3 2016 17:56:15
05/03/2016 18:09:16: 		Last modified date: Tue May  3 11:36:22 2016
05/03/2016 18:09:16: 		Build type: release
05/03/2016 18:09:16: 		Build target: GPU
05/03/2016 18:09:16: 		With 1bit-SGD: no
05/03/2016 18:09:16: 		Math lib: acml
05/03/2016 18:09:16: 		CUDA_PATH: /usr/local/cuda-7.5
05/03/2016 18:09:16: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 18:09:16: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 18:09:16: 		Build Branch: HEAD
05/03/2016 18:09:16: 		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
05/03/2016 18:09:16: 		Built by philly on 18750d26eb32
05/03/2016 18:09:16: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/03/2016 18:09:16: -------------------------------------------------------------------

05/03/2016 18:09:16: Running on localhost at 2016/05/03 18:09:16
05/03/2016 18:09:16: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk  currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  Train=[reader=[randomize=none]]  stderr=-



05/03/2016 18:09:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:09:16: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = $DataDir$/labelsmap.txt
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
Train=[reader=[randomize=none]]
stderr=-

05/03/2016 18:09:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:09:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:09:16: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/labelsmap.txt"
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/labelsmap.txt
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
Train=[reader=[randomize=none]]
stderr=-

05/03/2016 18:09:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:09:16: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:prefetch=true
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/labelsmap.txt
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/labelsmap.txt"
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]] [reader=[randomize=none]]

05/03/2016 18:09:16: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 18:09:16: Commands: Train Test
05/03/2016 18:09:16: Precision = "float"
05/03/2016 18:09:16: CNTKModelPath: /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
05/03/2016 18:09:16: CNTKCommandTrainInfo: Train : 5
05/03/2016 18:09:16: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

05/03/2016 18:09:16: ##############################################################################
05/03/2016 18:09:16: #                                                                            #
05/03/2016 18:09:16: # Action "train"                                                             #
05/03/2016 18:09:16: #                                                                            #
05/03/2016 18:09:16: ##############################################################################

05/03/2016 18:09:16: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
Reading UCI file /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train.txt

05/03/2016 18:09:16: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 18:09:16: Created model with 45 nodes on GPU 0.

05/03/2016 18:09:16: Training criterion node(s):
05/03/2016 18:09:16: 	CE = CrossEntropyWithSoftmax

05/03/2016 18:09:16: Evaluation criterion node(s):

05/03/2016 18:09:16: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
0x224bb48: {[features Value[32 x 32 x 3 x *]] }
0x7fedc56724c8: {[featScaled Value[32 x 32 x 3 x *]] }
0x7fedc5672598: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
0x7fedc56737a8: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
0x7fedc5673968: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
0x7fedc5673b28: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
0x7fedc5673ce8: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
0x7fedc5673ea8: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
0x7fedc56743e8: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }
0x7fedc56745a8: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x7fedc5674768: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
0x7fedc5674928: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
0x7fedc5674ae8: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
0x7fedc5675028: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
0x7fedc56751e8: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
0x7fedc56753a8: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
0x7fedc5675568: {[h1.bn Value[64 x *]] }
0x7fedc56758e8: {[conv3.c.c.b Gradient[64 x 1]] }
0x7fedc5675aa8: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
0x7fedc5675c68: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
0x7fedc5676748: {[CE Gradient[1]] }
0x7fedc5676908: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x *]] }
0x7fedc5676ac8: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
0x7fedc5676c88: {[OutputNodes.b Gradient[10]] }
0x7fedc5676e48: {[h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
0x7fedc5677038: {[h1.W Gradient[64 x 3 x 3 x 64]] }
0x7fedc56771f8: {[h1.b Gradient[64 x 1]] }
0x7fedc567dca8: {[CE Value[1]] }
0x7fedc5806128: {[OutputNodes.z Value[10 x *]] }
0x7fedce27e5d8: {[Err Value[1]] }
0x7fedce8368d8: {[featOffs Value[1 x 1]] }
0x7fedce837af8: {[labels Value[10 x *]] }
0x7fedd038b7f8: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
0x7fedd057c838: {[conv1.c.W Value[32 x 75]] }
0x7fedd057cd78: {[conv1.c.c.b Value[32 x 1]] }
0x7fedd057d798: {[conv1.c.c.sc Value[32 x 1]] }
0x7fedd057e208: {[conv1.c.c.isd Value[32 x 1]] }
0x7fedd057e638: {[conv1.c.c.m Value[32 x 1]] }
0x7fedd0580e58: {[conv2.c.W Value[32 x 800]] }
0x7fedd05819d8: {[conv3.c.c.isd Value[64 x 1]] }
0x7fedd0581e98: {[conv2.c.c.b Value[32 x 1]] }
0x7fedd05828b8: {[conv2.c.c.sc Value[32 x 1]] }
0x7fedd05833a8: {[conv2.c.c.m Value[32 x 1]] }
0x7fedd0583ee8: {[conv2.c.c.isd Value[32 x 1]] }
0x7fedd0585ba8: {[conv3.c.W Value[64 x 800]] }
0x7fedd05860e8: {[conv3.c.c.b Value[64 x 1]] }
0x7fedd0586aa8: {[conv3.c.c.sc Value[64 x 1]] }
0x7fedd0587968: {[conv3.c.c.m Value[64 x 1]] }
0x7fedd05896e8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7fedd058aa08: {[h1.b Value[64 x 1]] }
0x7fedd058b3f8: {[h1.sc Value[64 x 1]] }
0x7fedd058bed8: {[h1.m Value[64 x 1]] }
0x7fedd058ca08: {[h1.isd Value[64 x 1]] }
0x7fedd058de48: {[OutputNodes.W Value[10 x 64]] }
0x7fedd058ed38: {[OutputNodes.b Value[10]] }

05/03/2016 18:09:16: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 18:09:16: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 50000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch

05/03/2016 18:09:18: Starting minibatch loop.
05/03/2016 18:09:19: Finished Epoch[ 1 of 5]: [Training] CE = 2.27153802 * 128; Err = 0.86718750 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.00046874999; epochTime=2.61402s
05/03/2016 18:09:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

05/03/2016 18:09:19: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 1 at record count 128, and file position 128
already there from last epoch

05/03/2016 18:09:19: Starting minibatch loop.
05/03/2016 18:09:19: Finished Epoch[ 2 of 5]: [Training] CE = 2.27461433 * 128; Err = 0.89843750 * 128; totalSamplesSeen = 256; learningRatePerSample = 0.00046874999; epochTime=0.019584s
05/03/2016 18:09:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

05/03/2016 18:09:19: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 2 at record count 256, and file position 256
already there from last epoch

05/03/2016 18:09:19: Starting minibatch loop.
05/03/2016 18:09:19: Finished Epoch[ 3 of 5]: [Training] CE = 2.18162322 * 128; Err = 0.78906250 * 128; totalSamplesSeen = 384; learningRatePerSample = 0.00046874999; epochTime=0.019015s
05/03/2016 18:09:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

05/03/2016 18:09:19: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 3 at record count 384, and file position 384
already there from last epoch

05/03/2016 18:09:19: Starting minibatch loop.
05/03/2016 18:09:19: Finished Epoch[ 4 of 5]: [Training] CE = 2.14907622 * 128; Err = 0.77343750 * 128; totalSamplesSeen = 512; learningRatePerSample = 0.00046874999; epochTime=0.019115s
05/03/2016 18:09:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

05/03/2016 18:09:19: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 4 at record count 512, and file position 512
already there from last epoch

05/03/2016 18:09:19: Starting minibatch loop.
05/03/2016 18:09:19: Finished Epoch[ 5 of 5]: [Training] CE = 2.12590146 * 128; Err = 0.70312500 * 128; totalSamplesSeen = 640; learningRatePerSample = 0.00046874999; epochTime=0.019007s
05/03/2016 18:09:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
05/03/2016 18:09:19: CNTKCommandTrainEnd: Train

05/03/2016 18:09:19: Action "train" complete.


05/03/2016 18:09:19: ##############################################################################
05/03/2016 18:09:19: #                                                                            #
05/03/2016 18:09:19: # Action "test"                                                              #
05/03/2016 18:09:19: #                                                                            #
05/03/2016 18:09:19: ##############################################################################

Reading UCI file /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test.txt

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
0x7fedbe957618: {[h1.sc Value[64 x 1]] }
0x7fedbe958778: {[conv1.c.c.m Value[32 x 1]] }
0x7fedbe95bd38: {[conv3.c.W Value[64 x 800]] }
0x7fedbe95cdb8: {[h1.y Value[64 x *1]] }
0x7fedbe95cf78: {[OutputNodes.t Value[10 x *1]] }
0x7fedbe95d138: {[OutputNodes.z Value[10 x *1]] }
0x7fedbe96a938: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }
0x7fedbe96ac78: {[featScaled Value[32 x 32 x 3 x *1]] }
0x7fedc56767b8: {[conv1.y Value[32 x 32 x 32 x *1]] }
0x7fedc5676978: {[pool1 Value[15 x 15 x 32 x *1]] }
0x7fedc5676b38: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
0x7fedc5676eb8: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
0x7fedc56773f8: {[conv2.y Value[15 x 15 x 32 x *1]] }
0x7fedc56775b8: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7fedc5677778: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
0x7fedc5677af8: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
0x7fedc5678038: {[conv3.y Value[7 x 7 x 64 x *1]] }
0x7fedc56781f8: {[pool3 Value[3 x 3 x 64 x *1]] }
0x7fedc56783b8: {[h1.t Value[64 x *1]] }
0x7fedc56784b8: {[h1.bn Value[64 x *1]] }
0x7fedc5698eb8: {[OutputNodes.b Value[10]] }
0x7fedc5699bc8: {[OutputNodes.W Value[10 x 64]] }
0x7fedc569b0c8: {[conv1.c.W Value[32 x 75]] }
0x7fedc56acc28: {[conv1.c.c.sc Value[32 x 1]] }
0x7fedc56af2b8: {[featOffs Value[1 x 1]] }
0x7fedc56b01d8: {[features Value[32 x 32 x 3 x *1]] }
0x7fedc56b08a8: {[h1.m Value[64 x 1]] }
0x7fedc56b09c8: {[h1.b Value[64 x 1]] }
0x7fedc56b0f98: {[Err Value[1]] }
0x7fedd038bf38: {[conv3.c.c.sc Value[64 x 1]] }
0x7fedd038ec38: {[labels Value[10 x *1]] }
0x7fedd057e208: {[conv1.c.c.b Value[32 x 1]] }
0x7fedd057f2e8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7fedd0580a18: {[conv2.c.c.m Value[32 x 1]] }
0x7fedd0580ac8: {[conv2.c.c.isd Value[32 x 1]] }
0x7fedd0581958: {[conv1.c.c.isd Value[32 x 1]] }
0x7fedd0582138: {[conv3.c.c.isd Value[64 x 1]] }
0x7fedd05822d8: {[conv3.c.c.m Value[64 x 1]] }
0x7fedd05837d8: {[conv3.c.c.b Value[64 x 1]] }
0x7fedd058a4f8: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
0x7fedd058b998: {[conv2.c.c.sc Value[32 x 1]] }
0x7fedd058c1a8: {[conv2.c.W Value[32 x 800]] }
0x7fedd058de28: {[CE Value[1]] }
0x7fedd058e988: {[conv2.c.c.b Value[32 x 1]] }
0x7fedd058eeb8: {[h1.isd Value[64 x 1]] }

UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 10000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch
05/03/2016 18:09:25: Final Results: Minibatch[1-625]: Err = 0.85450000 * 10000; CE = 2.28512267 * 10000; perplexity = 9.82689160

05/03/2016 18:09:25: Action "test" complete.

05/03/2016 18:09:25: __COMPLETED__