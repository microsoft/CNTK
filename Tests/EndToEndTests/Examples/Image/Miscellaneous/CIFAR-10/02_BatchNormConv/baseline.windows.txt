Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] Train=[reader=[randomize=none]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 13:23:06
		Last modified date: Mon Apr 18 00:00:12 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
05/03/2016 14:03:54: Redirecting stderr to file -_Train_Test.log
05/03/2016 14:03:54: -------------------------------------------------------------------
05/03/2016 14:03:54: Build info: 

05/03/2016 14:03:54: 		Built time: May  3 2016 13:23:06
05/03/2016 14:03:54: 		Last modified date: Mon Apr 18 00:00:12 2016
05/03/2016 14:03:54: 		Build type: Release
05/03/2016 14:03:54: 		Build target: GPU
05/03/2016 14:03:54: 		With 1bit-SGD: no
05/03/2016 14:03:54: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
05/03/2016 14:03:54: 		CUB_PATH: C:\src\cub-1.4.1
05/03/2016 14:03:54: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
05/03/2016 14:03:54: 		Build Branch: HEAD
05/03/2016 14:03:54: 		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
05/03/2016 14:03:54: 		Built by svcphil on LIANA-09-w
05/03/2016 14:03:54: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
05/03/2016 14:03:54: -------------------------------------------------------------------

05/03/2016 14:03:54: Running on DPHAIM-25 at 2016/05/03 14:03:54
05/03/2016 14:03:54: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  Train=[reader=[randomize=none]]  stderr=-



05/03/2016 14:03:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:03:54: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = $DataDir$/labelsmap.txt
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
Train=[reader=[randomize=none]]
stderr=-

05/03/2016 14:03:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:03:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:03:54: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/labelsmap.txt"
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/labelsmap.txt
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
Train=[reader=[randomize=none]]
stderr=-

05/03/2016 14:03:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:03:54: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:prefetch=true
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "UCIFastReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Test.txt"
        randomize = "none"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/labelsmap.txt
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Train.txt"
        randomize = "auto"
        minibatchMode="full"
        features = [
            dim = 3072
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/labelsmap.txt"
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]] [reader=[randomize=none]]

05/03/2016 14:03:54: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 14:03:54: Commands: Train Test
05/03/2016 14:03:54: Precision = "float"
05/03/2016 14:03:54: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
05/03/2016 14:03:54: CNTKCommandTrainInfo: Train : 5
05/03/2016 14:03:54: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

05/03/2016 14:03:54: ##############################################################################
05/03/2016 14:03:54: #                                                                            #
05/03/2016 14:03:54: # Action "train"                                                             #
05/03/2016 14:03:54: #                                                                            #
05/03/2016 14:03:54: ##############################################################################

05/03/2016 14:03:54: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
Reading UCI file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Train.txt

05/03/2016 14:03:54: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 14:03:55: Created model with 45 nodes on GPU 0.

05/03/2016 14:03:55: Training criterion node(s):
05/03/2016 14:03:55: 	CE = CrossEntropyWithSoftmax

05/03/2016 14:03:55: Evaluation criterion node(s):

05/03/2016 14:03:55: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
000000C05806E620: {[features Value[32 x 32 x 3 x *]] }
000000C06FAFE330: {[conv1.c.W Value[32 x 75]] }
000000C06FAFE510: {[conv2.c.c.m Value[32 x 1]] }
000000C06FAFE790: {[featOffs Value[1 x 1]] }
000000C06FAFE970: {[conv1.c.c.isd Value[32 x 1]] }
000000C06FAFEA10: {[conv2.c.c.sc Value[32 x 1]] }
000000C06FAFEB50: {[conv1.c.c.sc Value[32 x 1]] }
000000C06FAFEBF0: {[conv2.c.W Value[32 x 800]] }
000000C06FAFED30: {[conv2.c.c.b Value[32 x 1]] }
000000C06FAFEF10: {[conv2.c.c.isd Value[32 x 1]] }
000000C06FAFF4B0: {[conv3.c.W Value[64 x 800]] }
000000C06FAFF9B0: {[conv3.c.c.sc Value[64 x 1]] }
000000C06FAFFA50: {[conv3.c.c.b Value[64 x 1]] }
000000C06FAFFF50: {[conv1.c.c.b Value[32 x 1]] }
000000C06FAFFFF0: {[labels Value[10 x *]] }
000000C06FB00130: {[conv1.c.c.m Value[32 x 1]] }
000000C071ED67C0: {[h1.isd Value[64 x 1]] }
000000C071ED6AE0: {[h1.sc Value[64 x 1]] }
000000C071ED6C20: {[conv3.c.c.m Value[64 x 1]] }
000000C071ED6D60: {[OutputNodes.b Value[10]] }
000000C071ED7760: {[h1.W Value[64 x 3 x 3 x 64]] }
000000C071ED7800: {[h1.m Value[64 x 1]] }
000000C071ED80C0: {[conv3.c.c.isd Value[64 x 1]] }
000000C071ED8160: {[h1.b Value[64 x 1]] }
000000C071ED82A0: {[OutputNodes.W Value[10 x 64]] }
000000C07707FDC0: {[Err Value[1]] }
000000C07707FF00: {[OutputNodes.z Value[10 x *]] }
000000C077080220: {[featScaled Value[32 x 32 x 3 x *]] }
000000C0770802C0: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
000000C0770804A0: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
000000C077080540: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
000000C077080680: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
000000C0770807C0: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
000000C077080A40: {[CE Value[1]] }
000000C077080B80: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
000000C077080CC0: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
000000C077080EA0: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }
000000C077080F40: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
000000C077080FE0: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
000000C07838AF70: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
000000C07838B0B0: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
000000C07838B290: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
000000C07838B330: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
000000C07838B3D0: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
000000C07838B470: {[h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
000000C07838B510: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
000000C07838B830: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
000000C07838B8D0: {[h1.b Gradient[64 x 1]] }
000000C07838BAB0: {[conv3.c.c.b Gradient[64 x 1]] }
000000C07838BB50: {[CE Gradient[1]] }
000000C07838BC90: {[OutputNodes.b Gradient[10]] }
000000C07838BD30: {[h1.bn Value[64 x *]] }
000000C07838BDD0: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
000000C07838BF10: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x *]] }
000000C07838C230: {[h1.W Gradient[64 x 3 x 3 x 64]] }

05/03/2016 14:03:55: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 14:03:55: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 50000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch

05/03/2016 14:03:57: Starting minibatch loop.
05/03/2016 14:03:58: Finished Epoch[ 1 of 5]: [Training] CE = 2.27153802 * 128; Err = 0.86718750 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.00046874999; epochTime=2.59824s
05/03/2016 14:03:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

05/03/2016 14:03:58: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 1 at record count 128, and file position 128
already there from last epoch

05/03/2016 14:03:58: Starting minibatch loop.
05/03/2016 14:03:58: Finished Epoch[ 2 of 5]: [Training] CE = 2.27461481 * 128; Err = 0.89843750 * 128; totalSamplesSeen = 256; learningRatePerSample = 0.00046874999; epochTime=0.021737s
05/03/2016 14:03:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

05/03/2016 14:03:58: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 2 at record count 256, and file position 256
already there from last epoch

05/03/2016 14:03:58: Starting minibatch loop.
05/03/2016 14:03:58: Finished Epoch[ 3 of 5]: [Training] CE = 2.18162346 * 128; Err = 0.78906250 * 128; totalSamplesSeen = 384; learningRatePerSample = 0.00046874999; epochTime=0.021562s
05/03/2016 14:03:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

05/03/2016 14:03:58: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 3 at record count 384, and file position 384
already there from last epoch

05/03/2016 14:03:58: Starting minibatch loop.
05/03/2016 14:03:58: Finished Epoch[ 4 of 5]: [Training] CE = 2.14907622 * 128; Err = 0.77343750 * 128; totalSamplesSeen = 512; learningRatePerSample = 0.00046874999; epochTime=0.021424s
05/03/2016 14:03:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

05/03/2016 14:03:58: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
epochSize rounded up to 128 to fit an integral number of minibatches
starting epoch 4 at record count 512, and file position 512
already there from last epoch

05/03/2016 14:03:58: Starting minibatch loop.
05/03/2016 14:03:58: Finished Epoch[ 5 of 5]: [Training] CE = 2.12590122 * 128; Err = 0.70312500 * 128; totalSamplesSeen = 640; learningRatePerSample = 0.00046874999; epochTime=0.021467s
05/03/2016 14:03:58: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
05/03/2016 14:03:58: CNTKCommandTrainEnd: Train

05/03/2016 14:03:58: Action "train" complete.


05/03/2016 14:03:58: ##############################################################################
05/03/2016 14:03:58: #                                                                            #
05/03/2016 14:03:58: # Action "test"                                                              #
05/03/2016 14:03:58: #                                                                            #
05/03/2016 14:03:58: ##############################################################################

Reading UCI file C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Test.txt

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
000000C06FAFE290: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
000000C06FAFE470: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
000000C06FAFE790: {[conv3.y Value[7 x 7 x 64 x *1]] }
000000C06FAFE970: {[conv2.y Value[15 x 15 x 32 x *1]] }
000000C06FAFEAB0: {[Err Value[1]] }
000000C06FAFEB50: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }
000000C06FAFEBF0: {[pool3 Value[3 x 3 x 64 x *1]] }
000000C06FAFEC90: {[h1.t Value[64 x *1]] }
000000C06FAFED30: {[conv1.y Value[32 x 32 x 32 x *1]] }
000000C06FAFF050: {[CE Value[1]] }
000000C06FAFF0F0: {[OutputNodes.b Value[10]] }
000000C06FAFF410: {[featScaled Value[32 x 32 x 3 x *1]] }
000000C06FAFF690: {[pool2 Value[7 x 7 x 32 x *1]] }
000000C06FAFF730: {[labels Value[10 x *1]] }
000000C06FAFF870: {[OutputNodes.W Value[10 x 64]] }
000000C06FAFF9B0: {[pool1 Value[15 x 15 x 32 x *1]] }
000000C06FAFFA50: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
000000C06FAFFC30: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
000000C06FB00090: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
000000C071ED73A0: {[h1.y Value[64 x *1]] }
000000C071ED7620: {[OutputNodes.z Value[10 x *1]] }
000000C071ED7C60: {[h1.bn Value[64 x *1]] }
000000C071ED8200: {[OutputNodes.t Value[10 x *1]] }
000000C0783884F0: {[featOffs Value[1 x 1]] }
000000C078388590: {[h1.sc Value[64 x 1]] }
000000C078388770: {[h1.isd Value[64 x 1]] }
000000C078388F90: {[features Value[32 x 32 x 3 x *1]] }
000000C078389490: {[h1.b Value[64 x 1]] }
000000C078389710: {[conv3.c.W Value[64 x 800]] }
000000C078389C10: {[h1.m Value[64 x 1]] }
000000C078389DF0: {[h1.W Value[64 x 3 x 3 x 64]] }
000000C07838AD90: {[conv3.c.c.b Value[64 x 1]] }
000000C07838AF70: {[conv3.c.c.isd Value[64 x 1]] }
000000C07838B290: {[conv1.c.c.isd Value[32 x 1]] }
000000C07838B330: {[conv1.c.c.m Value[32 x 1]] }
000000C07838B470: {[conv3.c.c.m Value[64 x 1]] }
000000C07838B6F0: {[conv3.c.c.sc Value[64 x 1]] }
000000C07838BA10: {[conv2.c.c.isd Value[32 x 1]] }
000000C07838BB50: {[conv2.c.c.b Value[32 x 1]] }
000000C07838BD30: {[conv1.c.c.b Value[32 x 1]] }
000000C07838BE70: {[conv2.c.c.m Value[32 x 1]] }
000000C07838BF10: {[conv1.c.c.sc Value[32 x 1]] }
000000C07838BFB0: {[conv2.c.c.sc Value[32 x 1]] }
000000C07838C0F0: {[conv1.c.W Value[32 x 75]] }
000000C07838C190: {[conv2.c.W Value[32 x 800]] }

UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 10000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch
05/03/2016 14:04:09: Final Results: Minibatch[1-625]: Err = 0.85450000 * 10000; CE = 2.28512259 * 10000; perplexity = 9.82689087

05/03/2016 14:04:09: Action "test" complete.

05/03/2016 14:04:09: __COMPLETED__