CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.cntk currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 09:41:56
		Last modified date: Fri Aug 12 07:32:43 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by philly on f67b30a647de
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
08/16/2016 10:51:22: Redirecting stderr to file -_Train_Test.log
08/16/2016 10:51:22: -------------------------------------------------------------------
08/16/2016 10:51:22: Build info: 

08/16/2016 10:51:22: 		Built time: Aug 16 2016 09:41:56
08/16/2016 10:51:22: 		Last modified date: Fri Aug 12 07:32:43 2016
08/16/2016 10:51:22: 		Build type: release
08/16/2016 10:51:22: 		Build target: GPU
08/16/2016 10:51:22: 		With 1bit-SGD: no
08/16/2016 10:51:22: 		Math lib: mkl
08/16/2016 10:51:22: 		CUDA_PATH: /usr/local/cuda-7.5
08/16/2016 10:51:22: 		CUB_PATH: /usr/local/cub-1.4.1
08/16/2016 10:51:22: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/16/2016 10:51:22: 		Build Branch: HEAD
08/16/2016 10:51:22: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 10:51:22: 		Built by philly on f67b30a647de
08/16/2016 10:51:22: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/16/2016 10:51:22: -------------------------------------------------------------------
08/16/2016 10:51:23: -------------------------------------------------------------------
08/16/2016 10:51:23: GPU info:

08/16/2016 10:51:23: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:51:23: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:51:23: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:51:23: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/16/2016 10:51:23: -------------------------------------------------------------------

08/16/2016 10:51:23: Running on localhost at 2016/08/16 10:51:23
08/16/2016 10:51:23: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.cntk  currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData  RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu  DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



08/16/2016 10:51:23: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:51:23: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "$ModelDir$/05_ConvLocal"
stderr = "$OutputDir$/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/16/2016 10:51:23: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:51:23: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 10:51:23: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal"
stderr = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/16/2016 10:51:23: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 10:51:23: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 05_ConvLocal.cntk:command=Train:Test
configparameters: 05_ConvLocal.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 05_ConvLocal.cntk:currentDirectory=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
configparameters: 05_ConvLocal.cntk:DataDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
configparameters: 05_ConvLocal.cntk:deviceId=0
configparameters: 05_ConvLocal.cntk:imageLayout=cudnn
configparameters: 05_ConvLocal.cntk:ModelDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models
configparameters: 05_ConvLocal.cntk:modelPath=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
configparameters: 05_ConvLocal.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 05_ConvLocal.cntk:numMBsToShowResult=50
configparameters: 05_ConvLocal.cntk:OutputDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:precision=float
configparameters: 05_ConvLocal.cntk:RootDir=.
configparameters: 05_ConvLocal.cntk:RunDir=/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:stderr=-
configparameters: 05_ConvLocal.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 05_ConvLocal.cntk:timestamping=true
configparameters: 05_ConvLocal.cntk:traceLevel=1
configparameters: 05_ConvLocal.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

08/16/2016 10:51:23: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 10:51:23: Commands: Train Test
08/16/2016 10:51:23: Precision = "float"
08/16/2016 10:51:23: CNTKModelPath: /tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
08/16/2016 10:51:23: CNTKCommandTrainInfo: Train : 5
08/16/2016 10:51:23: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

08/16/2016 10:51:23: ##############################################################################
08/16/2016 10:51:23: #                                                                            #
08/16/2016 10:51:23: # Action "train"                                                             #
08/16/2016 10:51:23: #                                                                            #
08/16/2016 10:51:23: ##############################################################################

08/16/2016 10:51:23: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

08/16/2016 10:51:23: Creating virgin network.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node 'conv1.W' (LearnableParameter operation): Initializing Parameter[64 x 75] <- 0.000000.
Node 'conv1.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv2.W' (LearnableParameter operation): Initializing Parameter[64 x 1600] <- 0.000000.
Node 'conv2.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv3.W' (LearnableParameter operation): Initializing Parameter[3136 x 576] <- 0.000000.
Node 'conv3.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv4.W' (LearnableParameter operation): Initializing Parameter[1568 x 576] <- 0.000000.
Node 'conv4.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 7 x 7 x 32] <- 0.000000.
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'featOffs' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 128.000000.
Node 'conv1.W' (LearnableParameter operation): Initializing Parameter[64 x 75] <- gaussian(seed=1, range=0.023094*0.004300, onCPU=false).
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
Node 'conv1.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv2.W' (LearnableParameter operation): Initializing Parameter[64 x 1600] <- gaussian(seed=2, range=0.005000*1.414000, onCPU=false).
Node 'conv2.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv3.W' (LearnableParameter operation): Initializing Parameter[3136 x 576] <- gaussian(seed=3, range=0.008333*1.414000, onCPU=false).
Node 'conv3.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 64] <- 0.000000.
Node 'conv4.W' (LearnableParameter operation): Initializing Parameter[1568 x 576] <- gaussian(seed=4, range=0.008333*1.414000, onCPU=false).
Node 'conv4.b' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node 'OutputNodes.W' (LearnableParameter operation): Initializing Parameter[10 x 7 x 7 x 32] <- gaussian(seed=5, range=0.005051*1.500000, onCPU=false).
Node 'OutputNodes.b' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ClassificationError()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *], [1 x 1 x 64] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 32 x *]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *], [1 x 1 x 32] -> [7 x 7 x 32 x *]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ClassificationError (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 10:51:24: Created model with 32 nodes on GPU 0.

08/16/2016 10:51:24: Training criterion node(s):
08/16/2016 10:51:24: 	CE = CrossEntropyWithSoftmax

08/16/2016 10:51:24: Evaluation criterion node(s):
08/16/2016 10:51:24: 	Err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 59 matrices, 35 are shared as 16, and 24 are not shared.

	{ OutputNodes.W : [10 x 7 x 7 x 32] (gradient)
	  OutputNodes.z : [10 x *] (gradient) }
	{ conv4.b : [1 x 1 x 32] (gradient)
	  conv4.y : [7 x 7 x 32 x *] (gradient) }
	{ conv1.W : [64 x 75] (gradient)
	  conv1.p : [32 x 32 x 64 x *] }
	{ conv1.c : [32 x 32 x 64 x *] (gradient)
	  conv1.y : [32 x 32 x 64 x *] }
	{ conv1.p : [32 x 32 x 64 x *] (gradient)
	  pool1 : [15 x 15 x 64 x *] }
	{ conv1.b : [1 x 1 x 64] (gradient)
	  conv1.y : [32 x 32 x 64 x *] (gradient) }
	{ conv2.W : [64 x 1600] (gradient)
	  conv2.p : [15 x 15 x 64 x *] }
	{ conv2.c : [15 x 15 x 64 x *] (gradient)
	  conv2.y : [15 x 15 x 64 x *] }
	{ conv2.p : [15 x 15 x 64 x *] (gradient)
	  pool1 : [15 x 15 x 64 x *] (gradient)
	  pool2 : [7 x 7 x 64 x *] }
	{ conv2.b : [1 x 1 x 64] (gradient)
	  conv2.y : [15 x 15 x 64 x *] (gradient) }
	{ conv3.W : [3136 x 576] (gradient)
	  conv3.p : [7 x 7 x 64 x *] }
	{ conv3.c : [7 x 7 x 64 x *] (gradient)
	  conv3.y : [7 x 7 x 64 x *] }
	{ conv3.p : [7 x 7 x 64 x *] (gradient)
	  pool2 : [7 x 7 x 64 x *] (gradient) }
	{ conv4.W : [1568 x 576] (gradient)
	  conv4.p : [7 x 7 x 32 x *] }
	{ conv4.c : [7 x 7 x 32 x *] (gradient)
	  conv4.y : [7 x 7 x 32 x *] }
	{ OutputNodes.t : [10 x *]
	  conv3.b : [1 x 1 x 64] (gradient)
	  conv3.y : [7 x 7 x 64 x *] (gradient)
	  conv4.p : [7 x 7 x 32 x *] (gradient) }


08/16/2016 10:51:24: Training 2832618 parameters in 10 out of 10 parameter tensors and 27 nodes with gradient:

08/16/2016 10:51:24: 	Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 7 x 7 x 32]
08/16/2016 10:51:24: 	Node 'OutputNodes.b' (LearnableParameter operation) : [10]
08/16/2016 10:51:24: 	Node 'conv1.W' (LearnableParameter operation) : [64 x 75]
08/16/2016 10:51:24: 	Node 'conv1.b' (LearnableParameter operation) : [1 x 1 x 64]
08/16/2016 10:51:24: 	Node 'conv2.W' (LearnableParameter operation) : [64 x 1600]
08/16/2016 10:51:24: 	Node 'conv2.b' (LearnableParameter operation) : [1 x 1 x 64]
08/16/2016 10:51:24: 	Node 'conv3.W' (LearnableParameter operation) : [3136 x 576]
08/16/2016 10:51:24: 	Node 'conv3.b' (LearnableParameter operation) : [1 x 1 x 64]
08/16/2016 10:51:24: 	Node 'conv4.W' (LearnableParameter operation) : [1568 x 576]
08/16/2016 10:51:24: 	Node 'conv4.b' (LearnableParameter operation) : [1 x 1 x 32]

08/16/2016 10:51:24: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/16/2016 10:51:24: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

08/16/2016 10:51:24: Starting minibatch loop.
08/16/2016 10:51:28: Finished Epoch[ 1 of 5]: [Training] CE = 2.30258331 * 100; Err = 0.90000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00015625; epochTime=3.83324s
08/16/2016 10:51:28: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.1'

08/16/2016 10:51:28: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

08/16/2016 10:51:28: Starting minibatch loop.
08/16/2016 10:51:28: Finished Epoch[ 2 of 5]: [Training] CE = 2.30260956 * 100; Err = 0.91000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00015625; epochTime=0.190736s
08/16/2016 10:51:28: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.2'

08/16/2016 10:51:28: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

08/16/2016 10:51:28: Starting minibatch loop.
08/16/2016 10:51:28: Finished Epoch[ 3 of 5]: [Training] CE = 2.30259949 * 100; Err = 0.90000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00015625; epochTime=0.190026s
08/16/2016 10:51:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.3'

08/16/2016 10:51:29: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

08/16/2016 10:51:29: Starting minibatch loop.
08/16/2016 10:51:29: Finished Epoch[ 4 of 5]: [Training] CE = 2.30261490 * 100; Err = 0.92000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00015625; epochTime=0.186068s
08/16/2016 10:51:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.4'

08/16/2016 10:51:29: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

08/16/2016 10:51:29: Starting minibatch loop.
08/16/2016 10:51:29: Finished Epoch[ 5 of 5]: [Training] CE = 2.30255005 * 100; Err = 0.92000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00015625; epochTime=0.187202s
08/16/2016 10:51:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160816095502.258817/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal'
08/16/2016 10:51:30: CNTKCommandTrainEnd: Train

08/16/2016 10:51:30: Action "train" complete.


08/16/2016 10:51:30: ##############################################################################
08/16/2016 10:51:30: #                                                                            #
08/16/2016 10:51:30: # Action "test"                                                              #
08/16/2016 10:51:30: #                                                                            #
08/16/2016 10:51:30: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ClassificationError()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *1], [1 x 1 x 32] -> [7 x 7 x 32 x *1]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ClassificationError (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 32 matrices, 0 are shared as 0, and 32 are not shared.


BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/16/2016 10:51:31: Minibatch[1-50]: Err = 0.88250000 * 800; CE = 2.30253527 * 800
08/16/2016 10:51:31: Minibatch[51-100]: Err = 0.89625000 * 800; CE = 2.30253128 * 800
08/16/2016 10:51:31: Minibatch[101-150]: Err = 0.89000000 * 800; CE = 2.30254278 * 800
08/16/2016 10:51:32: Minibatch[151-200]: Err = 0.87625000 * 800; CE = 2.30252282 * 800
08/16/2016 10:51:32: Minibatch[201-250]: Err = 0.89250000 * 800; CE = 2.30252040 * 800
08/16/2016 10:51:32: Minibatch[251-300]: Err = 0.88625000 * 800; CE = 2.30254718 * 800
08/16/2016 10:51:32: Minibatch[301-350]: Err = 0.87250000 * 800; CE = 2.30251737 * 800
08/16/2016 10:51:32: Minibatch[351-400]: Err = 0.89875000 * 800; CE = 2.30257154 * 800
08/16/2016 10:51:33: Minibatch[401-450]: Err = 0.90000000 * 800; CE = 2.30253825 * 800
08/16/2016 10:51:33: Minibatch[451-500]: Err = 0.85625000 * 800; CE = 2.30253371 * 800
08/16/2016 10:51:33: Minibatch[501-550]: Err = 0.90125000 * 800; CE = 2.30255184 * 800
08/16/2016 10:51:33: Minibatch[551-600]: Err = 0.88125000 * 800; CE = 2.30251704 * 800
08/16/2016 10:51:34: Minibatch[601-625]: Err = 0.89250000 * 400; CE = 2.30252918 * 400
08/16/2016 10:51:34: Final Results: Minibatch[1-625]: Err = 0.88640000 * 10000; CE = 2.30253552 * 10000; perplexity = 9.99950432

08/16/2016 10:51:34: Action "test" complete.

08/16/2016 10:51:34: __COMPLETED__