Looking for data in: /hdfs/public/CNTKTestData
Copying test data to local directory
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 17:56:15
		Last modified date: Tue May  3 11:36:22 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
		Built by philly on 18750d26eb32
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
05/03/2016 18:17:54: Redirecting stderr to file -_Train_Test.log
05/03/2016 18:17:54: -------------------------------------------------------------------
05/03/2016 18:17:54: Build info: 

05/03/2016 18:17:54: 		Built time: May  3 2016 17:56:15
05/03/2016 18:17:54: 		Last modified date: Tue May  3 11:36:22 2016
05/03/2016 18:17:54: 		Build type: release
05/03/2016 18:17:54: 		Build target: GPU
05/03/2016 18:17:54: 		With 1bit-SGD: no
05/03/2016 18:17:54: 		Math lib: acml
05/03/2016 18:17:54: 		CUDA_PATH: /usr/local/cuda-7.5
05/03/2016 18:17:54: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 18:17:54: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 18:17:54: 		Build Branch: HEAD
05/03/2016 18:17:54: 		Build SHA1: 571b092d60e131fd529081a5ed52af2dc815dc82
05/03/2016 18:17:54: 		Built by philly on 18750d26eb32
05/03/2016 18:17:54: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
05/03/2016 18:17:54: -------------------------------------------------------------------

05/03/2016 18:17:54: Running on localhost at 2016/05/03 18:17:54
05/03/2016 18:17:54: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk  currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData  RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



05/03/2016 18:17:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:17:54: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

05/03/2016 18:17:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:17:54: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 18:17:54: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt"
Proj32to64Filename = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

05/03/2016 18:17:54: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 18:17:54: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
configparameters: 04_ResNet_56.cntk:DataDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:initOnCPUOnly=true
configparameters: 04_ResNet_56.cntk:ModelDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=16]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

05/03/2016 18:17:54: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 18:17:54: Commands: Train Test
05/03/2016 18:17:54: Precision = "float"
05/03/2016 18:17:54: CNTKModelPath: /tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
05/03/2016 18:17:54: CNTKCommandTrainInfo: Train : 1
05/03/2016 18:17:54: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

05/03/2016 18:17:54: ##############################################################################
05/03/2016 18:17:54: #                                                                            #
05/03/2016 18:17:54: # Action "train"                                                             #
05/03/2016 18:17:54: #                                                                            #
05/03/2016 18:17:54: ##############################################################################

05/03/2016 18:17:54: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

05/03/2016 18:17:54: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 18:17:55: Created model with 949 nodes on GPU 0.

05/03/2016 18:17:55: Training criterion node(s):
05/03/2016 18:17:55: 	CE = CrossEntropyWithSoftmax

05/03/2016 18:17:55: Evaluation criterion node(s):

05/03/2016 18:17:55: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] }
0x3496d98: {[features Value[32 x 32 x 3 x *]] }
0x40520d8: {[labels Value[10 x *]] }
0x4052ea8: {[conv1.c.W Value[16 x 27]] }
0x4053e08: {[conv1.c.c.sc Value[16 x 1]] }
0x4054108: {[conv1.c.c.b Value[16 x 1]] }
0x4055208: {[conv1.c.c.m Value[16 x 1]] }
0x4056098: {[conv1.c.c.isd Value[16 x 1]] }
0x4057b18: {[rn1_1.c1.c.W Value[16 x 144]] }
0x40583a8: {[rn1_1.c1.c.c.b Value[16 x 1]] }
0x4058e88: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
0x4059a18: {[rn1_1.c1.c.c.m Value[16 x 1]] }
0x405a548: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
0x405b688: {[rn1_1.c2.W Value[16 x 144]] }
0x405c6a8: {[rn1_1.c2.c.b Value[16 x 1]] }
0x405d0a8: {[rn1_1.c2.c.sc Value[16 x 1]] }
0x405dba8: {[rn1_1.c2.c.m Value[16 x 1]] }
0x405e728: {[rn1_1.c2.c.isd Value[16 x 1]] }
0x405efe8: {[rn1_3.c2.c.b Value[16 x 1]] }
0x4060618: {[rn1_2.c1.c.W Value[16 x 144]] }
0x4060f18: {[rn1_2.c1.c.c.b Value[16 x 1]] }
0x40618b8: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
0x40623b8: {[rn1_2.c1.c.c.m Value[16 x 1]] }
0x4062f18: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
0x4064888: {[rn1_2.c2.W Value[16 x 144]] }
0x40650a8: {[rn1_2.c2.c.b Value[16 x 1]] }
0x4065a38: {[rn1_2.c2.c.sc Value[16 x 1]] }
0x40665b8: {[rn1_2.c2.c.m Value[16 x 1]] }
0x4067108: {[rn1_2.c2.c.isd Value[16 x 1]] }
0x4068218: {[rn1_3.c1.c.c.b Value[16 x 1]] }
0x4068d48: {[rn1_3.c1.c.W Value[16 x 144]] }
0x448d258: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
0x448dd58: {[rn1_3.c1.c.c.m Value[16 x 1]] }
0x448e8c8: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
0x448f978: {[rn1_3.c2.W Value[16 x 144]] }
0x4490b38: {[rn1_6.c2.c.m Value[16 x 1]] }
0x4491538: {[rn1_3.c2.c.sc Value[16 x 1]] }
0x4491fd8: {[rn1_3.c2.c.isd Value[16 x 1]] }
0x44923a8: {[rn1_3.c2.c.m Value[16 x 1]] }
0x4494b78: {[rn1_4.c1.c.W Value[16 x 144]] }
0x4495478: {[rn1_4.c1.c.c.b Value[16 x 1]] }
0x4495e48: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
0x4496948: {[rn1_4.c1.c.c.m Value[16 x 1]] }
0x4497478: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
0x4498528: {[rn1_4.c2.W Value[16 x 144]] }
0x4499338: {[rn1_4.c2.c.b Value[16 x 1]] }
0x449a078: {[rn1_4.c2.c.sc Value[16 x 1]] }
0x449ab68: {[rn1_4.c2.c.m Value[16 x 1]] }
0x449b718: {[rn1_4.c2.c.isd Value[16 x 1]] }
0x449d388: {[rn1_5.c1.c.W Value[16 x 144]] }
0x449dc88: {[rn1_5.c1.c.c.b Value[16 x 1]] }
0x449e658: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
0x449f158: {[rn1_5.c1.c.c.m Value[16 x 1]] }
0x449fcf8: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
0x44a1618: {[rn1_5.c2.W Value[16 x 144]] }
0x44a1b58: {[rn1_5.c2.c.b Value[16 x 1]] }
0x44a2558: {[rn1_5.c2.c.sc Value[16 x 1]] }
0x44a3408: {[rn1_5.c2.c.m Value[16 x 1]] }
0x44a3ef8: {[rn1_5.c2.c.isd Value[16 x 1]] }
0x44a4f98: {[rn1_6.c1.c.W Value[16 x 144]] }
0x44a64c8: {[rn1_6.c1.c.c.b Value[16 x 1]] }
0x44a6e98: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
0x44a7948: {[rn1_6.c1.c.c.m Value[16 x 1]] }
0x44a84e8: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
0x44a9e08: {[rn1_6.c2.W Value[16 x 144]] }
0x44aa348: {[rn1_6.c2.c.b Value[16 x 1]] }
0x44ab0c8: {[rn1_6.c2.c.sc Value[16 x 1]] }
0x44abb08: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
0x44ac628: {[rn1_13.c1.c.c.m Value[16 x 1]] }
0x44acf68: {[rn1_6.c2.c.isd Value[16 x 1]] }
0x44aebc8: {[rn1_7.c1.c.W Value[16 x 144]] }
0x44af4a8: {[rn1_7.c1.c.c.b Value[16 x 1]] }
0x44afe78: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
0x44b0978: {[rn1_7.c1.c.c.m Value[16 x 1]] }
0x44b14e8: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
0x44b2e58: {[rn1_7.c2.W Value[16 x 144]] }
0x44b36c8: {[rn1_7.c2.c.b Value[16 x 1]] }
0x44b40e8: {[rn1_7.c2.c.sc Value[16 x 1]] }
0x44b47c8: {[rn1_7.c2.c.isd Value[16 x 1]] }
0x44b4bf8: {[rn1_7.c2.c.m Value[16 x 1]] }
0x44b73c8: {[rn1_8.c1.c.W Value[16 x 144]] }
0x44b7cc8: {[rn1_8.c1.c.c.b Value[16 x 1]] }
0x44b8698: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
0x44b9198: {[rn1_8.c1.c.c.m Value[16 x 1]] }
0x44b9cc8: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
0x44bb5f8: {[rn1_8.c2.W Value[16 x 144]] }
0x44bbb38: {[rn1_8.c2.c.b Value[16 x 1]] }
0x44bc558: {[rn1_8.c2.c.sc Value[16 x 1]] }
0x44bd378: {[rn1_8.c2.c.m Value[16 x 1]] }
0x44bdf28: {[rn1_8.c2.c.isd Value[16 x 1]] }
0x44bfc08: {[rn1_9.c1.c.W Value[16 x 144]] }
0x44c04a8: {[rn1_9.c1.c.c.b Value[16 x 1]] }
0x44c0e78: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
0x44c1978: {[rn1_9.c1.c.c.m Value[16 x 1]] }
0x44c2518: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
0x44c3e38: {[rn1_9.c2.W Value[16 x 144]] }
0x44c4378: {[rn1_9.c2.c.b Value[16 x 1]] }
0x44c50f8: {[rn1_9.c2.c.sc Value[16 x 1]] }
0x44c5be8: {[rn1_9.c2.c.m Value[16 x 1]] }
0x44c6728: {[rn1_9.c2.c.isd Value[16 x 1]] }
0x44c84a8: {[rn1_10.c1.c.W Value[16 x 144]] }
0x44c8cf8: {[rn1_10.c1.c.c.b Value[16 x 1]] }
0x44c9738: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
0x44ca248: {[rn1_10.c1.c.c.m Value[16 x 1]] }
0x44ca9c8: {[rn1_10.c2.W Value[16 x 144]] }
0x44cad98: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
0x44cbe98: {[rn1_10.c2.c.b Value[16 x 1]] }
0x44cd988: {[rn1_10.c2.c.sc Value[16 x 1]] }
0x44ce488: {[rn1_10.c2.c.m Value[16 x 1]] }
0x44ceff8: {[rn1_10.c2.c.isd Value[16 x 1]] }
0x44d0d88: {[rn1_11.c1.c.W Value[16 x 144]] }
0x44d1648: {[rn1_11.c1.c.c.b Value[16 x 1]] }
0x44d2028: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
0x44d2b68: {[rn1_11.c1.c.c.m Value[16 x 1]] }
0x44d36d8: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
0x44d50b8: {[rn1_11.c2.W Value[16 x 144]] }
0x44d5908: {[rn1_11.c2.c.b Value[16 x 1]] }
0x44d62d8: {[rn1_11.c2.c.sc Value[16 x 1]] }
0x44d6dd8: {[rn1_11.c2.c.m Value[16 x 1]] }
0x44d7948: {[rn1_11.c2.c.isd Value[16 x 1]] }
0x44d9678: {[rn1_12.c1.c.W Value[16 x 144]] }
0x44d9f38: {[rn1_12.c1.c.c.b Value[16 x 1]] }
0x44da978: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
0x44db488: {[rn1_12.c1.c.c.m Value[16 x 1]] }
0x44dbfd8: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
0x44dd968: {[rn1_12.c2.W Value[16 x 144]] }
0x44de248: {[rn1_12.c2.c.b Value[16 x 1]] }
0x44dec18: {[rn1_12.c2.c.sc Value[16 x 1]] }
0x44df718: {[rn1_12.c2.c.m Value[16 x 1]] }
0x44e0258: {[rn1_12.c2.c.isd Value[16 x 1]] }
0x44e2008: {[rn1_13.c1.c.W Value[16 x 144]] }
0x44e2898: {[rn1_13.c1.c.c.b Value[16 x 1]] }
0x44e38e8: {[rn2_7.c2.W Value[32 x 288]] }
0x44e4688: {[rn2_7.c2.c.b Value[32 x 1]] }
0x44e5948: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
0x44e7288: {[rn1_13.c2.W Value[16 x 144]] }
0x44e7b58: {[rn1_13.c2.c.b Value[16 x 1]] }
0x44e8528: {[rn1_13.c2.c.sc Value[16 x 1]] }
0x44e8fd8: {[rn1_13.c2.c.m Value[16 x 1]] }
0x44e9b18: {[rn1_13.c2.c.isd Value[16 x 1]] }
0x44eb908: {[rn1_14.c1.c.W Value[16 x 144]] }
0x44ec158: {[rn1_14.c1.c.c.b Value[16 x 1]] }
0x44ecb98: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
0x44ed6a8: {[rn1_14.c1.c.c.m Value[16 x 1]] }
0x44ee228: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
0x44efb78: {[rn1_14.c2.W Value[16 x 144]] }
0x44f0458: {[rn1_14.c2.c.b Value[16 x 1]] }
0x44f0e28: {[rn1_14.c2.c.sc Value[16 x 1]] }
0x44f1928: {[rn1_14.c2.c.m Value[16 x 1]] }
0x44f2458: {[rn1_14.c2.c.isd Value[16 x 1]] }
0x44f41e8: {[rn1_15.c1.c.W Value[16 x 144]] }
0x44f4aa8: {[rn1_15.c1.c.c.b Value[16 x 1]] }
0x44f5488: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
0x44f5fc8: {[rn1_15.c1.c.c.m Value[16 x 1]] }
0x44f6b38: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
0x44f8518: {[rn1_15.c2.W Value[16 x 144]] }
0x44f8d88: {[rn1_15.c2.c.b Value[16 x 1]] }
0x44f9758: {[rn1_15.c2.c.sc Value[16 x 1]] }
0x44fa238: {[rn1_15.c2.c.m Value[16 x 1]] }
0x44fad98: {[rn1_15.c2.c.isd Value[16 x 1]] }
0x44fcae8: {[rn1_16.c1.c.W Value[16 x 144]] }
0x44fd3a8: {[rn1_16.c1.c.c.b Value[16 x 1]] }
0x44fdde8: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
0x44fe8f8: {[rn1_16.c1.c.c.m Value[16 x 1]] }
0x44ff448: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
0x4500dd8: {[rn1_16.c2.W Value[16 x 144]] }
0x45016b8: {[rn1_16.c2.c.b Value[16 x 1]] }
0x4502088: {[rn1_16.c2.c.sc Value[16 x 1]] }
0x4502b88: {[rn1_16.c2.c.m Value[16 x 1]] }
0x45036c8: {[rn1_16.c2.c.isd Value[16 x 1]] }
0x4505478: {[rn1_17.c1.c.W Value[16 x 144]] }
0x4505d08: {[rn1_17.c1.c.c.b Value[16 x 1]] }
0x4506748: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
0x4507258: {[rn1_17.c1.c.c.m Value[16 x 1]] }
0x4507d68: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
0x45096e8: {[rn1_17.c2.W Value[16 x 144]] }
0x4509fb8: {[rn1_17.c2.c.b Value[16 x 1]] }
0x450a988: {[rn1_17.c2.c.sc Value[16 x 1]] }
0x450b438: {[rn1_17.c2.c.m Value[16 x 1]] }
0x450bf78: {[rn1_17.c2.c.isd Value[16 x 1]] }
0x450dd78: {[rn1_18.c1.c.W Value[16 x 144]] }
0x450e5c8: {[rn1_18.c1.c.c.b Value[16 x 1]] }
0x450f008: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
0x450fad8: {[rn1_18.c1.c.c.m Value[16 x 1]] }
0x4510648: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
0x4512028: {[rn1_18.c2.W Value[16 x 144]] }
0x4512898: {[rn1_18.c2.c.b Value[16 x 1]] }
0x45131f8: {[rn1_18.c2.c.sc Value[16 x 1]] }
0x4513db8: {[rn1_18.c2.c.m Value[16 x 1]] }
0x45148f8: {[rn1_18.c2.c.isd Value[16 x 1]] }
0x45165e8: {[rn2_1_Wproj Value[32 x 16]] }
0x4516da8: {[rn2_1.c1.c.W Value[32 x 144]] }
0x45180e8: {[rn2_1.c1.c.c.b Value[32 x 1]] }
0x4518ab8: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
0x45195e8: {[rn2_1.c1.c.c.m Value[32 x 1]] }
0x451a148: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
0x451bb08: {[rn2_1.c2.W Value[32 x 288]] }
0x451c2f8: {[rn2_1.c2.c.b Value[32 x 1]] }
0x451cd18: {[rn2_1.c2.c.sc Value[32 x 1]] }
0x451d808: {[rn2_1.c2.c.m Value[32 x 1]] }
0x451dfb8: {[rn2_1.c_proj.sc Value[32 x 1]] }
0x451e3b8: {[rn2_1.c2.c.isd Value[32 x 1]] }
0x451fba8: {[rn2_1.c_proj.b Value[32 x 1]] }
0x4520b78: {[rn2_1.c_proj.m Value[32 x 1]] }
0x4521a58: {[rn2_1.c_proj.isd Value[32 x 1]] }
0x4523808: {[rn2_2.c1.c.W Value[32 x 288]] }
0x45240e8: {[rn2_2.c1.c.c.b Value[32 x 1]] }
0x4524a48: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
0x4525548: {[rn2_2.c1.c.c.m Value[32 x 1]] }
0x45260e8: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
0x4527a08: {[rn2_2.c2.W Value[32 x 288]] }
0x4527f48: {[rn2_2.c2.c.b Value[32 x 1]] }
0x4528cc8: {[rn2_2.c2.c.sc Value[32 x 1]] }
0x45297b8: {[rn2_2.c2.c.m Value[32 x 1]] }
0x452a2f8: {[rn2_2.c2.c.isd Value[32 x 1]] }
0x452b408: {[rn2_3.c1.c.W Value[32 x 288]] }
0x452c8b8: {[rn2_3.c1.c.c.b Value[32 x 1]] }
0x452d288: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
0x452ddb8: {[rn2_3.c1.c.c.m Value[32 x 1]] }
0x452e918: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
0x45302d8: {[rn2_3.c2.W Value[32 x 288]] }
0x4530ac8: {[rn2_3.c2.c.b Value[32 x 1]] }
0x45311b8: {[rn2_3.c2.c.sc Value[32 x 1]] }
0x4531c28: {[rn2_3.c2.c.isd Value[32 x 1]] }
0x4532058: {[rn2_3.c2.c.m Value[32 x 1]] }
0x4534828: {[rn2_4.c1.c.W Value[32 x 288]] }
0x4535128: {[rn2_4.c1.c.c.b Value[32 x 1]] }
0x4535af8: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
0x45365f8: {[rn2_4.c1.c.c.m Value[32 x 1]] }
0x4537128: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
0x4538a98: {[rn2_4.c2.W Value[32 x 288]] }
0x4539308: {[rn2_4.c2.c.b Value[32 x 1]] }
0x4539d28: {[rn2_4.c2.c.sc Value[32 x 1]] }
0x453a408: {[rn2_4.c2.c.isd Value[32 x 1]] }
0x453a838: {[rn2_4.c2.c.m Value[32 x 1]] }
0x453d008: {[rn2_5.c1.c.W Value[32 x 288]] }
0x453d908: {[rn2_5.c1.c.c.b Value[32 x 1]] }
0x453e2d8: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
0x453edd8: {[rn2_5.c1.c.c.m Value[32 x 1]] }
0x453f928: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
0x45412a8: {[rn2_5.c2.W Value[32 x 288]] }
0x4541af8: {[rn2_5.c2.c.b Value[32 x 1]] }
0x4542518: {[rn2_5.c2.c.sc Value[32 x 1]] }
0x4542fd8: {[rn2_5.c2.c.m Value[32 x 1]] }
0x4543b18: {[rn2_5.c2.c.isd Value[32 x 1]] }
0x45457c8: {[rn2_6.c1.c.W Value[32 x 288]] }
0x4546128: {[rn2_6.c1.c.c.b Value[32 x 1]] }
0x4546aa8: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
0x45475a8: {[rn2_6.c1.c.c.m Value[32 x 1]] }
0x45480e8: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
0x4549a58: {[rn2_6.c2.W Value[32 x 288]] }
0x454a2c8: {[rn2_6.c2.c.b Value[32 x 1]] }
0x454a9b8: {[rn2_6.c2.c.sc Value[32 x 1]] }
0x454b868: {[rn2_6.c2.c.m Value[32 x 1]] }
0x454c358: {[rn2_6.c2.c.isd Value[32 x 1]] }
0x454d3f8: {[rn2_7.c1.c.W Value[32 x 288]] }
0x454e958: {[rn2_7.c1.c.c.b Value[32 x 1]] }
0x454f328: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
0x454fe28: {[rn2_7.c1.c.c.m Value[32 x 1]] }
0x4550998: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
0x45514d8: {[rn3_14.c2.c.b Value[64 x 1]] }
0x4551e88: {[rn3_14.c2.c.sc Value[64 x 1]] }
0x4552a28: {[rn3_14.c2.c.m Value[64 x 1]] }
0x4553588: {[rn3_14.c2.c.isd Value[64 x 1]] }
0x4555218: {[rn2_7.c2.c.sc Value[32 x 1]] }
0x4555c88: {[rn2_7.c2.c.isd Value[32 x 1]] }
0x45560b8: {[rn2_7.c2.c.m Value[32 x 1]] }
0x4558828: {[rn2_8.c1.c.W Value[32 x 288]] }
0x4559128: {[rn2_8.c1.c.c.b Value[32 x 1]] }
0x4559af8: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
0x455a5f8: {[rn2_8.c1.c.c.m Value[32 x 1]] }
0x455b168: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
0x455cad8: {[rn2_8.c2.W Value[32 x 288]] }
0x455d348: {[rn2_8.c2.c.b Value[32 x 1]] }
0x455dd68: {[rn2_8.c2.c.sc Value[32 x 1]] }
0x455e888: {[rn2_8.c2.c.m Value[32 x 1]] }
0x455f378: {[rn2_8.c2.c.isd Value[32 x 1]] }
0x45610b8: {[rn2_9.c1.c.W Value[32 x 288]] }
0x4561958: {[rn2_9.c1.c.c.b Value[32 x 1]] }
0x4562328: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
0x4562e28: {[rn2_9.c1.c.c.m Value[32 x 1]] }
0x45639c8: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
0x45652e8: {[rn2_9.c2.W Value[32 x 288]] }
0x4565828: {[rn2_9.c2.c.b Value[32 x 1]] }
0x45665a8: {[rn2_9.c2.c.sc Value[32 x 1]] }
0x4567098: {[rn2_9.c2.c.m Value[32 x 1]] }
0x4567bd8: {[rn2_9.c2.c.isd Value[32 x 1]] }
0x4569958: {[rn2_10.c1.c.W Value[32 x 288]] }
0x456a1a8: {[rn2_10.c1.c.c.b Value[32 x 1]] }
0x456abe8: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
0x456b6f8: {[rn2_10.c1.c.c.m Value[32 x 1]] }
0x456c248: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
0x456dbd8: {[rn2_10.c2.W Value[32 x 288]] }
0x456e4b8: {[rn2_10.c2.c.b Value[32 x 1]] }
0x456ee88: {[rn2_10.c2.c.sc Value[32 x 1]] }
0x456f988: {[rn2_10.c2.c.m Value[32 x 1]] }
0x45704f8: {[rn2_10.c2.c.isd Value[32 x 1]] }
0x45721b8: {[rn2_11.c1.c.W Value[32 x 288]] }
0x4572ad8: {[rn2_11.c1.c.c.b Value[32 x 1]] }
0x4573518: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
0x4574028: {[rn2_11.c1.c.c.m Value[32 x 1]] }
0x4574b68: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
0x45764b8: {[rn2_11.c2.W Value[32 x 288]] }
0x4576d98: {[rn2_11.c2.c.b Value[32 x 1]] }
0x4577768: {[rn2_11.c2.c.sc Value[32 x 1]] }
0x4578268: {[rn2_11.c2.c.m Value[32 x 1]] }
0x4578dd8: {[rn2_11.c2.c.isd Value[32 x 1]] }
0x457ab08: {[rn2_12.c1.c.W Value[32 x 288]] }
0x457b3c8: {[rn2_12.c1.c.c.b Value[32 x 1]] }
0x457be08: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
0x457c918: {[rn2_12.c1.c.c.m Value[32 x 1]] }
0x457d498: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
0x457ede8: {[rn2_12.c2.W Value[32 x 288]] }
0x457f6e8: {[rn2_12.c2.c.b Value[32 x 1]] }
0x45800d8: {[rn2_12.c2.c.sc Value[32 x 1]] }
0x4580ba8: {[rn2_12.c2.c.m Value[32 x 1]] }
0x4581708: {[rn2_12.c2.c.isd Value[32 x 1]] }
0x45834a8: {[rn2_13.c1.c.W Value[32 x 288]] }
0x4583d68: {[rn2_13.c1.c.c.b Value[32 x 1]] }
0x4584748: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
0x4585258: {[rn2_13.c1.c.c.m Value[32 x 1]] }
0x4585da8: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
0x4587738: {[rn2_13.c2.W Value[32 x 288]] }
0x4588018: {[rn2_13.c2.c.b Value[32 x 1]] }
0x45889e8: {[rn2_13.c2.c.sc Value[32 x 1]] }
0x45894e8: {[rn2_13.c2.c.m Value[32 x 1]] }
0x458a028: {[rn2_13.c2.c.isd Value[32 x 1]] }
0x458bdd8: {[rn2_14.c1.c.W Value[32 x 288]] }
0x458c668: {[rn2_14.c1.c.c.b Value[32 x 1]] }
0x458d0a8: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
0x458dbb8: {[rn2_14.c1.c.c.m Value[32 x 1]] }
0x458e6c8: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
0x4590048: {[rn2_14.c2.W Value[32 x 288]] }
0x4590918: {[rn2_14.c2.c.b Value[32 x 1]] }
0x45912e8: {[rn2_14.c2.c.sc Value[32 x 1]] }
0x4591dc8: {[rn2_14.c2.c.m Value[32 x 1]] }
0x4592928: {[rn2_14.c2.c.isd Value[32 x 1]] }
0x45946a8: {[rn2_15.c1.c.W Value[32 x 288]] }
0x4595608: {[rn2_15.c1.c.c.b Value[32 x 1]] }
0x4596048: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
0x4596b58: {[rn2_15.c1.c.c.m Value[32 x 1]] }
0x45976d8: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
0x4599028: {[rn2_15.c2.W Value[32 x 288]] }
0x4599928: {[rn2_15.c2.c.b Value[32 x 1]] }
0x459a2c8: {[rn2_15.c2.c.sc Value[32 x 1]] }
0x459adf8: {[rn2_15.c2.c.m Value[32 x 1]] }
0x459b958: {[rn2_15.c2.c.isd Value[32 x 1]] }
0x459d6d8: {[rn2_16.c1.c.W Value[32 x 288]] }
0x459df98: {[rn2_16.c1.c.c.b Value[32 x 1]] }
0x459e978: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
0x459f4b8: {[rn2_16.c1.c.c.m Value[32 x 1]] }
0x45a0028: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
0x45a19c8: {[rn2_16.c2.W Value[32 x 288]] }
0x45a2268: {[rn2_16.c2.c.b Value[32 x 1]] }
0x45a2c98: {[rn2_16.c2.c.sc Value[32 x 1]] }
0x45a3798: {[rn2_16.c2.c.m Value[32 x 1]] }
0x45a4298: {[rn2_16.c2.c.isd Value[32 x 1]] }
0x45a6038: {[rn2_17.c1.c.W Value[32 x 288]] }
0x45a68f8: {[rn2_17.c1.c.c.b Value[32 x 1]] }
0x45a72d8: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
0x45a7de8: {[rn2_17.c1.c.c.m Value[32 x 1]] }
0x45a8938: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
0x45aa2c8: {[rn2_17.c2.W Value[32 x 288]] }
0x45aaba8: {[rn2_17.c2.c.b Value[32 x 1]] }
0x45ab578: {[rn2_17.c2.c.sc Value[32 x 1]] }
0x45ac078: {[rn2_17.c2.c.m Value[32 x 1]] }
0x45acbb8: {[rn2_17.c2.c.isd Value[32 x 1]] }
0x45ae968: {[rn2_18.c1.c.W Value[32 x 288]] }
0x45af1f8: {[rn2_18.c1.c.c.b Value[32 x 1]] }
0x45afc38: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
0x45b0748: {[rn2_18.c1.c.c.m Value[32 x 1]] }
0x45b1258: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
0x45b2c38: {[rn2_18.c2.W Value[32 x 288]] }
0x45b34d8: {[rn2_18.c2.c.b Value[32 x 1]] }
0x45b3ea8: {[rn2_18.c2.c.sc Value[32 x 1]] }
0x45b49d8: {[rn2_18.c2.c.m Value[32 x 1]] }
0x45b54d8: {[rn2_18.c2.c.isd Value[32 x 1]] }
0x45b7228: {[rn3_1_Wproj Value[64 x 32]] }
0x45b77d8: {[rn3_1.c1.c.W Value[64 x 288]] }
0x45b8b18: {[rn3_1.c1.c.c.b Value[64 x 1]] }
0x45b94e8: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
0x45ba018: {[rn3_1.c1.c.c.m Value[64 x 1]] }
0x45bab78: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
0x45bc538: {[rn3_1.c2.W Value[64 x 576]] }
0x45bcd28: {[rn3_1.c2.c.b Value[64 x 1]] }
0x45bd418: {[rn3_1.c2.c.sc Value[64 x 1]] }
0x45be2b8: {[rn3_1.c2.c.m Value[64 x 1]] }
0x45bedd8: {[rn3_1.c2.c.isd Value[64 x 1]] }
0x45c05a8: {[rn3_1.c_proj.b Value[64 x 1]] }
0x45c0e98: {[rn3_1.c_proj.sc Value[64 x 1]] }
0x45c19d8: {[rn3_1.c_proj.m Value[64 x 1]] }
0x45c24d8: {[rn3_1.c_proj.isd Value[64 x 1]] }
0x45c4238: {[rn3_2.c1.c.W Value[64 x 576]] }
0x45c4aa8: {[rn3_2.c1.c.c.b Value[64 x 1]] }
0x45c5488: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
0x45c5f88: {[rn3_2.c1.c.c.m Value[64 x 1]] }
0x45c6ac8: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
0x45c8438: {[rn3_2.c2.W Value[64 x 576]] }
0x45c8ca8: {[rn3_2.c2.c.b Value[64 x 1]] }
0x45c9398: {[rn3_2.c2.c.sc Value[64 x 1]] }
0x45ca248: {[rn3_2.c2.c.m Value[64 x 1]] }
0x45cad38: {[rn3_2.c2.c.isd Value[64 x 1]] }
0x45cca78: {[rn3_3.c1.c.W Value[64 x 576]] }
0x45cd318: {[rn3_3.c1.c.c.b Value[64 x 1]] }
0x45cdce8: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
0x45ce7e8: {[rn3_3.c1.c.c.m Value[64 x 1]] }
0x45cf388: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
0x45d0ca8: {[rn3_3.c2.W Value[64 x 576]] }
0x45d11e8: {[rn3_3.c2.c.b Value[64 x 1]] }
0x45d1f68: {[rn3_3.c2.c.sc Value[64 x 1]] }
0x45d2688: {[rn3_3.c2.c.isd Value[64 x 1]] }
0x45d2ab8: {[rn3_3.c2.c.m Value[64 x 1]] }
0x45d5288: {[rn3_4.c1.c.W Value[64 x 576]] }
0x45d5b88: {[rn3_4.c1.c.c.b Value[64 x 1]] }
0x45d6558: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
0x45d7058: {[rn3_4.c1.c.c.m Value[64 x 1]] }
0x45d7b88: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
0x45d8c38: {[rn3_4.c2.W Value[64 x 576]] }
0x45da0b8: {[rn3_4.c2.c.b Value[64 x 1]] }
0x45daad8: {[rn3_4.c2.c.sc Value[64 x 1]] }
0x45db548: {[rn3_4.c2.c.isd Value[64 x 1]] }
0x45db978: {[rn3_4.c2.c.m Value[64 x 1]] }
0x45de168: {[rn3_5.c1.c.W Value[64 x 576]] }
0x45dea68: {[rn3_5.c1.c.c.b Value[64 x 1]] }
0x45df438: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
0x45dff38: {[rn3_5.c1.c.c.m Value[64 x 1]] }
0x45e0a68: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
0x45e1b18: {[rn3_5.c2.W Value[64 x 576]] }
0x45e2c58: {[rn3_5.c2.c.b Value[64 x 1]] }
0x45e3638: {[rn3_5.c2.c.sc Value[64 x 1]] }
0x45e4128: {[rn3_5.c2.c.m Value[64 x 1]] }
0x45e4cd8: {[rn3_5.c2.c.isd Value[64 x 1]] }
0x45e69b8: {[rn3_6.c1.c.W Value[64 x 576]] }
0x45e7258: {[rn3_6.c1.c.c.b Value[64 x 1]] }
0x45e7c28: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
0x45e8728: {[rn3_6.c1.c.c.m Value[64 x 1]] }
0x45e92c8: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
0x45eabe8: {[rn3_6.c2.W Value[64 x 576]] }
0x45eb128: {[rn3_6.c2.c.b Value[64 x 1]] }
0x45ebea8: {[rn3_6.c2.c.sc Value[64 x 1]] }
0x45ec998: {[rn3_6.c2.c.m Value[64 x 1]] }
0x45ed4d8: {[rn3_6.c2.c.isd Value[64 x 1]] }
0x45ef238: {[rn3_7.c1.c.W Value[64 x 576]] }
0x45efad8: {[rn3_7.c1.c.c.b Value[64 x 1]] }
0x45f04a8: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
0x45f0fa8: {[rn3_7.c1.c.c.m Value[64 x 1]] }
0x45f1ae8: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
0x45f3458: {[rn3_7.c2.W Value[64 x 576]] }
0x45f3cc8: {[rn3_7.c2.c.b Value[64 x 1]] }
0x45f43b8: {[rn3_7.c2.c.sc Value[64 x 1]] }
0x45f4e28: {[rn3_7.c2.c.isd Value[64 x 1]] }
0x45f5258: {[rn3_7.c2.c.m Value[64 x 1]] }
0x45f7a28: {[rn3_8.c1.c.W Value[64 x 576]] }
0x45f89c8: {[rn3_8.c1.c.c.b Value[64 x 1]] }
0x45f9398: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
0x45f9e98: {[rn3_8.c1.c.c.m Value[64 x 1]] }
0x45fa9c8: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
0x45fc338: {[rn3_8.c2.W Value[64 x 576]] }
0x45fcba8: {[rn3_8.c2.c.b Value[64 x 1]] }
0x45fd5c8: {[rn3_8.c2.c.sc Value[64 x 1]] }
0x45fdca8: {[rn3_8.c2.c.isd Value[64 x 1]] }
0x45fe0d8: {[rn3_8.c2.c.m Value[64 x 1]] }
0x46008a8: {[rn3_9.c1.c.W Value[64 x 576]] }
0x46011a8: {[rn3_9.c1.c.c.b Value[64 x 1]] }
0x4601b78: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
0x4602678: {[rn3_9.c1.c.c.m Value[64 x 1]] }
0x46031a8: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
0x4604ad8: {[rn3_9.c2.W Value[64 x 576]] }
0x4605018: {[rn3_9.c2.c.b Value[64 x 1]] }
0x4605a38: {[rn3_9.c2.c.sc Value[64 x 1]] }
0x4606858: {[rn3_9.c2.c.m Value[64 x 1]] }
0x4607408: {[rn3_9.c2.c.isd Value[64 x 1]] }
0x4609108: {[rn3_10.c1.c.W Value[64 x 576]] }
0x4609958: {[rn3_10.c1.c.c.b Value[64 x 1]] }
0x460a398: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
0x460aea8: {[rn3_10.c1.c.c.m Value[64 x 1]] }
0x460b9f8: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
0x460d388: {[rn3_10.c2.W Value[64 x 576]] }
0x460dc88: {[rn3_10.c2.c.b Value[64 x 1]] }
0x460e658: {[rn3_10.c2.c.sc Value[64 x 1]] }
0x460f158: {[rn3_10.c2.c.m Value[64 x 1]] }
0x460fcf8: {[rn3_10.c2.c.isd Value[64 x 1]] }
0x4611a58: {[rn3_11.c1.c.W Value[64 x 576]] }
0x4612318: {[rn3_11.c1.c.c.b Value[64 x 1]] }
0x4612cf8: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
0x4613808: {[rn3_11.c1.c.c.m Value[64 x 1]] }
0x46143a8: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
0x4615cf8: {[rn3_11.c2.W Value[64 x 576]] }
0x4616c98: {[rn3_11.c2.c.b Value[64 x 1]] }
0x4617668: {[rn3_11.c2.c.sc Value[64 x 1]] }
0x4618168: {[rn3_11.c2.c.m Value[64 x 1]] }
0x4618cd8: {[rn3_11.c2.c.isd Value[64 x 1]] }
0x461aa68: {[rn3_12.c1.c.W Value[64 x 576]] }
0x461b328: {[rn3_12.c1.c.c.b Value[64 x 1]] }
0x461bd08: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
0x461c848: {[rn3_12.c1.c.c.m Value[64 x 1]] }
0x461d3b8: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
0x461ed98: {[rn3_12.c2.W Value[64 x 576]] }
0x461f608: {[rn3_12.c2.c.b Value[64 x 1]] }
0x461ffd8: {[rn3_12.c2.c.sc Value[64 x 1]] }
0x4620ab8: {[rn3_12.c2.c.m Value[64 x 1]] }
0x4621618: {[rn3_12.c2.c.isd Value[64 x 1]] }
0x4623398: {[rn3_13.c1.c.W Value[64 x 576]] }
0x4623c58: {[rn3_13.c1.c.c.b Value[64 x 1]] }
0x4624638: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
0x4625148: {[rn3_13.c1.c.c.m Value[64 x 1]] }
0x4625cf8: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
0x4627638: {[rn3_13.c2.W Value[64 x 576]] }
0x4627ee8: {[rn3_13.c2.c.b Value[64 x 1]] }
0x46288b8: {[rn3_13.c2.c.sc Value[64 x 1]] }
0x46293c8: {[rn3_13.c2.c.m Value[64 x 1]] }
0x4629f68: {[rn3_13.c2.c.isd Value[64 x 1]] }
0x462bcd8: {[rn3_14.c1.c.W Value[64 x 576]] }
0x462c598: {[rn3_14.c1.c.c.b Value[64 x 1]] }
0x462cf78: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
0x462da88: {[rn3_14.c1.c.c.m Value[64 x 1]] }
0x462e638: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
0x462ff78: {[rn3_14.c2.W Value[64 x 576]] }
0x4638618: {[rn3_15.c1.c.W Value[64 x 576]] }
0x4639578: {[rn3_15.c1.c.c.b Value[64 x 1]] }
0x4639f58: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
0x463aac8: {[rn3_15.c1.c.c.m Value[64 x 1]] }
0x463b638: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
0x463d018: {[rn3_15.c2.W Value[64 x 576]] }
0x463d888: {[rn3_15.c2.c.b Value[64 x 1]] }
0x463e1e8: {[rn3_15.c2.c.sc Value[64 x 1]] }
0x463ed48: {[rn3_15.c2.c.m Value[64 x 1]] }
0x463f8a8: {[rn3_15.c2.c.isd Value[64 x 1]] }
0x4641688: {[rn3_16.c1.c.W Value[64 x 576]] }
0x4641ed8: {[rn3_16.c1.c.c.b Value[64 x 1]] }
0x46428b8: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
0x4643478: {[rn3_16.c1.c.c.m Value[64 x 1]] }
0x4643fb8: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
0x4645888: {[rn3_16.c2.W Value[64 x 576]] }
0x46461e8: {[rn3_16.c2.c.b Value[64 x 1]] }
0x4646b48: {[rn3_16.c2.c.sc Value[64 x 1]] }
0x4647648: {[rn3_16.c2.c.m Value[64 x 1]] }
0x4648188: {[rn3_16.c2.c.isd Value[64 x 1]] }
0x4649f38: {[rn3_17.c1.c.W Value[64 x 576]] }
0x464a7c8: {[rn3_17.c1.c.c.b Value[64 x 1]] }
0x464b208: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
0x464bd18: {[rn3_17.c1.c.c.m Value[64 x 1]] }
0x464c878: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
0x7ffabbb06d98: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb07098: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb07218: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
0x7ffabbb07398: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb07518: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb07698: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb07c28: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb087a8: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb08aa8: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb08da8: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb08f28: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb08ff8: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb1f1f8: {[rn1_6.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Value[32 x 32 x 16 x *]] }
0x7ffabbb1f358: {[rn1_6.c2.W Gradient[16 x 144]] [rn1_7.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb1f4b8: {[rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb1f618: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb1fa38: {[rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Gradient[32 x 32 x 16 x *]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb1fb98: {[rn1_6.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb1fcf8: {[rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb1fe58: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb20118: {[rn1_7.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb20278: {[rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.p Value[32 x 32 x 16 x *]] }
0x7ffabbb203d8: {[rn1_7.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Value[32 x 32 x 16 x *]] }
0x7ffabbb20538: {[rn1_7.c2.W Gradient[16 x 144]] [rn1_8.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb20698: {[rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb207f8: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb20c18: {[rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Gradient[32 x 32 x 16 x *]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb20d78: {[rn1_7.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb20ed8: {[rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb21038: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb212f8: {[rn1_8.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb21458: {[rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.p Value[32 x 32 x 16 x *]] }
0x7ffabbb215b8: {[rn1_8.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Value[32 x 32 x 16 x *]] }
0x7ffabbb21718: {[rn1_8.c2.W Gradient[16 x 144]] [rn1_9.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb21878: {[rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb219d8: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb21df8: {[rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Gradient[32 x 32 x 16 x *]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb21f58: {[rn1_8.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb220b8: {[rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb22218: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb224d8: {[rn1_9.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb22638: {[rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.p Value[32 x 32 x 16 x *]] }
0x7ffabbb22798: {[rn1_9.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Value[32 x 32 x 16 x *]] }
0x7ffabbb228f8: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.W Gradient[16 x 144]] }
0x7ffabbb22a58: {[rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb22bb8: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb22fd8: {[rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.c1.y Value[32 x 32 x 16 x *]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb23138: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.c.b Gradient[16 x 1]] }
0x7ffabbb23298: {[rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb233f8: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb236b8: {[rn1_10.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb23878: {[rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.p Value[32 x 32 x 16 x *]] }
0x7ffabbb23a38: {[rn1_10.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Value[32 x 32 x 16 x *]] }
0x7ffabbb23bf8: {[rn1_10.c2.W Gradient[16 x 144]] [rn1_11.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb23db8: {[rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb23f78: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb244b8: {[rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.c1.y Value[32 x 32 x 16 x *]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb24678: {[rn1_10.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb24838: {[rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb249f8: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb24d78: {[rn1_11.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb24f38: {[rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.p Value[32 x 32 x 16 x *]] }
0x7ffabbb250f8: {[rn1_11.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Value[32 x 32 x 16 x *]] }
0x7ffabbb252b8: {[rn1_11.c2.W Gradient[16 x 144]] [rn1_12.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb25478: {[rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb25638: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb25b78: {[rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Gradient[32 x 32 x 16 x *]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb25d38: {[rn1_11.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb25ef8: {[rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb260b8: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb26438: {[rn1_12.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb265f8: {[rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.p Value[32 x 32 x 16 x *]] }
0x7ffabbb267b8: {[rn1_12.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Value[32 x 32 x 16 x *]] }
0x7ffabbb26978: {[rn1_12.c2.W Gradient[16 x 144]] [rn1_13.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb26b38: {[rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb26cf8: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb27238: {[rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Gradient[32 x 32 x 16 x *]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb273f8: {[rn1_12.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb275b8: {[rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb27778: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb27af8: {[rn1_13.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb27cb8: {[rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.p Value[32 x 32 x 16 x *]] }
0x7ffabbb27e78: {[rn1_13.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Value[32 x 32 x 16 x *]] }
0x7ffabbb28038: {[rn1_13.c2.W Gradient[16 x 144]] [rn1_14.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb281f8: {[rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb283b8: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb288f8: {[rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Gradient[32 x 32 x 16 x *]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb28ab8: {[rn1_13.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb28c78: {[rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb28e38: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb291b8: {[rn1_14.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb29378: {[rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.p Value[32 x 32 x 16 x *]] }
0x7ffabbb29538: {[rn1_14.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Value[32 x 32 x 16 x *]] }
0x7ffabbb296f8: {[rn1_14.c2.W Gradient[16 x 144]] [rn1_15.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb298b8: {[rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb29a78: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb29fb8: {[rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Gradient[32 x 32 x 16 x *]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2a178: {[rn1_14.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2a338: {[rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2a4f8: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2a878: {[rn1_15.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb2aa38: {[rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.p Value[32 x 32 x 16 x *]] }
0x7ffabbb2abf8: {[rn1_15.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2adb8: {[rn1_15.c2.W Gradient[16 x 144]] [rn1_16.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2af78: {[rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2b138: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2b678: {[rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Gradient[32 x 32 x 16 x *]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2b838: {[rn1_15.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2b9f8: {[rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2bbb8: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2bf38: {[rn1_16.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb2c0f8: {[rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.p Value[32 x 32 x 16 x *]] }
0x7ffabbb2c2b8: {[rn1_16.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2c478: {[rn1_16.c2.W Gradient[16 x 144]] [rn1_17.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2c638: {[rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2c7f8: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2cd38: {[rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Gradient[32 x 32 x 16 x *]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2cef8: {[rn1_16.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2d0b8: {[rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2d278: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2d5f8: {[rn1_17.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb2d7b8: {[rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.p Value[32 x 32 x 16 x *]] }
0x7ffabbb2d978: {[rn1_17.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2db38: {[rn1_17.c2.W Gradient[16 x 144]] [rn1_18.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2dcf8: {[rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2deb8: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2e3f8: {[rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Gradient[32 x 32 x 16 x *]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2e5b8: {[rn1_17.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabbb2e778: {[rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2e938: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2ecb8: {[rn1_18.c1.c.c.b Gradient[16 x 1]] }
0x7ffabbb2ee78: {[rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.p Value[32 x 32 x 16 x *]] }
0x7ffabbb2f038: {[rn1_18.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Value[32 x 32 x 16 x *]] }
0x7ffabbb2f1f8: {[rn1_18.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb2f3b8: {[rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.p Gradient[32 x 32 x 16 x *]] }
0x7ffabbb2f578: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb2fab8: {[rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb2fc78: {[rn1_18.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb2fe38: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb2fff8: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb30378: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb30538: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
0x7ffabbb306f8: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
0x7ffabbb308b8: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
0x7ffabbb30df8: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
0x7ffabbb30fb8: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb31178: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb31338: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb314f8: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb316b8: {[rn2_1.c_proj.b Gradient[32 x 1]] }
0x7ffabbb31878: {[rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Gradient[32 x 32 x 16 x *]] }
0x7ffabbb31a38: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb31bf8: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb31db8: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb31f78: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb322f8: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb324b8: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
0x7ffabbb32678: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
0x7ffabbb32838: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb329f8: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb32bb8: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb330f8: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb332b8: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb33478: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb33638: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb339b8: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb33b78: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
0x7ffabbb33d38: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
0x7ffabbb33ef8: {[rn2_3.c2.W Gradient[32 x 288]] [rn2_4.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb340b8: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb34278: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb347b8: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb34978: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb34b38: {[rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb34cf8: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb35078: {[rn2_4.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb35238: {[rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.p Value[16 x 16 x 32 x *]] }
0x7ffabbb353f8: {[rn2_4.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Value[16 x 16 x 32 x *]] }
0x7ffabbb355b8: {[rn2_4.c2.W Gradient[32 x 288]] [rn2_5.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb35778: {[rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb35938: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb35e78: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb36038: {[rn2_4.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb361f8: {[rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb363b8: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb36738: {[rn2_5.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb368f8: {[rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.p Value[16 x 16 x 32 x *]] }
0x7ffabbb36ab8: {[rn2_5.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Value[16 x 16 x 32 x *]] }
0x7ffabbb36c78: {[rn2_5.c2.W Gradient[32 x 288]] [rn2_6.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb36e38: {[rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb36ff8: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb37538: {[rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Gradient[16 x 16 x 32 x *]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb376f8: {[rn2_5.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb378b8: {[rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb37a78: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb37df8: {[rn2_6.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb37fb8: {[rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.p Value[16 x 16 x 32 x *]] }
0x7ffabbb38178: {[rn2_6.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Value[16 x 16 x 32 x *]] }
0x7ffabbb38338: {[rn2_6.c2.W Gradient[32 x 288]] [rn2_7.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb384f8: {[rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb386b8: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb38bf8: {[rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Gradient[16 x 16 x 32 x *]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb38db8: {[rn2_6.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb38f78: {[rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb39138: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb394b8: {[rn2_7.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb39678: {[rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.p Value[16 x 16 x 32 x *]] }
0x7ffabbb39838: {[rn2_7.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Value[16 x 16 x 32 x *]] }
0x7ffabbb399f8: {[rn2_7.c2.W Gradient[32 x 288]] [rn2_8.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb39bb8: {[rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb39d78: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3a2b8: {[rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Gradient[16 x 16 x 32 x *]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3a478: {[rn2_7.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3a638: {[rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3a7f8: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3ab78: {[rn2_8.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb3ad38: {[rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.p Value[16 x 16 x 32 x *]] }
0x7ffabbb3aef8: {[rn2_8.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3b0b8: {[rn2_8.c2.W Gradient[32 x 288]] [rn2_9.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3b278: {[rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3b438: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3b978: {[rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Gradient[16 x 16 x 32 x *]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3bb38: {[rn2_8.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3bcf8: {[rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3beb8: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3c238: {[rn2_9.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb3c3f8: {[rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.p Value[16 x 16 x 32 x *]] }
0x7ffabbb3c5b8: {[rn2_9.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3c778: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.W Gradient[32 x 288]] }
0x7ffabbb3c938: {[rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3caf8: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3d038: {[rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.c1.y Value[16 x 16 x 32 x *]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3d1f8: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.c.b Gradient[32 x 1]] }
0x7ffabbb3d3b8: {[rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3d578: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3d8f8: {[rn2_10.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb3dab8: {[rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.p Value[16 x 16 x 32 x *]] }
0x7ffabbb3dc78: {[rn2_10.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3de38: {[rn2_10.c2.W Gradient[32 x 288]] [rn2_11.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3dff8: {[rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3e1b8: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3e6f8: {[rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.c1.y Value[16 x 16 x 32 x *]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3e8b8: {[rn2_10.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3ea78: {[rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3ec38: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3efb8: {[rn2_11.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb3f178: {[rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.p Value[16 x 16 x 32 x *]] }
0x7ffabbb3f338: {[rn2_11.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3f4f8: {[rn2_11.c2.W Gradient[32 x 288]] [rn2_12.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb3f6b8: {[rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb3f878: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3fdb8: {[rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Gradient[16 x 16 x 32 x *]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb3ff78: {[rn2_11.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb40138: {[rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb402f8: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb40678: {[rn2_12.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb40838: {[rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.p Value[16 x 16 x 32 x *]] }
0x7ffabbb409f8: {[rn2_12.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Value[16 x 16 x 32 x *]] }
0x7ffabbb40bb8: {[rn2_12.c2.W Gradient[32 x 288]] [rn2_13.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb40d78: {[rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb40f38: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb41478: {[rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Gradient[16 x 16 x 32 x *]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb41638: {[rn2_12.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb417f8: {[rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb419b8: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb41d38: {[rn2_13.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb41ef8: {[rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.p Value[16 x 16 x 32 x *]] }
0x7ffabbb420b8: {[rn2_13.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Value[16 x 16 x 32 x *]] }
0x7ffabbb42278: {[rn2_13.c2.W Gradient[32 x 288]] [rn2_14.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb42438: {[rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb425f8: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb42b38: {[rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Gradient[16 x 16 x 32 x *]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb42cf8: {[rn2_13.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb42eb8: {[rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb43078: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb433f8: {[rn2_14.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb435b8: {[rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.p Value[16 x 16 x 32 x *]] }
0x7ffabbb43778: {[rn2_14.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Value[16 x 16 x 32 x *]] }
0x7ffabbb43938: {[rn2_14.c2.W Gradient[32 x 288]] [rn2_15.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb43af8: {[rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb43cb8: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb441f8: {[rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Gradient[16 x 16 x 32 x *]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb443b8: {[rn2_14.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb44578: {[rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb44738: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb44ab8: {[rn2_15.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb44c78: {[rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.p Value[16 x 16 x 32 x *]] }
0x7ffabbb44e38: {[rn2_15.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Value[16 x 16 x 32 x *]] }
0x7ffabbb44ff8: {[rn2_15.c2.W Gradient[32 x 288]] [rn2_16.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb451b8: {[rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb45378: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb458b8: {[rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Gradient[16 x 16 x 32 x *]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb45a78: {[rn2_15.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb45c38: {[rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb45df8: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb46178: {[rn2_16.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb46338: {[rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.p Value[16 x 16 x 32 x *]] }
0x7ffabbb464f8: {[rn2_16.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Value[16 x 16 x 32 x *]] }
0x7ffabbb466b8: {[rn2_16.c2.W Gradient[32 x 288]] [rn2_17.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb46878: {[rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb46a38: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb46f78: {[rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Gradient[16 x 16 x 32 x *]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb47138: {[rn2_16.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb472f8: {[rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb474b8: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb47838: {[rn2_17.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb479f8: {[rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.p Value[16 x 16 x 32 x *]] }
0x7ffabbb47bb8: {[rn2_17.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Value[16 x 16 x 32 x *]] }
0x7ffabbb47d78: {[rn2_17.c2.W Gradient[32 x 288]] [rn2_18.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb47f38: {[rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb480f8: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb48638: {[rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Gradient[16 x 16 x 32 x *]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.c1.y Value[16 x 16 x 32 x *]] }
0x7ffabbb487f8: {[rn2_17.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Value[16 x 16 x 32 x *]] }
0x7ffabbb489b8: {[rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb48b78: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *]] }
0x7ffabbb48ef8: {[rn2_18.c1.c.c.b Gradient[32 x 1]] }
0x7ffabbb490b8: {[rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.p Value[16 x 16 x 32 x *]] }
0x7ffabbb49278: {[rn2_18.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Value[16 x 16 x 32 x *]] }
0x7ffabbb49438: {[rn2_18.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb495f8: {[rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.p Gradient[16 x 16 x 32 x *]] }
0x7ffabbb497b8: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb49cf8: {[rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb49eb8: {[rn2_18.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4a078: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4a238: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4a5b8: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb4a778: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4a938: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4aaf8: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4b038: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
0x7ffabbb4b1f8: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4b3b8: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4b578: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4b738: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4b8f8: {[rn3_1.c_proj.b Gradient[64 x 1]] }
0x7ffabbb4bab8: {[rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Gradient[16 x 16 x 32 x *]] }
0x7ffabbb4bc78: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4be38: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4bff8: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4c1b8: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4c538: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb4c6f8: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
0x7ffabbb4c8b8: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4ca78: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4cc38: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4cdf8: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4d338: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4d4f8: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4d6b8: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4d878: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4dbf8: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb4ddb8: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
0x7ffabbb4df78: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4e138: {[rn3_3.c2.W Gradient[64 x 576]] [rn3_4.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4e2f8: {[rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4e4b8: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4e9f8: {[rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4ebb8: {[rn3_3.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4ed78: {[rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4ef38: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4f2b8: {[rn3_4.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb4f478: {[rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.p Value[8 x 8 x 64 x *]] }
0x7ffabbb4f638: {[rn3_4.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Value[8 x 8 x 64 x *]] }
0x7ffabbb4f7f8: {[rn3_4.c2.W Gradient[64 x 576]] [rn3_5.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb4f9b8: {[rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb4fb78: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb500b8: {[rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb50278: {[rn3_4.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb50438: {[rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb505f8: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb50978: {[rn3_5.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb50b38: {[rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.p Value[8 x 8 x 64 x *]] }
0x7ffabbb50cf8: {[rn3_5.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Value[8 x 8 x 64 x *]] }
0x7ffabbb50eb8: {[rn3_5.c2.W Gradient[64 x 576]] [rn3_6.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb51078: {[rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb51238: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb51778: {[rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Gradient[8 x 8 x 64 x *]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb51938: {[rn3_5.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb51af8: {[rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb51cb8: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb52038: {[rn3_6.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb521f8: {[rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.p Value[8 x 8 x 64 x *]] }
0x7ffabbb523b8: {[rn3_6.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Value[8 x 8 x 64 x *]] }
0x7ffabbb52578: {[rn3_6.c2.W Gradient[64 x 576]] [rn3_7.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb52738: {[rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb528f8: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb52e38: {[rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Gradient[8 x 8 x 64 x *]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb52ff8: {[rn3_6.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb531b8: {[rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb53378: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb536f8: {[rn3_7.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb538b8: {[rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.p Value[8 x 8 x 64 x *]] }
0x7ffabbb53a78: {[rn3_7.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Value[8 x 8 x 64 x *]] }
0x7ffabbb53c38: {[rn3_7.c2.W Gradient[64 x 576]] [rn3_8.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb53df8: {[rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb53fb8: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb544f8: {[rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Gradient[8 x 8 x 64 x *]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb546b8: {[rn3_7.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb54878: {[rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb54a38: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb54db8: {[rn3_8.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb54f78: {[rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.p Value[8 x 8 x 64 x *]] }
0x7ffabbb55138: {[rn3_8.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Value[8 x 8 x 64 x *]] }
0x7ffabbb552f8: {[rn3_8.c2.W Gradient[64 x 576]] [rn3_9.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb554b8: {[rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb55678: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb55bb8: {[rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Gradient[8 x 8 x 64 x *]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb55d78: {[rn3_8.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb55f38: {[rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb560f8: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb56478: {[rn3_9.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb56638: {[rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.p Value[8 x 8 x 64 x *]] }
0x7ffabbb567f8: {[rn3_9.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Value[8 x 8 x 64 x *]] }
0x7ffabbb569b8: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.W Gradient[64 x 576]] }
0x7ffabbb56b78: {[rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb56d38: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb57278: {[rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.c1.y Value[8 x 8 x 64 x *]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb57438: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.c.b Gradient[64 x 1]] }
0x7ffabbb575f8: {[rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb577b8: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb57b38: {[rn3_10.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb57cf8: {[rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.p Value[8 x 8 x 64 x *]] }
0x7ffabbb57eb8: {[rn3_10.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Value[8 x 8 x 64 x *]] }
0x7ffabbb58078: {[rn3_10.c2.W Gradient[64 x 576]] [rn3_11.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb58238: {[rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb583f8: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb58938: {[rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.c1.y Value[8 x 8 x 64 x *]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb58af8: {[rn3_10.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb58cb8: {[rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb58e78: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb591f8: {[rn3_11.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb593b8: {[rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.p Value[8 x 8 x 64 x *]] }
0x7ffabbb59578: {[rn3_11.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Value[8 x 8 x 64 x *]] }
0x7ffabbb59738: {[rn3_11.c2.W Gradient[64 x 576]] [rn3_12.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb598f8: {[rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb59ab8: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb59ff8: {[rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Gradient[8 x 8 x 64 x *]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5a1b8: {[rn3_11.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5a378: {[rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5a538: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5a8b8: {[rn3_12.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb5aa78: {[rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.p Value[8 x 8 x 64 x *]] }
0x7ffabbb5ac38: {[rn3_12.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5adf8: {[rn3_12.c2.W Gradient[64 x 576]] [rn3_13.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5afb8: {[rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5b178: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5b6b8: {[rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Gradient[8 x 8 x 64 x *]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5b878: {[rn3_12.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5ba38: {[rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5bbf8: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5bf78: {[rn3_13.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb5c138: {[rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.p Value[8 x 8 x 64 x *]] }
0x7ffabbb5c2f8: {[rn3_13.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5c4b8: {[rn3_13.c2.W Gradient[64 x 576]] [rn3_14.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5c678: {[rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5c838: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5cd78: {[rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Gradient[8 x 8 x 64 x *]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5cf38: {[rn3_13.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5d0f8: {[rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5d2b8: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5d638: {[rn3_14.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb5d7f8: {[rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.p Value[8 x 8 x 64 x *]] }
0x7ffabbb5d9b8: {[rn3_14.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5db78: {[rn3_14.c2.W Gradient[64 x 576]] [rn3_15.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5dd38: {[rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5def8: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5e438: {[rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Gradient[8 x 8 x 64 x *]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5e5f8: {[rn3_14.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5e7b8: {[rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5e978: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5ecf8: {[rn3_15.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb5eeb8: {[rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.p Value[8 x 8 x 64 x *]] }
0x7ffabbb5f078: {[rn3_15.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5f238: {[rn3_15.c2.W Gradient[64 x 576]] [rn3_16.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5f3f8: {[rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb5f5b8: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5faf8: {[rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Gradient[8 x 8 x 64 x *]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb5fcb8: {[rn3_15.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb5fe78: {[rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb60038: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb603b8: {[rn3_16.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb60578: {[rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.p Value[8 x 8 x 64 x *]] }
0x7ffabbb60738: {[rn3_16.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Value[8 x 8 x 64 x *]] }
0x7ffabbb608f8: {[rn3_16.c2.W Gradient[64 x 576]] [rn3_17.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb60ab8: {[rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb60c78: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb611b8: {[rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Gradient[8 x 8 x 64 x *]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb61378: {[rn3_16.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb61538: {[rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb616f8: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb61a78: {[rn3_17.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb61c38: {[rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.p Value[8 x 8 x 64 x *]] }
0x7ffabbb61df8: {[rn3_17.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Value[8 x 8 x 64 x *]] }
0x7ffabbb61fb8: {[rn3_17.c2.W Gradient[64 x 576]] [rn3_18.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb62178: {[rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb62338: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb62878: {[rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Gradient[8 x 8 x 64 x *]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.c1.y Value[8 x 8 x 64 x *]] }
0x7ffabbb62a38: {[rn3_17.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Value[8 x 8 x 64 x *]] }
0x7ffabbb62bf8: {[rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb62db8: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *]] }
0x7ffabbb63138: {[rn3_18.c1.c.c.b Gradient[64 x 1]] }
0x7ffabbb632f8: {[rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.p Value[8 x 8 x 64 x *]] }
0x7ffabbb634b8: {[rn3_18.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Value[8 x 8 x 64 x *]] }
0x7ffabbb63678: {[pool Value[1 x 1 x 64 x *]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.p Gradient[8 x 8 x 64 x *]] }
0x7ffabbb63838: {[OutputNodes.t Value[10 x *]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb642b8: {[CE Gradient[1]] }
0x7ffabbb64478: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }
0x7ffabbb64638: {[OutputNodes.t Gradient[10 x *]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Gradient[8 x 8 x 64 x *]] }
0x7ffabbb647f8: {[OutputNodes.b Gradient[10]] }
0x7ffabbb649b8: {[pool Gradient[1 x 1 x 64 x *]] [rn3_18.c2.W Gradient[64 x 576]] }
0x7ffabbb64b78: {[rn3_18.c2.c.b Gradient[64 x 1]] }
0x7ffabbffff48: {[Err Value[1]] }
0x7ffabc17f508: {[OutputNodes.z Value[10 x *]] }
0x7ffabc17f6c8: {[CE Value[1]] }
0x7ffabc76df28: {[rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabc76e0e8: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabc76e468: {[rn1_4.c1.c.c.b Gradient[16 x 1]] }
0x7ffabc76e628: {[rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.p Value[32 x 32 x 16 x *]] }
0x7ffabc76e7e8: {[rn1_4.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Value[32 x 32 x 16 x *]] }
0x7ffabc76e9a8: {[rn1_4.c2.W Gradient[16 x 144]] [rn1_5.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabc76eb68: {[rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.p Gradient[32 x 32 x 16 x *]] }
0x7ffabc76ed28: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabc76f268: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabc76f428: {[rn1_4.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabc76f5e8: {[rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabc76f7a8: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabc76fb28: {[rn1_5.c1.c.c.b Gradient[16 x 1]] }
0x7ffabc76fce8: {[rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.p Value[32 x 32 x 16 x *]] }
0x7ffabc76fea8: {[rn1_5.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Value[32 x 32 x 16 x *]] }
0x7ffabc770068: {[rn1_5.c2.W Gradient[16 x 144]] [rn1_6.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabc770228: {[rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.p Gradient[32 x 32 x 16 x *]] }
0x7ffabc7703e8: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabc770928: {[rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Gradient[32 x 32 x 16 x *]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabc770ae8: {[rn1_5.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabc770ca8: {[rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabc770e68: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabc7711e8: {[rn1_6.c1.c.c.b Gradient[16 x 1]] }
0x7ffabc7713a8: {[rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.p Value[32 x 32 x 16 x *]] }
0x7ffabd113ec8: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabd114048: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabd1141c8: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabd114348: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffabd1144c8: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
0x7ffabd114648: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
0x7ffabd1400c8: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
0x7ffabd140248: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabd140548: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
0x7ffabd1406c8: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
0x7ffabd1409c8: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
0x7ffabd140b48: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabd140cc8: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
0x7ffabd140e48: {[rn1_3.c2.W Gradient[16 x 144]] [rn1_4.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7ffabd140fc8: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
0x7ffabd1c8b98: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffabd1c8f68: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
0x7ffabd1c91f8: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabd1c9578: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7ffabd1c99f8: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
0x7ffabd1c9c98: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
0x7ffabd1c9e18: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
0x7ffabd1c9f98: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
0x7ffac854e7e8: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7ffac854ed28: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.c1.y Value[32 x 32 x 16 x *]] }
0x7ffac854eee8: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Value[32 x 32 x 16 x *]] }
0x7ffac8e01a98: {[rn3_17.c2.W Value[64 x 576]] }
0x7ffac8e02668: {[rn3_17.c2.c.b Value[64 x 1]] }
0x7ffac8e03038: {[rn3_17.c2.c.sc Value[64 x 1]] }
0x7ffac8e03b38: {[rn3_17.c2.c.m Value[64 x 1]] }
0x7ffac8e04708: {[rn3_17.c2.c.isd Value[64 x 1]] }
0x7ffac8e057d8: {[rn3_18.c1.c.W Value[64 x 576]] }
0x7ffac8e06d28: {[rn3_18.c1.c.c.b Value[64 x 1]] }
0x7ffac8e07768: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
0x7ffac8e08278: {[rn3_18.c1.c.c.m Value[64 x 1]] }
0x7ffac8e08dc8: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
0x7ffac8e0a758: {[rn3_18.c2.W Value[64 x 576]] }
0x7ffac8e0b718: {[rn3_18.c2.c.b Value[64 x 1]] }
0x7ffac8e0c0e8: {[rn3_18.c2.c.sc Value[64 x 1]] }
0x7ffac8e0ccc8: {[rn3_18.c2.c.m Value[64 x 1]] }
0x7ffac8e0d798: {[rn3_18.c2.c.isd Value[64 x 1]] }
0x7ffac8e0f798: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
0x7ffac8e0ff18: {[OutputNodes.b Value[10]] }

05/03/2016 18:17:55: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 18:17:55: Starting Epoch 1: learning rate per sample = 0.006250  effective momentum = 0.900000  momentum as time constant = 151.9 samples

05/03/2016 18:17:55: Starting minibatch loop.
05/03/2016 18:17:59: Finished Epoch[ 1 of 1]: [Training] CE = 2.53698325 * 128; Err = 0.93750000 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0062500001; epochTime=3.69731s
05/03/2016 18:17:59: SGD: Saving checkpoint model '/tmp/cntk-test-20160503180114.713822/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
05/03/2016 18:17:59: CNTKCommandTrainEnd: Train

05/03/2016 18:17:59: Action "train" complete.


05/03/2016 18:17:59: ##############################################################################
05/03/2016 18:17:59: #                                                                            #
05/03/2016 18:17:59: # Action "test"                                                              #
05/03/2016 18:17:59: #                                                                            #
05/03/2016 18:17:59: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c1.c.c.b Gradient[16 x 1]] [rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.W Gradient[16 x 144]] [rn1_10.c2.c.b Gradient[16 x 1]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.p Gradient[32 x 32 x 16 x *1]] [rn1_10.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c1.c.c.b Gradient[16 x 1]] [rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.W Gradient[16 x 144]] [rn1_11.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.p Gradient[32 x 32 x 16 x *1]] [rn1_11.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c1.c.c.b Gradient[16 x 1]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.W Gradient[16 x 144]] [rn1_12.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.p Gradient[32 x 32 x 16 x *1]] [rn1_12.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c1.c.c.b Gradient[16 x 1]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.W Gradient[16 x 144]] [rn1_13.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.p Gradient[32 x 32 x 16 x *1]] [rn1_13.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c1.c.c.b Gradient[16 x 1]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.W Gradient[16 x 144]] [rn1_14.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.p Gradient[32 x 32 x 16 x *1]] [rn1_14.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c1.c.c.b Gradient[16 x 1]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.W Gradient[16 x 144]] [rn1_15.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.p Gradient[32 x 32 x 16 x *1]] [rn1_15.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c1.c.c.b Gradient[16 x 1]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.W Gradient[16 x 144]] [rn1_16.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.p Gradient[32 x 32 x 16 x *1]] [rn1_16.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c1.c.c.b Gradient[16 x 1]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.W Gradient[16 x 144]] [rn1_17.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.p Gradient[32 x 32 x 16 x *1]] [rn1_17.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c1.c.c.b Gradient[16 x 1]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.W Gradient[16 x 144]] [rn1_18.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.p Gradient[32 x 32 x 16 x *1]] [rn1_18.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c1.c.c.b Gradient[16 x 1]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.W Gradient[16 x 144]] [rn1_4.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.p Gradient[32 x 32 x 16 x *1]] [rn1_4.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c1.c.c.b Gradient[16 x 1]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.W Gradient[16 x 144]] [rn1_5.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.p Gradient[32 x 32 x 16 x *1]] [rn1_5.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c1.c.c.b Gradient[16 x 1]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.W Gradient[16 x 144]] [rn1_6.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.p Gradient[32 x 32 x 16 x *1]] [rn1_6.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c1.c.c.b Gradient[16 x 1]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.W Gradient[16 x 144]] [rn1_7.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.p Gradient[32 x 32 x 16 x *1]] [rn1_7.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c1.c.c.b Gradient[16 x 1]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.W Gradient[16 x 144]] [rn1_8.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.p Gradient[32 x 32 x 16 x *1]] [rn1_8.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c1.c.c.b Gradient[16 x 1]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.W Gradient[16 x 144]] [rn1_9.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.p Gradient[32 x 32 x 16 x *1]] [rn1_9.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c1.c.c.b Gradient[32 x 1]] [rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.W Gradient[32 x 288]] [rn2_10.c2.c.b Gradient[32 x 1]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.p Gradient[16 x 16 x 32 x *1]] [rn2_10.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c1.c.c.b Gradient[32 x 1]] [rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.W Gradient[32 x 288]] [rn2_11.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.p Gradient[16 x 16 x 32 x *1]] [rn2_11.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c1.c.c.b Gradient[32 x 1]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.W Gradient[32 x 288]] [rn2_12.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.p Gradient[16 x 16 x 32 x *1]] [rn2_12.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c1.c.c.b Gradient[32 x 1]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.W Gradient[32 x 288]] [rn2_13.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.p Gradient[16 x 16 x 32 x *1]] [rn2_13.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c1.c.c.b Gradient[32 x 1]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.W Gradient[32 x 288]] [rn2_14.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.p Gradient[16 x 16 x 32 x *1]] [rn2_14.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c1.c.c.b Gradient[32 x 1]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.W Gradient[32 x 288]] [rn2_15.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.p Gradient[16 x 16 x 32 x *1]] [rn2_15.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c1.c.c.b Gradient[32 x 1]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.W Gradient[32 x 288]] [rn2_16.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.p Gradient[16 x 16 x 32 x *1]] [rn2_16.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c1.c.c.b Gradient[32 x 1]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.W Gradient[32 x 288]] [rn2_17.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.p Gradient[16 x 16 x 32 x *1]] [rn2_17.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c1.c.c.b Gradient[32 x 1]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.W Gradient[32 x 288]] [rn2_18.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.p Gradient[16 x 16 x 32 x *1]] [rn2_18.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c1.c.c.b Gradient[32 x 1]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.W Gradient[32 x 288]] [rn2_4.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.p Gradient[16 x 16 x 32 x *1]] [rn2_4.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c1.c.c.b Gradient[32 x 1]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.W Gradient[32 x 288]] [rn2_5.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.p Gradient[16 x 16 x 32 x *1]] [rn2_5.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c1.c.c.b Gradient[32 x 1]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.W Gradient[32 x 288]] [rn2_6.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.p Gradient[16 x 16 x 32 x *1]] [rn2_6.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c1.c.c.b Gradient[32 x 1]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.W Gradient[32 x 288]] [rn2_7.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.p Gradient[16 x 16 x 32 x *1]] [rn2_7.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c1.c.c.b Gradient[32 x 1]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.W Gradient[32 x 288]] [rn2_8.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.p Gradient[16 x 16 x 32 x *1]] [rn2_8.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c1.c.c.b Gradient[32 x 1]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.W Gradient[32 x 288]] [rn2_9.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.p Gradient[16 x 16 x 32 x *1]] [rn2_9.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c1.c.c.b Gradient[64 x 1]] [rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.W Gradient[64 x 576]] [rn3_10.c2.c.b Gradient[64 x 1]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.p Gradient[8 x 8 x 64 x *1]] [rn3_10.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c1.c.c.b Gradient[64 x 1]] [rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.W Gradient[64 x 576]] [rn3_11.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.p Gradient[8 x 8 x 64 x *1]] [rn3_11.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c1.c.c.b Gradient[64 x 1]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.W Gradient[64 x 576]] [rn3_12.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.p Gradient[8 x 8 x 64 x *1]] [rn3_12.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c1.c.c.b Gradient[64 x 1]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.W Gradient[64 x 576]] [rn3_13.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.p Gradient[8 x 8 x 64 x *1]] [rn3_13.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c1.c.c.b Gradient[64 x 1]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.W Gradient[64 x 576]] [rn3_14.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.p Gradient[8 x 8 x 64 x *1]] [rn3_14.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c1.c.c.b Gradient[64 x 1]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.W Gradient[64 x 576]] [rn3_15.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.p Gradient[8 x 8 x 64 x *1]] [rn3_15.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c1.c.c.b Gradient[64 x 1]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.W Gradient[64 x 576]] [rn3_16.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.p Gradient[8 x 8 x 64 x *1]] [rn3_16.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c1.c.c.b Gradient[64 x 1]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.W Gradient[64 x 576]] [rn3_17.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.p Gradient[8 x 8 x 64 x *1]] [rn3_17.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c1.c.c.b Gradient[64 x 1]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.W Gradient[64 x 576]] [rn3_18.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.p Gradient[8 x 8 x 64 x *1]] [rn3_18.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c1.c.c.b Gradient[64 x 1]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.W Gradient[64 x 576]] [rn3_4.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.p Gradient[8 x 8 x 64 x *1]] [rn3_4.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c1.c.c.b Gradient[64 x 1]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.W Gradient[64 x 576]] [rn3_5.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.p Gradient[8 x 8 x 64 x *1]] [rn3_5.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c1.c.c.b Gradient[64 x 1]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.W Gradient[64 x 576]] [rn3_6.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.p Gradient[8 x 8 x 64 x *1]] [rn3_6.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c1.c.c.b Gradient[64 x 1]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.W Gradient[64 x 576]] [rn3_7.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.p Gradient[8 x 8 x 64 x *1]] [rn3_7.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c1.c.c.b Gradient[64 x 1]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.W Gradient[64 x 576]] [rn3_8.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.p Gradient[8 x 8 x 64 x *1]] [rn3_8.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c1.c.c.b Gradient[64 x 1]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.W Gradient[64 x 576]] [rn3_9.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] [rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.p Gradient[8 x 8 x 64 x *1]] [rn3_9.y Gradient[8 x 8 x 64 x *1]] }
0x7ffaa120ab58: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120b468: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120b5e8: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120b888: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120bb88: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaa120bf28: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120c228: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120c528: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
0x7ffaa120c6a8: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaa14dc1a8: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaa14dc328: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaa14dc4a8: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
0x7ffaa14dc7a8: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaa2a46eb8: {[CE Value[1]] }
0x7ffaa2c00ae8: {[rn2_13.c2.c.m Value[32 x 1]] }
0x7ffaa2c014c8: {[rn2_13.c2.c.sc Value[32 x 1]] }
0x7ffaa2c02248: {[rn2_13.c2.W Value[32 x 288]] }
0x7ffaa2c029f8: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c02d08: {[rn2_14.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c04928: {[rn2_14.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c05328: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c060a8: {[rn2_14.c1.c.W Value[32 x 288]] }
0x7ffaa2c06be8: {[rn2_14.c2.c.b Value[32 x 1]] }
0x7ffaa2c07dd8: {[rn2_14.c2.c.isd Value[32 x 1]] }
0x7ffaa2c087d8: {[rn2_14.c2.c.m Value[32 x 1]] }
0x7ffaa2c091d8: {[rn2_14.c2.c.sc Value[32 x 1]] }
0x7ffaa2c09f58: {[rn2_14.c2.W Value[32 x 288]] }
0x7ffaa2c0aaa8: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c0adb8: {[rn2_15.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c0cd68: {[rn2_15.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c0d768: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c0e4e8: {[rn2_15.c1.c.W Value[32 x 288]] }
0x7ffaa2c0ecf8: {[rn2_15.c2.c.b Value[32 x 1]] }
0x7ffaa2c0ff28: {[rn2_15.c2.c.isd Value[32 x 1]] }
0x7ffaa2c100e8: {[rn2_15.c2.c.m Value[32 x 1]] }
0x7ffaa2c112c8: {[rn2_15.c2.c.sc Value[32 x 1]] }
0x7ffaa2c12048: {[rn2_15.c2.W Value[32 x 288]] }
0x7ffaa2c12b98: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c12ea8: {[rn2_16.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c14ac8: {[rn2_16.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c154c8: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c16248: {[rn2_16.c1.c.W Value[32 x 288]] }
0x7ffaa2c16d88: {[rn2_16.c2.c.b Value[32 x 1]] }
0x7ffaa2c175d8: {[rn2_16.c2.c.isd Value[32 x 1]] }
0x7ffaa2c18ea8: {[rn2_16.c2.c.m Value[32 x 1]] }
0x7ffaa2c198a8: {[rn2_16.c2.c.sc Value[32 x 1]] }
0x7ffaa2c1a628: {[rn2_16.c2.W Value[32 x 288]] }
0x7ffaa2c1ae18: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c1b128: {[rn2_17.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c1cd48: {[rn2_17.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c1d748: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c1e4c8: {[rn2_17.c1.c.W Value[32 x 288]] }
0x7ffaa2c1f008: {[rn2_17.c2.c.b Value[32 x 1]] }
0x7ffaa2c201f8: {[rn2_17.c2.c.isd Value[32 x 1]] }
0x7ffaa2c20bf8: {[rn2_17.c2.c.m Value[32 x 1]] }
0x7ffaa2c215f8: {[rn2_17.c2.c.sc Value[32 x 1]] }
0x7ffaa2c22378: {[rn2_17.c2.W Value[32 x 288]] }
0x7ffaa2c22ec8: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c231d8: {[rn2_18.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c25188: {[rn2_18.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c25b88: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c26908: {[rn2_18.c1.c.W Value[32 x 288]] }
0x7ffaa2c27118: {[rn2_18.c2.c.b Value[32 x 1]] }
0x7ffaa2c28348: {[rn2_18.c2.c.isd Value[32 x 1]] }
0x7ffaa2c28508: {[rn2_18.c2.c.m Value[32 x 1]] }
0x7ffaa2c296e8: {[rn2_18.c2.c.sc Value[32 x 1]] }
0x7ffaa2c2a468: {[rn2_18.c2.W Value[32 x 288]] }
0x7ffaa2c2b2c8: {[rn2_1_Wproj Value[32 x 16]] }
0x7ffaa2c2b798: {[rn2_2.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c2cd58: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c2cf18: {[rn2_2.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c2e0f8: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c2ee78: {[rn2_2.c1.c.W Value[32 x 288]] }
0x7ffaa2c2f9b8: {[rn2_2.c2.c.b Value[32 x 1]] }
0x7ffaa2c30f68: {[rn2_2.c2.c.isd Value[32 x 1]] }
0x7ffaa2c31948: {[rn2_2.c2.c.m Value[32 x 1]] }
0x7ffaa2c322e8: {[rn2_2.c2.c.sc Value[32 x 1]] }
0x7ffaa2c33068: {[rn2_2.c2.W Value[32 x 288]] }
0x7ffaa2c33b68: {[rn2_3.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c34d98: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c34f58: {[rn2_3.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c36138: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c36eb8: {[rn2_3.c1.c.W Value[32 x 288]] }
0x7ffaa2c379f8: {[rn2_3.c2.c.b Value[32 x 1]] }
0x7ffaa2c38be8: {[rn2_3.c2.c.isd Value[32 x 1]] }
0x7ffaa2c395e8: {[rn2_3.c2.c.m Value[32 x 1]] }
0x7ffaa2c39fe8: {[rn2_3.c2.c.sc Value[32 x 1]] }
0x7ffaa2c3ad68: {[rn2_3.c2.W Value[32 x 288]] }
0x7ffaa2c3b8b8: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c3bbc8: {[rn2_4.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c3d2d8: {[rn2_4.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c3e4f8: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c3f278: {[rn2_4.c1.c.W Value[32 x 288]] }
0x7ffaa2c3fa88: {[rn2_4.c2.c.b Value[32 x 1]] }
0x7ffaa2c40cb8: {[rn2_4.c2.c.isd Value[32 x 1]] }
0x7ffaa2c40e78: {[rn2_4.c2.c.m Value[32 x 1]] }
0x7ffaa2c42058: {[rn2_4.c2.c.sc Value[32 x 1]] }
0x7ffaa2c42dd8: {[rn2_4.c2.W Value[32 x 288]] }
0x7ffaa2c43c38: {[rn2_5.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c44e68: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c45028: {[rn2_5.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c46208: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c46f88: {[rn2_5.c1.c.W Value[32 x 288]] }
0x7ffaa2c47ac8: {[rn2_5.c2.c.b Value[32 x 1]] }
0x7ffaa2c48318: {[rn2_5.c2.c.isd Value[32 x 1]] }
0x7ffaa2c49248: {[rn2_5.c2.c.m Value[32 x 1]] }
0x7ffaa2c4a428: {[rn2_5.c2.c.sc Value[32 x 1]] }
0x7ffaa2c4b1a8: {[rn2_5.c2.W Value[32 x 288]] }
0x7ffaa2c4bca8: {[rn2_6.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c4ced8: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c4d098: {[rn2_6.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c4e278: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c4eff8: {[rn2_6.c1.c.W Value[32 x 288]] }
0x7ffaa2c4fce8: {[rn2_6.c2.c.b Value[32 x 1]] }
0x7ffaa2c50ed8: {[rn2_6.c2.c.isd Value[32 x 1]] }
0x7ffaa2c518d8: {[rn2_6.c2.c.m Value[32 x 1]] }
0x7ffaa2c522d8: {[rn2_6.c2.c.sc Value[32 x 1]] }
0x7ffaa2c53058: {[rn2_6.c2.W Value[32 x 288]] }
0x7ffaa2c53ba8: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c53eb8: {[rn2_7.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c55388: {[rn2_7.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c565a8: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c57328: {[rn2_7.c1.c.W Value[32 x 288]] }
0x7ffaa2c57b38: {[rn2_7.c2.c.b Value[32 x 1]] }
0x7ffaa2c58d68: {[rn2_7.c2.c.isd Value[32 x 1]] }
0x7ffaa2c58f28: {[rn2_7.c2.c.m Value[32 x 1]] }
0x7ffaa2c5a108: {[rn2_7.c2.c.sc Value[32 x 1]] }
0x7ffaa2c5ae88: {[rn2_7.c2.W Value[32 x 288]] }
0x7ffaa2c5bce8: {[rn2_8.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c5cf18: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c5d0d8: {[rn2_8.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c5e2b8: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c5f038: {[rn2_8.c1.c.W Value[32 x 288]] }
0x7ffaa2c5fb78: {[rn2_8.c2.c.b Value[32 x 1]] }
0x7ffaa2c603c8: {[rn2_8.c2.c.isd Value[32 x 1]] }
0x7ffaa2c612f8: {[rn2_8.c2.c.m Value[32 x 1]] }
0x7ffaa2c624d8: {[rn2_8.c2.c.sc Value[32 x 1]] }
0x7ffaa2c63258: {[rn2_8.c2.W Value[32 x 288]] }
0x7ffaa2c63d58: {[rn2_9.c1.c.c.b Value[32 x 1]] }
0x7ffaa2c64f88: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2c65148: {[rn2_9.c1.c.c.m Value[32 x 1]] }
0x7ffaa2c66328: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2c670a8: {[rn2_9.c1.c.W Value[32 x 288]] }
0x7ffaa2c67be8: {[rn2_9.c2.c.b Value[32 x 1]] }
0x7ffaa2c68dd8: {[rn2_9.c2.c.isd Value[32 x 1]] }
0x7ffaa2c697d8: {[rn2_9.c2.c.m Value[32 x 1]] }
0x7ffaa2c6a1d8: {[rn2_9.c2.c.sc Value[32 x 1]] }
0x7ffaa2c6af58: {[rn2_9.c2.W Value[32 x 288]] }
0x7ffaa2c6b868: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c6bb78: {[rn3_1.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c6d2f8: {[rn3_1.c1.c.W Value[64 x 288]] }
0x7ffaa2c6db78: {[rn3_1.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c6dd18: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c6fa78: {[rn3_1.c2.c.b Value[64 x 1]] }
0x7ffaa2c70c38: {[rn3_1.c2.c.isd Value[64 x 1]] }
0x7ffaa2c70e38: {[rn3_1.c2.c.m Value[64 x 1]] }
0x7ffaa2c720b8: {[rn3_1.c2.c.sc Value[64 x 1]] }
0x7ffaa2c722c8: {[rn3_1.c2.W Value[64 x 576]] }
0x7ffaa2c73578: {[rn3_1.c_proj.b Value[64 x 1]] }
0x7ffaa2c737a8: {[rn3_1.c_proj.isd Value[64 x 1]] }
0x7ffaa2c75188: {[rn3_1.c_proj.m Value[64 x 1]] }
0x7ffaa2c75b68: {[rn3_1.c_proj.sc Value[64 x 1]] }
0x7ffaa2c76e48: {[rn3_10.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c77048: {[rn3_10.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c780f8: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c78c78: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c7a1f8: {[rn3_10.c1.c.W Value[64 x 576]] }
0x7ffaa2c7acf8: {[rn3_10.c2.c.b Value[64 x 1]] }
0x7ffaa2c7bef8: {[rn3_10.c2.c.isd Value[64 x 1]] }
0x7ffaa2c7c0f8: {[rn3_10.c2.c.m Value[64 x 1]] }
0x7ffaa2c7d378: {[rn3_10.c2.c.sc Value[64 x 1]] }
0x7ffaa2c7d588: {[rn3_10.c2.W Value[64 x 576]] }
0x7ffaa2c7ee28: {[rn3_11.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c7f028: {[rn3_11.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c800d8: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c80c58: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c826f8: {[rn3_11.c1.c.W Value[64 x 576]] }
0x7ffaa2c82ea8: {[rn3_11.c2.c.b Value[64 x 1]] }
0x7ffaa2c840a8: {[rn3_11.c2.c.isd Value[64 x 1]] }
0x7ffaa2c842a8: {[rn3_11.c2.c.m Value[64 x 1]] }
0x7ffaa2c85528: {[rn3_11.c2.c.sc Value[64 x 1]] }
0x7ffaa2c856f8: {[rn3_11.c2.W Value[64 x 576]] }
0x7ffaa2c875a8: {[rn3_12.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c877a8: {[rn3_12.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c88858: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c893d8: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c8a958: {[rn3_12.c1.c.W Value[64 x 576]] }
0x7ffaa2c8b458: {[rn3_12.c2.c.b Value[64 x 1]] }
0x7ffaa2c8c658: {[rn3_12.c2.c.isd Value[64 x 1]] }
0x7ffaa2c8c858: {[rn3_12.c2.c.m Value[64 x 1]] }
0x7ffaa2c8dad8: {[rn3_12.c2.c.sc Value[64 x 1]] }
0x7ffaa2c8dce8: {[rn3_12.c2.W Value[64 x 576]] }
0x7ffaa2c8f588: {[rn3_13.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c8f788: {[rn3_13.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c90838: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c913b8: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c92938: {[rn3_13.c1.c.W Value[64 x 576]] }
0x7ffaa2c93438: {[rn3_13.c2.c.b Value[64 x 1]] }
0x7ffaa2c94638: {[rn3_13.c2.c.isd Value[64 x 1]] }
0x7ffaa2c94838: {[rn3_13.c2.c.m Value[64 x 1]] }
0x7ffaa2c95ab8: {[rn3_13.c2.c.sc Value[64 x 1]] }
0x7ffaa2c95cc8: {[rn3_13.c2.W Value[64 x 576]] }
0x7ffaa2c97568: {[rn3_14.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c97768: {[rn3_14.c1.c.c.m Value[64 x 1]] }
0x7ffaa2c98818: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2c99398: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2c9a918: {[rn3_14.c1.c.W Value[64 x 576]] }
0x7ffaa2c9b418: {[rn3_14.c2.c.b Value[64 x 1]] }
0x7ffaa2c9c618: {[rn3_14.c2.c.isd Value[64 x 1]] }
0x7ffaa2c9c818: {[rn3_14.c2.c.m Value[64 x 1]] }
0x7ffaa2c9da98: {[rn3_14.c2.c.sc Value[64 x 1]] }
0x7ffaa2c9dca8: {[rn3_14.c2.W Value[64 x 576]] }
0x7ffaa2c9f548: {[rn3_15.c1.c.c.b Value[64 x 1]] }
0x7ffaa2c9f748: {[rn3_15.c1.c.c.m Value[64 x 1]] }
0x7ffaa2ca07f8: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2ca1378: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2ca28f8: {[rn3_15.c1.c.W Value[64 x 576]] }
0x7ffaa2ca3a98: {[rn3_15.c2.c.b Value[64 x 1]] }
0x7ffaa2ca4c98: {[rn3_15.c2.c.isd Value[64 x 1]] }
0x7ffaa2ca4e98: {[rn3_15.c2.c.m Value[64 x 1]] }
0x7ffaa2ca6118: {[rn3_15.c2.c.sc Value[64 x 1]] }
0x7ffaa2ca6328: {[rn3_15.c2.W Value[64 x 576]] }
0x7ffaa2ca7bf8: {[rn3_16.c1.c.c.b Value[64 x 1]] }
0x7ffaa2ca7df8: {[rn3_16.c1.c.c.m Value[64 x 1]] }
0x7ffaa2ca8ea8: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2ca9a28: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2caafa8: {[rn3_16.c1.c.W Value[64 x 576]] }
0x7ffaa2cab318: {[rn3_18.c2.c.isd Value[64 x 1]] }
0x7ffaa2caccf8: {[rn3_18.c2.c.m Value[64 x 1]] }
0x7ffaa2cad6d8: {[rn3_18.c2.c.sc Value[64 x 1]] }
0x7ffaa2cad8a8: {[rn3_18.c2.W Value[64 x 576]] }
0x7ffaa2caf898: {[rn3_1_Wproj Value[64 x 32]] }
0x7ffaa2cafd68: {[rn3_2.c1.c.c.b Value[64 x 1]] }
0x7ffaa2caffd8: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cb19b8: {[rn3_2.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cb2748: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cb2918: {[rn3_2.c1.c.W Value[64 x 576]] }
0x7ffaa2cb3f78: {[rn3_2.c2.c.b Value[64 x 1]] }
0x7ffaa2cb5178: {[rn3_2.c2.c.isd Value[64 x 1]] }
0x7ffaa2cb5378: {[rn3_2.c2.c.m Value[64 x 1]] }
0x7ffaa2cb65f8: {[rn3_2.c2.c.sc Value[64 x 1]] }
0x7ffaa2cb67c8: {[rn3_2.c2.W Value[64 x 576]] }
0x7ffaa2cb8068: {[rn3_3.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cb9268: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cb9468: {[rn3_3.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cba6e8: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cba8f8: {[rn3_3.c1.c.W Value[64 x 576]] }
0x7ffaa2cbbe78: {[rn3_3.c2.c.b Value[64 x 1]] }
0x7ffaa2cbc0e8: {[rn3_3.c2.c.isd Value[64 x 1]] }
0x7ffaa2cbdac8: {[rn3_3.c2.c.m Value[64 x 1]] }
0x7ffaa2cbe4a8: {[rn3_3.c2.c.sc Value[64 x 1]] }
0x7ffaa2cbe678: {[rn3_3.c2.W Value[64 x 576]] }
0x7ffaa2cbffc8: {[rn3_4.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cc11c8: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cc13c8: {[rn3_4.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cc2648: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cc2858: {[rn3_4.c1.c.W Value[64 x 576]] }
0x7ffaa2cc3dd8: {[rn3_4.c2.c.b Value[64 x 1]] }
0x7ffaa2cc4048: {[rn3_4.c2.c.isd Value[64 x 1]] }
0x7ffaa2cc5a28: {[rn3_4.c2.c.m Value[64 x 1]] }
0x7ffaa2cc6408: {[rn3_4.c2.c.sc Value[64 x 1]] }
0x7ffaa2cc65d8: {[rn3_4.c2.W Value[64 x 576]] }
0x7ffaa2cc7f28: {[rn3_5.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cc9128: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cc9328: {[rn3_5.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cca5a8: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cca7b8: {[rn3_5.c1.c.W Value[64 x 576]] }
0x7ffaa2ccc738: {[rn3_5.c2.c.b Value[64 x 1]] }
0x7ffaa2ccc9a8: {[rn3_5.c2.c.isd Value[64 x 1]] }
0x7ffaa2cce388: {[rn3_5.c2.c.m Value[64 x 1]] }
0x7ffaa2cced68: {[rn3_5.c2.c.sc Value[64 x 1]] }
0x7ffaa2ccef38: {[rn3_5.c2.W Value[64 x 576]] }
0x7ffaa2cd0888: {[rn3_6.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cd1a88: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cd1c88: {[rn3_6.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cd2f08: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cd3118: {[rn3_6.c1.c.W Value[64 x 576]] }
0x7ffaa2cd4698: {[rn3_6.c2.c.b Value[64 x 1]] }
0x7ffaa2cd4908: {[rn3_6.c2.c.isd Value[64 x 1]] }
0x7ffaa2cd62e8: {[rn3_6.c2.c.m Value[64 x 1]] }
0x7ffaa2cd6cc8: {[rn3_6.c2.c.sc Value[64 x 1]] }
0x7ffaa2cd6e98: {[rn3_6.c2.W Value[64 x 576]] }
0x7ffaa2cd87e8: {[rn3_7.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cd99e8: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cd9be8: {[rn3_7.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cdae68: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cdb078: {[rn3_7.c1.c.W Value[64 x 576]] }
0x7ffaa2cdc5f8: {[rn3_7.c2.c.b Value[64 x 1]] }
0x7ffaa2cdc868: {[rn3_7.c2.c.isd Value[64 x 1]] }
0x7ffaa2cde248: {[rn3_7.c2.c.m Value[64 x 1]] }
0x7ffaa2cdec28: {[rn3_7.c2.c.sc Value[64 x 1]] }
0x7ffaa2cdedf8: {[rn3_7.c2.W Value[64 x 576]] }
0x7ffaa2ce0748: {[rn3_8.c1.c.c.b Value[64 x 1]] }
0x7ffaa2ce1948: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2ce1b48: {[rn3_8.c1.c.c.m Value[64 x 1]] }
0x7ffaa2ce2dc8: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2ce2fd8: {[rn3_8.c1.c.W Value[64 x 576]] }
0x7ffaa2ce4558: {[rn3_8.c2.c.b Value[64 x 1]] }
0x7ffaa2ce47c8: {[rn3_8.c2.c.isd Value[64 x 1]] }
0x7ffaa2ce61a8: {[rn3_8.c2.c.m Value[64 x 1]] }
0x7ffaa2ce6b88: {[rn3_8.c2.c.sc Value[64 x 1]] }
0x7ffaa2ce6d58: {[rn3_8.c2.W Value[64 x 576]] }
0x7ffaa2ce8d48: {[rn3_9.c1.c.c.b Value[64 x 1]] }
0x7ffaa2ce9f48: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cea148: {[rn3_9.c1.c.c.m Value[64 x 1]] }
0x7ffaa2ceb3c8: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2ceb5d8: {[rn3_9.c1.c.W Value[64 x 576]] }
0x7ffaa2cecb58: {[rn3_9.c2.c.b Value[64 x 1]] }
0x7ffaa2cecdc8: {[rn3_9.c2.c.isd Value[64 x 1]] }
0x7ffaa2cee7a8: {[rn3_9.c2.c.m Value[64 x 1]] }
0x7ffaa2cef188: {[rn3_9.c2.c.sc Value[64 x 1]] }
0x7ffaa2cef358: {[rn3_9.c2.W Value[64 x 576]] }
0x7ffaa2ceffa8: {[rn3_16.c2.c.b Value[64 x 1]] }
0x7ffaa2cf11a8: {[rn3_16.c2.c.isd Value[64 x 1]] }
0x7ffaa2cf13a8: {[rn3_16.c2.c.m Value[64 x 1]] }
0x7ffaa2cf2628: {[rn3_16.c2.c.sc Value[64 x 1]] }
0x7ffaa2cf2838: {[rn3_16.c2.W Value[64 x 576]] }
0x7ffaa2cf40d8: {[rn3_17.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cf42d8: {[rn3_17.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cf5388: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cf5f08: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cf7488: {[rn3_17.c1.c.W Value[64 x 576]] }
0x7ffaa2cf7f88: {[rn3_17.c2.c.b Value[64 x 1]] }
0x7ffaa2cf9188: {[rn3_17.c2.c.isd Value[64 x 1]] }
0x7ffaa2cf9388: {[rn3_17.c2.c.m Value[64 x 1]] }
0x7ffaa2cfa608: {[rn3_17.c2.c.sc Value[64 x 1]] }
0x7ffaa2cfa818: {[rn3_17.c2.W Value[64 x 576]] }
0x7ffaa2cfc0b8: {[rn3_18.c1.c.c.b Value[64 x 1]] }
0x7ffaa2cfc2b8: {[rn3_18.c1.c.c.m Value[64 x 1]] }
0x7ffaa2cfd368: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
0x7ffaa2cfdee8: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
0x7ffaa2cff468: {[rn3_18.c1.c.W Value[64 x 576]] }
0x7ffaa2cfff68: {[rn3_18.c2.c.b Value[64 x 1]] }
0x7ffaa2e1be98: {[conv1.c.c.b Value[16 x 1]] }
0x7ffaa2e1dca8: {[conv1.c.c.isd Value[16 x 1]] }
0x7ffaa2e1e708: {[conv1.c.c.m Value[16 x 1]] }
0x7ffaa2e1f078: {[conv1.c.c.sc Value[16 x 1]] }
0x7ffaa2e22e78: {[conv1.c.W Value[16 x 27]] }
0x7ffaa2e23528: {[features Value[32 x 32 x 3 x *1]] }
0x7ffaa2e25048: {[labels Value[10 x *1]] }
0x7ffaa2e25ad8: {[OutputNodes.b Value[10]] }
0x7ffaa2e267e8: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
0x7ffaa2e272f8: {[rn1_1.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e28a28: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e29428: {[rn1_1.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e29e48: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e2aba8: {[rn1_1.c1.c.W Value[16 x 144]] }
0x7ffaa2e2b348: {[rn1_1.c2.c.b Value[16 x 1]] }
0x7ffaa2e2c538: {[rn1_1.c2.c.isd Value[16 x 1]] }
0x7ffaa2e2cf38: {[rn1_1.c2.c.m Value[16 x 1]] }
0x7ffaa2e2dcf8: {[rn1_1.c2.c.sc Value[16 x 1]] }
0x7ffaa2e2ea18: {[rn1_1.c2.W Value[16 x 144]] }
0x7ffaa2e2f488: {[rn1_10.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e2f628: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e307d8: {[rn1_10.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e31d88: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e32ae8: {[rn1_10.c1.c.W Value[16 x 144]] }
0x7ffaa2e33288: {[rn1_10.c2.c.b Value[16 x 1]] }
0x7ffaa2e34458: {[rn1_10.c2.c.isd Value[16 x 1]] }
0x7ffaa2e34ea8: {[rn1_10.c2.c.m Value[16 x 1]] }
0x7ffaa2e35c38: {[rn1_10.c2.c.sc Value[16 x 1]] }
0x7ffaa2e36958: {[rn1_10.c2.W Value[16 x 144]] }
0x7ffaa2e36d78: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e37f98: {[rn1_11.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e38908: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e398d8: {[rn1_11.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e59ef8: {[rn1_11.c1.c.W Value[16 x 144]] }
0x7ffaa2e5b288: {[rn1_11.c2.c.b Value[16 x 1]] }
0x7ffaa2e5c518: {[rn1_11.c2.c.isd Value[16 x 1]] }
0x7ffaa2e5c718: {[rn1_11.c2.c.m Value[16 x 1]] }
0x7ffaa2e5d018: {[rn1_11.c2.c.sc Value[16 x 1]] }
0x7ffaa2e5e9b8: {[rn1_11.c2.W Value[16 x 144]] }
0x7ffaa2e5f428: {[rn1_12.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e5f628: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e60848: {[rn1_12.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e61548: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e624e8: {[rn1_12.c1.c.W Value[16 x 144]] }
0x7ffaa2e632e8: {[rn1_12.c2.c.b Value[16 x 1]] }
0x7ffaa2e64528: {[rn1_12.c2.c.isd Value[16 x 1]] }
0x7ffaa2e64728: {[rn1_12.c2.c.m Value[16 x 1]] }
0x7ffaa2e65038: {[rn1_12.c2.c.sc Value[16 x 1]] }
0x7ffaa2e65db8: {[rn1_12.c2.W Value[16 x 144]] }
0x7ffaa2e67048: {[rn1_13.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e67588: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e68e58: {[rn1_13.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e69558: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e6a528: {[rn1_13.c1.c.W Value[16 x 144]] }
0x7ffaa2e6b318: {[rn1_13.c2.c.b Value[16 x 1]] }
0x7ffaa2e6c538: {[rn1_13.c2.c.isd Value[16 x 1]] }
0x7ffaa2e6c738: {[rn1_13.c2.c.m Value[16 x 1]] }
0x7ffaa2e6d0a8: {[rn1_13.c2.c.sc Value[16 x 1]] }
0x7ffaa2e6dde8: {[rn1_13.c2.W Value[16 x 144]] }
0x7ffaa2e6f078: {[rn1_14.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e6f5b8: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e70e88: {[rn1_14.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e71588: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e72558: {[rn1_14.c1.c.W Value[16 x 144]] }
0x7ffaa2e73348: {[rn1_14.c2.c.b Value[16 x 1]] }
0x7ffaa2e74568: {[rn1_14.c2.c.isd Value[16 x 1]] }
0x7ffaa2e74768: {[rn1_14.c2.c.m Value[16 x 1]] }
0x7ffaa2e750d8: {[rn1_14.c2.c.sc Value[16 x 1]] }
0x7ffaa2e75e18: {[rn1_14.c2.W Value[16 x 144]] }
0x7ffaa2e770a8: {[rn1_15.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e775e8: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e78eb8: {[rn1_15.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e795b8: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e7a588: {[rn1_15.c1.c.W Value[16 x 144]] }
0x7ffaa2e7b378: {[rn1_15.c2.c.b Value[16 x 1]] }
0x7ffaa2e7c598: {[rn1_15.c2.c.isd Value[16 x 1]] }
0x7ffaa2e7c798: {[rn1_15.c2.c.m Value[16 x 1]] }
0x7ffaa2e7d108: {[rn1_15.c2.c.sc Value[16 x 1]] }
0x7ffaa2e7de48: {[rn1_15.c2.W Value[16 x 144]] }
0x7ffaa2e7f0d8: {[rn1_16.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e7f618: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e80ee8: {[rn1_16.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e815e8: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e825b8: {[rn1_16.c1.c.W Value[16 x 144]] }
0x7ffaa2e833a8: {[rn1_16.c2.c.b Value[16 x 1]] }
0x7ffaa2e845c8: {[rn1_16.c2.c.isd Value[16 x 1]] }
0x7ffaa2e847c8: {[rn1_16.c2.c.m Value[16 x 1]] }
0x7ffaa2e85138: {[rn1_16.c2.c.sc Value[16 x 1]] }
0x7ffaa2e85e78: {[rn1_16.c2.W Value[16 x 144]] }
0x7ffaa2e87108: {[rn1_17.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e87648: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e88f18: {[rn1_17.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e89618: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e8a5e8: {[rn1_17.c1.c.W Value[16 x 144]] }
0x7ffaa2e8b3d8: {[rn1_17.c2.c.b Value[16 x 1]] }
0x7ffaa2e8c5f8: {[rn1_17.c2.c.isd Value[16 x 1]] }
0x7ffaa2e8c7f8: {[rn1_17.c2.c.m Value[16 x 1]] }
0x7ffaa2e8d168: {[rn1_17.c2.c.sc Value[16 x 1]] }
0x7ffaa2e8dea8: {[rn1_17.c2.W Value[16 x 144]] }
0x7ffaa2e8f138: {[rn1_18.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e8f678: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e90f48: {[rn1_18.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e91648: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e92618: {[rn1_18.c1.c.W Value[16 x 144]] }
0x7ffaa2e93408: {[rn1_18.c2.c.b Value[16 x 1]] }
0x7ffaa2e94628: {[rn1_18.c2.c.isd Value[16 x 1]] }
0x7ffaa2e94828: {[rn1_18.c2.c.m Value[16 x 1]] }
0x7ffaa2e95198: {[rn1_18.c2.c.sc Value[16 x 1]] }
0x7ffaa2e95ed8: {[rn1_18.c2.W Value[16 x 144]] }
0x7ffaa2e97168: {[rn1_2.c1.c.c.b Value[16 x 1]] }
0x7ffaa2e976a8: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2e98fb8: {[rn1_2.c1.c.c.m Value[16 x 1]] }
0x7ffaa2e99678: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2e9a648: {[rn1_2.c1.c.W Value[16 x 144]] }
0x7ffaa2e9b438: {[rn1_2.c2.c.b Value[16 x 1]] }
0x7ffaa2e9c658: {[rn1_2.c2.c.isd Value[16 x 1]] }
0x7ffaa2e9d038: {[rn1_2.c2.c.m Value[16 x 1]] }
0x7ffaa2e9dde8: {[rn1_2.c2.c.sc Value[16 x 1]] }
0x7ffaa2e9ead8: {[rn1_2.c2.W Value[16 x 144]] }
0x7ffaa2e9f598: {[rn1_3.c1.c.c.b Value[16 x 1]] }
0x7ffaa2ea07f8: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2ea09f8: {[rn1_3.c1.c.c.m Value[16 x 1]] }
0x7ffaa2ea1f58: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2ea2c98: {[rn1_3.c1.c.W Value[16 x 144]] }
0x7ffaa2ea3438: {[rn1_3.c2.c.b Value[16 x 1]] }
0x7ffaa2ea4678: {[rn1_3.c2.c.isd Value[16 x 1]] }
0x7ffaa2ea4878: {[rn1_3.c2.c.m Value[16 x 1]] }
0x7ffaa2ea5188: {[rn1_3.c2.c.sc Value[16 x 1]] }
0x7ffaa2ea6b08: {[rn1_3.c2.W Value[16 x 144]] }
0x7ffaa2ea7568: {[rn1_4.c1.c.c.b Value[16 x 1]] }
0x7ffaa2ea7708: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2ea88c8: {[rn1_4.c1.c.c.m Value[16 x 1]] }
0x7ffaa2ea96f8: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2eaac78: {[rn1_4.c1.c.W Value[16 x 144]] }
0x7ffaa2eab418: {[rn1_4.c2.c.b Value[16 x 1]] }
0x7ffaa2eac658: {[rn1_4.c2.c.isd Value[16 x 1]] }
0x7ffaa2eac858: {[rn1_4.c2.c.m Value[16 x 1]] }
0x7ffaa2eade08: {[rn1_4.c2.c.sc Value[16 x 1]] }
0x7ffaa2eaeb38: {[rn1_4.c2.W Value[16 x 144]] }
0x7ffaa2eaf598: {[rn1_5.c1.c.c.b Value[16 x 1]] }
0x7ffaa2eaf738: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2eb08f8: {[rn1_5.c1.c.c.m Value[16 x 1]] }
0x7ffaa2eb1728: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2eb2ca8: {[rn1_5.c1.c.W Value[16 x 144]] }
0x7ffaa2eb3448: {[rn1_5.c2.c.b Value[16 x 1]] }
0x7ffaa2eb4688: {[rn1_5.c2.c.isd Value[16 x 1]] }
0x7ffaa2eb4888: {[rn1_5.c2.c.m Value[16 x 1]] }
0x7ffaa2eb5198: {[rn1_5.c2.c.sc Value[16 x 1]] }
0x7ffaa2eb6b18: {[rn1_5.c2.W Value[16 x 144]] }
0x7ffaa2eb7578: {[rn1_6.c1.c.c.b Value[16 x 1]] }
0x7ffaa2eb7718: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2eb88d8: {[rn1_6.c1.c.c.m Value[16 x 1]] }
0x7ffaa2eb9708: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2ebac88: {[rn1_6.c1.c.W Value[16 x 144]] }
0x7ffaa2ebb428: {[rn1_6.c2.c.b Value[16 x 1]] }
0x7ffaa2ebc668: {[rn1_6.c2.c.isd Value[16 x 1]] }
0x7ffaa2ebc868: {[rn1_6.c2.c.m Value[16 x 1]] }
0x7ffaa2ebde18: {[rn1_6.c2.c.sc Value[16 x 1]] }
0x7ffaa2ebeb48: {[rn1_6.c2.W Value[16 x 144]] }
0x7ffaa2ebf5a8: {[rn1_7.c1.c.c.b Value[16 x 1]] }
0x7ffaa2ebf748: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2ec0908: {[rn1_7.c1.c.c.m Value[16 x 1]] }
0x7ffaa2ec1738: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2ec2cb8: {[rn1_7.c1.c.W Value[16 x 144]] }
0x7ffaa2ec3458: {[rn1_7.c2.c.b Value[16 x 1]] }
0x7ffaa2ec4698: {[rn1_7.c2.c.isd Value[16 x 1]] }
0x7ffaa2ec4898: {[rn1_7.c2.c.m Value[16 x 1]] }
0x7ffaa2ec51a8: {[rn1_7.c2.c.sc Value[16 x 1]] }
0x7ffaa2ec6b28: {[rn1_7.c2.W Value[16 x 144]] }
0x7ffaa2ec7588: {[rn1_8.c1.c.c.b Value[16 x 1]] }
0x7ffaa2ec7728: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2ec88e8: {[rn1_8.c1.c.c.m Value[16 x 1]] }
0x7ffaa2ec9718: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2ecac98: {[rn1_8.c1.c.W Value[16 x 144]] }
0x7ffaa2ecb438: {[rn1_8.c2.c.b Value[16 x 1]] }
0x7ffaa2ecc678: {[rn1_8.c2.c.isd Value[16 x 1]] }
0x7ffaa2ecc878: {[rn1_8.c2.c.m Value[16 x 1]] }
0x7ffaa2ecde28: {[rn1_8.c2.c.sc Value[16 x 1]] }
0x7ffaa2eceb58: {[rn1_8.c2.W Value[16 x 144]] }
0x7ffaa2ecf5b8: {[rn1_9.c1.c.c.b Value[16 x 1]] }
0x7ffaa2ecf758: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
0x7ffaa2ed0918: {[rn1_9.c1.c.c.m Value[16 x 1]] }
0x7ffaa2ed1748: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
0x7ffaa2ed2cc8: {[rn1_9.c1.c.W Value[16 x 144]] }
0x7ffaa2ed3468: {[rn1_9.c2.c.b Value[16 x 1]] }
0x7ffaa2ed46a8: {[rn1_9.c2.c.isd Value[16 x 1]] }
0x7ffaa2ed48a8: {[rn1_9.c2.c.m Value[16 x 1]] }
0x7ffaa2ed51b8: {[rn1_9.c2.c.sc Value[16 x 1]] }
0x7ffaa2ed6b38: {[rn1_9.c2.W Value[16 x 144]] }
0x7ffaa2ed7288: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2ed7598: {[rn2_1.c1.c.c.b Value[32 x 1]] }
0x7ffaa2ed8528: {[rn2_1.c1.c.W Value[32 x 144]] }
0x7ffaa2ed8f98: {[rn2_1.c1.c.c.m Value[32 x 1]] }
0x7ffaa2ed9ef8: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2edb468: {[rn2_1.c2.c.b Value[32 x 1]] }
0x7ffaa2edc3b8: {[rn2_1.c2.W Value[32 x 288]] }
0x7ffaa2edc6c8: {[rn2_1.c2.c.isd Value[32 x 1]] }
0x7ffaa2edc888: {[rn2_1.c2.c.m Value[32 x 1]] }
0x7ffaa2edd248: {[rn2_1.c2.c.sc Value[32 x 1]] }
0x7ffaa2ede918: {[rn2_1.c_proj.b Value[32 x 1]] }
0x7ffaa2ee05f8: {[rn2_1.c_proj.isd Value[32 x 1]] }
0x7ffaa2ee07f8: {[rn2_1.c_proj.m Value[32 x 1]] }
0x7ffaa2ee1168: {[rn2_1.c_proj.sc Value[32 x 1]] }
0x7ffaa2ee29f8: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2ee2d08: {[rn2_10.c1.c.c.b Value[32 x 1]] }
0x7ffaa2ee4928: {[rn2_10.c1.c.c.m Value[32 x 1]] }
0x7ffaa2ee5328: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2ee60a8: {[rn2_10.c1.c.W Value[32 x 288]] }
0x7ffaa2ee68b8: {[rn2_10.c2.c.b Value[32 x 1]] }
0x7ffaa2ee7ae8: {[rn2_10.c2.c.isd Value[32 x 1]] }
0x7ffaa2ee7ca8: {[rn2_10.c2.c.m Value[32 x 1]] }
0x7ffaa2ee8e88: {[rn2_10.c2.c.sc Value[32 x 1]] }
0x7ffaa2ee9c08: {[rn2_10.c2.W Value[32 x 288]] }
0x7ffaa2eea758: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2eeaa68: {[rn2_11.c1.c.c.b Value[32 x 1]] }
0x7ffaa2eec688: {[rn2_11.c1.c.c.m Value[32 x 1]] }
0x7ffaa2eed088: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2eede08: {[rn2_11.c1.c.W Value[32 x 288]] }
0x7ffaa2eee948: {[rn2_11.c2.c.b Value[32 x 1]] }
0x7ffaa2eef198: {[rn2_11.c2.c.isd Value[32 x 1]] }
0x7ffaa2ef08b8: {[rn2_11.c2.c.m Value[32 x 1]] }
0x7ffaa2ef12b8: {[rn2_11.c2.c.sc Value[32 x 1]] }
0x7ffaa2ef2038: {[rn2_11.c2.W Value[32 x 288]] }
0x7ffaa2ef3228: {[rn2_12.c2.c.isd Value[32 x 1]] }
0x7ffaa2ef3c28: {[rn2_12.c2.c.m Value[32 x 1]] }
0x7ffaa2ef4628: {[rn2_12.c2.c.sc Value[32 x 1]] }
0x7ffaa2ef53a8: {[rn2_12.c2.W Value[32 x 288]] }
0x7ffaa2ef5eb8: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2ef61c8: {[rn2_13.c1.c.c.b Value[32 x 1]] }
0x7ffaa2ef7de8: {[rn2_13.c1.c.c.m Value[32 x 1]] }
0x7ffaa2ef87e8: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2ef9568: {[rn2_13.c1.c.W Value[32 x 288]] }
0x7ffaa2efa0a8: {[rn2_13.c2.c.b Value[32 x 1]] }
0x7ffaa2efb038: {[rn2_13.c2.c.isd Value[32 x 1]] }
0x7ffaa2efbbd8: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
0x7ffaa2efbee8: {[rn2_12.c1.c.c.b Value[32 x 1]] }
0x7ffaa2efdb08: {[rn2_12.c1.c.c.m Value[32 x 1]] }
0x7ffaa2efe508: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
0x7ffaa2eff288: {[rn2_12.c1.c.W Value[32 x 288]] }
0x7ffaa2effdf8: {[rn2_12.c2.c.b Value[32 x 1]] }
0x7ffaaf98fea8: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9901a8: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf990328: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9904a8: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf990628: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9907a8: {[conv1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9909d8: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf990b58: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf990e58: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9915d8: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a4b88: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a4d48: {[rn1_4.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a50c8: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a5608: {[rn1_4.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a57c8: {[rn1_4.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a5b48: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a6088: {[rn1_4.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a6248: {[rn1_4.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a6408: {[rn1_5.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a6788: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9a6cc8: {[rn1_5.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9aae38: {[rn1_5.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ab1b8: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ab6f8: {[rn1_5.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ab8b8: {[rn1_5.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9aba78: {[rn1_6.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9abdf8: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ac338: {[rn1_6.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ac4f8: {[rn1_6.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ac878: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9acdb8: {[rn1_6.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9acf78: {[rn1_6.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ad138: {[rn1_7.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ad4b8: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ad9f8: {[rn1_7.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9adbb8: {[rn1_7.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9adf38: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ae478: {[rn1_7.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ae638: {[rn1_7.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ae7f8: {[rn1_8.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9aeb78: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9af0b8: {[rn1_8.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9af278: {[rn1_8.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9af5f8: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9afb38: {[rn1_8.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9afcf8: {[rn1_8.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9afeb8: {[rn1_9.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b0238: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b0778: {[rn1_9.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b0938: {[rn1_9.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b0cb8: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b11f8: {[rn1_9.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b13b8: {[rn1_9.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b1578: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b18f8: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b1e38: {[rn1_10.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b1ff8: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b2378: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b28b8: {[rn1_10.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b2a78: {[rn1_10.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b2c38: {[rn1_11.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b2fb8: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b34f8: {[rn1_11.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b36b8: {[rn1_11.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b3a38: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b3f78: {[rn1_11.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b4138: {[rn1_11.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b42f8: {[rn1_12.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b4678: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b4bb8: {[rn1_12.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b4d78: {[rn1_12.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b50f8: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b5638: {[rn1_12.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b57f8: {[rn1_12.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b59b8: {[rn1_13.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b5d38: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b6278: {[rn1_13.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b6438: {[rn1_13.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b67b8: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b6cf8: {[rn1_13.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b6eb8: {[rn1_13.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b7078: {[rn1_14.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b73f8: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b7938: {[rn1_14.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b7af8: {[rn1_14.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b7e78: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b83b8: {[rn1_14.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b8578: {[rn1_14.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b8738: {[rn1_15.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b8ab8: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b8ff8: {[rn1_15.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b91b8: {[rn1_15.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b9538: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b9a78: {[rn1_15.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b9c38: {[rn1_15.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9b9df8: {[rn1_16.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ba178: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ba6b8: {[rn1_16.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9ba878: {[rn1_16.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9babf8: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bb138: {[rn1_16.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bb2f8: {[rn1_16.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bb4b8: {[rn1_17.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bb838: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bbd78: {[rn1_17.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bbf38: {[rn1_17.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bc2b8: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bc7f8: {[rn1_17.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bc9b8: {[rn1_17.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bcb78: {[rn1_18.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bcef8: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bd438: {[rn1_18.c1.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bd5f8: {[rn1_18.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bd978: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9bdeb8: {[rn1_18.p Value[32 x 32 x 16 x *1]] }
0x7ffaaf9be078: {[rn1_18.y Value[32 x 32 x 16 x *1]] }
0x7ffaaf9be238: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9be5b8: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9beaf8: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9becb8: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9bf038: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9bf578: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9bf8f8: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9bfe38: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9bfff8: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c01b8: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c0538: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c0a78: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c0c38: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c0fb8: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c14f8: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c16b8: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c1878: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c1bf8: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c2138: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c22f8: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c2678: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c2bb8: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c2d78: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c2f38: {[rn2_4.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c32b8: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c37f8: {[rn2_4.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c39b8: {[rn2_4.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c3d38: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c4278: {[rn2_4.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c4438: {[rn2_4.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c45f8: {[rn2_5.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c4978: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c4eb8: {[rn2_5.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c5078: {[rn2_5.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c53f8: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c5938: {[rn2_5.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c5af8: {[rn2_5.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c5cb8: {[rn2_6.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c6038: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c6578: {[rn2_6.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c6738: {[rn2_6.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c6ab8: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c6ff8: {[rn2_6.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c71b8: {[rn2_6.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c7378: {[rn2_7.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c76f8: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c7c38: {[rn2_7.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c7df8: {[rn2_7.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c8178: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c86b8: {[rn2_7.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c8878: {[rn2_7.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c8a38: {[rn2_8.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c8db8: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c92f8: {[rn2_8.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c94b8: {[rn2_8.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c9838: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c9d78: {[rn2_8.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9c9f38: {[rn2_8.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ca0f8: {[rn2_9.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ca478: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ca9b8: {[rn2_9.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cab78: {[rn2_9.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9caef8: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cb438: {[rn2_9.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cb5f8: {[rn2_9.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cb7b8: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cbb38: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cc078: {[rn2_10.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cc238: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cc5b8: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ccaf8: {[rn2_10.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cccb8: {[rn2_10.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cce78: {[rn2_11.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cd1f8: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cd738: {[rn2_11.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cd8f8: {[rn2_11.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cdc78: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ce1b8: {[rn2_11.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ce378: {[rn2_11.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ce538: {[rn2_12.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9ce8b8: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cedf8: {[rn2_12.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cefb8: {[rn2_12.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cf338: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cf878: {[rn2_12.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cfa38: {[rn2_12.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cfbf8: {[rn2_13.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9cff78: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d04b8: {[rn2_13.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d0678: {[rn2_13.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d09f8: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d0f38: {[rn2_13.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d10f8: {[rn2_13.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d12b8: {[rn2_14.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d1638: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d1b78: {[rn2_14.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d1d38: {[rn2_14.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d20b8: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d25f8: {[rn2_14.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d27b8: {[rn2_14.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d2978: {[rn2_15.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d2cf8: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d3238: {[rn2_15.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d33f8: {[rn2_15.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d3778: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d3cb8: {[rn2_15.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d3e78: {[rn2_15.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d4038: {[rn2_16.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d43b8: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d48f8: {[rn2_16.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d4ab8: {[rn2_16.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d4e38: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d5378: {[rn2_16.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d5538: {[rn2_16.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d56f8: {[rn2_17.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d5a78: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d5fb8: {[rn2_17.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d6178: {[rn2_17.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d64f8: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d6a38: {[rn2_17.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d6bf8: {[rn2_17.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d6db8: {[rn2_18.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d7138: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d7678: {[rn2_18.c1.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d7838: {[rn2_18.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d7bb8: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d80f8: {[rn2_18.p Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d82b8: {[rn2_18.y Value[16 x 16 x 32 x *1]] }
0x7ffaaf9d8478: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d87f8: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d8d38: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d8ef8: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d9278: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d97b8: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9d9b38: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9da078: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9da238: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9da3f8: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9da778: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dacb8: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dae78: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9db1f8: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9db738: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9db8f8: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dbab8: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dbe38: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dc378: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dc538: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dc8b8: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dcdf8: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dcfb8: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dd178: {[rn3_4.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dd4f8: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dda38: {[rn3_4.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ddbf8: {[rn3_4.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ddf78: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9de4b8: {[rn3_4.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9de678: {[rn3_4.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9de838: {[rn3_5.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9debb8: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9df0f8: {[rn3_5.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9df2b8: {[rn3_5.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9df638: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dfb78: {[rn3_5.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dfd38: {[rn3_5.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9dfef8: {[rn3_6.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e0278: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e07b8: {[rn3_6.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e0978: {[rn3_6.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e0cf8: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e1238: {[rn3_6.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e13f8: {[rn3_6.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e15b8: {[rn3_7.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e1938: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e1e78: {[rn3_7.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e2038: {[rn3_7.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e23b8: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e28f8: {[rn3_7.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e2ab8: {[rn3_7.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e2c78: {[rn3_8.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e2ff8: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e3538: {[rn3_8.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e36f8: {[rn3_8.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e3a78: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e3fb8: {[rn3_8.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e4178: {[rn3_8.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e4338: {[rn3_9.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e46b8: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e4bf8: {[rn3_9.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e4db8: {[rn3_9.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e5138: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e5678: {[rn3_9.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e5838: {[rn3_9.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e59f8: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e5d78: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e62b8: {[rn3_10.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e6478: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e67f8: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e6d38: {[rn3_10.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e6ef8: {[rn3_10.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e70b8: {[rn3_11.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e7438: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e7978: {[rn3_11.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e7b38: {[rn3_11.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e7eb8: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e83f8: {[rn3_11.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e85b8: {[rn3_11.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e8778: {[rn3_12.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e8af8: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e9038: {[rn3_12.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e91f8: {[rn3_12.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e9578: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e9ab8: {[rn3_12.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e9c78: {[rn3_12.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9e9e38: {[rn3_13.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ea1b8: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ea6f8: {[rn3_13.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ea8b8: {[rn3_13.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eac38: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eb178: {[rn3_13.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eb338: {[rn3_13.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eb4f8: {[rn3_14.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eb878: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ebdb8: {[rn3_14.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ebf78: {[rn3_14.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ec2f8: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ec838: {[rn3_14.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ec9f8: {[rn3_14.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ecbb8: {[rn3_15.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ecf38: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ed478: {[rn3_15.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ed638: {[rn3_15.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ed9b8: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9edef8: {[rn3_15.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ee0b8: {[rn3_15.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ee278: {[rn3_16.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ee5f8: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eeb38: {[rn3_16.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9eecf8: {[rn3_16.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ef078: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ef5b8: {[rn3_16.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ef778: {[rn3_16.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9ef938: {[rn3_17.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9efcb8: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f01f8: {[rn3_17.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f03b8: {[rn3_17.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f0738: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f0c78: {[rn3_17.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f0e38: {[rn3_17.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f0ff8: {[rn3_18.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f1378: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f18b8: {[rn3_18.c1.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f1a78: {[rn3_18.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f1df8: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f2338: {[rn3_18.p Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f24f8: {[rn3_18.y Value[8 x 8 x 64 x *1]] }
0x7ffaaf9f26b8: {[pool Value[1 x 1 x 64 x *1]] }
0x7ffaaf9f2878: {[OutputNodes.t Value[10 x *1]] }
0x7ffaaf9f2a38: {[OutputNodes.z Value[10 x *1]] }
0x7ffaafd64a88: {[Err Value[1]] }

05/03/2016 18:19:25: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30259502 * 10000; perplexity = 10.00009924

05/03/2016 18:19:25: Action "test" complete.

05/03/2016 18:19:25: __COMPLETED__