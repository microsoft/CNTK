Copying test data to local directory
mkdir: cannot create directory ‘/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu’: File exists
=== Running /home/gaizka/Repos/cntk/build/release/bin/cntk configFile=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk currentDirectory=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu RunDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DataDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu ConfigDir=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train[SGD=[minibatchSize=32]] Test[minibatchSize=32] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Apr 13 2016 15:21:07
		Last modified date: Mon Apr 11 15:46:24 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: gaizna/e2e_samples_cifar
		Build SHA1: f24b766b35695609b45492145ef164211ea9cdaa
		Built by gaizka on GAIZKA-UBUNTU
		Build Path: /home/gaizka/Repos/cntk
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
04/13/2016 17:03:16: Redirecting stderr to file -_Train_Test.log
04/13/2016 17:03:16: -------------------------------------------------------------------
04/13/2016 17:03:16: Build info: 

04/13/2016 17:03:16: 		Built time: Apr 13 2016 15:21:07
04/13/2016 17:03:16: 		Last modified date: Mon Apr 11 15:46:24 2016
04/13/2016 17:03:16: 		Build type: release
04/13/2016 17:03:16: 		Build target: GPU
04/13/2016 17:03:16: 		With 1bit-SGD: no
04/13/2016 17:03:16: 		Math lib: acml
04/13/2016 17:03:16: 		CUDA_PATH: /usr/local/cuda-7.5
04/13/2016 17:03:16: 		CUB_PATH: /usr/local/cub-1.4.1
04/13/2016 17:03:16: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/13/2016 17:03:16: 		Build Branch: gaizna/e2e_samples_cifar
04/13/2016 17:03:16: 		Build SHA1: f24b766b35695609b45492145ef164211ea9cdaa
04/13/2016 17:03:16: 		Built by gaizka on GAIZKA-UBUNTU
04/13/2016 17:03:16: 		Build Path: /home/gaizka/Repos/cntk
04/13/2016 17:03:16: -------------------------------------------------------------------

04/13/2016 17:03:16: Running on localhost at 2016/04/13 17:03:16
04/13/2016 17:03:16: Command line: 
/home/gaizka/Repos/cntk/build/release/bin/cntk  configFile=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk  currentDirectory=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  RunDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DataDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  ConfigDir=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train[SGD=[minibatchSize=32]]  Test[minibatchSize=32]  stderr=-



04/13/2016 17:03:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/13/2016 17:03:16: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
RunDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
ConfigDir=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train[SGD=[minibatchSize=32]]
Test[minibatchSize=32]
stderr=-

04/13/2016 17:03:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/13/2016 17:03:16: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/13/2016 17:03:16: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt"
Proj32to64Filename = "/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
RunDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
ConfigDir=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train[SGD=[minibatchSize=32]]
Test[minibatchSize=32]
stderr=-

04/13/2016 17:03:16: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/13/2016 17:03:16: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:DataDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:ModelDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=32]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/gaizka/Repos/cntk/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=32]]

04/13/2016 17:03:16: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/13/2016 17:03:16: Commands: Train Test
04/13/2016 17:03:16: Precision = "float"
04/13/2016 17:03:16: CNTKModelPath: /tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
04/13/2016 17:03:16: CNTKCommandTrainInfo: Train : 1
04/13/2016 17:03:16: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

04/13/2016 17:03:16: ##############################################################################
04/13/2016 17:03:16: #                                                                            #
04/13/2016 17:03:16: # Action "train"                                                             #
04/13/2016 17:03:16: #                                                                            #
04/13/2016 17:03:16: ##############################################################################

04/13/2016 17:03:16: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

04/13/2016 17:03:16: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.


OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/13/2016 17:03:17: Created model with 949 nodes on GPU 0.

04/13/2016 17:03:17: Training criterion node(s):
04/13/2016 17:03:17: 	CE = CrossEntropyWithSoftmax

04/13/2016 17:03:17: Evaluation criterion node(s):

04/13/2016 17:03:17: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/13/2016 17:03:17: No PreCompute nodes found, skipping PreCompute step.

04/13/2016 17:03:17: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

04/13/2016 17:03:17: Starting minibatch loop.
04/13/2016 17:03:21: Finished Epoch[ 1 of 1]: [Training Set] TrainLossPerSample = 2.425698; TotalSamplesSeen = 128; EvalErrPerSample = 0.90625; AvgLearningRatePerSample = 0.003125; EpochTime=4.14365
04/13/2016 17:03:21: SGD: Saving checkpoint model '/tmp/cntk-test-20160413170315.707245/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
04/13/2016 17:03:21: CNTKCommandTrainEnd: Train

04/13/2016 17:03:21: Action "train" complete.


04/13/2016 17:03:21: ##############################################################################
04/13/2016 17:03:21: #                                                                            #
04/13/2016 17:03:21: # Action "test"                                                              #
04/13/2016 17:03:21: #                                                                            #
04/13/2016 17:03:21: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.


Validating network. 390 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]

Using CNTK batch normalization engine.
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Minibatch[1-200]: SamplesSeen = 6400    Err: ErrorPrediction/Sample = 0.9021875    CE: CrossEntropyWithSoftmax/Sample = 2.3025788    
Minibatch[201-313]: SamplesSeen = 3600    Err: ErrorPrediction/Sample = 0.89611111    CE: CrossEntropyWithSoftmax/Sample = 2.3026026    
Final Results: Minibatch[1-313]: SamplesSeen = 10000    Err: ErrorPrediction/Sample = 0.9    CE: CrossEntropyWithSoftmax/Sample = 2.3025874    Perplexity = 10.000023    

04/13/2016 17:03:41: Action "test" complete.

04/13/2016 17:03:41: __COMPLETED__