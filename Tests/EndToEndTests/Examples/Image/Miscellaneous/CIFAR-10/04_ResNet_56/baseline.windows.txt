Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 13:23:06
		Last modified date: Mon Apr 18 00:00:12 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
		Built by svcphil on LIANA-09-w
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
05/03/2016 14:04:56: Redirecting stderr to file -_Train_Test.log
05/03/2016 14:04:56: -------------------------------------------------------------------
05/03/2016 14:04:56: Build info: 

05/03/2016 14:04:56: 		Built time: May  3 2016 13:23:06
05/03/2016 14:04:56: 		Last modified date: Mon Apr 18 00:00:12 2016
05/03/2016 14:04:56: 		Build type: Release
05/03/2016 14:04:56: 		Build target: GPU
05/03/2016 14:04:56: 		With 1bit-SGD: no
05/03/2016 14:04:56: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
05/03/2016 14:04:56: 		CUB_PATH: C:\src\cub-1.4.1
05/03/2016 14:04:56: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
05/03/2016 14:04:56: 		Build Branch: HEAD
05/03/2016 14:04:56: 		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
05/03/2016 14:04:56: 		Built by svcphil on LIANA-09-w
05/03/2016 14:04:56: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
05/03/2016 14:04:56: -------------------------------------------------------------------

05/03/2016 14:04:56: Running on DPHAIM-25 at 2016/05/03 14:04:56
05/03/2016 14:04:56: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



05/03/2016 14:04:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:04:56: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

05/03/2016 14:04:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:04:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:04:56: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt"
Proj32to64Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

05/03/2016 14:04:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:04:56: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:initOnCPUOnly=true
configparameters: 04_ResNet_56.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=16]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

05/03/2016 14:04:56: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 14:04:56: Commands: Train Test
05/03/2016 14:04:56: Precision = "float"
05/03/2016 14:04:56: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
05/03/2016 14:04:56: CNTKCommandTrainInfo: Train : 1
05/03/2016 14:04:56: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

05/03/2016 14:04:56: ##############################################################################
05/03/2016 14:04:56: #                                                                            #
05/03/2016 14:04:56: # Action "train"                                                             #
05/03/2016 14:04:56: #                                                                            #
05/03/2016 14:04:56: ##############################################################################

05/03/2016 14:04:56: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

05/03/2016 14:04:57: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 14:05:00: Created model with 949 nodes on GPU 0.

05/03/2016 14:05:00: Training criterion node(s):
05/03/2016 14:05:00: 	CE = CrossEntropyWithSoftmax

05/03/2016 14:05:00: Evaluation criterion node(s):

05/03/2016 14:05:00: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] }
00000068BA1A22B0: {[conv1.c.c.m Value[16 x 1]] }
00000068BA1A28F0: {[labels Value[10 x *]] }
00000068BA1A2990: {[conv1.c.c.b Value[16 x 1]] }
00000068BA1A2F30: {[conv1.c.c.isd Value[16 x 1]] }
00000068BA1A2FD0: {[conv1.c.c.sc Value[16 x 1]] }
00000068BA1A3390: {[features Value[32 x 32 x 3 x *]] }
00000068BA1A3E30: {[conv1.c.W Value[16 x 27]] }
00000068D15E0D30: {[rn1_2.c2.c.m Value[16 x 1]] }
00000068D15E0FB0: {[rn1_2.c2.c.isd Value[16 x 1]] }
00000068D15E1190: {[rn1_1.c1.c.c.m Value[16 x 1]] }
00000068D15E1230: {[rn1_2.c1.c.c.b Value[16 x 1]] }
00000068D15E1370: {[rn1_2.c1.c.c.m Value[16 x 1]] }
00000068D15E14B0: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
00000068D15E1870: {[rn1_1.c2.W Value[16 x 144]] }
00000068D15E1AF0: {[rn1_1.c2.c.b Value[16 x 1]] }
00000068D15E1C30: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
00000068D15E1D70: {[rn1_2.c1.c.W Value[16 x 144]] }
00000068D15E1E10: {[rn1_1.c2.c.sc Value[16 x 1]] }
00000068D15E1F50: {[rn1_1.c1.c.W Value[16 x 144]] }
00000068D15E2090: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
00000068D15E2310: {[rn1_1.c2.c.m Value[16 x 1]] }
00000068D15E2450: {[rn1_2.c2.W Value[16 x 144]] }
00000068D15E24F0: {[rn1_1.c1.c.c.b Value[16 x 1]] }
00000068D15E2630: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
00000068D15E26D0: {[rn1_1.c2.c.isd Value[16 x 1]] }
00000068D15E2810: {[rn1_2.c2.c.b Value[16 x 1]] }
00000068D15E28B0: {[rn1_2.c2.c.sc Value[16 x 1]] }
00000068D15EE960: {[rn1_4.c2.W Value[16 x 144]] }
00000068D15EEAA0: {[rn1_3.c2.c.sc Value[16 x 1]] }
00000068D15EEB40: {[rn1_4.c2.c.b Value[16 x 1]] }
00000068D15EEBE0: {[rn1_4.c2.c.sc Value[16 x 1]] }
00000068D15EEC80: {[rn1_4.c2.c.isd Value[16 x 1]] }
00000068D15EEFA0: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
00000068D15EF0E0: {[rn1_3.c2.c.isd Value[16 x 1]] }
00000068D15EF180: {[rn1_4.c1.c.W Value[16 x 144]] }
00000068D15EF220: {[rn1_4.c1.c.c.m Value[16 x 1]] }
00000068D15EF680: {[rn1_3.c1.c.W Value[16 x 144]] }
00000068D15EF900: {[rn1_3.c2.c.b Value[16 x 1]] }
00000068D15EFB80: {[rn1_3.c2.W Value[16 x 144]] }
00000068D15EFC20: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
00000068D15EFD60: {[rn1_4.c2.c.m Value[16 x 1]] }
00000068D15EFE00: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
00000068D15EFF40: {[rn1_5.c1.c.W Value[16 x 144]] }
00000068D15F0080: {[rn1_5.c1.c.c.b Value[16 x 1]] }
00000068D15F0260: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
00000068D15F04E0: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
00000068D15F0620: {[rn1_3.c1.c.c.b Value[16 x 1]] }
00000068D15F0800: {[rn1_3.c1.c.c.m Value[16 x 1]] }
00000068D15F08A0: {[rn1_3.c2.c.m Value[16 x 1]] }
00000068D15F0DA0: {[rn1_4.c1.c.c.b Value[16 x 1]] }
00000068D15F12A0: {[rn1_6.c1.c.c.b Value[16 x 1]] }
00000068D15F1840: {[rn1_6.c2.W Value[16 x 144]] }
00000068D15F1980: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
00000068D15F1B60: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
00000068D15F1D40: {[rn1_5.c1.c.c.m Value[16 x 1]] }
00000068D15F1DE0: {[rn1_6.c1.c.c.m Value[16 x 1]] }
00000068D15F1F20: {[rn1_6.c2.c.b Value[16 x 1]] }
00000068D15F2100: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
00000068D15F21A0: {[rn1_5.c2.c.b Value[16 x 1]] }
00000068D15F2240: {[rn1_5.c2.c.m Value[16 x 1]] }
00000068D15F22E0: {[rn1_5.c2.W Value[16 x 144]] }
00000068D15F24C0: {[rn1_5.c2.c.isd Value[16 x 1]] }
00000068D15F2560: {[rn1_6.c1.c.W Value[16 x 144]] }
00000068D15F2740: {[rn1_5.c2.c.sc Value[16 x 1]] }
00000068D1B01190: {[rn1_7.c2.c.b Value[16 x 1]] }
00000068D1B01230: {[rn1_7.c2.c.isd Value[16 x 1]] }
00000068D1B01410: {[rn1_7.c2.c.sc Value[16 x 1]] }
00000068D1B01690: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
00000068D1B01730: {[rn1_8.c2.c.b Value[16 x 1]] }
00000068D1B01B90: {[rn1_7.c1.c.c.b Value[16 x 1]] }
00000068D1B01C30: {[rn1_7.c2.W Value[16 x 144]] }
00000068D1B01CD0: {[rn1_6.c2.c.m Value[16 x 1]] }
00000068D1B01FF0: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
00000068D1B02090: {[rn1_8.c2.c.sc Value[16 x 1]] }
00000068D1B02450: {[rn1_7.c1.c.W Value[16 x 144]] }
00000068D1B02630: {[rn1_8.c1.c.c.b Value[16 x 1]] }
00000068D1B02810: {[rn1_7.c2.c.m Value[16 x 1]] }
00000068D1B028B0: {[rn1_8.c2.c.m Value[16 x 1]] }
00000068D1B02C70: {[rn1_8.c2.c.isd Value[16 x 1]] }
00000068D1B02E50: {[rn1_7.c1.c.c.m Value[16 x 1]] }
00000068D1B030D0: {[rn1_8.c1.c.c.m Value[16 x 1]] }
00000068D1B03170: {[rn1_8.c2.W Value[16 x 144]] }
00000068D1B03210: {[rn1_6.c2.c.sc Value[16 x 1]] }
00000068D1B032B0: {[rn1_6.c2.c.isd Value[16 x 1]] }
00000068D1B035D0: {[rn1_8.c1.c.W Value[16 x 144]] }
00000068D1B03670: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
00000068D1B037B0: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
00000068D1B03A30: {[rn1_9.c2.W Value[16 x 144]] }
00000068D1B03B70: {[rn1_9.c2.c.isd Value[16 x 1]] }
00000068D1B03C10: {[rn1_9.c1.c.c.m Value[16 x 1]] }
00000068D1B03DF0: {[rn1_9.c2.c.m Value[16 x 1]] }
00000068D1B04070: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
00000068D1B04250: {[rn1_9.c1.c.W Value[16 x 144]] }
00000068D1B042F0: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
00000068D1B044D0: {[rn1_10.c1.c.c.m Value[16 x 1]] }
00000068D1B04610: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
00000068D1B04890: {[rn1_10.c1.c.c.b Value[16 x 1]] }
00000068D1B049D0: {[rn1_9.c1.c.c.b Value[16 x 1]] }
00000068D1B04A70: {[rn1_9.c2.c.b Value[16 x 1]] }
00000068D1B04B10: {[rn1_9.c2.c.sc Value[16 x 1]] }
00000068D1B04BB0: {[rn1_10.c1.c.W Value[16 x 144]] }
00000068D1B04C50: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
00000068D1B1A6C0: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
00000068D1B1A760: {[rn1_12.c1.c.c.m Value[16 x 1]] }
00000068D1B1A940: {[rn1_10.c2.c.m Value[16 x 1]] }
00000068D1B1AA80: {[rn1_12.c2.c.b Value[16 x 1]] }
00000068D1B1AD00: {[rn1_12.c2.c.sc Value[16 x 1]] }
00000068D1B1B020: {[rn1_11.c2.c.sc Value[16 x 1]] }
00000068D1B1B200: {[rn1_11.c2.c.m Value[16 x 1]] }
00000068D1B1B340: {[rn1_10.c2.W Value[16 x 144]] }
00000068D1B1B700: {[rn1_10.c2.c.sc Value[16 x 1]] }
00000068D1B1B840: {[rn1_11.c1.c.W Value[16 x 144]] }
00000068D1B1B8E0: {[rn1_11.c1.c.c.m Value[16 x 1]] }
00000068D1B1BA20: {[rn1_11.c2.W Value[16 x 144]] }
00000068D1B1BC00: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
00000068D1B1BE80: {[rn1_12.c1.c.c.b Value[16 x 1]] }
00000068D1B1C240: {[rn1_12.c2.W Value[16 x 144]] }
00000068D1B1C380: {[rn1_10.c2.c.b Value[16 x 1]] }
00000068D1B1C4C0: {[rn1_11.c2.c.isd Value[16 x 1]] }
00000068D1B1C7E0: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
00000068D1B1C880: {[rn1_11.c1.c.c.b Value[16 x 1]] }
00000068D1B1C920: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
00000068D1B1C9C0: {[rn1_11.c2.c.b Value[16 x 1]] }
00000068D1B1CB00: {[rn1_12.c1.c.W Value[16 x 144]] }
00000068D1B1CBA0: {[rn1_10.c2.c.isd Value[16 x 1]] }
00000068D1B1CD80: {[rn1_14.c1.c.W Value[16 x 144]] }
00000068D1B1D1E0: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
00000068D1B1D320: {[rn1_13.c1.c.W Value[16 x 144]] }
00000068D1B1D3C0: {[rn1_13.c2.W Value[16 x 144]] }
00000068D1B1D460: {[rn1_12.c2.c.m Value[16 x 1]] }
00000068D1B1D500: {[rn1_12.c2.c.isd Value[16 x 1]] }
00000068D1B1D6E0: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
00000068D1B1D780: {[rn1_13.c1.c.c.m Value[16 x 1]] }
00000068D1B1DA00: {[rn1_13.c2.c.b Value[16 x 1]] }
00000068D1B1DAA0: {[rn1_13.c2.c.m Value[16 x 1]] }
00000068D1B1DBE0: {[rn1_13.c2.c.sc Value[16 x 1]] }
00000068D1B1DD20: {[rn1_13.c2.c.isd Value[16 x 1]] }
00000068D1B1E180: {[rn1_13.c1.c.c.b Value[16 x 1]] }
00000068D1B32530: {[rn1_15.c2.c.sc Value[16 x 1]] }
00000068D1B325D0: {[rn1_14.c2.c.b Value[16 x 1]] }
00000068D1B32670: {[rn1_15.c2.c.m Value[16 x 1]] }
00000068D1B327B0: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
00000068D1B32850: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
00000068D1B32990: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
00000068D1B32A30: {[rn1_14.c2.c.isd Value[16 x 1]] }
00000068D1B32AD0: {[rn1_15.c2.W Value[16 x 144]] }
00000068D1B32C10: {[rn1_15.c2.c.isd Value[16 x 1]] }
00000068D1B32E90: {[rn1_14.c2.c.sc Value[16 x 1]] }
00000068D1B33430: {[rn1_14.c2.W Value[16 x 144]] }
00000068D1B334D0: {[rn1_14.c2.c.m Value[16 x 1]] }
00000068D1B33570: {[rn1_14.c1.c.c.m Value[16 x 1]] }
00000068D1B33930: {[rn1_14.c1.c.c.b Value[16 x 1]] }
00000068D1B33A70: {[rn1_15.c1.c.W Value[16 x 144]] }
00000068D1B33BB0: {[rn1_15.c1.c.c.m Value[16 x 1]] }
00000068D1B33C50: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
00000068D1B33D90: {[rn1_15.c2.c.b Value[16 x 1]] }
00000068D1B34330: {[rn1_15.c1.c.c.b Value[16 x 1]] }
00000068D1B5EC10: {[rn1_17.c2.W Value[16 x 144]] }
00000068D1B5ED50: {[rn1_17.c1.c.W Value[16 x 144]] }
00000068D1B5EE90: {[rn1_17.c2.c.b Value[16 x 1]] }
00000068D1B5F070: {[rn1_18.c1.c.c.m Value[16 x 1]] }
00000068D1B5F1B0: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
00000068D1B5F390: {[rn1_17.c2.c.sc Value[16 x 1]] }
00000068D1B5F430: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
00000068D1B5F570: {[rn1_16.c2.W Value[16 x 144]] }
00000068D1B5F750: {[rn1_17.c1.c.c.b Value[16 x 1]] }
00000068D1B5F890: {[rn1_16.c2.c.isd Value[16 x 1]] }
00000068D1B5F9D0: {[rn1_17.c1.c.c.m Value[16 x 1]] }
00000068D1B5FA70: {[rn1_16.c2.c.m Value[16 x 1]] }
00000068D1B5FC50: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
00000068D1B5FD90: {[rn1_16.c1.c.c.m Value[16 x 1]] }
00000068D1B60330: {[rn1_17.c2.c.isd Value[16 x 1]] }
00000068D1B60510: {[rn1_16.c2.c.sc Value[16 x 1]] }
00000068D1B605B0: {[rn1_18.c1.c.W Value[16 x 144]] }
00000068D1B60790: {[rn1_16.c1.c.W Value[16 x 144]] }
00000068D1B608D0: {[rn1_16.c1.c.c.b Value[16 x 1]] }
00000068D1B60970: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
00000068D1B60BF0: {[rn1_17.c2.c.m Value[16 x 1]] }
00000068D1B60E70: {[rn1_16.c2.c.b Value[16 x 1]] }
00000068D1B60F10: {[rn1_18.c1.c.c.b Value[16 x 1]] }
00000068D1B60FB0: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
00000068D1B61230: {[rn1_18.c2.c.isd Value[16 x 1]] }
00000068D1B614B0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
00000068D1B61550: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
00000068D1B615F0: {[rn1_18.c2.c.m Value[16 x 1]] }
00000068D1B61870: {[rn1_18.c2.c.sc Value[16 x 1]] }
00000068D1B61910: {[rn2_1_Wproj Value[32 x 16]] }
00000068D1B61D70: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
00000068D1B61E10: {[rn2_1.c1.c.c.m Value[32 x 1]] }
00000068D1B61F50: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
00000068D1B62270: {[rn2_1.c1.c.W Value[32 x 144]] }
00000068D1B62310: {[rn1_18.c2.W Value[16 x 144]] }
00000068D1B62630: {[rn2_1.c2.W Value[32 x 288]] }
00000068D1B626D0: {[rn2_1.c2.c.b Value[32 x 1]] }
00000068D1B62810: {[rn1_18.c2.c.b Value[16 x 1]] }
00000068D1B709E0: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000068D1B70A80: {[rn2_6.c2.W Value[32 x 288]] }
00000068D1B70F80: {[rn2_7.c2.c.m Value[32 x 1]] }
00000068D1B71200: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000068D1B712A0: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000068D1B71340: {[rn2_6.c2.c.b Value[32 x 1]] }
00000068D1B715C0: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000068D1B717A0: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000068D1B718E0: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000068D1B71AC0: {[rn2_7.c1.c.W Value[32 x 288]] }
00000068D1B71B60: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000068D1B71C00: {[rn2_6.c2.c.m Value[32 x 1]] }
00000068D1B72100: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000068D1B722E0: {[rn2_8.c2.W Value[32 x 288]] }
00000068D1B72380: {[rn2_8.c2.c.b Value[32 x 1]] }
00000068D1B724C0: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000068D1B72880: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000068D1B72A60: {[rn2_7.c2.W Value[32 x 288]] }
00000068D1B72B00: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000068D1B72BA0: {[rn2_8.c1.c.W Value[32 x 288]] }
00000068D1B72CE0: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000068D1B72EC0: {[rn2_8.c2.c.m Value[32 x 1]] }
00000068D1B73000: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000068D1B73140: {[rn2_7.c2.c.b Value[32 x 1]] }
00000068D1B73320: {[rn2_2.c1.c.c.m Value[32 x 1]] }
00000068D1B73500: {[rn2_1.c_proj.m Value[32 x 1]] }
00000068D1B735A0: {[rn2_1.c2.c.isd Value[32 x 1]] }
00000068D1B738C0: {[rn2_2.c2.c.b Value[32 x 1]] }
00000068D1B73BE0: {[rn2_1.c_proj.b Value[32 x 1]] }
00000068D1B73F00: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
00000068D1B74040: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
00000068D1B740E0: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000068D1B74220: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000068D1B74400: {[rn2_2.c1.c.c.b Value[32 x 1]] }
00000068D1B74680: {[rn2_3.c1.c.W Value[32 x 288]] }
00000068D1B747C0: {[rn2_1.c2.c.m Value[32 x 1]] }
00000068D1B74860: {[rn2_1.c_proj.isd Value[32 x 1]] }
00000068D1B74900: {[rn2_2.c2.W Value[32 x 288]] }
00000068D1B749A0: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000068D1B74AE0: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000068D1B74CC0: {[rn2_3.c2.W Value[32 x 288]] }
00000068D1B74E00: {[rn2_3.c2.c.b Value[32 x 1]] }
00000068D1B74EA0: {[rn2_1.c2.c.sc Value[32 x 1]] }
00000068D1B74F40: {[rn2_2.c1.c.W Value[32 x 288]] }
00000068D1B75300: {[rn2_2.c2.c.m Value[32 x 1]] }
00000068D1B753A0: {[rn2_1.c_proj.sc Value[32 x 1]] }
00000068D1B75760: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000068D1B75800: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000068D1B75D00: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000068D1B75DA0: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000068D1B75F80: {[rn2_5.c2.W Value[32 x 288]] }
00000068D1B760C0: {[rn2_5.c2.c.b Value[32 x 1]] }
00000068D1B762A0: {[rn2_3.c2.c.m Value[32 x 1]] }
00000068D1B76340: {[rn2_4.c1.c.W Value[32 x 288]] }
00000068D1B763E0: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000068D1B765C0: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000068D1B76980: {[rn2_4.c2.c.m Value[32 x 1]] }
00000068D1B76A20: {[rn2_4.c2.c.b Value[32 x 1]] }
00000068D1B76CA0: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000068D1B76DE0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000068D1B771A0: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000068D1B77420: {[rn2_5.c2.c.m Value[32 x 1]] }
00000068D1B77560: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000068D1B77600: {[rn2_5.c1.c.W Value[32 x 288]] }
00000068D1B777E0: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000068D1B77920: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000068D1B779C0: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000068D1B77B00: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000068D1B77CE0: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000068D1B77E20: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000068D1B78000: {[rn2_4.c2.W Value[32 x 288]] }
00000068D1B78320: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000068D1B78500: {[rn2_6.c1.c.W Value[32 x 288]] }
00000068D1B785A0: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000068D1B78780: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000068D1B788C0: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000068D1BAB270: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000068D1BAB310: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000068D1BAB4F0: {[rn2_9.c2.c.b Value[32 x 1]] }
00000068D1BAB590: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000068D1BAB6D0: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
00000068D1BAB950: {[rn2_10.c1.c.c.m Value[32 x 1]] }
00000068D1BABEF0: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000068D1BABF90: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000068D1BAC170: {[rn2_9.c2.c.m Value[32 x 1]] }
00000068D1BAC210: {[rn2_10.c1.c.W Value[32 x 288]] }
00000068D1BAC2B0: {[rn2_9.c2.W Value[32 x 288]] }
00000068D1BAC350: {[rn2_10.c2.c.sc Value[32 x 1]] }
00000068D1BAC530: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
00000068D1BAC670: {[rn2_10.c2.W Value[32 x 288]] }
00000068D1BACA30: {[rn2_10.c1.c.c.b Value[32 x 1]] }
00000068D1BACAD0: {[rn2_10.c2.c.isd Value[32 x 1]] }
00000068D1BACF30: {[rn2_11.c1.c.W Value[32 x 288]] }
00000068D1BAD2F0: {[rn2_10.c2.c.b Value[32 x 1]] }
00000068D1BAD390: {[rn2_11.c1.c.c.b Value[32 x 1]] }
00000068D1BAD6B0: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000068D1BAD7F0: {[rn2_10.c2.c.m Value[32 x 1]] }
00000068D1BAD930: {[rn2_9.c1.c.W Value[32 x 288]] }
00000068D1BAD9D0: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000068D1BADA70: {[rn2_11.c2.c.sc Value[32 x 1]] }
00000068D1BADB10: {[rn2_12.c1.c.W Value[32 x 288]] }
00000068D1BADCF0: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
00000068D1BADE30: {[rn2_11.c1.c.c.m Value[32 x 1]] }
00000068D1BAE010: {[rn2_12.c1.c.c.m Value[32 x 1]] }
00000068D1BAE0B0: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
00000068D1BAE1F0: {[rn2_12.c2.W Value[32 x 288]] }
00000068D1BAE330: {[rn2_12.c1.c.c.b Value[32 x 1]] }
00000068D1BAE510: {[rn2_12.c2.c.sc Value[32 x 1]] }
00000068D1BAE5B0: {[rn2_12.c2.c.m Value[32 x 1]] }
00000068D1BAE6F0: {[rn2_12.c2.c.isd Value[32 x 1]] }
00000068D1BAEAB0: {[rn2_11.c2.c.isd Value[32 x 1]] }
00000068D1BAEB50: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
00000068D1BAEC90: {[rn2_13.c1.c.W Value[32 x 288]] }
00000068D1BAEDD0: {[rn2_13.c1.c.c.b Value[32 x 1]] }
00000068D1BAEFB0: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
00000068D1BAF190: {[rn2_12.c2.c.b Value[32 x 1]] }
00000068D1BAF230: {[rn2_13.c1.c.c.m Value[32 x 1]] }
00000068D1BAF730: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
00000068D1BAF910: {[rn2_11.c2.c.b Value[32 x 1]] }
00000068D1BAFC30: {[rn2_13.c2.W Value[32 x 288]] }
00000068D1BAFCD0: {[rn2_11.c2.c.m Value[32 x 1]] }
00000068D1BAFD70: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
00000068D1BB01D0: {[rn2_11.c2.W Value[32 x 288]] }
00000068D1BB0450: {[rn2_14.c1.c.W Value[32 x 288]] }
00000068D1BB06D0: {[rn2_14.c2.c.m Value[32 x 1]] }
00000068D1BB0770: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
00000068D1BB0B30: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
00000068D1BB0BD0: {[rn2_14.c2.c.sc Value[32 x 1]] }
00000068D1BB0C70: {[rn2_13.c2.c.m Value[32 x 1]] }
00000068D1BB0E50: {[rn2_14.c2.c.b Value[32 x 1]] }
00000068D1BB1030: {[rn2_14.c2.c.isd Value[32 x 1]] }
00000068D1BB1210: {[rn2_14.c1.c.c.b Value[32 x 1]] }
00000068D1BB12B0: {[rn2_15.c1.c.W Value[32 x 288]] }
00000068D1BB1530: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
00000068D1BB1850: {[rn2_14.c2.W Value[32 x 288]] }
00000068D1BB1C10: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
00000068D1BB1CB0: {[rn2_13.c2.c.sc Value[32 x 1]] }
00000068D1BB1D50: {[rn2_14.c1.c.c.m Value[32 x 1]] }
00000068D1BB1F30: {[rn2_15.c1.c.c.m Value[32 x 1]] }
00000068D1BB2070: {[rn2_15.c2.W Value[32 x 288]] }
00000068D1BB2110: {[rn2_13.c2.c.b Value[32 x 1]] }
00000068D1BB22F0: {[rn2_15.c2.c.b Value[32 x 1]] }
00000068D1BB2390: {[rn2_15.c1.c.c.b Value[32 x 1]] }
00000068D1BB24D0: {[rn2_15.c2.c.sc Value[32 x 1]] }
00000068D1BB2570: {[rn2_15.c2.c.m Value[32 x 1]] }
00000068D1BB2610: {[rn2_13.c2.c.isd Value[32 x 1]] }
00000068D1BB27F0: {[rn2_15.c2.c.isd Value[32 x 1]] }
00000068D1BB2B10: {[rn2_16.c1.c.c.b Value[32 x 1]] }
00000068D1BB2E30: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
00000068D1BB3010: {[rn2_16.c1.c.c.m Value[32 x 1]] }
00000068D1BB30B0: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
00000068D1BB3150: {[rn2_16.c1.c.W Value[32 x 288]] }
00000068D1C2D0E0: {[rn3_1.c2.W Value[64 x 576]] }
00000068D1C2D180: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000068D1C2D2C0: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000068D1C2D540: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000068D1C2D680: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000068D1C2D9A0: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000068D1C2DB80: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000068D1C2DE00: {[rn3_2.c1.c.W Value[64 x 576]] }
00000068D1C2DEA0: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000068D1C2DF40: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000068D1C2E080: {[rn3_2.c2.c.b Value[64 x 1]] }
00000068D1C2E300: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000068D1C2E3A0: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000068D1C2E4E0: {[rn3_1.c2.c.b Value[64 x 1]] }
00000068D1C2E620: {[rn3_1.c_proj.b Value[64 x 1]] }
00000068D1C2E760: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000068D1C2EA80: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000068D1C2EBC0: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000068D1C2EDA0: {[rn3_2.c2.c.m Value[64 x 1]] }
00000068D1C2F020: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000068D1C2F200: {[rn3_1.c2.c.m Value[64 x 1]] }
00000068D1C2F3E0: {[rn3_1.c_proj.m Value[64 x 1]] }
00000068D1C2F480: {[rn3_3.c1.c.W Value[64 x 576]] }
00000068D1C2F840: {[rn3_2.c2.W Value[64 x 576]] }
00000068D1C2F8E0: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000068D1C2FD40: {[rn3_3.c2.c.b Value[64 x 1]] }
00000068D1C2FF20: {[rn3_4.c2.c.b Value[64 x 1]] }
00000068D1C2FFC0: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000068D1C301A0: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000068D1C30240: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000068D1C30380: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000068D1C30420: {[rn3_4.c1.c.W Value[64 x 576]] }
00000068D1C304C0: {[rn3_4.c2.c.m Value[64 x 1]] }
00000068D1C30600: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000068D1C30A60: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000068D1C30BA0: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000068D1C30CE0: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000068D1C30E20: {[rn3_5.c1.c.W Value[64 x 576]] }
00000068D1C30F60: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000068D1C31000: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000068D1C31140: {[rn3_3.c2.W Value[64 x 576]] }
00000068D1C311E0: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000068D1C315A0: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000068D1C31780: {[rn3_3.c2.c.m Value[64 x 1]] }
00000068D1C318C0: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000068D1C31B40: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000068D1C31C80: {[rn3_4.c2.W Value[64 x 576]] }
00000068D1C32040: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000068D1C32220: {[rn2_17.c1.c.c.b Value[32 x 1]] }
00000068D1C322C0: {[rn2_17.c2.c.b Value[32 x 1]] }
00000068D1C32400: {[rn2_16.c2.c.b Value[32 x 1]] }
00000068D1C32680: {[rn2_16.c2.c.m Value[32 x 1]] }
00000068D1C327C0: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
00000068D1C329A0: {[rn2_17.c2.W Value[32 x 288]] }
00000068D1C32D60: {[rn2_16.c2.W Value[32 x 288]] }
00000068D1C32EA0: {[rn2_17.c2.c.isd Value[32 x 1]] }
00000068D1C33120: {[rn2_18.c1.c.c.b Value[32 x 1]] }
00000068D1C33440: {[rn2_18.c2.W Value[32 x 288]] }
00000068D1C334E0: {[rn2_17.c1.c.c.m Value[32 x 1]] }
00000068D1C33580: {[rn2_16.c2.c.sc Value[32 x 1]] }
00000068D1C33800: {[rn2_17.c1.c.W Value[32 x 288]] }
00000068D1C33A80: {[rn2_18.c2.c.b Value[32 x 1]] }
00000068D1C33E40: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
00000068D1C33F80: {[rn2_18.c2.c.sc Value[32 x 1]] }
00000068D1C34160: {[rn2_18.c1.c.W Value[32 x 288]] }
00000068D1C34200: {[rn2_16.c2.c.isd Value[32 x 1]] }
00000068D1C343E0: {[rn2_17.c2.c.sc Value[32 x 1]] }
00000068D1C34480: {[rn2_17.c2.c.m Value[32 x 1]] }
00000068D1C34520: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
00000068D1C345C0: {[rn2_18.c1.c.c.m Value[32 x 1]] }
00000068D1C347A0: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
00000068D1C34A20: {[rn2_18.c2.c.isd Value[32 x 1]] }
00000068D1C34CA0: {[rn3_1.c1.c.W Value[64 x 288]] }
00000068D1C34D40: {[rn3_1_Wproj Value[64 x 32]] }
00000068D1C34DE0: {[rn2_18.c2.c.m Value[32 x 1]] }
00000068D1CA74C0: {[rn3_12.c1.c.W Value[64 x 576]] }
00000068D1CA7740: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000068D1CA7D80: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000068D1CA8000: {[rn3_11.c2.c.m Value[64 x 1]] }
00000068D1CA80A0: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000068D1CA8460: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000068D1CA8500: {[rn3_12.c2.c.m Value[64 x 1]] }
00000068D1CA85A0: {[rn3_10.c2.c.m Value[64 x 1]] }
00000068D1CA8640: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000068D1CA86E0: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000068D1CA8780: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000068D1CA8820: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000068D1CA8960: {[rn3_11.c2.W Value[64 x 576]] }
00000068D1CA8B40: {[rn3_12.c2.c.b Value[64 x 1]] }
00000068D1CA8D20: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000068D1CA8DC0: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000068D1CA9040: {[rn3_11.c1.c.W Value[64 x 576]] }
00000068D1CA90E0: {[rn3_11.c2.c.sc Value[64 x 1]] }
00000068D1CA9180: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000068D1CA9680: {[rn3_11.c2.c.b Value[64 x 1]] }
00000068D1CA97C0: {[rn3_12.c2.W Value[64 x 576]] }
00000068D1CA9B80: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000068D1CA9C20: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000068D1CA9CC0: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000068D1CA9EA0: {[rn3_5.c2.c.b Value[64 x 1]] }
00000068D1CAA080: {[rn3_7.c1.c.W Value[64 x 576]] }
00000068D1CAA120: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000068D1CAA1C0: {[rn3_7.c2.c.b Value[64 x 1]] }
00000068D1CAA260: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000068D1CAA440: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000068D1CAA620: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000068D1CAA940: {[rn3_6.c2.c.b Value[64 x 1]] }
00000068D1CAA9E0: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000068D1CAADA0: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000068D1CAB020: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000068D1CAB0C0: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000068D1CAB3E0: {[rn3_7.c2.W Value[64 x 576]] }
00000068D1CAB520: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000068D1CAB700: {[rn3_7.c2.c.m Value[64 x 1]] }
00000068D1CAB840: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000068D1CAB8E0: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000068D1CAB980: {[rn3_6.c1.c.W Value[64 x 576]] }
00000068D1CABC00: {[rn3_5.c2.c.m Value[64 x 1]] }
00000068D1CABDE0: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000068D1CABE80: {[rn3_5.c2.W Value[64 x 576]] }
00000068D1CAC060: {[rn3_6.c2.c.m Value[64 x 1]] }
00000068D1CAC2E0: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000068D1CAC380: {[rn3_6.c2.W Value[64 x 576]] }
00000068D1CAC740: {[rn3_9.c2.c.b Value[64 x 1]] }
00000068D1CAC920: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000068D1CAC9C0: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000068D1CACBA0: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000068D1CACD80: {[rn3_8.c2.c.m Value[64 x 1]] }
00000068D1CACE20: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000068D1CACF60: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000068D1CAD000: {[rn3_8.c1.c.W Value[64 x 576]] }
00000068D1CAD0A0: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000068D1CAD280: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000068D1CAD320: {[rn3_9.c2.W Value[64 x 576]] }
00000068D1CAD460: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000068D1CAD500: {[rn3_9.c2.c.m Value[64 x 1]] }
00000068D1CAD5A0: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000068D1CAD780: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000068D1CAD820: {[rn3_10.c1.c.W Value[64 x 576]] }
00000068D1CADAA0: {[rn3_8.c2.W Value[64 x 576]] }
00000068D1CADC80: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000068D1CADD20: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000068D1CADE60: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000068D1CAE5E0: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000068D1CAE900: {[rn3_9.c1.c.W Value[64 x 576]] }
00000068D1CAEC20: {[rn3_8.c2.c.b Value[64 x 1]] }
00000068D1CAECC0: {[rn3_10.c2.W Value[64 x 576]] }
00000068D1CAED60: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000068D1CAEF40: {[rn3_10.c2.c.b Value[64 x 1]] }
00000068D1CAF080: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000068D1CE35E0: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000068D1CE3720: {[rn3_14.c2.c.m Value[64 x 1]] }
00000068D1CE3AE0: {[rn3_15.c1.c.W Value[64 x 576]] }
00000068D1CE3B80: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000068D1CE3C20: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000068D1CE3D60: {[rn3_13.c2.c.m Value[64 x 1]] }
00000068D1CE3FE0: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000068D1CE4120: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000068D1CE41C0: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000068D1CE4580: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000068D1CE4620: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000068D1CE4940: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000068D1CE4A80: {[rn3_14.c2.c.b Value[64 x 1]] }
00000068D1CE4D00: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000068D1CE4E40: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000068D1CE50C0: {[rn3_13.c2.W Value[64 x 576]] }
00000068D1CE5340: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000068D1CE53E0: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000068D1CE55C0: {[rn3_13.c2.c.b Value[64 x 1]] }
00000068D1CE5660: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000068D1CE57A0: {[rn3_14.c2.W Value[64 x 576]] }
00000068D1CE5840: {[rn3_13.c1.c.W Value[64 x 576]] }
00000068D1CE5980: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000068D1CE5A20: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000068D1CE5B60: {[rn3_14.c1.c.W Value[64 x 576]] }
00000068D1CE5D40: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000068D1CE5E80: {[rn3_15.c2.c.m Value[64 x 1]] }
00000068D1CE5F20: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000068D1CE6060: {[rn3_16.c2.c.m Value[64 x 1]] }
00000068D1CE61A0: {[rn3_17.c1.c.W Value[64 x 576]] }
00000068D1CE6380: {[rn3_16.c1.c.W Value[64 x 576]] }
00000068D1CE67E0: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000068D1CE6880: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000068D1CE6BA0: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000068D1CE6D80: {[rn3_15.c2.W Value[64 x 576]] }
00000068D1CE6E20: {[rn3_15.c2.c.b Value[64 x 1]] }
00000068D1CE7000: {[rn3_17.c2.W Value[64 x 576]] }
00000068D1CE7320: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000068D1CE73C0: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000068D1CE7500: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000068D1CE76E0: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000068D1CE78C0: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000068D1CE7BE0: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000068D1CE7C80: {[rn3_16.c2.W Value[64 x 576]] }
00000068D1CE7D20: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000068D1CE7FA0: {[rn3_17.c2.c.b Value[64 x 1]] }
00000068D1CE80E0: {[rn3_17.c2.c.m Value[64 x 1]] }
00000068D1CE82C0: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000068D1CE8360: {[rn3_16.c2.c.b Value[64 x 1]] }
00000068D1CE8540: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000068D1CE8720: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000068D1CE89A0: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000068D1CE8EA0: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000068D1CE8F40: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000068D1CE9080: {[rn3_18.c2.c.b Value[64 x 1]] }
00000068D1CE93A0: {[rn3_18.c2.c.m Value[64 x 1]] }
00000068D1CE99E0: {[rn3_18.c2.W Value[64 x 576]] }
00000068D1CE9F80: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000068D1CEA0C0: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000068D1CEA5C0: {[rn3_18.c1.c.W Value[64 x 576]] }
00000068D1CEAA20: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
00000068D1CEAAC0: {[OutputNodes.b Value[10]] }
00000068D4D8C360: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8C720: {[Err Value[1]] }
00000068D4D8C7C0: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8C860: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8CAE0: {[CE Value[1]] }
00000068D4D8CC20: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8CCC0: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
00000068D4D8CF40: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8CFE0: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
00000068D4D8D080: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8D440: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8D6C0: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8D760: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8D8A0: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8DB20: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
00000068D4D8DBC0: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
00000068D4D8DC60: {[OutputNodes.z Value[10 x *]] }
00000068D4D8DD00: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
00000068D4D8DDA0: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8DE40: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
00000068D4D8DEE0: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8E3E0: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8E480: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8E5C0: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8E700: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
00000068D4D8E7A0: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
00000068D4D8E840: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
00000068D4D8E980: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8EB60: {[rn1_5.c2.W Gradient[16 x 144]] [rn1_6.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8EC00: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8ED40: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8EE80: {[rn1_4.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8EF20: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8F060: {[rn1_6.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8F100: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D8F1A0: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8F240: {[rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8F2E0: {[rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8F380: {[rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Gradient[32 x 32 x 16 x *]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8F420: {[rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.p Value[32 x 32 x 16 x *]] }
00000068D4D8F4C0: {[rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Gradient[32 x 32 x 16 x *]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D8F560: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8F600: {[rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.p Gradient[32 x 32 x 16 x *]] }
00000068D4D8F740: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8F7E0: {[rn1_7.c1.c.c.b Gradient[16 x 1]] }
00000068D4D8F880: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
00000068D4D8F920: {[rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8F9C0: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8FB00: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
00000068D4D8FBA0: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D8FC40: {[rn1_4.c1.c.c.b Gradient[16 x 1]] }
00000068D4D8FCE0: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D8FEC0: {[rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.p Gradient[32 x 32 x 16 x *]] }
00000068D4D8FF60: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D90000: {[rn1_6.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Value[32 x 32 x 16 x *]] }
00000068D4D900A0: {[rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.p Value[32 x 32 x 16 x *]] }
00000068D4D90140: {[rn1_7.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Value[32 x 32 x 16 x *]] }
00000068D4D901E0: {[rn1_7.c2.W Gradient[16 x 144]] [rn1_8.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D90280: {[rn1_4.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Value[32 x 32 x 16 x *]] }
00000068D4D903C0: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D90460: {[rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.p Value[32 x 32 x 16 x *]] }
00000068D4D90500: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D905A0: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D906E0: {[rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D908C0: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
00000068D4D90960: {[rn1_3.c2.W Gradient[16 x 144]] [rn1_4.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D90A00: {[rn1_5.c1.c.c.b Gradient[16 x 1]] }
00000068D4D90AA0: {[rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.p Gradient[32 x 32 x 16 x *]] }
00000068D4D90B40: {[rn1_5.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D90BE0: {[rn1_6.c2.W Gradient[16 x 144]] [rn1_7.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D90C80: {[rn1_4.c2.W Gradient[16 x 144]] [rn1_5.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D90DC0: {[rn1_5.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Value[32 x 32 x 16 x *]] }
00000068D4D90F00: {[rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.p Value[32 x 32 x 16 x *]] }
00000068D4D90FA0: {[rn1_6.c1.c.c.b Gradient[16 x 1]] }
00000068D4D91040: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
00000068D4D91180: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D91220: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D91360: {[rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.p Value[32 x 32 x 16 x *]] }
00000068D4D91400: {[rn1_10.c2.W Gradient[16 x 144]] [rn1_11.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D914A0: {[rn1_9.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Value[32 x 32 x 16 x *]] }
00000068D4D91540: {[rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.p Gradient[32 x 32 x 16 x *]] }
00000068D4D915E0: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D917C0: {[rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D91900: {[rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Gradient[32 x 32 x 16 x *]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D91A40: {[rn1_8.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D91AE0: {[rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.c1.y Value[32 x 32 x 16 x *]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Gradient[32 x 32 x 16 x *]] }
00000068D4D91D60: {[rn1_11.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D91E00: {[rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D91F40: {[rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D91FE0: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D92080: {[rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.p Value[32 x 32 x 16 x *]] }
00000068D4D92120: {[rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.c1.y Value[32 x 32 x 16 x *]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Gradient[32 x 32 x 16 x *]] }
00000068D4D921C0: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.W Gradient[16 x 144]] }
00000068D4D92300: {[rn1_8.c1.c.c.b Gradient[16 x 1]] }
00000068D4D923A0: {[rn1_7.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D924E0: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.c.b Gradient[16 x 1]] }
00000068D4D92580: {[rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.p Gradient[32 x 32 x 16 x *]] }
00000068D4D92620: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D926C0: {[rn1_11.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Value[32 x 32 x 16 x *]] }
00000068D4D92760: {[rn1_11.c2.W Gradient[16 x 144]] [rn1_12.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D92800: {[rn1_11.c1.c.c.b Gradient[16 x 1]] }
00000068D4D928A0: {[rn1_12.c1.c.c.b Gradient[16 x 1]] }
00000068D4D92940: {[rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.p Value[32 x 32 x 16 x *]] }
00000068D4D929E0: {[rn1_12.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Value[32 x 32 x 16 x *]] }
00000068D4D92A80: {[rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.p Value[32 x 32 x 16 x *]] }
00000068D4D92B20: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D92D00: {[rn1_10.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D92DA0: {[rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D92E40: {[rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D92EE0: {[rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Gradient[32 x 32 x 16 x *]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D92F80: {[rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.p Gradient[32 x 32 x 16 x *]] }
00000068D4D93020: {[rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.p Gradient[32 x 32 x 16 x *]] }
00000068D4D930C0: {[rn1_8.c2.W Gradient[16 x 144]] [rn1_9.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D93160: {[rn1_8.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Value[32 x 32 x 16 x *]] }
00000068D4D93200: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D932A0: {[rn1_10.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Value[32 x 32 x 16 x *]] }
00000068D4D933E0: {[rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.p Value[32 x 32 x 16 x *]] }
00000068D4D93480: {[rn1_10.c1.c.c.b Gradient[16 x 1]] }
00000068D4D93520: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D935C0: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D93660: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D93700: {[rn1_9.c1.c.c.b Gradient[16 x 1]] }
00000068D4D937A0: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D938E0: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D93980: {[rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.p Gradient[32 x 32 x 16 x *]] }
00000068D4D93A20: {[rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Gradient[32 x 32 x 16 x *]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D93AC0: {[rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.p Gradient[32 x 32 x 16 x *]] }
00000068D4D93B60: {[rn1_15.c1.c.c.b Gradient[16 x 1]] }
00000068D4D93C00: {[rn1_15.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Value[32 x 32 x 16 x *]] }
00000068D4D93CA0: {[rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.p Value[32 x 32 x 16 x *]] }
00000068D4D93D40: {[rn1_15.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D93DE0: {[rn1_12.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D93F20: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D93FC0: {[rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D941A0: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D94380: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D94420: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D944C0: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D94560: {[rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Gradient[32 x 32 x 16 x *]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D94600: {[rn1_14.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D946A0: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D94740: {[rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Gradient[32 x 32 x 16 x *]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D947E0: {[rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D949C0: {[rn1_14.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Value[32 x 32 x 16 x *]] }
00000068D4D94A60: {[rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.p Gradient[32 x 32 x 16 x *]] }
00000068D4D94B00: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D94C40: {[rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D94CE0: {[rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Gradient[32 x 32 x 16 x *]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D94D80: {[rn1_15.c2.W Gradient[16 x 144]] [rn1_16.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D94E20: {[rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.p Gradient[32 x 32 x 16 x *]] }
00000068D4D94EC0: {[rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.p Value[32 x 32 x 16 x *]] }
00000068D4D94F60: {[rn1_16.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Value[32 x 32 x 16 x *]] }
00000068D4D95140: {[rn1_17.c1.c.c.b Gradient[16 x 1]] }
00000068D4D951E0: {[rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.p Value[32 x 32 x 16 x *]] }
00000068D4D95320: {[rn1_12.c2.W Gradient[16 x 144]] [rn1_13.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D953C0: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D95460: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D95500: {[rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Gradient[32 x 32 x 16 x *]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D955A0: {[rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Gradient[32 x 32 x 16 x *]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D95640: {[rn1_16.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D95780: {[rn1_14.c2.W Gradient[16 x 144]] [rn1_15.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D95820: {[rn1_16.c2.W Gradient[16 x 144]] [rn1_17.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D958C0: {[rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.p Value[32 x 32 x 16 x *]] }
00000068D4D95960: {[rn1_13.c1.c.c.b Gradient[16 x 1]] }
00000068D4D95A00: {[rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D95AA0: {[rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.p Value[32 x 32 x 16 x *]] }
00000068D4D95BE0: {[rn1_16.c1.c.c.b Gradient[16 x 1]] }
00000068D4D95D20: {[rn1_13.c2.W Gradient[16 x 144]] [rn1_14.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D95DC0: {[rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.p Gradient[32 x 32 x 16 x *]] }
00000068D4D95E60: {[rn1_13.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D95F00: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D95FA0: {[rn1_14.c1.c.c.b Gradient[16 x 1]] }
00000068D4D96040: {[rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D960E0: {[rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.p Gradient[32 x 32 x 16 x *]] }
00000068D4D96180: {[rn1_13.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Value[32 x 32 x 16 x *]] }
00000068D4D962C0: {[rn1_18.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D4D96360: {[rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Gradient[32 x 32 x 16 x *]] }
00000068D4D96400: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D4D964A0: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
00000068D4D96540: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D4D965E0: {[rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Gradient[32 x 32 x 16 x *]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.c1.y Value[32 x 32 x 16 x *]] }
00000068D4D96720: {[rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.p Gradient[32 x 32 x 16 x *]] }
00000068D4D967C0: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
00000068D4D96860: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
00000068D4D96900: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000068D4D969A0: {[rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.p Gradient[32 x 32 x 16 x *]] }
00000068D4D96AE0: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
00000068D4D96C20: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D4D96D60: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
00000068D4D96E00: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D4D96EA0: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D4D96FE0: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
00000068D4D97080: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *]] }
00000068D4D97120: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
00000068D4D971C0: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
00000068D4D97260: {[rn1_17.c2.W Gradient[16 x 144]] [rn1_18.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000068D4D97300: {[rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000068D4D97440: {[rn1_18.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D4D974E0: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
00000068D4D97580: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D4D97620: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D4D976C0: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
00000068D4D97760: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D4D979E0: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.c1.y Value[16 x 16 x 32 x *]] }
00000068D4D97A80: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D4D97B20: {[rn1_17.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Value[32 x 32 x 16 x *]] }
00000068D4D97C60: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D4D97D00: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
00000068D4D97E40: {[rn2_3.c2.W Gradient[32 x 288]] [rn2_4.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D4D97EE0: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
00000068D4D97F80: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
00000068D4D98020: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D4D980C0: {[rn1_18.c1.c.c.b Gradient[16 x 1]] }
00000068D4D98200: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
00000068D4D982A0: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
00000068D4D98340: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
00000068D4D98480: {[rn2_1.c_proj.b Gradient[32 x 1]] }
00000068D4D98520: {[rn1_18.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Value[32 x 32 x 16 x *]] }
00000068D4D985C0: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D4D98660: {[rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
00000068D4D98700: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D4D98840: {[rn1_17.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Value[32 x 32 x 16 x *]] }
00000068D4D988E0: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
00000068D4D98980: {[rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.p Value[32 x 32 x 16 x *]] }
00000068D4D98A20: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D9715360: {[rn3_13.c2.W Gradient[64 x 576]] [rn3_14.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9715400: {[rn3_14.c2.W Gradient[64 x 576]] [rn3_15.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9715540: {[rn3_14.c1.c.c.b Gradient[64 x 1]] }
00000068D97155E0: {[rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.p Gradient[8 x 8 x 64 x *]] }
00000068D9715680: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D97157C0: {[rn3_15.c1.c.c.b Gradient[64 x 1]] }
00000068D9715860: {[rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Gradient[8 x 8 x 64 x *]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.c1.y Value[8 x 8 x 64 x *]] }
00000068D9715900: {[rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D97159A0: {[rn3_15.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9715AE0: {[rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9715B80: {[rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.p Gradient[8 x 8 x 64 x *]] }
00000068D9715C20: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9715CC0: {[rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9715D60: {[rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Gradient[8 x 8 x 64 x *]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.c1.y Value[8 x 8 x 64 x *]] }
00000068D9715E00: {[rn3_16.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Value[8 x 8 x 64 x *]] }
00000068D9715EA0: {[rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.p Value[8 x 8 x 64 x *]] }
00000068D9715F40: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9716080: {[rn3_14.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Value[8 x 8 x 64 x *]] }
00000068D97161C0: {[rn3_15.c2.W Gradient[64 x 576]] [rn3_16.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9716260: {[rn3_12.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Value[8 x 8 x 64 x *]] }
00000068D9716300: {[rn3_12.c1.c.c.b Gradient[64 x 1]] }
00000068D97163A0: {[rn3_12.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9716440: {[rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Gradient[8 x 8 x 64 x *]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.c1.y Value[8 x 8 x 64 x *]] }
00000068D97164E0: {[rn3_15.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Value[8 x 8 x 64 x *]] }
00000068D9716580: {[rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.p Value[8 x 8 x 64 x *]] }
00000068D9716620: {[rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.p Gradient[8 x 8 x 64 x *]] }
00000068D97166C0: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97169E0: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9716A80: {[rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Gradient[8 x 8 x 64 x *]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.c1.y Value[8 x 8 x 64 x *]] }
00000068D9716B20: {[rn3_13.c1.c.c.b Gradient[64 x 1]] }
00000068D9716BC0: {[rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9716C60: {[rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.p Value[8 x 8 x 64 x *]] }
00000068D9716DA0: {[rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.p Value[8 x 8 x 64 x *]] }
00000068D9716E40: {[rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9717020: {[rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Gradient[8 x 8 x 64 x *]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.c1.y Value[8 x 8 x 64 x *]] }
00000068D97170C0: {[rn3_16.c2.W Gradient[64 x 576]] [rn3_17.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9717160: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9717200: {[rn3_13.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D97172A0: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97173E0: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9717480: {[rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.p Gradient[8 x 8 x 64 x *]] }
00000068D9717520: {[rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.p Gradient[8 x 8 x 64 x *]] }
00000068D97175C0: {[rn3_12.c2.W Gradient[64 x 576]] [rn3_13.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9717660: {[rn3_13.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Value[8 x 8 x 64 x *]] }
00000068D9717700: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97177A0: {[rn3_14.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D97178E0: {[rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.p Value[8 x 8 x 64 x *]] }
00000068D9717980: {[rn3_16.c1.c.c.b Gradient[64 x 1]] }
00000068D9717A20: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9717B60: {[rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.p Gradient[16 x 16 x 32 x *]] }
00000068D9717C00: {[rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.p Gradient[16 x 16 x 32 x *]] }
00000068D9717D40: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D9717E80: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D9718060: {[rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.p Value[16 x 16 x 32 x *]] }
00000068D9718100: {[rn2_5.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D97181A0: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D9718240: {[rn2_6.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Value[16 x 16 x 32 x *]] }
00000068D97182E0: {[rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D9718380: {[rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Gradient[16 x 16 x 32 x *]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.c1.y Value[16 x 16 x 32 x *]] }
00000068D9718420: {[rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.p Gradient[16 x 16 x 32 x *]] }
00000068D97184C0: {[rn2_5.c1.c.c.b Gradient[32 x 1]] }
00000068D9718560: {[rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.p Gradient[16 x 16 x 32 x *]] }
00000068D9718600: {[rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Gradient[16 x 16 x 32 x *]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.c1.y Value[16 x 16 x 32 x *]] }
00000068D97186A0: {[rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D9718740: {[rn2_6.c1.c.c.b Gradient[32 x 1]] }
00000068D97187E0: {[rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D9718880: {[rn2_6.c2.W Gradient[32 x 288]] [rn2_7.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D9718920: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D97189C0: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D9718A60: {[rn2_4.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Value[16 x 16 x 32 x *]] }
00000068D9718B00: {[rn2_7.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Value[16 x 16 x 32 x *]] }
00000068D9718C40: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D9718CE0: {[rn2_4.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D9718D80: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D9718E20: {[rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.p Value[16 x 16 x 32 x *]] }
00000068D9718EC0: {[rn2_6.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D9718F60: {[rn2_5.c2.W Gradient[32 x 288]] [rn2_6.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D9719000: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D97190A0: {[rn2_4.c2.W Gradient[32 x 288]] [rn2_5.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D9719140: {[rn2_8.c1.c.c.b Gradient[32 x 1]] }
00000068D97191E0: {[rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D9719280: {[rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.p Value[16 x 16 x 32 x *]] }
00000068D9719320: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D97193C0: {[rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.p Gradient[16 x 16 x 32 x *]] }
00000068D9719460: {[rn2_7.c1.c.c.b Gradient[32 x 1]] }
00000068D9719640: {[rn2_8.c2.W Gradient[32 x 288]] [rn2_9.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D9719820: {[rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D97198C0: {[rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.p Value[16 x 16 x 32 x *]] }
00000068D9719A00: {[rn2_7.c2.W Gradient[32 x 288]] [rn2_8.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D9719AA0: {[rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Gradient[16 x 16 x 32 x *]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.c1.y Value[16 x 16 x 32 x *]] }
00000068D9719B40: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D9719BE0: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.c1.y Value[16 x 16 x 32 x *]] }
00000068D9719D20: {[rn2_4.c1.c.c.b Gradient[32 x 1]] }
00000068D9719DC0: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D9719E60: {[rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.p Value[16 x 16 x 32 x *]] }
00000068D971A040: {[rn2_7.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971A0E0: {[rn2_5.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Value[16 x 16 x 32 x *]] }
00000068D971A220: {[rn2_8.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Value[16 x 16 x 32 x *]] }
00000068D971A360: {[rn2_11.c2.W Gradient[32 x 288]] [rn2_12.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971A400: {[rn2_12.c2.W Gradient[32 x 288]] [rn2_13.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971A4A0: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971A540: {[rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971A5E0: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971A680: {[rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.p Gradient[16 x 16 x 32 x *]] }
00000068D971A720: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971A7C0: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971A860: {[rn2_13.c1.c.c.b Gradient[32 x 1]] }
00000068D971A900: {[rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.c1.y Value[16 x 16 x 32 x *]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Gradient[16 x 16 x 32 x *]] }
00000068D971A9A0: {[rn2_13.c2.W Gradient[32 x 288]] [rn2_14.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971AA40: {[rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.p Value[16 x 16 x 32 x *]] }
00000068D971AAE0: {[rn2_12.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971AC20: {[rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.p Gradient[16 x 16 x 32 x *]] }
00000068D971AD60: {[rn2_10.c2.W Gradient[32 x 288]] [rn2_11.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971AEA0: {[rn2_10.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971AFE0: {[rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Gradient[16 x 16 x 32 x *]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.c1.y Value[16 x 16 x 32 x *]] }
00000068D971B080: {[rn2_11.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Value[16 x 16 x 32 x *]] }
00000068D971B120: {[rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971B1C0: {[rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.p Gradient[16 x 16 x 32 x *]] }
00000068D971B260: {[rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.p Value[16 x 16 x 32 x *]] }
00000068D971B300: {[rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.p Value[16 x 16 x 32 x *]] }
00000068D971B440: {[rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971B4E0: {[rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.c1.y Value[16 x 16 x 32 x *]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Gradient[16 x 16 x 32 x *]] }
00000068D971B580: {[rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.p Gradient[16 x 16 x 32 x *]] }
00000068D971B620: {[rn2_11.c1.c.c.b Gradient[32 x 1]] }
00000068D971B6C0: {[rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Gradient[16 x 16 x 32 x *]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.c1.y Value[16 x 16 x 32 x *]] }
00000068D971B760: {[rn2_10.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Value[16 x 16 x 32 x *]] }
00000068D971B800: {[rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971B8A0: {[rn2_8.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971B940: {[rn2_9.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Value[16 x 16 x 32 x *]] }
00000068D971B9E0: {[rn2_11.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971BA80: {[rn2_9.c1.c.c.b Gradient[32 x 1]] }
00000068D971BBC0: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.W Gradient[32 x 288]] }
00000068D971BD00: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971BE40: {[rn2_13.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Value[16 x 16 x 32 x *]] }
00000068D971BEE0: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971C020: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.c.b Gradient[32 x 1]] }
00000068D971C0C0: {[rn2_10.c1.c.c.b Gradient[32 x 1]] }
00000068D971C200: {[rn2_12.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Value[16 x 16 x 32 x *]] }
00000068D971C340: {[rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.p Gradient[16 x 16 x 32 x *]] }
00000068D971C5C0: {[rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971C660: {[rn2_12.c1.c.c.b Gradient[32 x 1]] }
00000068D971C700: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971C7A0: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971C840: {[rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Gradient[16 x 16 x 32 x *]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.c1.y Value[16 x 16 x 32 x *]] }
00000068D971C8E0: {[rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.p Value[16 x 16 x 32 x *]] }
00000068D971C980: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971CA20: {[rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.p Value[16 x 16 x 32 x *]] }
00000068D971CAC0: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971CB60: {[rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.p Gradient[16 x 16 x 32 x *]] }
00000068D971CC00: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971CCA0: {[rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971CD40: {[rn2_15.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971CF20: {[rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Gradient[16 x 16 x 32 x *]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.c1.y Value[16 x 16 x 32 x *]] }
00000068D971CFC0: {[rn2_17.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971D1A0: {[rn2_18.c1.c.c.b Gradient[32 x 1]] }
00000068D971D2E0: {[rn2_17.c1.c.c.b Gradient[32 x 1]] }
00000068D971D380: {[rn2_18.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Value[16 x 16 x 32 x *]] }
00000068D971D420: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D971D4C0: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971D560: {[rn2_15.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Value[16 x 16 x 32 x *]] }
00000068D971D6A0: {[rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Gradient[16 x 16 x 32 x *]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.c1.y Value[16 x 16 x 32 x *]] }
00000068D971D740: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971D920: {[rn2_13.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971D9C0: {[rn2_16.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971DA60: {[rn2_14.c1.c.c.b Gradient[32 x 1]] }
00000068D971DC40: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971DD80: {[rn2_14.c2.W Gradient[32 x 288]] [rn2_15.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971DE20: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971DEC0: {[rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.p Gradient[16 x 16 x 32 x *]] }
00000068D971DF60: {[rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.p Value[16 x 16 x 32 x *]] }
00000068D971E000: {[rn2_14.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Value[16 x 16 x 32 x *]] }
00000068D971E0A0: {[rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Gradient[16 x 16 x 32 x *]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.c1.y Value[16 x 16 x 32 x *]] }
00000068D971E140: {[rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.p Value[16 x 16 x 32 x *]] }
00000068D971E1E0: {[rn2_17.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Value[16 x 16 x 32 x *]] }
00000068D971E320: {[rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971E3C0: {[rn2_14.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Value[16 x 16 x 32 x *]] }
00000068D971E460: {[rn2_17.c2.W Gradient[32 x 288]] [rn2_18.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971E500: {[rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971E5A0: {[rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.p Value[16 x 16 x 32 x *]] }
00000068D971E640: {[rn2_18.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D971E6E0: {[rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971E780: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971E820: {[rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Gradient[16 x 16 x 32 x *]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.c1.y Value[16 x 16 x 32 x *]] }
00000068D971E960: {[rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Gradient[16 x 16 x 32 x *]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.c1.y Value[16 x 16 x 32 x *]] }
00000068D971EA00: {[rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.p Gradient[16 x 16 x 32 x *]] }
00000068D971EAA0: {[rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.p Value[16 x 16 x 32 x *]] }
00000068D971EB40: {[rn2_15.c2.W Gradient[32 x 288]] [rn2_16.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971EC80: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971ED20: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *]] }
00000068D971EDC0: {[rn2_16.c1.c.c.b Gradient[32 x 1]] }
00000068D971EE60: {[rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.p Value[16 x 16 x 32 x *]] }
00000068D971EF00: {[rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000068D971EFA0: {[rn2_16.c2.W Gradient[32 x 288]] [rn2_17.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000068D971F040: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000068D971F0E0: {[rn2_15.c1.c.c.b Gradient[32 x 1]] }
00000068D971F180: {[rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.p Gradient[16 x 16 x 32 x *]] }
00000068D971F220: {[rn2_16.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Value[16 x 16 x 32 x *]] }
00000068D971F2C0: {[rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.p Gradient[16 x 16 x 32 x *]] }
00000068D971F400: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
00000068D971F4A0: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D971F540: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D971F5E0: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D971F680: {[rn2_18.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D971F720: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
00000068D971F860: {[rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.p Value[8 x 8 x 64 x *]] }
00000068D971F900: {[rn3_4.c2.W Gradient[64 x 576]] [rn3_5.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D971FA40: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
00000068D971FAE0: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
00000068D971FB80: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
00000068D971FCC0: {[rn3_4.c1.c.c.b Gradient[64 x 1]] }
00000068D971FEA0: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
00000068D971FFE0: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9720080: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97201C0: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
00000068D9720260: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9720300: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D97203A0: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9720440: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97204E0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9720580: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D97206C0: {[rn3_4.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9720760: {[rn3_3.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9720800: {[rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D97208A0: {[rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9720940: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D97209E0: {[rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.c1.y Value[8 x 8 x 64 x *]] }
00000068D9720B20: {[rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Gradient[16 x 16 x 32 x *]] }
00000068D9720BC0: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
00000068D9720C60: {[rn3_3.c2.W Gradient[64 x 576]] [rn3_4.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9720DA0: {[rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
00000068D9720E40: {[rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
00000068D9720EE0: {[rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.p Gradient[8 x 8 x 64 x *]] }
00000068D9720F80: {[rn3_4.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Value[8 x 8 x 64 x *]] }
00000068D9721020: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D97210C0: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9721160: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
00000068D9721200: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
00000068D97212A0: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
00000068D9721340: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D97213E0: {[rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.c1.y Value[8 x 8 x 64 x *]] }
00000068D97215C0: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
00000068D9721700: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
00000068D97217A0: {[rn3_1.c_proj.b Gradient[64 x 1]] }
00000068D9721840: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
00000068D97218E0: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9721A20: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
00000068D9721AC0: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
00000068D9721B60: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9721CA0: {[rn3_7.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9721D40: {[rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Gradient[8 x 8 x 64 x *]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.c1.y Value[8 x 8 x 64 x *]] }
00000068D9721DE0: {[rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.p Gradient[8 x 8 x 64 x *]] }
00000068D9721E80: {[rn3_5.c2.W Gradient[64 x 576]] [rn3_6.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9721F20: {[rn3_7.c1.c.c.b Gradient[64 x 1]] }
00000068D9721FC0: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9722060: {[rn3_9.c1.c.c.b Gradient[64 x 1]] }
00000068D9722100: {[rn3_9.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Value[8 x 8 x 64 x *]] }
00000068D9722240: {[rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.p Value[8 x 8 x 64 x *]] }
00000068D97222E0: {[rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.p Value[8 x 8 x 64 x *]] }
00000068D9722560: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97226A0: {[rn3_7.c2.W Gradient[64 x 576]] [rn3_8.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9722740: {[rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.p Value[8 x 8 x 64 x *]] }
00000068D97227E0: {[rn3_6.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Value[8 x 8 x 64 x *]] }
00000068D9722880: {[rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.p Gradient[8 x 8 x 64 x *]] }
00000068D97229C0: {[rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.p Value[8 x 8 x 64 x *]] }
00000068D9722A60: {[rn3_6.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9722B00: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9722BA0: {[rn3_7.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Value[8 x 8 x 64 x *]] }
00000068D9722C40: {[rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.p Gradient[8 x 8 x 64 x *]] }
00000068D9722CE0: {[rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.p Gradient[8 x 8 x 64 x *]] }
00000068D9722D80: {[rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9722E20: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9722EC0: {[rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.c1.y Value[8 x 8 x 64 x *]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Gradient[8 x 8 x 64 x *]] }
00000068D9722F60: {[rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Gradient[8 x 8 x 64 x *]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.c1.y Value[8 x 8 x 64 x *]] }
00000068D9723000: {[rn3_8.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D97230A0: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.c.b Gradient[64 x 1]] }
00000068D9723140: {[rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9723280: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9723460: {[rn3_8.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Value[8 x 8 x 64 x *]] }
00000068D9723500: {[rn3_5.c1.c.c.b Gradient[64 x 1]] }
00000068D97235A0: {[rn3_8.c2.W Gradient[64 x 576]] [rn3_9.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9723640: {[rn3_5.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Value[8 x 8 x 64 x *]] }
00000068D97236E0: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.W Gradient[64 x 576]] }
00000068D9723780: {[rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.p Value[8 x 8 x 64 x *]] }
00000068D9723820: {[rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D97238C0: {[rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9723960: {[rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Gradient[8 x 8 x 64 x *]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.c1.y Value[8 x 8 x 64 x *]] }
00000068D9723AA0: {[rn3_8.c1.c.c.b Gradient[64 x 1]] }
00000068D9723B40: {[rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Gradient[8 x 8 x 64 x *]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.c1.y Value[8 x 8 x 64 x *]] }
00000068D9723C80: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9723DC0: {[rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D9723E60: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9723F00: {[rn3_6.c2.W Gradient[64 x 576]] [rn3_7.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9723FA0: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D97240E0: {[rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.p Gradient[8 x 8 x 64 x *]] }
00000068D9724180: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9724220: {[rn3_5.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D97242C0: {[rn3_6.c1.c.c.b Gradient[64 x 1]] }
00000068D9724360: {[rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D97244A0: {[rn3_10.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Value[8 x 8 x 64 x *]] }
00000068D9724540: {[rn3_11.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Value[8 x 8 x 64 x *]] }
00000068D97245E0: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D9724680: {[rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.p Gradient[8 x 8 x 64 x *]] }
00000068D97247C0: {[rn3_10.c1.c.c.b Gradient[64 x 1]] }
00000068D9724860: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9724900: {[rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.p Gradient[8 x 8 x 64 x *]] }
00000068D97249A0: {[rn3_11.c1.c.c.b Gradient[64 x 1]] }
00000068D9724A40: {[rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.p Value[8 x 8 x 64 x *]] }
00000068D9724AE0: {[rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Gradient[8 x 8 x 64 x *]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.c1.y Value[8 x 8 x 64 x *]] }
00000068D9724C20: {[rn3_11.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9724D60: {[rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.p Value[8 x 8 x 64 x *]] }
00000068D9724E00: {[rn3_11.c2.W Gradient[64 x 576]] [rn3_12.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9724FE0: {[rn3_10.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D9725080: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9725120: {[rn3_10.c2.W Gradient[64 x 576]] [rn3_11.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D97251C0: {[rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.c1.y Value[8 x 8 x 64 x *]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Gradient[8 x 8 x 64 x *]] }
00000068D9759BB0: {[rn3_17.c2.W Gradient[64 x 576]] [rn3_18.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000068D9759C50: {[CE Gradient[1]] }
00000068D9759CF0: {[rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.p Value[8 x 8 x 64 x *]] }
00000068D9759D90: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000068D9759ED0: {[OutputNodes.t Value[10 x *]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Gradient[8 x 8 x 64 x *]] }
00000068D9759F70: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D975A3D0: {[rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D975A6F0: {[rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.p Gradient[8 x 8 x 64 x *]] }
00000068D975A830: {[rn3_17.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Value[8 x 8 x 64 x *]] }
00000068D975A8D0: {[rn3_18.c2.c.b Gradient[64 x 1]] }
00000068D975A970: {[rn3_16.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D975AAB0: {[rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.p Value[8 x 8 x 64 x *]] }
00000068D975AB50: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }
00000068D975ADD0: {[OutputNodes.b Gradient[10]] }
00000068D975AE70: {[rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Gradient[8 x 8 x 64 x *]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.c1.y Value[8 x 8 x 64 x *]] }
00000068D975B0F0: {[rn3_17.c1.c.c.b Gradient[64 x 1]] }
00000068D975B190: {[rn3_18.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Value[8 x 8 x 64 x *]] }
00000068D975B230: {[rn3_17.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Value[8 x 8 x 64 x *]] }
00000068D975B4B0: {[OutputNodes.t Gradient[10 x *]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Gradient[8 x 8 x 64 x *]] }
00000068D975B5F0: {[rn3_18.c1.c.c.b Gradient[64 x 1]] }
00000068D975B690: {[pool Gradient[1 x 1 x 64 x *]] [rn3_18.c2.W Gradient[64 x 576]] }
00000068D975BB90: {[rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000068D975BF50: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *]] }
00000068D975C310: {[pool Value[1 x 1 x 64 x *]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.p Gradient[8 x 8 x 64 x *]] }

05/03/2016 14:05:01: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 14:05:01: Starting Epoch 1: learning rate per sample = 0.006250  effective momentum = 0.900000  momentum as time constant = 151.9 samples

05/03/2016 14:05:01: Starting minibatch loop.
05/03/2016 14:05:10: Finished Epoch[ 1 of 1]: [Training] CE = 2.58367419 * 128; Err = 0.88281250 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0062500001; epochTime=9.52717s
05/03/2016 14:05:11: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503140043.234881\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
05/03/2016 14:05:11: CNTKCommandTrainEnd: Train

05/03/2016 14:05:11: Action "train" complete.


05/03/2016 14:05:11: ##############################################################################
05/03/2016 14:05:11: #                                                                            #
05/03/2016 14:05:11: # Action "test"                                                              #
05/03/2016 14:05:11: #                                                                            #
05/03/2016 14:05:11: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c1.c.c.b Gradient[16 x 1]] [rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.W Gradient[16 x 144]] [rn1_10.c2.c.b Gradient[16 x 1]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.p Gradient[32 x 32 x 16 x *1]] [rn1_10.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c1.c.c.b Gradient[16 x 1]] [rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.W Gradient[16 x 144]] [rn1_11.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.p Gradient[32 x 32 x 16 x *1]] [rn1_11.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c1.c.c.b Gradient[16 x 1]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.W Gradient[16 x 144]] [rn1_12.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.p Gradient[32 x 32 x 16 x *1]] [rn1_12.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c1.c.c.b Gradient[16 x 1]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.W Gradient[16 x 144]] [rn1_13.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.p Gradient[32 x 32 x 16 x *1]] [rn1_13.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c1.c.c.b Gradient[16 x 1]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.W Gradient[16 x 144]] [rn1_14.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.p Gradient[32 x 32 x 16 x *1]] [rn1_14.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c1.c.c.b Gradient[16 x 1]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.W Gradient[16 x 144]] [rn1_15.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.p Gradient[32 x 32 x 16 x *1]] [rn1_15.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c1.c.c.b Gradient[16 x 1]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.W Gradient[16 x 144]] [rn1_16.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.p Gradient[32 x 32 x 16 x *1]] [rn1_16.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c1.c.c.b Gradient[16 x 1]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.W Gradient[16 x 144]] [rn1_17.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.p Gradient[32 x 32 x 16 x *1]] [rn1_17.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c1.c.c.b Gradient[16 x 1]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.W Gradient[16 x 144]] [rn1_18.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.p Gradient[32 x 32 x 16 x *1]] [rn1_18.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c1.c.c.b Gradient[16 x 1]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.W Gradient[16 x 144]] [rn1_4.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.p Gradient[32 x 32 x 16 x *1]] [rn1_4.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c1.c.c.b Gradient[16 x 1]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.W Gradient[16 x 144]] [rn1_5.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.p Gradient[32 x 32 x 16 x *1]] [rn1_5.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c1.c.c.b Gradient[16 x 1]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.W Gradient[16 x 144]] [rn1_6.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.p Gradient[32 x 32 x 16 x *1]] [rn1_6.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c1.c.c.b Gradient[16 x 1]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.W Gradient[16 x 144]] [rn1_7.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.p Gradient[32 x 32 x 16 x *1]] [rn1_7.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c1.c.c.b Gradient[16 x 1]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.W Gradient[16 x 144]] [rn1_8.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.p Gradient[32 x 32 x 16 x *1]] [rn1_8.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c1.c.c.b Gradient[16 x 1]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.W Gradient[16 x 144]] [rn1_9.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.p Gradient[32 x 32 x 16 x *1]] [rn1_9.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c1.c.c.b Gradient[32 x 1]] [rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.W Gradient[32 x 288]] [rn2_10.c2.c.b Gradient[32 x 1]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.p Gradient[16 x 16 x 32 x *1]] [rn2_10.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c1.c.c.b Gradient[32 x 1]] [rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.W Gradient[32 x 288]] [rn2_11.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.p Gradient[16 x 16 x 32 x *1]] [rn2_11.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c1.c.c.b Gradient[32 x 1]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.W Gradient[32 x 288]] [rn2_12.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.p Gradient[16 x 16 x 32 x *1]] [rn2_12.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c1.c.c.b Gradient[32 x 1]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.W Gradient[32 x 288]] [rn2_13.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.p Gradient[16 x 16 x 32 x *1]] [rn2_13.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c1.c.c.b Gradient[32 x 1]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.W Gradient[32 x 288]] [rn2_14.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.p Gradient[16 x 16 x 32 x *1]] [rn2_14.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c1.c.c.b Gradient[32 x 1]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.W Gradient[32 x 288]] [rn2_15.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.p Gradient[16 x 16 x 32 x *1]] [rn2_15.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c1.c.c.b Gradient[32 x 1]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.W Gradient[32 x 288]] [rn2_16.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.p Gradient[16 x 16 x 32 x *1]] [rn2_16.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c1.c.c.b Gradient[32 x 1]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.W Gradient[32 x 288]] [rn2_17.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.p Gradient[16 x 16 x 32 x *1]] [rn2_17.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c1.c.c.b Gradient[32 x 1]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.W Gradient[32 x 288]] [rn2_18.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.p Gradient[16 x 16 x 32 x *1]] [rn2_18.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c1.c.c.b Gradient[32 x 1]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.W Gradient[32 x 288]] [rn2_4.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.p Gradient[16 x 16 x 32 x *1]] [rn2_4.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c1.c.c.b Gradient[32 x 1]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.W Gradient[32 x 288]] [rn2_5.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.p Gradient[16 x 16 x 32 x *1]] [rn2_5.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c1.c.c.b Gradient[32 x 1]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.W Gradient[32 x 288]] [rn2_6.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.p Gradient[16 x 16 x 32 x *1]] [rn2_6.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c1.c.c.b Gradient[32 x 1]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.W Gradient[32 x 288]] [rn2_7.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.p Gradient[16 x 16 x 32 x *1]] [rn2_7.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c1.c.c.b Gradient[32 x 1]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.W Gradient[32 x 288]] [rn2_8.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.p Gradient[16 x 16 x 32 x *1]] [rn2_8.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c1.c.c.b Gradient[32 x 1]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.W Gradient[32 x 288]] [rn2_9.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.p Gradient[16 x 16 x 32 x *1]] [rn2_9.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c1.c.c.b Gradient[64 x 1]] [rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.W Gradient[64 x 576]] [rn3_10.c2.c.b Gradient[64 x 1]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.p Gradient[8 x 8 x 64 x *1]] [rn3_10.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c1.c.c.b Gradient[64 x 1]] [rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.W Gradient[64 x 576]] [rn3_11.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.p Gradient[8 x 8 x 64 x *1]] [rn3_11.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c1.c.c.b Gradient[64 x 1]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.W Gradient[64 x 576]] [rn3_12.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.p Gradient[8 x 8 x 64 x *1]] [rn3_12.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c1.c.c.b Gradient[64 x 1]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.W Gradient[64 x 576]] [rn3_13.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.p Gradient[8 x 8 x 64 x *1]] [rn3_13.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c1.c.c.b Gradient[64 x 1]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.W Gradient[64 x 576]] [rn3_14.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.p Gradient[8 x 8 x 64 x *1]] [rn3_14.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c1.c.c.b Gradient[64 x 1]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.W Gradient[64 x 576]] [rn3_15.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.p Gradient[8 x 8 x 64 x *1]] [rn3_15.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c1.c.c.b Gradient[64 x 1]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.W Gradient[64 x 576]] [rn3_16.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.p Gradient[8 x 8 x 64 x *1]] [rn3_16.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c1.c.c.b Gradient[64 x 1]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.W Gradient[64 x 576]] [rn3_17.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.p Gradient[8 x 8 x 64 x *1]] [rn3_17.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c1.c.c.b Gradient[64 x 1]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.W Gradient[64 x 576]] [rn3_18.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.p Gradient[8 x 8 x 64 x *1]] [rn3_18.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c1.c.c.b Gradient[64 x 1]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.W Gradient[64 x 576]] [rn3_4.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.p Gradient[8 x 8 x 64 x *1]] [rn3_4.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c1.c.c.b Gradient[64 x 1]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.W Gradient[64 x 576]] [rn3_5.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.p Gradient[8 x 8 x 64 x *1]] [rn3_5.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c1.c.c.b Gradient[64 x 1]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.W Gradient[64 x 576]] [rn3_6.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.p Gradient[8 x 8 x 64 x *1]] [rn3_6.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c1.c.c.b Gradient[64 x 1]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.W Gradient[64 x 576]] [rn3_7.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.p Gradient[8 x 8 x 64 x *1]] [rn3_7.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c1.c.c.b Gradient[64 x 1]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.W Gradient[64 x 576]] [rn3_8.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.p Gradient[8 x 8 x 64 x *1]] [rn3_8.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c1.c.c.b Gradient[64 x 1]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.W Gradient[64 x 576]] [rn3_9.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] [rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.p Gradient[8 x 8 x 64 x *1]] [rn3_9.y Gradient[8 x 8 x 64 x *1]] }
00000068B4FB0050: {[rn1_12.c1.y Value[32 x 32 x 16 x *1]] }
00000068BA1A22B0: {[rn1_10.y Value[32 x 32 x 16 x *1]] }
00000068BA1A2490: {[rn1_11.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068BA1A2CB0: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068BA1A2F30: {[rn1_11.p Value[32 x 32 x 16 x *1]] }
00000068BA1A2FD0: {[rn1_11.y Value[32 x 32 x 16 x *1]] }
00000068BA1A3110: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068BA1A3390: {[rn1_10.p Value[32 x 32 x 16 x *1]] }
00000068BA1A36B0: {[rn1_11.c1.y Value[32 x 32 x 16 x *1]] }
00000068BA1A3D90: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068BA1A3ED0: {[rn1_12.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068BA1A3F70: {[rn1_11.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE3540: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
00000068D1CE37C0: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE3900: {[rn1_5.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE39A0: {[rn1_5.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE3AE0: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE3C20: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE3D60: {[rn1_5.p Value[32 x 32 x 16 x *1]] }
00000068D1CE3EA0: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE3FE0: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4080: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
00000068D1CE41C0: {[rn1_4.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4260: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
00000068D1CE4300: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE43A0: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4440: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE4580: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4620: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE49E0: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4C60: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4D00: {[rn1_4.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE4E40: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4EE0: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE4F80: {[rn1_4.p Value[32 x 32 x 16 x *1]] }
00000068D1CE5020: {[rn1_4.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5200: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE52A0: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE5340: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE5520: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5660: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
00000068D1CE5700: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE57A0: {[rn1_4.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE58E0: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5980: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5B60: {[rn1_5.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE5D40: {[rn1_9.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5DE0: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE5E80: {[rn1_8.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE5F20: {[rn1_9.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE5FC0: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6060: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6100: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE62E0: {[rn1_8.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE64C0: {[rn1_7.p Value[32 x 32 x 16 x *1]] }
00000068D1CE6600: {[rn1_10.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE66A0: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE67E0: {[rn1_7.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE6BA0: {[rn1_7.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6C40: {[rn1_8.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6CE0: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6D80: {[rn1_6.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE6E20: {[rn1_8.y Value[32 x 32 x 16 x *1]] }
00000068D1CE6EC0: {[rn1_9.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE7000: {[rn1_6.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE70A0: {[rn1_5.y Value[32 x 32 x 16 x *1]] }
00000068D1CE7140: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE71E0: {[rn1_6.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE73C0: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE75A0: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE7780: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE7960: {[rn1_6.y Value[32 x 32 x 16 x *1]] }
00000068D1CE7A00: {[rn1_7.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE7BE0: {[rn1_8.p Value[32 x 32 x 16 x *1]] }
00000068D1CE7C80: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE7F00: {[rn1_6.p Value[32 x 32 x 16 x *1]] }
00000068D1CE7FA0: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE8180: {[rn1_9.c2.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE82C0: {[rn1_7.c1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE84A0: {[rn1_9.p Value[32 x 32 x 16 x *1]] }
00000068D1CE8720: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000068D1CE8A40: {[rn3_8.c2.W Value[64 x 576]] }
00000068D1CE8E00: {[CE Value[1]] }
00000068D1CE8EA0: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
00000068D1CE9440: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000068D1CE9620: {[rn3_9.c2.W Value[64 x 576]] }
00000068D1CE9940: {[Err Value[1]] }
00000068D1CE99E0: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
00000068D1CE9A80: {[conv1.y Value[32 x 32 x 16 x *1]] }
00000068D1CE9DA0: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000068D1CE9F80: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000068D1CEA2A0: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000068D1CEA660: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000068D1CEA840: {[rn3_9.c1.c.W Value[64 x 576]] }
00000068D1CEA8E0: {[rn3_9.c2.c.b Value[64 x 1]] }
00000068D1CEAAC0: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000068D1CEAC00: {[rn3_9.c2.c.m Value[64 x 1]] }
00000068D4D8C2C0: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000068D4D8C720: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000068D4D8C900: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000068D4D8CC20: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000068D4D8CF40: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000068D4D8D080: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000068D4D8D580: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000068D4D8D760: {[rn3_15.c1.c.W Value[64 x 576]] }
00000068D4D8DD00: {[rn3_15.c2.W Value[64 x 576]] }
00000068D4D8DDA0: {[rn3_15.c2.c.b Value[64 x 1]] }
00000068D4D8E0C0: {[rn3_15.c2.c.m Value[64 x 1]] }
00000068D4D8E3E0: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000068D4D8E5C0: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000068D4D8E7A0: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000068D4D8ED40: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000068D4D8EE80: {[rn3_17.c2.W Value[64 x 576]] }
00000068D4D8EFC0: {[rn3_16.c2.W Value[64 x 576]] }
00000068D4D8F1A0: {[rn3_17.c2.c.b Value[64 x 1]] }
00000068D4D8F380: {[rn3_17.c2.c.m Value[64 x 1]] }
00000068D4D8F420: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000068D4D8F6A0: {[rn3_18.c1.c.W Value[64 x 576]] }
00000068D4D8F920: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000068D4D8FC40: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000068D4D8FCE0: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000068D4D901E0: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000068D4D90280: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000068D4D903C0: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000068D4D90500: {[rn3_17.c1.c.W Value[64 x 576]] }
00000068D4D906E0: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000068D4D90820: {[rn3_18.c2.c.b Value[64 x 1]] }
00000068D4D90A00: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000068D4D90B40: {[rn3_16.c1.c.W Value[64 x 576]] }
00000068D4D90DC0: {[rn3_16.c2.c.b Value[64 x 1]] }
00000068D4D90E60: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000068D4D90F00: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000068D4D90FA0: {[rn3_16.c2.c.m Value[64 x 1]] }
00000068D4D910E0: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000068D4D91680: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000068D4D91900: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000068D4D91B80: {[rn3_3.c2.c.b Value[64 x 1]] }
00000068D4D91D60: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000068D4D91F40: {[rn3_18.c2.c.m Value[64 x 1]] }
00000068D4D91FE0: {[rn3_1_Wproj Value[64 x 32]] }
00000068D4D92080: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000068D4D923A0: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000068D4D926C0: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000068D4D928A0: {[rn3_3.c2.W Value[64 x 576]] }
00000068D4D92940: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000068D4D92A80: {[rn3_2.c2.W Value[64 x 576]] }
00000068D4D92C60: {[rn3_3.c2.c.m Value[64 x 1]] }
00000068D4D92D00: {[rn3_18.c2.W Value[64 x 576]] }
00000068D4D92DA0: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000068D4D92E40: {[rn3_2.c2.c.b Value[64 x 1]] }
00000068D4D92EE0: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000068D4D93020: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000068D4D93160: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000068D4D93200: {[rn3_2.c1.c.W Value[64 x 576]] }
00000068D4D932A0: {[rn3_2.c2.c.m Value[64 x 1]] }
00000068D4D93660: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000068D4D937A0: {[rn3_3.c1.c.W Value[64 x 576]] }
00000068D4D93840: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000068D4D93AC0: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000068D4D93B60: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000068D4D93CA0: {[rn3_4.c2.c.m Value[64 x 1]] }
00000068D4D93D40: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000068D4D93E80: {[rn3_5.c1.c.W Value[64 x 576]] }
00000068D4D94060: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000068D4D94100: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000068D4D94420: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000068D4D94600: {[rn3_4.c1.c.W Value[64 x 576]] }
00000068D4D946A0: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000068D4D94920: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000068D4D94BA0: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000068D4D94C40: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000068D4D94F60: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000068D4D950A0: {[rn3_5.c2.c.m Value[64 x 1]] }
00000068D4D951E0: {[rn3_4.c2.c.b Value[64 x 1]] }
00000068D4D95820: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000068D4D95A00: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000068D4D95AA0: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000068D4D95B40: {[rn3_4.c2.W Value[64 x 576]] }
00000068D4D95D20: {[rn3_5.c2.c.b Value[64 x 1]] }
00000068D4D95FA0: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000068D4D960E0: {[rn3_5.c2.W Value[64 x 576]] }
00000068D4D96220: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000068D4D962C0: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000068D4D965E0: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000068D4D96720: {[rn3_7.c2.c.b Value[64 x 1]] }
00000068D4D96860: {[rn3_7.c2.c.m Value[64 x 1]] }
00000068D4D969A0: {[rn3_7.c2.W Value[64 x 576]] }
00000068D4D96A40: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000068D4D96B80: {[rn3_8.c1.c.W Value[64 x 576]] }
00000068D4D96FE0: {[rn3_8.c2.c.b Value[64 x 1]] }
00000068D4D97260: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000068D4D97580: {[rn3_6.c1.c.W Value[64 x 576]] }
00000068D4D97760: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000068D4D97940: {[rn3_8.c2.c.m Value[64 x 1]] }
00000068D4D97B20: {[rn3_7.c1.c.W Value[64 x 576]] }
00000068D4D97D00: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000068D4D97DA0: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000068D4D97F80: {[rn3_6.c2.c.m Value[64 x 1]] }
00000068D4D98020: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000068D4D980C0: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000068D4D98200: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000068D4D982A0: {[rn3_6.c2.W Value[64 x 576]] }
00000068D4D98340: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000068D4D988E0: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000068D4D98980: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000068D4D98A20: {[rn3_6.c2.c.b Value[64 x 1]] }
00000068D974D3B0: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000068D974D450: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000068D974D590: {[rn2_6.c2.W Value[32 x 288]] }
00000068D974D770: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000068D974D810: {[rn2_6.c2.c.b Value[32 x 1]] }
00000068D974DA90: {[rn2_6.c2.c.m Value[32 x 1]] }
00000068D974DB30: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000068D974DD10: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000068D974DF90: {[rn2_5.c2.W Value[32 x 288]] }
00000068D974E0D0: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000068D974E530: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000068D974E710: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000068D974E8F0: {[rn2_6.c1.c.W Value[32 x 288]] }
00000068D974E990: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000068D974EAD0: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000068D974EC10: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000068D974EF30: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000068D974EFD0: {[rn2_7.c1.c.W Value[32 x 288]] }
00000068D974F390: {[rn2_7.c2.c.b Value[32 x 1]] }
00000068D974F430: {[rn2_7.c2.c.m Value[32 x 1]] }
00000068D974F570: {[rn2_7.c2.W Value[32 x 288]] }
00000068D974F610: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000068D974F750: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000068D974F930: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000068D974FBB0: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000068D974FD90: {[rn2_8.c2.c.b Value[32 x 1]] }
00000068D974FED0: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000068D974FF70: {[rn2_8.c2.c.m Value[32 x 1]] }
00000068D97500B0: {[rn3_1.c1.c.W Value[64 x 288]] }
00000068D97501F0: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000068D97506F0: {[rn2_8.c2.W Value[32 x 288]] }
00000068D9750790: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000068D97508D0: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000068D9750A10: {[rn2_9.c2.c.b Value[32 x 1]] }
00000068D9750B50: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000068D9750D30: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000068D9750FB0: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000068D9751050: {[rn3_1.c2.c.b Value[64 x 1]] }
00000068D9751550: {[rn2_9.c2.c.m Value[32 x 1]] }
00000068D9751690: {[rn2_8.c1.c.W Value[32 x 288]] }
00000068D9751870: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000068D97519B0: {[rn2_9.c1.c.W Value[32 x 288]] }
00000068D9751D70: {[rn2_9.c2.W Value[32 x 288]] }
00000068D9751E10: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000068D9751EB0: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000068D9751FF0: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000068D9752130: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000068D9752450: {[rn3_11.c2.c.b Value[64 x 1]] }
00000068D97526D0: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000068D9752810: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000068D9752A90: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000068D9752C70: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000068D9752EF0: {[rn3_10.c2.c.m Value[64 x 1]] }
00000068D9753210: {[rn3_1.c_proj.b Value[64 x 1]] }
00000068D9753990: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000068D9753B70: {[rn3_1.c_proj.m Value[64 x 1]] }
00000068D9753CB0: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000068D9753D50: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000068D9753DF0: {[rn3_1.c2.c.m Value[64 x 1]] }
00000068D9753E90: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000068D9753F30: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000068D9753FD0: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000068D9754110: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000068D97541B0: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000068D9754250: {[rn3_10.c2.c.b Value[64 x 1]] }
00000068D9754430: {[rn3_10.c2.W Value[64 x 576]] }
00000068D97544D0: {[rn3_11.c1.c.W Value[64 x 576]] }
00000068D9754570: {[rn3_1.c2.W Value[64 x 576]] }
00000068D9754610: {[rn3_10.c1.c.W Value[64 x 576]] }
00000068D97546B0: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000068D97549D0: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000068D9754CF0: {[rn3_13.c2.c.b Value[64 x 1]] }
00000068D9754E30: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000068D9754ED0: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000068D9754F70: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000068D9755010: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000068D9755330: {[rn3_13.c2.c.m Value[64 x 1]] }
00000068D9755510: {[rn3_13.c2.W Value[64 x 576]] }
00000068D9755790: {[rn3_12.c2.c.b Value[64 x 1]] }
00000068D9755830: {[rn3_12.c2.c.m Value[64 x 1]] }
00000068D9755AB0: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000068D9755BF0: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000068D9755D30: {[rn3_13.c1.c.W Value[64 x 576]] }
00000068D9755FB0: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000068D9756050: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000068D97560F0: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000068D9756190: {[rn3_12.c2.W Value[64 x 576]] }
00000068D97562D0: {[rn3_11.c2.W Value[64 x 576]] }
00000068D9756730: {[rn3_12.c1.c.W Value[64 x 576]] }
00000068D9756870: {[rn3_11.c2.c.sc Value[64 x 1]] }
00000068D9756A50: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000068D9756AF0: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000068D9756E10: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000068D9756EB0: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000068D9756F50: {[rn3_11.c2.c.m Value[64 x 1]] }
00000068D9757590: {[rn3_14.c2.c.b Value[64 x 1]] }
00000068D9757A90: {[rn3_14.c2.W Value[64 x 576]] }
00000068D9757EF0: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000068D97580D0: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000068D97585D0: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000068D9758C10: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000068D9758F30: {[rn3_14.c1.c.W Value[64 x 576]] }
00000068D97591B0: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000068D97592F0: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000068D9759430: {[rn3_14.c2.c.m Value[64 x 1]] }
00000068D9759C50: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000068D9759CF0: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000068D9759ED0: {[rn2_3.c2.W Value[32 x 288]] }
00000068D9759F70: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000068D975A330: {[rn2_4.c2.c.m Value[32 x 1]] }
00000068D975A470: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000068D975A510: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000068D975A6F0: {[rn2_3.c1.c.W Value[32 x 288]] }
00000068D975A790: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000068D975A8D0: {[rn2_2.c2.c.m Value[32 x 1]] }
00000068D975AAB0: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000068D975AD30: {[rn2_4.c1.c.W Value[32 x 288]] }
00000068D975ADD0: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000068D975AFB0: {[rn2_4.c2.W Value[32 x 288]] }
00000068D975B230: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000068D975B370: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000068D975B690: {[rn2_4.c2.c.b Value[32 x 1]] }
00000068D975BA50: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000068D975BAF0: {[rn2_2.c2.W Value[32 x 288]] }
00000068D975BB90: {[rn2_3.c2.c.m Value[32 x 1]] }
00000068D975BCD0: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000068D975BD70: {[rn2_3.c2.c.b Value[32 x 1]] }
00000068D975BF50: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000068D975C270: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000068D975C450: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000068D975C4F0: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000068D975C630: {[rn2_5.c1.c.W Value[32 x 288]] }
00000068D975C770: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000068D975CC70: {[rn2_5.c2.c.b Value[32 x 1]] }
00000068D975CD10: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000068D975CEF0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000068D975D170: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000068D975D210: {[rn2_5.c2.c.m Value[32 x 1]] }
00000069477210A0: {[rn3_15.p Value[8 x 8 x 64 x *1]] }
0000006947721280: {[rn3_17.p Value[8 x 8 x 64 x *1]] }
0000006947721640: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947721780: {[rn3_15.c1.y Value[8 x 8 x 64 x *1]] }
0000006947721820: {[rn3_16.c2.c.c Value[8 x 8 x 64 x *1]] }
00000069477218C0: {[rn3_17.y Value[8 x 8 x 64 x *1]] }
0000006947721960: {[rn3_16.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0000006947721AA0: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947721B40: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947721C80: {[rn3_16.p Value[8 x 8 x 64 x *1]] }
0000006947721DC0: {[rn3_13.p Value[8 x 8 x 64 x *1]] }
0000006947721E60: {[rn3_13.y Value[8 x 8 x 64 x *1]] }
0000006947721F00: {[rn3_14.y Value[8 x 8 x 64 x *1]] }
0000006947721FA0: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947722040: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947722220: {[rn3_18.c2.c.c Value[8 x 8 x 64 x *1]] }
00000069477222C0: {[rn3_16.c1.y Value[8 x 8 x 64 x *1]] }
0000006947722360: {[rn3_14.p Value[8 x 8 x 64 x *1]] }
0000006947722400: {[rn3_14.c1.y Value[8 x 8 x 64 x *1]] }
0000006947722540: {[rn3_14.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947722720: {[rn3_17.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0000006947722900: {[rn3_15.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000069477229A0: {[rn3_17.c1.y Value[8 x 8 x 64 x *1]] }
0000006947722AE0: {[rn3_18.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0000006947722B80: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947722C20: {[rn3_18.c1.y Value[8 x 8 x 64 x *1]] }
0000006947722D60: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947722E00: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947722EA0: {[rn3_15.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947722F40: {[rn3_15.y Value[8 x 8 x 64 x *1]] }
00000069477231C0: {[rn3_16.y Value[8 x 8 x 64 x *1]] }
0000006947723260: {[rn3_14.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000069477233A0: {[rn3_17.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947723580: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *1]] }
00000069477236C0: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947724CA0: {[OutputNodes.t Value[10 x *1]] }
00000069477254C0: {[rn3_18.y Value[8 x 8 x 64 x *1]] }
0000006947725560: {[pool Value[1 x 1 x 64 x *1]] }
00000069477257E0: {[OutputNodes.z Value[10 x *1]] }
0000006947725A60: {[rn3_18.p Value[8 x 8 x 64 x *1]] }
000000694772D940: {[rn3_10.p Value[8 x 8 x 64 x *1]] }
000000694772D9E0: {[rn3_11.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000694772DA80: {[rn3_11.c2.c.c Value[8 x 8 x 64 x *1]] }
000000694772DBC0: {[rn3_8.p Value[8 x 8 x 64 x *1]] }
000000694772DE40: {[rn3_11.p Value[8 x 8 x 64 x *1]] }
000000694772DEE0: {[rn3_11.y Value[8 x 8 x 64 x *1]] }
000000694772DF80: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000694772E0C0: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *1]] }
000000694772E160: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000694772E200: {[rn3_8.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000694772E5C0: {[rn3_8.y Value[8 x 8 x 64 x *1]] }
000000694772E660: {[rn3_9.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000694772E840: {[rn3_7.c1.y Value[8 x 8 x 64 x *1]] }
000000694772E980: {[rn3_9.p Value[8 x 8 x 64 x *1]] }
000000694772EA20: {[rn3_10.c1.y Value[8 x 8 x 64 x *1]] }
000000694772EC00: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *1]] }
000000694772ECA0: {[rn3_8.c1.y Value[8 x 8 x 64 x *1]] }
000000694772EF20: {[rn3_9.c2.c.c Value[8 x 8 x 64 x *1]] }
000000694772F060: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *1]] }
000000694772F100: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *1]] }
000000694772F1A0: {[rn3_9.y Value[8 x 8 x 64 x *1]] }
000000694772F240: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000694772F2E0: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000694772F4C0: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000694772F740: {[rn3_7.y Value[8 x 8 x 64 x *1]] }
000000694772F7E0: {[rn3_9.c1.y Value[8 x 8 x 64 x *1]] }
000000694772F920: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000694772F9C0: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *1]] }
000000694772FBA0: {[rn3_10.y Value[8 x 8 x 64 x *1]] }
000000694772FC40: {[rn3_8.c2.c.c Value[8 x 8 x 64 x *1]] }
000000694772FCE0: {[rn3_7.p Value[8 x 8 x 64 x *1]] }
000000694772FD80: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *1]] }
000000694772FF60: {[rn3_7.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947730000: {[rn3_11.c1.y Value[8 x 8 x 64 x *1]] }
00000069477300A0: {[rn3_13.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000069477301E0: {[rn3_13.c1.y Value[8 x 8 x 64 x *1]] }
00000069477303C0: {[rn3_12.y Value[8 x 8 x 64 x *1]] }
0000006947730460: {[rn3_12.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0000006947730780: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000069477308C0: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947730A00: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0000006947730B40: {[rn3_12.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947730BE0: {[rn3_12.p Value[8 x 8 x 64 x *1]] }
0000006947730D20: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *1]] }
0000006947730E60: {[rn3_13.c2.c.c Value[8 x 8 x 64 x *1]] }
0000006947730F00: {[rn3_12.c1.y Value[8 x 8 x 64 x *1]] }
0000006950700160: {[rn1_13.c1.y Value[32 x 32 x 16 x *1]] }
0000006950700200: {[rn1_14.c1.y Value[32 x 32 x 16 x *1]] }
0000006950700480: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *1]] }
0000006950700660: {[rn1_16.p Value[32 x 32 x 16 x *1]] }
0000006950700700: {[rn1_16.y Value[32 x 32 x 16 x *1]] }
0000006950700840: {[rn1_17.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0000006950700AC0: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0000006950700B60: {[rn1_14.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0000006950700E80: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *1]] }
0000006950700FC0: {[rn1_16.c1.y Value[32 x 32 x 16 x *1]] }
0000006950701060: {[rn1_14.p Value[32 x 32 x 16 x *1]] }
0000006950701100: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000069507011A0: {[rn1_12.y Value[32 x 32 x 16 x *1]] }
0000006950701600: {[rn1_15.c1.y Value[32 x 32 x 16 x *1]] }
00000069507016A0: {[rn1_12.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950701740: {[rn1_13.y Value[32 x 32 x 16 x *1]] }
0000006950701880: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *1]] }
00000069507019C0: {[rn1_14.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950701C40: {[rn1_15.p Value[32 x 32 x 16 x *1]] }
0000006950701CE0: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0000006950701D80: {[rn1_12.p Value[32 x 32 x 16 x *1]] }
0000006950701E20: {[rn1_15.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0000006950701EC0: {[rn1_16.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0000006950701F60: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *1]] }
0000006950702000: {[rn1_13.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950702140: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *1]] }
0000006950702280: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0000006950702320: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000069507023C0: {[rn1_15.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950702460: {[rn1_15.y Value[32 x 32 x 16 x *1]] }
0000006950702500: {[rn1_13.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000069507026E0: {[rn1_16.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950702780: {[rn1_14.y Value[32 x 32 x 16 x *1]] }
0000006950702820: {[rn1_13.p Value[32 x 32 x 16 x *1]] }
00000069507028C0: {[rn1_18.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950702BE0: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
0000006950702C80: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950702E60: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
0000006950702F00: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950702FA0: {[rn1_18.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000069507030E0: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950703180: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *1]] }
0000006950703360: {[rn1_18.y Value[32 x 32 x 16 x *1]] }
0000006950703540: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
00000069507035E0: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
00000069507037C0: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
00000069507039A0: {[rn1_17.p Value[32 x 32 x 16 x *1]] }
0000006950703AE0: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950703B80: {[rn1_17.c2.c.c Value[32 x 32 x 16 x *1]] }
0000006950703C20: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950703CC0: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950703E00: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
0000006950703EA0: {[rn1_17.c1.y Value[32 x 32 x 16 x *1]] }
0000006950703F40: {[rn1_18.p Value[32 x 32 x 16 x *1]] }
0000006950703FE0: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0000006950704080: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950704120: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *1]] }
00000069507041C0: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
0000006950704300: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
0000006950704440: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
0000006950704800: {[rn1_18.c1.y Value[32 x 32 x 16 x *1]] }
00000069507048A0: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950704BC0: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950704C60: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950704D00: {[rn1_17.y Value[32 x 32 x 16 x *1]] }
0000006950704E40: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
0000006950704EE0: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950704F80: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
00000069507050C0: {[rn2_5.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950705160: {[rn2_4.p Value[16 x 16 x 32 x *1]] }
0000006950705200: {[rn2_5.p Value[16 x 16 x 32 x *1]] }
00000069507052A0: {[rn2_6.y Value[16 x 16 x 32 x *1]] }
0000006950705480: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950705660: {[rn2_8.c1.y Value[16 x 16 x 32 x *1]] }
0000006950705700: {[rn2_8.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950705840: {[rn2_7.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950705980: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950705B60: {[rn2_5.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950705C00: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950705CA0: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950705DE0: {[rn2_6.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000069507061A0: {[rn2_4.c1.y Value[16 x 16 x 32 x *1]] }
0000006950706240: {[rn2_7.p Value[16 x 16 x 32 x *1]] }
0000006950706380: {[rn2_4.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000069507064C0: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950706600: {[rn2_6.p Value[16 x 16 x 32 x *1]] }
00000069507066A0: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
0000006950706740: {[rn2_5.c1.y Value[16 x 16 x 32 x *1]] }
0000006950706920: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000069507069C0: {[rn2_5.y Value[16 x 16 x 32 x *1]] }
0000006950706C40: {[rn2_7.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950706CE0: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950706E20: {[rn2_6.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950706EC0: {[rn2_7.c1.y Value[16 x 16 x 32 x *1]] }
0000006950707000: {[rn2_4.y Value[16 x 16 x 32 x *1]] }
00000069507070A0: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *1]] }
00000069507071E0: {[rn2_8.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950707280: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950707320: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *1]] }
00000069507073C0: {[rn2_7.y Value[16 x 16 x 32 x *1]] }
0000006950707500: {[rn2_4.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950707780: {[rn2_6.c1.y Value[16 x 16 x 32 x *1]] }
00000069507078C0: {[rn2_9.p Value[16 x 16 x 32 x *1]] }
0000006950707AA0: {[rn2_11.p Value[16 x 16 x 32 x *1]] }
0000006950707BE0: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950707C80: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950707E60: {[rn2_13.c1.y Value[16 x 16 x 32 x *1]] }
0000006950707F00: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950707FA0: {[rn2_9.c1.y Value[16 x 16 x 32 x *1]] }
0000006950708040: {[rn2_11.y Value[16 x 16 x 32 x *1]] }
0000006950708180: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950708400: {[rn2_13.c2.c.c Value[16 x 16 x 32 x *1]] }
00000069507085E0: {[rn2_10.p Value[16 x 16 x 32 x *1]] }
0000006950708680: {[rn2_8.y Value[16 x 16 x 32 x *1]] }
0000006950708720: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950708860: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950708900: {[rn2_12.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950708AE0: {[rn2_10.c1.y Value[16 x 16 x 32 x *1]] }
0000006950708B80: {[rn2_8.p Value[16 x 16 x 32 x *1]] }
0000006950708CC0: {[rn2_11.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950708E00: {[rn2_12.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950708F40: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950709080: {[rn2_12.c1.y Value[16 x 16 x 32 x *1]] }
0000006950709120: {[rn2_9.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0000006950709300: {[rn2_11.c1.y Value[16 x 16 x 32 x *1]] }
00000069507094E0: {[rn2_9.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950709580: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0000006950709760: {[rn2_9.y Value[16 x 16 x 32 x *1]] }
0000006950709940: {[rn2_10.y Value[16 x 16 x 32 x *1]] }
00000069507099E0: {[rn2_12.y Value[16 x 16 x 32 x *1]] }
0000006950709A80: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950709B20: {[rn2_11.c2.c.c Value[16 x 16 x 32 x *1]] }
0000006950709BC0: {[rn2_12.p Value[16 x 16 x 32 x *1]] }
0000006950709DA0: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950709E40: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *1]] }
0000006950709EE0: {[rn2_13.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070A020: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070A160: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *1]] }
000000695070A200: {[rn2_16.y Value[16 x 16 x 32 x *1]] }
000000695070A3E0: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *1]] }
000000695070A520: {[rn2_17.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070A5C0: {[rn2_17.c2.c.c Value[16 x 16 x 32 x *1]] }
000000695070A660: {[rn2_16.c2.c.c Value[16 x 16 x 32 x *1]] }
000000695070A8E0: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *1]] }
000000695070A980: {[rn2_14.y Value[16 x 16 x 32 x *1]] }
000000695070AA20: {[rn2_15.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070AD40: {[rn2_16.p Value[16 x 16 x 32 x *1]] }
000000695070AE80: {[rn2_13.p Value[16 x 16 x 32 x *1]] }
000000695070B060: {[rn2_17.p Value[16 x 16 x 32 x *1]] }
000000695070B100: {[rn2_17.y Value[16 x 16 x 32 x *1]] }
000000695070B1A0: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070B240: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070B4C0: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070B600: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *1]] }
000000695070B6A0: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070B7E0: {[rn2_14.c2.c.c Value[16 x 16 x 32 x *1]] }
000000695070B880: {[rn2_18.c2.c.c Value[16 x 16 x 32 x *1]] }
000000695070B920: {[rn2_13.y Value[16 x 16 x 32 x *1]] }
000000695070B9C0: {[rn2_17.c1.y Value[16 x 16 x 32 x *1]] }
000000695070BA60: {[rn2_14.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070BB00: {[rn2_18.c1.y Value[16 x 16 x 32 x *1]] }
000000695070BCE0: {[rn2_14.c1.y Value[16 x 16 x 32 x *1]] }
000000695070BE20: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *1]] }
000000695070BEC0: {[rn2_16.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070BF60: {[rn2_14.p Value[16 x 16 x 32 x *1]] }
000000695070C1E0: {[rn2_15.p Value[16 x 16 x 32 x *1]] }
000000695070C280: {[rn2_15.c1.y Value[16 x 16 x 32 x *1]] }
000000695070C320: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *1]] }
000000695070C3C0: {[rn2_18.c1.c.c.c Value[16 x 16 x 32 x *1]] }
000000695070C5A0: {[rn2_15.c2.c.c Value[16 x 16 x 32 x *1]] }
000000695070C640: {[rn2_15.y Value[16 x 16 x 32 x *1]] }
000000695070C6E0: {[rn2_16.c1.y Value[16 x 16 x 32 x *1]] }
000000695070C8C0: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
000000695070CA00: {[rn2_18.y Value[16 x 16 x 32 x *1]] }
000000695070CC80: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
000000695070CD20: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070CDC0: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
000000695070CE60: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
000000695070CF00: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070CFA0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070D220: {[rn3_4.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070D2C0: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070D400: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
000000695070D4A0: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
000000695070D5E0: {[rn2_18.p Value[16 x 16 x 32 x *1]] }
000000695070D860: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070D900: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070DA40: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070DCC0: {[rn3_4.c1.y Value[8 x 8 x 64 x *1]] }
000000695070DF40: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070E120: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
000000695070E260: {[rn3_4.y Value[8 x 8 x 64 x *1]] }
000000695070E300: {[rn3_4.p Value[8 x 8 x 64 x *1]] }
000000695070E3A0: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
000000695070E4E0: {[rn3_5.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070E6C0: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070E760: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070E800: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070E940: {[rn3_4.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070EA80: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070EB20: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070ED00: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
000000695070EDA0: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
000000695070EE40: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070EEE0: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070F020: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
000000695070F0C0: {[rn3_5.c1.y Value[8 x 8 x 64 x *1]] }
000000695070F160: {[rn3_6.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070F200: {[rn3_6.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000695070F3E0: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070F480: {[rn3_5.p Value[8 x 8 x 64 x *1]] }
000000695070F5C0: {[rn3_5.c2.c.c Value[8 x 8 x 64 x *1]] }
000000695070F700: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *1]] }
000000695070F840: {[rn3_6.c1.y Value[8 x 8 x 64 x *1]] }
000000695070FA20: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *1]] }
000000695070FCA0: {[rn3_5.y Value[8 x 8 x 64 x *1]] }
000000695070FD40: {[rn3_6.p Value[8 x 8 x 64 x *1]] }
000000695070FDE0: {[rn3_6.y Value[8 x 8 x 64 x *1]] }
000000695070FE80: {[rn3_7.c1.c.c.c Value[8 x 8 x 64 x *1]] }
000000699A3A52B0: {[rn2_1.c1.c.W Value[32 x 144]] }
000000699A3A53F0: {[rn2_1.c_proj.sc Value[32 x 1]] }
000000699A3A57B0: {[rn1_9.c2.c.b Value[16 x 1]] }
000000699A3A5850: {[rn2_10.c1.c.c.b Value[32 x 1]] }
000000699A3A5C10: {[rn2_1.c2.c.sc Value[32 x 1]] }
000000699A3A5CB0: {[rn2_1.c2.c.isd Value[32 x 1]] }
000000699A3A5E90: {[rn2_1.c2.c.b Value[32 x 1]] }
000000699A3A6110: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
000000699A3A6390: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
000000699A3A6430: {[rn1_9.c2.c.isd Value[16 x 1]] }
000000699A3A66B0: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
000000699A3A67F0: {[rn1_9.c2.c.m Value[16 x 1]] }
000000699A3A6A70: {[rn2_1.c1.c.c.b Value[32 x 1]] }
000000699A3A6BB0: {[rn2_1.c1.c.c.m Value[32 x 1]] }
000000699A3A6C50: {[rn1_9.c2.W Value[16 x 144]] }
000000699A3A6CF0: {[rn1_9.c1.c.W Value[16 x 144]] }
000000699A3A6E30: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
000000699A3A7010: {[rn2_1.c_proj.b Value[32 x 1]] }
000000699A3A70B0: {[rn2_1.c_proj.isd Value[32 x 1]] }
000000699A3A7150: {[rn2_1.c_proj.m Value[32 x 1]] }
000000699A3A71F0: {[rn1_9.c1.c.c.m Value[16 x 1]] }
000000699A3A7290: {[rn2_1.c2.c.m Value[32 x 1]] }
000000699A3A7330: {[rn1_9.c2.c.sc Value[16 x 1]] }
000000699A3A7470: {[rn2_1.c2.W Value[32 x 288]] }
000000699A3A7A10: {[rn2_12.c1.c.c.b Value[32 x 1]] }
000000699A3A7AB0: {[rn2_10.c2.c.b Value[32 x 1]] }
000000699A3A7D30: {[rn2_11.c1.c.c.b Value[32 x 1]] }
000000699A3A7FB0: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
000000699A3A8050: {[rn2_11.c2.c.isd Value[32 x 1]] }
000000699A3A8190: {[rn2_10.c1.c.c.m Value[32 x 1]] }
000000699A3A8230: {[rn2_10.c1.c.W Value[32 x 288]] }
000000699A3A8410: {[rn2_11.c1.c.c.m Value[32 x 1]] }
000000699A3A8550: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
000000699A3A85F0: {[rn2_10.c2.W Value[32 x 288]] }
000000699A3A8730: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
000000699A3A8910: {[rn2_11.c2.c.b Value[32 x 1]] }
000000699A3A8A50: {[rn2_10.c2.c.m Value[32 x 1]] }
000000699A3A8AF0: {[rn2_11.c2.c.sc Value[32 x 1]] }
000000699A3A8E10: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
000000699A3A9090: {[rn2_12.c1.c.W Value[32 x 288]] }
000000699A3A9130: {[rn2_11.c2.c.m Value[32 x 1]] }
000000699A3A9270: {[rn2_12.c2.c.b Value[32 x 1]] }
000000699A3A94F0: {[rn2_11.c2.W Value[32 x 288]] }
000000699A3A98B0: {[rn2_10.c2.c.isd Value[32 x 1]] }
000000699A3A9A90: {[rn2_10.c2.c.sc Value[32 x 1]] }
000000699A3A9B30: {[rn2_11.c1.c.W Value[32 x 288]] }
000000699A3A9E50: {[rn2_12.c1.c.c.m Value[32 x 1]] }
000000699A3A9F90: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
000000699A3AA0D0: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
000000699A3AA210: {[rn2_14.c1.c.W Value[32 x 288]] }
000000699A3AA710: {[rn2_14.c2.c.isd Value[32 x 1]] }
000000699A3AA850: {[rn2_14.c2.c.m Value[32 x 1]] }
000000699A3AAC10: {[rn2_12.c2.c.sc Value[32 x 1]] }
000000699A3AAE90: {[rn2_14.c2.c.sc Value[32 x 1]] }
000000699A3AB070: {[rn2_13.c2.c.b Value[32 x 1]] }
000000699A3AB110: {[rn2_14.c1.c.c.m Value[32 x 1]] }
000000699A3AB1B0: {[rn2_12.c2.c.m Value[32 x 1]] }
000000699A3AB2F0: {[rn2_14.c2.c.b Value[32 x 1]] }
000000699A3AB610: {[rn2_14.c2.W Value[32 x 288]] }
000000699A3AB7F0: {[rn2_12.c2.W Value[32 x 288]] }
000000699A3ABA70: {[rn2_12.c2.c.isd Value[32 x 1]] }
000000699A3ABBB0: {[rn2_13.c2.c.m Value[32 x 1]] }
000000699A3ABD90: {[rn2_13.c2.W Value[32 x 288]] }
000000699A3ABF70: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
000000699A3AC010: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
000000699A3AC0B0: {[rn2_13.c2.c.sc Value[32 x 1]] }
000000699A3AC1F0: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
000000699A3AC510: {[rn2_14.c1.c.c.b Value[32 x 1]] }
000000699A3AC5B0: {[rn2_13.c1.c.c.b Value[32 x 1]] }
000000699A3AC650: {[rn2_13.c1.c.W Value[32 x 288]] }
000000699A3AC790: {[rn2_13.c2.c.isd Value[32 x 1]] }
000000699A3AC830: {[rn2_13.c1.c.c.m Value[32 x 1]] }
000000699A3ACA10: {[rn2_17.c1.c.c.b Value[32 x 1]] }
000000699A3ACDD0: {[rn2_15.c1.c.c.b Value[32 x 1]] }
000000699A3ACE70: {[rn2_15.c1.c.c.m Value[32 x 1]] }
000000699A3ACF10: {[rn2_15.c2.c.b Value[32 x 1]] }
000000699A3AD0F0: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
000000699A3AD4B0: {[rn2_16.c1.c.W Value[32 x 288]] }
000000699A3AD550: {[rn2_15.c1.c.W Value[32 x 288]] }
000000699A3AD5F0: {[rn2_16.c2.c.b Value[32 x 1]] }
000000699A3ADA50: {[rn2_16.c2.c.isd Value[32 x 1]] }
000000699A3ADAF0: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
000000699A3ADC30: {[rn2_16.c1.c.c.m Value[32 x 1]] }
000000699A3ADD70: {[rn2_17.c1.c.c.m Value[32 x 1]] }
000000699A3ADEB0: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
000000699A3AE090: {[rn2_15.c2.c.isd Value[32 x 1]] }
000000699A3AE130: {[rn2_16.c2.W Value[32 x 288]] }
000000699A3AE3B0: {[rn2_15.c2.c.sc Value[32 x 1]] }
000000699A3AE450: {[rn2_15.c2.c.m Value[32 x 1]] }
000000699A3AE4F0: {[rn2_16.c1.c.c.b Value[32 x 1]] }
000000699A3AE8B0: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
000000699A3AEA90: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
000000699A3AEB30: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
000000699A3AEC70: {[rn2_16.c2.c.sc Value[32 x 1]] }
000000699A3AEEF0: {[rn2_15.c2.W Value[32 x 288]] }
000000699A3AEF90: {[rn2_16.c2.c.m Value[32 x 1]] }
000000699A3AF170: {[rn2_17.c2.c.sc Value[32 x 1]] }
000000699A3AF350: {[rn2_17.c1.c.W Value[32 x 288]] }
000000699A3AF490: {[rn2_18.c1.c.W Value[32 x 288]] }
000000699A3AF8F0: {[rn2_17.c2.c.b Value[32 x 1]] }
000000699A3AF990: {[rn2_18.c1.c.c.b Value[32 x 1]] }
000000699A3AFAD0: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
000000699A3AFB70: {[rn2_18.c2.c.isd Value[32 x 1]] }
000000699A3AFCB0: {[rn2_1_Wproj Value[32 x 16]] }
000000699A3B0110: {[rn2_18.c2.c.b Value[32 x 1]] }
000000699A3B01B0: {[rn2_18.c2.c.sc Value[32 x 1]] }
000000699A3B02F0: {[rn2_18.c2.W Value[32 x 288]] }
000000699A3B0390: {[rn2_17.c2.c.isd Value[32 x 1]] }
000000699A3B0430: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
000000699A3B04D0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
000000699A3B06B0: {[rn2_18.c2.c.m Value[32 x 1]] }
000000699A3B0750: {[rn2_2.c1.c.c.b Value[32 x 1]] }
000000699A3B0930: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
000000699A3B0B10: {[rn2_17.c2.W Value[32 x 288]] }
000000699A3B0C50: {[rn2_2.c1.c.W Value[32 x 288]] }
000000699A3B0D90: {[rn2_2.c2.c.b Value[32 x 1]] }
000000699A3B1470: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
000000699A3B16F0: {[rn2_17.c2.c.m Value[32 x 1]] }
000000699A3B1790: {[rn2_18.c1.c.c.m Value[32 x 1]] }
000000699A3B1A10: {[labels Value[10 x *1]] }
000000699A3B1AB0: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
000000699A3B1B50: {[rn1_1.c2.c.sc Value[16 x 1]] }
000000699A3B1E70: {[rn1_1.c2.W Value[16 x 144]] }
000000699A3B1F10: {[conv1.c.W Value[16 x 27]] }
000000699A3B2190: {[rn1_1.c2.c.isd Value[16 x 1]] }
000000699A3B2410: {[rn1_1.c1.c.c.b Value[16 x 1]] }
000000699A3B27D0: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
000000699A3B2A50: {[conv1.c.c.sc Value[16 x 1]] }
000000699A3B2C30: {[conv1.c.c.b Value[16 x 1]] }
000000699A3B2F50: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
000000699A3B3090: {[rn1_1.c1.c.c.m Value[16 x 1]] }
000000699A3B3270: {[rn1_1.c1.c.W Value[16 x 144]] }
000000699A3B34F0: {[features Value[32 x 32 x 3 x *1]] }
000000699A3B36D0: {[rn1_1.c2.c.m Value[16 x 1]] }
000000699A3B3950: {[rn1_10.c1.c.c.b Value[16 x 1]] }
000000699A3B39F0: {[conv1.c.c.m Value[16 x 1]] }
000000699A3B3A90: {[OutputNodes.b Value[10]] }
000000699A3B3BD0: {[rn1_1.c2.c.b Value[16 x 1]] }
000000699A3B3E50: {[conv1.c.c.isd Value[16 x 1]] }
000000699A3B4170: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
000000699A3B4210: {[rn1_10.c2.W Value[16 x 144]] }
000000699A3B45D0: {[rn1_11.c1.c.W Value[16 x 144]] }
000000699A3B48F0: {[rn1_11.c2.W Value[16 x 144]] }
000000699A3B4AD0: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
000000699A3B4C10: {[rn1_12.c1.c.c.b Value[16 x 1]] }
000000699A3B4CB0: {[rn1_11.c1.c.c.b Value[16 x 1]] }
000000699A3B4D50: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
000000699A3B4F30: {[rn1_11.c2.c.isd Value[16 x 1]] }
000000699A3B4FD0: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
000000699A3B5430: {[rn1_11.c2.c.sc Value[16 x 1]] }
000000699A3B5570: {[rn1_10.c2.c.m Value[16 x 1]] }
000000699A3B56B0: {[rn1_11.c2.c.b Value[16 x 1]] }
000000699A3B5750: {[rn1_10.c2.c.b Value[16 x 1]] }
000000699A3B5890: {[rn1_10.c2.c.sc Value[16 x 1]] }
000000699A3B5930: {[rn1_10.c1.c.W Value[16 x 144]] }
000000699A3B5BB0: {[rn1_11.c2.c.m Value[16 x 1]] }
000000699A3B5E30: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
000000699A3B5ED0: {[rn1_12.c1.c.c.m Value[16 x 1]] }
000000699A3B5F70: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
000000699A3B6150: {[rn1_10.c2.c.isd Value[16 x 1]] }
000000699A3B63D0: {[rn1_11.c1.c.c.m Value[16 x 1]] }
000000699A3B6470: {[rn1_12.c1.c.W Value[16 x 144]] }
000000699A3B6790: {[rn1_10.c1.c.c.m Value[16 x 1]] }
000000699A3B68D0: {[rn1_13.c2.c.b Value[16 x 1]] }
000000699A3B6A10: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
000000699A3B6AB0: {[rn1_14.c1.c.c.m Value[16 x 1]] }
000000699A3B6D30: {[rn1_12.c2.c.m Value[16 x 1]] }
000000699A3B6DD0: {[rn1_12.c2.W Value[16 x 144]] }
000000699A3B70F0: {[rn1_13.c2.W Value[16 x 144]] }
000000699A3B7370: {[rn1_13.c2.c.isd Value[16 x 1]] }
000000699A3B7410: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
000000699A3B7690: {[rn1_13.c1.c.c.m Value[16 x 1]] }
000000699A3B7870: {[rn1_14.c1.c.c.b Value[16 x 1]] }
000000699A3B7AF0: {[rn1_12.c2.c.b Value[16 x 1]] }
000000699A3B7C30: {[rn1_13.c1.c.W Value[16 x 144]] }
000000699A3B7EB0: {[rn1_12.c2.c.isd Value[16 x 1]] }
000000699A3B8130: {[rn1_12.c2.c.sc Value[16 x 1]] }
000000699A3B8270: {[rn1_13.c2.c.m Value[16 x 1]] }
000000699A3B84F0: {[rn1_14.c1.c.W Value[16 x 144]] }
000000699A3B8630: {[rn1_14.c2.c.b Value[16 x 1]] }
000000699A3B86D0: {[rn1_14.c2.c.m Value[16 x 1]] }
000000699A3B89F0: {[rn1_14.c2.c.sc Value[16 x 1]] }
000000699A3B8A90: {[rn1_13.c1.c.c.b Value[16 x 1]] }
000000699A3B8BD0: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
000000699A3B8D10: {[rn1_13.c2.c.sc Value[16 x 1]] }
000000699A3B8DB0: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
000000699A3B8F90: {[rn1_14.c2.c.isd Value[16 x 1]] }
000000699A3B9170: {[rn1_16.c2.c.isd Value[16 x 1]] }
000000699A3B9210: {[rn1_15.c2.c.b Value[16 x 1]] }
000000699A3B92B0: {[rn1_16.c2.c.sc Value[16 x 1]] }
000000699A3B9350: {[rn1_14.c2.W Value[16 x 144]] }
000000699A3B9490: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
000000699A3B95D0: {[rn1_15.c2.c.isd Value[16 x 1]] }
000000699A3B9A30: {[rn1_15.c1.c.W Value[16 x 144]] }
000000699A3B9B70: {[rn1_16.c2.W Value[16 x 144]] }
000000699A3B9DF0: {[rn1_16.c1.c.c.m Value[16 x 1]] }
000000699A3B9E90: {[rn1_16.c2.c.b Value[16 x 1]] }
000000699A3B9F30: {[rn1_17.c1.c.c.b Value[16 x 1]] }
000000699A3BA430: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
000000699A3BA4D0: {[rn1_16.c2.c.m Value[16 x 1]] }
000000699A3BA610: {[rn1_17.c1.c.c.m Value[16 x 1]] }
000000699A3BA6B0: {[rn1_15.c1.c.c.b Value[16 x 1]] }
000000699A3BA750: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
000000699A3BA7F0: {[rn1_15.c2.W Value[16 x 144]] }
000000699A3BABB0: {[rn1_15.c1.c.c.m Value[16 x 1]] }
000000699A3BACF0: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
000000699A3BAD90: {[rn1_15.c2.c.m Value[16 x 1]] }
000000699A3BAE30: {[rn1_16.c1.c.W Value[16 x 144]] }
000000699A3BAED0: {[rn1_16.c1.c.c.b Value[16 x 1]] }
000000699A3BB330: {[rn1_15.c2.c.sc Value[16 x 1]] }
000000699A3BB790: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
000000699A3BB970: {[rn1_17.c2.c.isd Value[16 x 1]] }
000000699A3BBA10: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
000000699A3BBBF0: {[rn1_18.c1.c.c.m Value[16 x 1]] }
000000699A3BBD30: {[rn1_18.c1.c.W Value[16 x 144]] }
000000699A3BBF10: {[rn1_17.c2.c.b Value[16 x 1]] }
000000699A3BC0F0: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
000000699A3BC550: {[rn1_18.c2.c.isd Value[16 x 1]] }
000000699A3BC5F0: {[rn1_18.c2.W Value[16 x 144]] }
000000699A3BC870: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
000000699A3BCB90: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
000000699A3BCD70: {[rn1_18.c2.c.sc Value[16 x 1]] }
000000699A3BCFF0: {[rn1_17.c2.c.sc Value[16 x 1]] }
000000699A3BD3B0: {[rn1_18.c2.c.m Value[16 x 1]] }
000000699A3BD450: {[rn1_17.c1.c.W Value[16 x 144]] }
000000699A3BD4F0: {[rn1_2.c1.c.c.m Value[16 x 1]] }
000000699A3BD590: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
000000699A3BD630: {[rn1_18.c2.c.b Value[16 x 1]] }
000000699A3BD770: {[rn1_2.c1.c.W Value[16 x 144]] }
000000699A3BD8B0: {[rn1_17.c2.W Value[16 x 144]] }
000000699A3BDB30: {[rn1_2.c2.c.b Value[16 x 1]] }
000000699A3BDD10: {[rn1_2.c1.c.c.b Value[16 x 1]] }
000000699A3BDDB0: {[rn1_18.c1.c.c.b Value[16 x 1]] }
000000699A3BE030: {[rn1_17.c2.c.m Value[16 x 1]] }
000000699A3BE2B0: {[rn1_3.c2.c.m Value[16 x 1]] }
000000699A3BE3F0: {[rn1_4.c1.c.c.m Value[16 x 1]] }
000000699A3BE530: {[rn1_4.c1.c.W Value[16 x 144]] }
000000699A3BE5D0: {[rn1_3.c1.c.c.b Value[16 x 1]] }
000000699A3BE710: {[rn1_4.c2.c.isd Value[16 x 1]] }
000000699A3BEAD0: {[rn1_3.c2.c.sc Value[16 x 1]] }
000000699A3BEB70: {[rn1_2.c2.c.sc Value[16 x 1]] }
000000699A3BEC10: {[rn1_3.c1.c.c.m Value[16 x 1]] }
000000699A3BED50: {[rn1_2.c2.W Value[16 x 144]] }
000000699A3BEDF0: {[rn1_2.c2.c.m Value[16 x 1]] }
000000699A3BEE90: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
000000699A3BEFD0: {[rn1_3.c1.c.W Value[16 x 144]] }
000000699A3BF070: {[rn1_2.c2.c.isd Value[16 x 1]] }
000000699A3BF2F0: {[rn1_3.c2.W Value[16 x 144]] }
000000699A3BF4D0: {[rn1_4.c1.c.c.b Value[16 x 1]] }
000000699A3BF570: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
000000699A3BF930: {[rn1_4.c2.c.b Value[16 x 1]] }
000000699A3BFC50: {[rn1_4.c2.c.m Value[16 x 1]] }
000000699A3BFE30: {[rn1_4.c2.W Value[16 x 144]] }
000000699A3BFED0: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
000000699A3BFF70: {[rn1_3.c2.c.b Value[16 x 1]] }
000000699A3C0290: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
000000699A3C0330: {[rn1_4.c2.c.sc Value[16 x 1]] }
000000699A3C0470: {[rn1_3.c2.c.isd Value[16 x 1]] }
000000699A3C08D0: {[rn1_5.c2.c.b Value[16 x 1]] }
000000699A3C0B50: {[rn1_5.c2.c.isd Value[16 x 1]] }
000000699A3C0C90: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
000000699A3C0DD0: {[rn1_5.c2.W Value[16 x 144]] }
000000699A3C1050: {[rn1_7.c1.c.c.m Value[16 x 1]] }
000000699A3C1230: {[rn1_5.c2.c.sc Value[16 x 1]] }
000000699A3C1370: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
000000699A3C15F0: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
000000699A3C1A50: {[rn1_6.c1.c.c.b Value[16 x 1]] }
000000699A3C1AF0: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
000000699A3C1B90: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
000000699A3C1CD0: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
000000699A3C1D70: {[rn1_6.c2.c.b Value[16 x 1]] }
000000699A3C1EB0: {[rn1_5.c1.c.c.m Value[16 x 1]] }
000000699A3C1FF0: {[rn1_6.c2.c.isd Value[16 x 1]] }
000000699A3C2130: {[rn1_6.c2.c.m Value[16 x 1]] }
000000699A3C23B0: {[rn1_6.c2.c.sc Value[16 x 1]] }
000000699A3C24F0: {[rn1_6.c2.W Value[16 x 144]] }
000000699A3C2590: {[rn1_6.c1.c.W Value[16 x 144]] }
000000699A3C2950: {[rn1_5.c2.c.m Value[16 x 1]] }
000000699A3C2A90: {[rn1_7.c1.c.c.b Value[16 x 1]] }
000000699A3C2BD0: {[rn1_5.c1.c.c.b Value[16 x 1]] }
000000699A3C2C70: {[rn1_5.c1.c.W Value[16 x 144]] }
000000699A3C2D10: {[rn1_6.c1.c.c.m Value[16 x 1]] }
000000699A3C3210: {[rn1_8.c2.W Value[16 x 144]] }
000000699A3C3350: {[rn1_7.c2.c.sc Value[16 x 1]] }
000000699A3C3490: {[rn1_7.c2.c.b Value[16 x 1]] }
000000699A3C3530: {[rn1_9.c1.c.c.b Value[16 x 1]] }
000000699A3C3710: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
000000699A3C3B70: {[rn1_7.c1.c.W Value[16 x 144]] }
000000699A3C3DF0: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
000000699A3C3E90: {[rn1_8.c1.c.W Value[16 x 144]] }
000000699A3C3F30: {[rn1_7.c2.c.isd Value[16 x 1]] }
000000699A3C3FD0: {[rn1_8.c2.c.b Value[16 x 1]] }
000000699A3C4110: {[rn1_8.c2.c.m Value[16 x 1]] }
000000699A3C4610: {[rn1_8.c1.c.c.m Value[16 x 1]] }
000000699A3C4750: {[rn1_8.c1.c.c.b Value[16 x 1]] }
000000699A3C47F0: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
000000699A3C49D0: {[rn1_7.c2.c.m Value[16 x 1]] }
000000699A3C4BB0: {[rn1_8.c2.c.isd Value[16 x 1]] }
000000699A3C4CF0: {[rn1_7.c2.W Value[16 x 144]] }
000000699A3C4E30: {[rn1_8.c2.c.sc Value[16 x 1]] }

05/03/2016 14:07:17: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30259599 * 10000; perplexity = 10.00010894

05/03/2016 14:07:18: Action "test" complete.

05/03/2016 14:07:18: __COMPLETED__