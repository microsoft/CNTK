CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU X5680 @ 3.33GHz
    Hardware threads: 12
    Total Memory: 33537232 kB
-------------------------------------------------------------------
=== Running /cygdrive/d/GitHub/CNTK/x64/release/cntk.exe configFile=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal/05_ConvLocal_ndl_deprecated.cntk currentDirectory=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10 RunDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu DataDir=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10 ConfigDir=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal OutputDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
CNTK 1.7.1 (chazhang/image_examples e04f12, Sep 27 2016 08:34:40) on CHAZHANG at 2016/09/29 21:58:43

D:\GitHub\CNTK\x64\release\cntk.exe  configFile=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal/05_ConvLocal_ndl_deprecated.cntk  currentDirectory=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10  RunDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu  DataDir=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10  ConfigDir=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal  OutputDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-
Changed current directory to D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10
09/29/2016 21:58:44: Redirecting stderr to file -_Train_Test.log
09/29/2016 21:58:44: -------------------------------------------------------------------
09/29/2016 21:58:44: Build info: 

09/29/2016 21:58:44: 		Built time: Sep 27 2016 08:34:40
09/29/2016 21:58:44: 		Last modified date: Mon Sep 26 13:22:01 2016
09/29/2016 21:58:44: 		Build type: Release
09/29/2016 21:58:44: 		Build target: GPU
09/29/2016 21:58:44: 		Math lib: mkl
09/29/2016 21:58:44: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
09/29/2016 21:58:44: 		CUB_PATH: C:\src\cub-1.4.1
09/29/2016 21:58:44: 		CUDNN_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
09/29/2016 21:58:44: 		Build Branch: chazhang/image_examples
09/29/2016 21:58:44: 		Build SHA1: e04f125298711fdaab8c60371888c62896780ffe (modified)
09/29/2016 21:58:44: 		Built by chazhang on CHAZHANG
09/29/2016 21:58:44: 		Build Path: D:\GitHub\CNTK\Source\CNTK\
09/29/2016 21:58:44: -------------------------------------------------------------------
09/29/2016 21:58:44: -------------------------------------------------------------------
09/29/2016 21:58:44: GPU info:

09/29/2016 21:58:44: 		Device[0]: cores = 2688; computeCapability = 3.5; type = "GeForce GTX TITAN"; memory = 6144 MB
09/29/2016 21:58:44: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 05_ConvLocal_ndl_deprecated.cntk:command=Train:Test
configparameters: 05_ConvLocal_ndl_deprecated.cntk:ConfigDir=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal
configparameters: 05_ConvLocal_ndl_deprecated.cntk:currentDirectory=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 05_ConvLocal_ndl_deprecated.cntk:DataDir=D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 05_ConvLocal_ndl_deprecated.cntk:deviceId=0
configparameters: 05_ConvLocal_ndl_deprecated.cntk:imageLayout=cudnn
configparameters: 05_ConvLocal_ndl_deprecated.cntk:ModelDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models
configparameters: 05_ConvLocal_ndl_deprecated.cntk:modelPath=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
configparameters: 05_ConvLocal_ndl_deprecated.cntk:ndlMacros=D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal/../Macros.ndl
configparameters: 05_ConvLocal_ndl_deprecated.cntk:numMBsToShowResult=50
configparameters: 05_ConvLocal_ndl_deprecated.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal_ndl_deprecated.cntk:precision=float
configparameters: 05_ConvLocal_ndl_deprecated.cntk:RootDir=.
configparameters: 05_ConvLocal_ndl_deprecated.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal_ndl_deprecated.cntk:stderr=-
configparameters: 05_ConvLocal_ndl_deprecated.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 05_ConvLocal_ndl_deprecated.cntk:timestamping=true
configparameters: 05_ConvLocal_ndl_deprecated.cntk:traceLevel=1
configparameters: 05_ConvLocal_ndl_deprecated.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "D:\GitHub\CNTK\Tests\EndToEndTests\Examples\Image\Deprecated\CIFAR-10\05_ConvLocal/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "D:\GitHub\CNTK\Examples\Image\Miscellaneous\CIFAR-10/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

09/29/2016 21:58:44: Commands: Train Test
09/29/2016 21:58:44: precision = "float"

09/29/2016 21:58:44: ##############################################################################
09/29/2016 21:58:44: #                                                                            #
09/29/2016 21:58:44: # Train command (train action)                                               #
09/29/2016 21:58:44: #                                                                            #
09/29/2016 21:58:44: ##############################################################################

09/29/2016 21:58:44: 
Creating virgin network.
NDLBuilder Using GPU 0
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
09/29/2016 21:58:46: 
Model has 32 nodes. Using GPU 0.

09/29/2016 21:58:46: Training criterion:   CE = CrossEntropyWithSoftmax
09/29/2016 21:58:46: Evaluation criterion: Err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 59 matrices, 35 are shared as 16, and 24 are not shared.

	{ conv4.W : [1568 x 576] (gradient)
	  conv4.p : [7 x 7 x 32 x *] }
	{ OutputNodes.W : [10 x 7 x 7 x 32] (gradient)
	  OutputNodes.z : [10 x *] (gradient) }
	{ conv4.b : [1 x 1 x 32] (gradient)
	  conv4.y : [7 x 7 x 32 x *] (gradient) }
	{ conv1.c : [32 x 32 x 64 x *] (gradient)
	  conv1.y : [32 x 32 x 64 x *] }
	{ conv3.c : [7 x 7 x 64 x *] (gradient)
	  conv3.y : [7 x 7 x 64 x *] }
	{ conv4.c : [7 x 7 x 32 x *] (gradient)
	  conv4.y : [7 x 7 x 32 x *] }
	{ conv2.W : [64 x 1600] (gradient)
	  conv2.p : [15 x 15 x 64 x *] }
	{ conv2.p : [15 x 15 x 64 x *] (gradient)
	  pool1 : [15 x 15 x 64 x *] (gradient)
	  pool2 : [7 x 7 x 64 x *] }
	{ conv3.W : [3136 x 576] (gradient)
	  conv3.p : [7 x 7 x 64 x *] }
	{ conv2.b : [1 x 1 x 64] (gradient)
	  conv2.y : [15 x 15 x 64 x *] (gradient) }
	{ OutputNodes.t : [10 x *]
	  conv3.b : [1 x 1 x 64] (gradient)
	  conv3.y : [7 x 7 x 64 x *] (gradient)
	  conv4.p : [7 x 7 x 32 x *] (gradient) }
	{ conv2.c : [15 x 15 x 64 x *] (gradient)
	  conv2.y : [15 x 15 x 64 x *] }
	{ conv1.p : [32 x 32 x 64 x *] (gradient)
	  pool1 : [15 x 15 x 64 x *] }
	{ conv3.p : [7 x 7 x 64 x *] (gradient)
	  pool2 : [7 x 7 x 64 x *] (gradient) }
	{ conv1.b : [1 x 1 x 64] (gradient)
	  conv1.y : [32 x 32 x 64 x *] (gradient) }
	{ conv1.W : [64 x 75] (gradient)
	  conv1.p : [32 x 32 x 64 x *] }


09/29/2016 21:58:46: Training 2832618 parameters in 10 out of 10 parameter tensors and 27 nodes with gradient:

09/29/2016 21:58:46: 	Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 7 x 7 x 32]
09/29/2016 21:58:46: 	Node 'OutputNodes.b' (LearnableParameter operation) : [10]
09/29/2016 21:58:46: 	Node 'conv1.W' (LearnableParameter operation) : [64 x 75]
09/29/2016 21:58:46: 	Node 'conv1.b' (LearnableParameter operation) : [1 x 1 x 64]
09/29/2016 21:58:46: 	Node 'conv2.W' (LearnableParameter operation) : [64 x 1600]
09/29/2016 21:58:46: 	Node 'conv2.b' (LearnableParameter operation) : [1 x 1 x 64]
09/29/2016 21:58:46: 	Node 'conv3.W' (LearnableParameter operation) : [3136 x 576]
09/29/2016 21:58:46: 	Node 'conv3.b' (LearnableParameter operation) : [1 x 1 x 64]
09/29/2016 21:58:46: 	Node 'conv4.W' (LearnableParameter operation) : [1568 x 576]
09/29/2016 21:58:46: 	Node 'conv4.b' (LearnableParameter operation) : [1 x 1 x 32]

09/29/2016 21:58:46: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

09/29/2016 21:58:46: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

09/29/2016 21:58:46: Starting minibatch loop.
09/29/2016 21:58:52: Finished Epoch[ 1 of 5]: [Training] CE = 2.30256531 * 100; Err = 0.86000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00015625; epochTime=5.72042s
09/29/2016 21:58:52: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.1'

09/29/2016 21:58:52: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

09/29/2016 21:58:52: Starting minibatch loop.
09/29/2016 21:58:52: Finished Epoch[ 2 of 5]: [Training] CE = 2.30260468 * 100; Err = 0.92000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00015625; epochTime=0.244399s
09/29/2016 21:58:52: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.2'

09/29/2016 21:58:53: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

09/29/2016 21:58:53: Starting minibatch loop.
09/29/2016 21:58:53: Finished Epoch[ 3 of 5]: [Training] CE = 2.30260681 * 100; Err = 0.86000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00015625; epochTime=0.241057s
09/29/2016 21:58:53: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.3'

09/29/2016 21:58:53: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

09/29/2016 21:58:53: Starting minibatch loop.
09/29/2016 21:58:53: Finished Epoch[ 4 of 5]: [Training] CE = 2.30252670 * 100; Err = 0.85000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00015625; epochTime=0.227001s
09/29/2016 21:58:54: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.4'

09/29/2016 21:58:54: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

09/29/2016 21:58:54: Starting minibatch loop.
09/29/2016 21:58:54: Finished Epoch[ 5 of 5]: [Training] CE = 2.30253128 * 100; Err = 0.81000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00015625; epochTime=0.214621s
09/29/2016 21:58:54: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160929135842.395780\Examples\Image\Deprecated\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal'

09/29/2016 21:58:54: Action "train" complete.


09/29/2016 21:58:54: ##############################################################################
09/29/2016 21:58:54: #                                                                            #
09/29/2016 21:58:54: # Test command (test action)                                                 #
09/29/2016 21:58:54: #                                                                            #
09/29/2016 21:58:54: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ClassificationError()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *1], [1 x 1 x 32] -> [7 x 7 x 32 x *1]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ClassificationError (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.

conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 32 matrices, 0 are shared as 0, and 32 are not shared.


09/29/2016 21:58:56: Minibatch[1-50]: Err = 0.88250000 * 800; CE = 2.30254094 * 800
09/29/2016 21:58:56: Minibatch[51-100]: Err = 0.89500000 * 800; CE = 2.30258362 * 800
09/29/2016 21:58:56: Minibatch[101-150]: Err = 0.87750000 * 800; CE = 2.30251921 * 800
09/29/2016 21:58:57: Minibatch[151-200]: Err = 0.88875000 * 800; CE = 2.30253799 * 800
09/29/2016 21:58:57: Minibatch[201-250]: Err = 0.89625000 * 800; CE = 2.30253720 * 800
09/29/2016 21:58:58: Minibatch[251-300]: Err = 0.88375000 * 800; CE = 2.30254128 * 800
09/29/2016 21:58:58: Minibatch[301-350]: Err = 0.86875000 * 800; CE = 2.30249577 * 800
09/29/2016 21:58:59: Minibatch[351-400]: Err = 0.88375000 * 800; CE = 2.30248295 * 800
09/29/2016 21:58:59: Minibatch[401-450]: Err = 0.87125000 * 800; CE = 2.30254564 * 800
09/29/2016 21:58:59: Minibatch[451-500]: Err = 0.88250000 * 800; CE = 2.30252639 * 800
09/29/2016 21:59:00: Minibatch[501-550]: Err = 0.91000000 * 800; CE = 2.30260751 * 800
09/29/2016 21:59:00: Minibatch[551-600]: Err = 0.87500000 * 800; CE = 2.30251630 * 800
09/29/2016 21:59:00: Minibatch[601-625]: Err = 0.88000000 * 400; CE = 2.30254742 * 400
09/29/2016 21:59:00: Final Results: Minibatch[1-625]: Err = 0.88440000 * 10000; CE = 2.30253668 * 10000; perplexity = 9.99951589

09/29/2016 21:59:00: Action "test" complete.

09/29/2016 21:59:00: __COMPLETED__