=== Running /cygdrive/c/R/CNTK3/x64/release/cntk.exe configFile=C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk currentDirectory=C:\R\CNTK3\Examples\Image\MNIST\Data RunDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DataDir=C:\R\CNTK3\Examples\Image\MNIST\Data ConfigDir=C:\R\CNTK3\Examples\Image\MNIST\Config OutputDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[reader=[randomize=none]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Apr  7 2016 15:32:16
		Last modified date: Thu Apr  7 09:19:53 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\R\cub-1.4.1
		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
		Build Branch: mahilleb/MNISTLinux
		Build SHA1: 5161c21b466987a144f96bad84f8763b08b05c40
		Built by mahilleb on mahilleb57
		Build Path: C:\R\CNTK3\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\R\CNTK3\Examples\Image\MNIST\Data
04/07/2016 14:51:04: -------------------------------------------------------------------
04/07/2016 14:51:04: Build info: 

04/07/2016 14:51:04: 		Built time: Apr  7 2016 15:32:16
04/07/2016 14:51:04: 		Last modified date: Thu Apr  7 09:19:53 2016
04/07/2016 14:51:04: 		Build type: Release
04/07/2016 14:51:04: 		Build target: GPU
04/07/2016 14:51:04: 		With 1bit-SGD: yes
04/07/2016 14:51:04: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
04/07/2016 14:51:04: 		CUB_PATH: C:\R\cub-1.4.1
04/07/2016 14:51:04: 		CUDNN_PATH: C:\R\cudnn-7.0-win-x64-v4.0-prod\cuda
04/07/2016 14:51:04: 		Build Branch: mahilleb/MNISTLinux
04/07/2016 14:51:04: 		Build SHA1: 5161c21b466987a144f96bad84f8763b08b05c40
04/07/2016 14:51:04: 		Built by mahilleb on mahilleb57
04/07/2016 14:51:04: 		Build Path: C:\R\CNTK3\Source\CNTK\
04/07/2016 14:51:04: -------------------------------------------------------------------

04/07/2016 14:51:04: Running on mahilleb57 at 2016/04/07 14:51:04
04/07/2016 14:51:04: Command line: 
C:\R\CNTK3\x64\release\cntk.exe  configFile=C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk  currentDirectory=C:\R\CNTK3\Examples\Image\MNIST\Data  RunDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DataDir=C:\R\CNTK3\Examples\Image\MNIST\Data  ConfigDir=C:\R\CNTK3\Examples\Image\MNIST\Config  OutputDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[reader=[randomize=none]]  imageLayout="cudnn"



04/07/2016 14:51:04: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/07/2016 14:51:04: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Train-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=$ModelDir$/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/Test-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "$DataDir$/labelsmap.txt"
        ]
    ]
]
currentDirectory=C:\R\CNTK3\Examples\Image\MNIST\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=C:\R\CNTK3\Examples\Image\MNIST\Data
ConfigDir=C:\R\CNTK3\Examples\Image\MNIST\Config
OutputDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[reader=[randomize=none]]
imageLayout="cudnn"

04/07/2016 14:51:04: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/07/2016 14:51:04: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/07/2016 14:51:04: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
ndlMacros = "C:\R\CNTK3\Examples\Image\MNIST\Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\R\CNTK3\Examples\Image\MNIST\Data/Train-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\R\CNTK3\Examples\Image\MNIST\Data/labelsmap.txt"
        ]
    ]    
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\R\CNTK3\Examples\Image\MNIST\Data/Test-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\R\CNTK3\Examples\Image\MNIST\Data/labelsmap.txt"
        ]
    ]
]
currentDirectory=C:\R\CNTK3\Examples\Image\MNIST\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=C:\R\CNTK3\Examples\Image\MNIST\Data
ConfigDir=C:\R\CNTK3\Examples\Image\MNIST\Config
OutputDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[reader=[randomize=none]]
imageLayout="cudnn"

04/07/2016 14:51:04: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/07/2016 14:51:04: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=C:\R\CNTK3\Examples\Image\MNIST\Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=C:\R\CNTK3\Examples\Image\MNIST\Data
configparameters: 03_ConvBatchNorm.cntk:DataDir=C:\R\CNTK3\Examples\Image\MNIST\Data
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:initOnCPUOnly=true
configparameters: 03_ConvBatchNorm.cntk:ModelDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:ndlMacros=C:\R\CNTK3\Examples\Image\MNIST\Config/Macros.ndl
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 32
    modelPath=C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\R\CNTK3\Examples\Image\MNIST\Data/Test-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\R\CNTK3\Examples\Image\MNIST\Data/labelsmap.txt"
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\R\CNTK3\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "UCIFastReader"
        file = "C:\R\CNTK3\Examples\Image\MNIST\Data/Train-28x28.txt"
        features = [
            dim = 784
            start = 1
        ]
        labels = [
            dim = 1
            start = 0
            labelDim = 10
            labelMappingFile = "C:\R\CNTK3\Examples\Image\MNIST\Data/labelsmap.txt"
        ]
    ]    
] [reader=[randomize=none]]

04/07/2016 14:51:04: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/07/2016 14:51:04: Commands: train test
04/07/2016 14:51:04: Precision = "float"
04/07/2016 14:51:04: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
04/07/2016 14:51:04: CNTKCommandTrainInfo: train : 2
04/07/2016 14:51:04: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

04/07/2016 14:51:04: ##############################################################################
04/07/2016 14:51:04: #                                                                            #
04/07/2016 14:51:04: # Action "train"                                                             #
04/07/2016 14:51:04: #                                                                            #
04/07/2016 14:51:04: ##############################################################################

04/07/2016 14:51:04: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0
Reading UCI file C:\R\CNTK3\Examples\Image\MNIST\Data/Train-28x28.txt

04/07/2016 14:51:04: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.


h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]

Using CNTK batch normalization engine.
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/07/2016 14:51:05: Created model with 36 nodes on GPU 0.

04/07/2016 14:51:05: Training criterion node(s):
04/07/2016 14:51:05: 	ce = CrossEntropyWithSoftmax

04/07/2016 14:51:05: Evaluation criterion node(s):

04/07/2016 14:51:05: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/07/2016 14:51:05: No PreCompute nodes found, skipping PreCompute step.

04/07/2016 14:51:05: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 60000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch

04/07/2016 14:51:05: Starting minibatch loop.
04/07/2016 14:51:07:  Epoch[ 1 of 2]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.17553700; EvalErr[0]PerSample = 0.05406250; TotalTime = 1.5797s; SamplesPerSecond = 10128.8
04/07/2016 14:51:08:  Epoch[ 1 of 2]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.07510864; EvalErr[0]PerSample = 0.02443750; TotalTime = 1.2863s; SamplesPerSecond = 12438.4
04/07/2016 14:51:10:  Epoch[ 1 of 2]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.06946776; EvalErr[0]PerSample = 0.02143750; TotalTime = 1.2994s; SamplesPerSecond = 12313.4
04/07/2016 14:51:11: Finished Epoch[ 1 of 2]: [Training Set] TrainLossPerSample = 0.096543156; TotalSamplesSeen = 60000; EvalErrPerSample = 0.03005; AvgLearningRatePerSample = 0.015625; EpochTime=5.72121
04/07/2016 14:51:11: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to 1.#INF.

04/07/2016 14:51:11: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
starting epoch 1 at record count 60000, and file position 0
already there from last epoch

04/07/2016 14:51:11: Starting minibatch loop.
04/07/2016 14:51:12:  Epoch[ 2 of 2]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.02842559; EvalErr[0]PerSample = 0.00812500; TotalTime = 1.3239s; SamplesPerSecond = 12085.6
04/07/2016 14:51:13:  Epoch[ 2 of 2]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.01900919; EvalErr[0]PerSample = 0.00600000; TotalTime = 1.2822s; SamplesPerSecond = 12479.0
04/07/2016 14:51:15:  Epoch[ 2 of 2]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.02238147; EvalErr[0]PerSample = 0.00650000; TotalTime = 1.3364s; SamplesPerSecond = 11972.6
04/07/2016 14:51:16: Finished Epoch[ 2 of 2]: [Training Set] TrainLossPerSample = 0.02144276; TotalSamplesSeen = 120000; EvalErrPerSample = 0.0062833335; AvgLearningRatePerSample = 0.003125; EpochTime=4.92934
04/07/2016 14:51:16: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160407154856.106529\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
04/07/2016 14:51:16: CNTKCommandTrainEnd: train

04/07/2016 14:51:16: Action "train" complete.


04/07/2016 14:51:16: ##############################################################################
04/07/2016 14:51:16: #                                                                            #
04/07/2016 14:51:16: # Action "test"                                                              #
04/07/2016 14:51:16: #                                                                            #
04/07/2016 14:51:16: ##############################################################################

Reading UCI file C:\R\CNTK3\Examples\Image\MNIST\Data/Test-28x28.txt

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.


Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]

Using CNTK batch normalization engine.
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]

Using CNTK batch normalization engine.
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]

Using CNTK batch normalization engine.
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
UCIFastReader: Starting at epoch 0, counting lines to determine record count...
 10000 records found.
starting epoch 0 at record count 0, and file position 0
already there from last epoch
RandomOrdering: 1989 retries for 10000 elements (19.9%) to ensure window condition
RandomOrdering: recached sequence for seed 0: 2334, 3830, ...
Minibatch[1-313]: SamplesSeen = 10000    err: ErrorPrediction/Sample = 0.0077    ce: CrossEntropyWithSoftmax/Sample = 0.023818888    
Final Results: Minibatch[1-313]: SamplesSeen = 10000    err: ErrorPrediction/Sample = 0.0077    ce: CrossEntropyWithSoftmax/Sample = 0.023818888    Perplexity = 1.0241048    

04/07/2016 14:51:16: Action "test" complete.

04/07/2016 14:51:16: __COMPLETED__