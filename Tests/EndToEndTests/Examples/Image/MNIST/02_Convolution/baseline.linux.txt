CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 1
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk currentDirectory=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData RunDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu DataDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=6]]
-------------------------------------------------------------------
Build info: 

		Built time: Sep 14 2016 14:31:59
		Last modified date: Wed Sep 14 10:34:00 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: 219ef43c816894f38699d83f36bd200a5bf82995
		Built by philly on bba8a3f9d1fe
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
09/14/2016 14:37:46: Redirecting stderr to file -_trainNetwork_testNetwork.log
09/14/2016 14:37:46: -------------------------------------------------------------------
09/14/2016 14:37:46: Build info: 

09/14/2016 14:37:46: 		Built time: Sep 14 2016 14:31:59
09/14/2016 14:37:46: 		Last modified date: Wed Sep 14 10:34:00 2016
09/14/2016 14:37:46: 		Build type: release
09/14/2016 14:37:46: 		Build target: GPU
09/14/2016 14:37:46: 		With 1bit-SGD: no
09/14/2016 14:37:46: 		Math lib: mkl
09/14/2016 14:37:46: 		CUDA_PATH: /usr/local/cuda-7.5
09/14/2016 14:37:46: 		CUB_PATH: /usr/local/cub-1.4.1
09/14/2016 14:37:46: 		CUDNN_PATH: /usr/local/cudnn-5.1
09/14/2016 14:37:46: 		Build Branch: HEAD
09/14/2016 14:37:46: 		Build SHA1: 219ef43c816894f38699d83f36bd200a5bf82995
09/14/2016 14:37:46: 		Built by philly on bba8a3f9d1fe
09/14/2016 14:37:46: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
09/14/2016 14:37:46: -------------------------------------------------------------------
09/14/2016 14:37:47: -------------------------------------------------------------------
09/14/2016 14:37:47: GPU info:

09/14/2016 14:37:47: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/14/2016 14:37:47: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/14/2016 14:37:47: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/14/2016 14:37:47: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/14/2016 14:37:47: -------------------------------------------------------------------

09/14/2016 14:37:47: Running on localhost at 2016/09/14 14:37:47
09/14/2016 14:37:47: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk  currentDirectory=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  RunDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu  DataDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=6]]


Configuration After Processing and Variable Resolution:

configparameters: 02_Convolution.cntk:command=trainNetwork:testNetwork
configparameters: 02_Convolution.cntk:configDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config
configparameters: 02_Convolution.cntk:currentDirectory=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:dataDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:forceDeterministicAlgorithms=true
configparameters: 02_Convolution.cntk:modelPath=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:outputDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:rootDir=..
configparameters: 02_Convolution.cntk:RunDir=/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:stderr=-
configparameters: 02_Convolution.cntk:testNetwork={
    action = test
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        model = Sequential (
            Scale {featScale} :
            ConvolutionalLayer {16, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            ConvolutionalLayer {32, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            DenseLayer         {128, activation=Sigmoid} :
            LinearLayer        {labelDim}
        )
        features = Input {imageShape}
        labels = Input {labelDim}
        ol = model (features)
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 0*5:1024
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }    
} [SGD=[maxEpochs=6]]

09/14/2016 14:37:47: Commands: trainNetwork testNetwork
09/14/2016 14:37:47: Precision = "float"
09/14/2016 14:37:47: CNTKModelPath: /tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
09/14/2016 14:37:47: CNTKCommandTrainInfo: trainNetwork : 6
09/14/2016 14:37:47: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 6

09/14/2016 14:37:47: ##############################################################################
09/14/2016 14:37:47: #                                                                            #
09/14/2016 14:37:47: # Action "train"                                                             #
09/14/2016 14:37:47: #                                                                            #
09/14/2016 14:37:47: ##############################################################################

09/14/2016 14:37:47: CNTKCommandTrainBegin: trainNetwork

09/14/2016 14:37:47: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[128 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 32] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[8].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[7].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 0]
Validating --> model.arrayOfFunctions[4].W = LearnableParameter() :  -> [5 x 5 x 0 x 32]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> ol.x.x.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> ol.x.x.x._.x.x._.x = ElementTimes (ol.x.x.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=4, init dims=[400 x 25], range=0.118818*1.000000, onCPU=true).
Validating --> ol.x.x.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x.x.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x.x.x._.x.x._.res.x = Plus (ol.x.x.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> ol.x.x.x._.x.x = RectifiedLinear (ol.x.x.x._.x.x._.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> ol.x.x.x._.x = Pooling (ol.x.x.x._.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[4].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 16 x 32].
Node 'model.arrayOfFunctions[4].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 16 x 32] <- glorotUniform(seed=3, init dims=[800 x 400], range=0.070711*1.000000, onCPU=true).
Validating --> ol.x.x.x._.c = Convolution (model.arrayOfFunctions[4].W, ol.x.x.x._.x) : [5 x 5 x 16 x 32], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> model.arrayOfFunctions[4].b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> ol.x.x.x._.res.x = Plus (ol.x.x.x._.c, model.arrayOfFunctions[4].b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> ol.x.x.x = RectifiedLinear (ol.x.x.x._.res.x) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> ol.x.x = Pooling (ol.x.x.x) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Node 'model.arrayOfFunctions[7].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [128 x 7 x 7 x 32].
Node 'model.arrayOfFunctions[7].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[128 x 7 x 7 x 32] <- glorotUniform(seed=2, init dims=[128 x 1568], range=0.059479*1.000000, onCPU=true).
Validating --> ol.x._.PlusArgs[0] = Times (model.arrayOfFunctions[7].arrayOfFunctions[0].W, ol.x.x) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> model.arrayOfFunctions[7].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> ol.x._ = Plus (ol.x._.PlusArgs[0], model.arrayOfFunctions[7].arrayOfFunctions[0].b) : [128 x *], [128] -> [128 x *]
Validating --> ol.x = Sigmoid (ol.x._) : [128 x *] -> [128 x *]
Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 128].
Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- glorotUniform(seed=1, init dims=[10 x 128], range=0.208514*1.000000, onCPU=true).
Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[8].W, ol.x) : [10 x 128], [128 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[8].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[8].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *], [10 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

ol.x.x.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

09/14/2016 14:37:48: Created model with 27 nodes on GPU 0.

09/14/2016 14:37:48: Training criterion node(s):
09/14/2016 14:37:48: 	ce = CrossEntropyWithSoftmax

09/14/2016 14:37:48: Evaluation criterion node(s):
09/14/2016 14:37:48: 	errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 49 matrices, 29 are shared as 13, and 20 are not shared.

	{ model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16] (gradient)
	  ol.x.x.x._.x.x._.res.x : [28 x 28 x 16 x *] }
	{ ol.x.x.x._.x.x : [28 x 28 x 16 x *]
	  ol.x.x.x._.x.x._.c : [28 x 28 x 16 x *] (gradient) }
	{ ol.x.x.x._.x : [14 x 14 x 16 x *]
	  ol.x.x.x._.x.x._.res.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[1].b : [1 x 1 x 16] (gradient)
	  ol.x.x.x._.x.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[4].W : [5 x 5 x 16 x 32] (gradient)
	  ol.x.x.x._.res.x : [14 x 14 x 32 x *] }
	{ ol.x.x.x : [14 x 14 x 32 x *]
	  ol.x.x.x._.c : [14 x 14 x 32 x *] (gradient) }
	{ ol.x.x : [7 x 7 x 32 x *]
	  ol.x.x.x._.res.x : [14 x 14 x 32 x *] (gradient)
	  ol.x.x.x._.x : [14 x 14 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[4].b : [1 x 1 x 32] (gradient)
	  ol.x._.PlusArgs[0] : [128 x *]
	  ol.x.x.x : [14 x 14 x 32 x *] (gradient) }
	{ model.arrayOfFunctions[7].arrayOfFunctions[0].W : [128 x 7 x 7 x 32] (gradient)
	  ol.x._ : [128 x *] }
	{ ol.x : [128 x *]
	  ol.x._.PlusArgs[0] : [128 x *] (gradient) }
	{ ol.PlusArgs[0] : [10 x *]
	  ol.x._ : [128 x *] (gradient)
	  ol.x.x : [7 x 7 x 32 x *] (gradient) }
	{ model.arrayOfFunctions[8].W : [10 x 128] (gradient)
	  ol : [10 x *] (gradient) }
	{ model.arrayOfFunctions[7].arrayOfFunctions[0].b : [128] (gradient)
	  ol.x : [128 x *] (gradient) }


09/14/2016 14:37:48: Training 215370 parameters in 8 out of 8 parameter tensors and 22 nodes with gradient:

09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 16]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[4].W' (LearnableParameter operation) : [5 x 5 x 16 x 32]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[4].b' (LearnableParameter operation) : [1 x 1 x 32]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[7].arrayOfFunctions[0].W' (LearnableParameter operation) : [128 x 7 x 7 x 32]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[7].arrayOfFunctions[0].b' (LearnableParameter operation) : [128]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[8].W' (LearnableParameter operation) : [10 x 128]
09/14/2016 14:37:48: 	Node 'model.arrayOfFunctions[8].b' (LearnableParameter operation) : [10]

09/14/2016 14:37:48: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

09/14/2016 14:37:48: Starting Epoch 1: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/14/2016 14:37:48: Starting minibatch loop.
09/14/2016 14:37:52:  Epoch[ 1 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.71870331 * 32000; errs = 21.769% * 32000; time = 3.7555s; samplesPerSecond = 8520.8
09/14/2016 14:37:54: Finished Epoch[ 1 of 6]: [Training] ce = 0.47387959 * 60000; errs = 14.235% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=6.16028s
09/14/2016 14:37:54: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.1'

09/14/2016 14:37:54: Starting Epoch 2: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/14/2016 14:37:54: Starting minibatch loop.
09/14/2016 14:37:57:  Epoch[ 2 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.13549445 * 32000; errs = 3.894% * 32000; time = 2.7333s; samplesPerSecond = 11707.5
09/14/2016 14:37:59: Finished Epoch[ 2 of 6]: [Training] ce = 0.12418366 * 60000; errs = 3.587% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.001; epochTime=5.13428s
09/14/2016 14:37:59: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.2'

09/14/2016 14:37:59: Starting Epoch 3: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/14/2016 14:37:59: Starting minibatch loop.
09/14/2016 14:38:02:  Epoch[ 3 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.08903642 * 32000; errs = 2.566% * 32000; time = 2.7375s; samplesPerSecond = 11689.3
09/14/2016 14:38:05: Finished Epoch[ 3 of 6]: [Training] ce = 0.08509002 * 60000; errs = 2.482% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.001; epochTime=5.14181s
09/14/2016 14:38:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.3'

09/14/2016 14:38:05: Starting Epoch 4: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/14/2016 14:38:05: Starting minibatch loop.
09/14/2016 14:38:07:  Epoch[ 4 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.06824014 * 32000; errs = 1.969% * 32000; time = 2.7494s; samplesPerSecond = 11638.8
09/14/2016 14:38:10: Finished Epoch[ 4 of 6]: [Training] ce = 0.06719082 * 60000; errs = 1.935% * 60000; totalSamplesSeen = 240000; learningRatePerSample = 0.001; epochTime=5.15108s
09/14/2016 14:38:10: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.4'

09/14/2016 14:38:10: Starting Epoch 5: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/14/2016 14:38:10: Starting minibatch loop.
09/14/2016 14:38:12:  Epoch[ 5 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.05704977 * 32000; errs = 1.656% * 32000; time = 2.7323s; samplesPerSecond = 11711.9
09/14/2016 14:38:15: Finished Epoch[ 5 of 6]: [Training] ce = 0.05617987 * 60000; errs = 1.627% * 60000; totalSamplesSeen = 300000; learningRatePerSample = 0.001; epochTime=5.12392s
09/14/2016 14:38:15: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.5'

09/14/2016 14:38:15: Starting Epoch 6: learning rate per sample = 0.000500  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

09/14/2016 14:38:15: Starting minibatch loop.
09/14/2016 14:38:18:  Epoch[ 6 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.05010939 * 32000; errs = 1.428% * 32000; time = 2.7250s; samplesPerSecond = 11743.1
09/14/2016 14:38:20: Finished Epoch[ 6 of 6]: [Training] ce = 0.04600405 * 60000; errs = 1.277% * 60000; totalSamplesSeen = 360000; learningRatePerSample = 0.00050000002; epochTime=5.1183s
09/14/2016 14:38:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160914143654.764232/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution'
09/14/2016 14:38:20: CNTKCommandTrainEnd: trainNetwork

09/14/2016 14:38:20: Action "train" complete.


09/14/2016 14:38:20: ##############################################################################
09/14/2016 14:38:20: #                                                                            #
09/14/2016 14:38:20: # Action "test"                                                              #
09/14/2016 14:38:20: #                                                                            #
09/14/2016 14:38:20: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[8].W = LearnableParameter() :  -> [10 x 128]
Validating --> model.arrayOfFunctions[7].arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> model.arrayOfFunctions[4].W = LearnableParameter() :  -> [5 x 5 x 16 x 32]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 1 x 16]
Validating --> ol.x.x.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> ol.x.x.x._.x.x._.x = ElementTimes (ol.x.x.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> ol.x.x.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x.x.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x.x.x._.x.x._.res.x = Plus (ol.x.x.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> ol.x.x.x._.x.x = RectifiedLinear (ol.x.x.x._.x.x._.res.x) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> ol.x.x.x._.x = Pooling (ol.x.x.x._.x.x) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> ol.x.x.x._.c = Convolution (model.arrayOfFunctions[4].W, ol.x.x.x._.x) : [5 x 5 x 16 x 32], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> model.arrayOfFunctions[4].b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> ol.x.x.x._.res.x = Plus (ol.x.x.x._.c, model.arrayOfFunctions[4].b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> ol.x.x.x = RectifiedLinear (ol.x.x.x._.res.x) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> ol.x.x = Pooling (ol.x.x.x) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> ol.x._.PlusArgs[0] = Times (model.arrayOfFunctions[7].arrayOfFunctions[0].W, ol.x.x) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> model.arrayOfFunctions[7].arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> ol.x._ = Plus (ol.x._.PlusArgs[0], model.arrayOfFunctions[7].arrayOfFunctions[0].b) : [128 x *1], [128] -> [128 x *1]
Validating --> ol.x = Sigmoid (ol.x._) : [128 x *1] -> [128 x *1]
Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[8].W, ol.x) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[8].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[8].b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *1], [10 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

ol.x.x.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x.x._.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.x.x: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 0 are shared as 0, and 27 are not shared.


09/14/2016 14:38:20: Minibatch[1-10]: errs = 1.370% * 10000; ce = 0.04414196 * 10000
09/14/2016 14:38:20: Final Results: Minibatch[1-10]: errs = 1.370% * 10000; ce = 0.04414196 * 10000; perplexity = 1.04513071

09/14/2016 14:38:20: Action "test" complete.

09/14/2016 14:38:20: __COMPLETED__