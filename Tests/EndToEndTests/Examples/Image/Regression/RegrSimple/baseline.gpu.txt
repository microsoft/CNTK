CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-SlaveTest/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\Examples\Image\Regression/RegrSimple_CIFAR10.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\Examples\Image\Regression OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu DeviceId=0 timestamping=true [command=TrainConvNet:Test] forceDeterministicAlgorithms=true stderr=-
CNTK 2.0.beta6.0+ (HEAD bbb440, Dec 20 2016 05:52:50) on cntk-muc01 at 2016/12/21 03:25:40

C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\Examples\Image\Regression/RegrSimple_CIFAR10.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\Examples\Image\Regression  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu  DeviceId=0  timestamping=true  [command=TrainConvNet:Test]  forceDeterministicAlgorithms=true  stderr=-
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData
12/21/2016 03:25:40: Redirecting stderr to file -_TrainConvNet_Test.log
12/21/2016 03:25:40: -------------------------------------------------------------------
12/21/2016 03:25:40: Build info: 

12/21/2016 03:25:40: 		Built time: Dec 20 2016 05:52:50
12/21/2016 03:25:40: 		Last modified date: Tue Dec 20 03:38:53 2016
12/21/2016 03:25:40: 		Build type: Release
12/21/2016 03:25:40: 		Build target: GPU
12/21/2016 03:25:40: 		With ASGD: yes
12/21/2016 03:25:40: 		Math lib: mkl
12/21/2016 03:25:40: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0
12/21/2016 03:25:40: 		CUB_PATH: c:\src\cub-1.4.1
12/21/2016 03:25:40: 		CUDNN_PATH: C:\local\cudnn-8.0-windows10-x64-v5.1
12/21/2016 03:25:40: 		Build Branch: HEAD
12/21/2016 03:25:40: 		Build SHA1: bbb4406fcb69b190109ec665d8c0a619271f1b24 (modified)
12/21/2016 03:25:40: 		Built by svcphil on liana-08-w
12/21/2016 03:25:40: 		Build Path: C:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
12/21/2016 03:25:40: -------------------------------------------------------------------
12/21/2016 03:25:41: -------------------------------------------------------------------
12/21/2016 03:25:41: GPU info:

12/21/2016 03:25:41: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
12/21/2016 03:25:41: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: RegrSimple_CIFAR10.cntk:command=TrainConvNet:Test
configparameters: RegrSimple_CIFAR10.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-SlaveTest\Examples\Image\Regression
configparameters: RegrSimple_CIFAR10.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData
configparameters: RegrSimple_CIFAR10.cntk:dataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData
configparameters: RegrSimple_CIFAR10.cntk:deviceId=0
configparameters: RegrSimple_CIFAR10.cntk:forceDeterministicAlgorithms=true
configparameters: RegrSimple_CIFAR10.cntk:makeMode=false
configparameters: RegrSimple_CIFAR10.cntk:modelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/Models
configparameters: RegrSimple_CIFAR10.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf
configparameters: RegrSimple_CIFAR10.cntk:outputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu
configparameters: RegrSimple_CIFAR10.cntk:rootDir=..
configparameters: RegrSimple_CIFAR10.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu
configparameters: RegrSimple_CIFAR10.cntk:stderr=-
configparameters: RegrSimple_CIFAR10.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:timestamping=true
configparameters: RegrSimple_CIFAR10.cntk:traceLevel=1
configparameters: RegrSimple_CIFAR10.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        diff = regrLabels - ol
        sqerr = ReduceSum (diff.*diff, axis=1)
        rmse =  Sqrt (sqerr / labelDim)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu\TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

12/21/2016 03:25:41: Commands: TrainConvNet Test
12/21/2016 03:25:41: precision = "float"
12/21/2016 03:25:41: WARNING: forceDeterministcAlgorithms flag is specified. Using 1 CPU thread for processing.

12/21/2016 03:25:41: ##############################################################################
12/21/2016 03:25:41: #                                                                            #
12/21/2016 03:25:41: # TrainConvNet command (train action)                                        #
12/21/2016 03:25:41: #                                                                            #
12/21/2016 03:25:41: ##############################################################################

12/21/2016 03:25:41: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 18 nodes to process in pass 1.

Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.005413(0.003608*1.500000), onCPU=true.
)Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.030000(0.020000*1.500000), onCPU=true.
)Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> diff = Minus (regrLabels, ol) : [3 x *], [3 x *] -> [3 x *]
Validating --> sqerr._ = ElementTimes (diff, diff) : [3 x *], [3 x *] -> [3 x *]
Validating --> sqerr = ReduceElements (sqerr._) : [3 x *] -> [1 x *]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *], [1] -> [1 x *]
Validating --> rmse = Sqrt (rmse.z) : [1 x *] -> [1 x *]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

12/21/2016 03:25:42: 
Model has 18 nodes. Using GPU 0.

12/21/2016 03:25:42: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 31 matrices, 17 are shared as 7, and 14 are not shared.

	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  sqerr._ : [3 x *] }
	{ diff : [3 x *] (gradient)
	  ol.ol.b : [3] (gradient)
	  sqerr : [1 x *] }
	{ rmse.z : [1 x *]
	  sqerr._ : [3 x *] (gradient) }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ diff : [3 x *]
	  ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }


12/21/2016 03:25:42: Training 307603 parameters in 4 out of 4 parameter tensors and 13 nodes with gradient:

12/21/2016 03:25:42: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
12/21/2016 03:25:42: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
12/21/2016 03:25:42: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
12/21/2016 03:25:42: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

12/21/2016 03:25:42: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/21/2016 03:25:42: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

12/21/2016 03:25:42: Starting minibatch loop.
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   1-   1]: rmse = 0.49062398 * 128; time = 1.8366s; samplesPerSecond = 69.7
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   2-   2]: rmse = 0.32586762 * 128; time = 0.0018s; samplesPerSecond = 69754.8
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   3-   3]: rmse = 0.07251877 * 128; time = 0.0184s; samplesPerSecond = 6969.4
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   4-   4]: rmse = 0.32626683 * 128; time = 0.0174s; samplesPerSecond = 7359.7
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   5-   5]: rmse = 0.43332255 * 128; time = 0.0168s; samplesPerSecond = 7601.4
12/21/2016 03:25:44:  Epoch[ 1 of 2]-Minibatch[   6-  50]: rmse = 0.11434549 * 5760; time = 0.7869s; samplesPerSecond = 7320.1
12/21/2016 03:25:45:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.03756892 * 6400; time = 0.8405s; samplesPerSecond = 7614.8
12/21/2016 03:25:46:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.04077385 * 6400; time = 0.8886s; samplesPerSecond = 7202.5
12/21/2016 03:25:47:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.02867006 * 6400; time = 0.8696s; samplesPerSecond = 7359.4
12/21/2016 03:25:48:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.03633152 * 6400; time = 0.8706s; samplesPerSecond = 7351.4
12/21/2016 03:25:49:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.03117010 * 6400; time = 0.8878s; samplesPerSecond = 7208.8
12/21/2016 03:25:50:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.01911295 * 6400; time = 0.8435s; samplesPerSecond = 7587.6
12/21/2016 03:25:50: Finished Epoch[ 1 of 2]: [Training] rmse = 0.04437762 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=8.6521s
12/21/2016 03:25:50: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf.1'

12/21/2016 03:25:50: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

12/21/2016 03:25:50: Starting minibatch loop.
12/21/2016 03:25:50:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.29%]: rmse = 0.02530105 * 128; time = 0.0667s; samplesPerSecond = 1919.6
12/21/2016 03:25:50:  Epoch[ 2 of 2]-Minibatch[   2-   2, 0.57%]: rmse = 0.01478167 * 128; time = 0.0172s; samplesPerSecond = 7461.4
12/21/2016 03:25:50:  Epoch[ 2 of 2]-Minibatch[   3-   3, 0.86%]: rmse = 0.01493347 * 128; time = 0.0167s; samplesPerSecond = 7643.6
12/21/2016 03:25:50:  Epoch[ 2 of 2]-Minibatch[   4-   4, 1.14%]: rmse = 0.02205141 * 128; time = 0.0173s; samplesPerSecond = 7404.4
12/21/2016 03:25:51:  Epoch[ 2 of 2]-Minibatch[   5-   5, 1.43%]: rmse = 0.01012570 * 128; time = 0.0172s; samplesPerSecond = 7434.1
12/21/2016 03:25:51:  Epoch[ 2 of 2]-Minibatch[   6-  50, 14.29%]: rmse = 0.01674064 * 5760; time = 0.7773s; samplesPerSecond = 7409.8
12/21/2016 03:25:52:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.01332134 * 6400; time = 0.8754s; samplesPerSecond = 7310.9
12/21/2016 03:25:53:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.01196250 * 6400; time = 0.8712s; samplesPerSecond = 7346.0
12/21/2016 03:25:54:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.01159723 * 6400; time = 0.8752s; samplesPerSecond = 7312.6
12/21/2016 03:25:55:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.01072659 * 6400; time = 0.8401s; samplesPerSecond = 7618.3
12/21/2016 03:25:56:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.01022279 * 6400; time = 0.8332s; samplesPerSecond = 7681.3
12/21/2016 03:25:56:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00964584 * 6400; time = 0.8278s; samplesPerSecond = 7731.6
12/21/2016 03:25:57: Finished Epoch[ 2 of 2]: [Training] rmse = 0.01159989 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=6.78141s
12/21/2016 03:25:57: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161221032454.717794\Examples\Image\Regression_RegrSimple@release_gpu/Models/RegrSimple_CIFAR10.cmf'

12/21/2016 03:25:57: Action "train" complete.


12/21/2016 03:25:57: ##############################################################################
12/21/2016 03:25:57: #                                                                            #
12/21/2016 03:25:57: # Test command (test action)                                                 #
12/21/2016 03:25:57: #                                                                            #
12/21/2016 03:25:57: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 18 nodes to process in pass 1.

Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> diff = Minus (regrLabels, ol) : [3 x *1], [3 x *1] -> [3 x *1]
Validating --> sqerr._ = ElementTimes (diff, diff) : [3 x *1], [3 x *1] -> [3 x *1]
Validating --> sqerr = ReduceElements (sqerr._) : [3 x *1] -> [1 x *1]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *1], [1] -> [1 x *1]
Validating --> rmse = Sqrt (rmse.z) : [1 x *1] -> [1 x *1]

Validating network. 10 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 18 matrices, 0 are shared as 0, and 18 are not shared.


12/21/2016 03:25:59: Minibatch[1-20]: rmse = 0.12421002 * 10000
12/21/2016 03:25:59: Final Results: Minibatch[1-20]: rmse = 0.12421002 * 10000

12/21/2016 03:25:59: Action "test" complete.

12/21/2016 03:25:59: __COMPLETED__