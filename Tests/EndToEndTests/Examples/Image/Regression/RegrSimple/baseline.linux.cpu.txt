CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression/RegrSimple_CIFAR10.cntk currentDirectory=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData RunDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu DataDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression OutputDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu DeviceId=-1 timestamping=true [command=TrainConvNet:Test] forceDeterministicAlgorithms=true stderr=-
CNTK 1.7.1 (HEAD 36e827, Sep 30 2016 18:54:11) on localhost at 2016/09/30 19:08:21

/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression/RegrSimple_CIFAR10.cntk  currentDirectory=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData  RunDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu  DataDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression  OutputDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu  DeviceId=-1  timestamping=true  [command=TrainConvNet:Test]  forceDeterministicAlgorithms=true  stderr=-
Changed current directory to /tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData
09/30/2016 19:08:21: Redirecting stderr to file -_TrainConvNet_Test.log
09/30/2016 19:08:21: -------------------------------------------------------------------
09/30/2016 19:08:21: Build info: 

09/30/2016 19:08:21: 		Built time: Sep 30 2016 18:54:11
09/30/2016 19:08:21: 		Last modified date: Fri Sep 30 18:52:40 2016
09/30/2016 19:08:21: 		Build type: release
09/30/2016 19:08:21: 		Build target: GPU
09/30/2016 19:08:21: 		With 1bit-SGD: no
09/30/2016 19:08:21: 		Math lib: mkl
09/30/2016 19:08:21: 		CUDA_PATH: /usr/local/cuda-7.5
09/30/2016 19:08:21: 		CUB_PATH: /usr/local/cub-1.4.1
09/30/2016 19:08:21: 		CUDNN_PATH: /usr/local/cudnn-5.1
09/30/2016 19:08:21: 		Build Branch: HEAD
09/30/2016 19:08:21: 		Build SHA1: 36e82796811af0a8a1f1789a765b6db38267c89f
09/30/2016 19:08:21: 		Built by philly on 0134deff64cc
09/30/2016 19:08:21: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
09/30/2016 19:08:21: -------------------------------------------------------------------
09/30/2016 19:08:22: -------------------------------------------------------------------
09/30/2016 19:08:22: GPU info:

09/30/2016 19:08:22: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/30/2016 19:08:22: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/30/2016 19:08:22: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/30/2016 19:08:22: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/30/2016 19:08:22: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: RegrSimple_CIFAR10.cntk:command=TrainConvNet:Test
configparameters: RegrSimple_CIFAR10.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Regression/RegrSimple/../../../../../../Examples/Image/Regression
configparameters: RegrSimple_CIFAR10.cntk:currentDirectory=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData
configparameters: RegrSimple_CIFAR10.cntk:dataDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData
configparameters: RegrSimple_CIFAR10.cntk:deviceId=-1
configparameters: RegrSimple_CIFAR10.cntk:forceDeterministicAlgorithms=true
configparameters: RegrSimple_CIFAR10.cntk:makeMode=false
configparameters: RegrSimple_CIFAR10.cntk:modelDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/Models
configparameters: RegrSimple_CIFAR10.cntk:modelPath=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/Models/RegrSimple_CIFAR10.cmf
configparameters: RegrSimple_CIFAR10.cntk:outputDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu
configparameters: RegrSimple_CIFAR10.cntk:rootDir=..
configparameters: RegrSimple_CIFAR10.cntk:RunDir=/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu
configparameters: RegrSimple_CIFAR10.cntk:stderr=-
configparameters: RegrSimple_CIFAR10.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:timestamping=true
configparameters: RegrSimple_CIFAR10.cntk:traceLevel=1
configparameters: RegrSimple_CIFAR10.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: RegrSimple_CIFAR10.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/RegrSimple_CIFAR10"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/TestData/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

09/30/2016 19:08:22: Commands: TrainConvNet Test
09/30/2016 19:08:22: precision = "float"
09/30/2016 19:08:22: WARNING: forceDeterministcAlgorithms flag is specified. Using 1 CPU thread for processing.

09/30/2016 19:08:22: ##############################################################################
09/30/2016 19:08:22: #                                                                            #
09/30/2016 19:08:22: # TrainConvNet command (train action)                                        #
09/30/2016 19:08:22: #                                                                            #
09/30/2016 19:08:22: ##############################################################################

09/30/2016 19:08:22: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.005413*1.500000, onCPU=true.
)Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.030000*1.500000, onCPU=true.
)Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *], [3 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

09/30/2016 19:08:22: 
Model has 16 nodes. Using CPU.

09/30/2016 19:08:22: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 13 are shared as 6, and 14 are not shared.

	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }
	{ ol.ol.b : [3] (gradient)
	  sqerr : [1] }
	{ ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }
	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  rmse.z : [1 x 1] }


09/30/2016 19:08:22: Training 307603 parameters in 4 out of 4 parameter tensors and 11 nodes with gradient:

09/30/2016 19:08:22: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
09/30/2016 19:08:22: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
09/30/2016 19:08:22: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
09/30/2016 19:08:22: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

09/30/2016 19:08:22: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

09/30/2016 19:08:22: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

09/30/2016 19:08:22: Starting minibatch loop.
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   1-   1]: rmse = 0.04111606 * 128; time = 0.3270s; samplesPerSecond = 391.4
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   2-   2]: rmse = 0.03852100 * 128; time = 0.0104s; samplesPerSecond = 12337.3
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   3-   3]: rmse = 0.03658416 * 128; time = 0.0148s; samplesPerSecond = 8647.5
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   4-   4]: rmse = 0.03162909 * 128; time = 0.0143s; samplesPerSecond = 8966.7
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   5-   5]: rmse = 0.02514125 * 128; time = 0.0148s; samplesPerSecond = 8659.8
09/30/2016 19:08:23:  Epoch[ 1 of 2]-Minibatch[   6-  50]: rmse = 0.00579311 * 5760; time = 0.7154s; samplesPerSecond = 8051.4
09/30/2016 19:08:24:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.00148280 * 6400; time = 0.7851s; samplesPerSecond = 8151.5
09/30/2016 19:08:25:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.00089954 * 6400; time = 0.7855s; samplesPerSecond = 8147.6
09/30/2016 19:08:26:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.00063358 * 6400; time = 0.7397s; samplesPerSecond = 8651.7
09/30/2016 19:08:27:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.00054041 * 6400; time = 0.8132s; samplesPerSecond = 7870.6
09/30/2016 19:08:27:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.00050838 * 6400; time = 0.7653s; samplesPerSecond = 8362.7
09/30/2016 19:08:28:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.00048243 * 6400; time = 0.7616s; samplesPerSecond = 8403.8
09/30/2016 19:08:29: Finished Epoch[ 1 of 2]: [Training] rmse = 0.00174299 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=6.45037s
09/30/2016 19:08:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/Models/RegrSimple_CIFAR10.cmf.1'

09/30/2016 19:08:29: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

09/30/2016 19:08:29: Starting minibatch loop.
09/30/2016 19:08:29:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.29%]: rmse = 0.00048390 * 128; time = 0.0692s; samplesPerSecond = 1850.5
09/30/2016 19:08:29:  Epoch[ 2 of 2]-Minibatch[   2-   2, 0.57%]: rmse = 0.00081575 * 128; time = 0.0212s; samplesPerSecond = 6026.4
09/30/2016 19:08:29:  Epoch[ 2 of 2]-Minibatch[   3-   3, 0.86%]: rmse = 0.00051967 * 128; time = 0.0152s; samplesPerSecond = 8414.4
09/30/2016 19:08:29:  Epoch[ 2 of 2]-Minibatch[   4-   4, 1.14%]: rmse = 0.00109265 * 128; time = 0.0143s; samplesPerSecond = 8953.6
09/30/2016 19:08:29:  Epoch[ 2 of 2]-Minibatch[   5-   5, 1.43%]: rmse = 0.00086101 * 128; time = 0.0147s; samplesPerSecond = 8724.1
09/30/2016 19:08:30:  Epoch[ 2 of 2]-Minibatch[   6-  50, 14.29%]: rmse = 0.00064108 * 5760; time = 0.6619s; samplesPerSecond = 8702.5
09/30/2016 19:08:30:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.00077196 * 6400; time = 0.7470s; samplesPerSecond = 8567.8
09/30/2016 19:08:31:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00079998 * 6400; time = 0.7636s; samplesPerSecond = 8381.6
09/30/2016 19:08:32:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00075646 * 6400; time = 0.7616s; samplesPerSecond = 8403.2
09/30/2016 19:08:33:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00071374 * 6400; time = 0.7556s; samplesPerSecond = 8470.0
09/30/2016 19:08:33:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00064332 * 6400; time = 0.7515s; samplesPerSecond = 8516.8
09/30/2016 19:08:34:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00061381 * 6400; time = 0.7747s; samplesPerSecond = 8261.6
09/30/2016 19:08:35: Finished Epoch[ 2 of 2]: [Training] rmse = 0.00069766 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=6.00274s
09/30/2016 19:08:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160930190444.408248/Examples/Image/Regression_RegrSimple@release_cpu/Models/RegrSimple_CIFAR10.cmf'

09/30/2016 19:08:35: Action "train" complete.


09/30/2016 19:08:35: ##############################################################################
09/30/2016 19:08:35: #                                                                            #
09/30/2016 19:08:35: # Test command (test action)                                                 #
09/30/2016 19:08:35: #                                                                            #
09/30/2016 19:08:35: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *1], [3 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 16 matrices, 0 are shared as 0, and 16 are not shared.


09/30/2016 19:08:36: Minibatch[1-20]: rmse = 0.00107789 * 10000
09/30/2016 19:08:36: Final Results: Minibatch[1-20]: rmse = 0.00107789 * 10000

09/30/2016 19:08:36: Action "test" complete.

09/30/2016 19:08:36: __COMPLETED__