CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/Examples/Image/Miscellaneous/CIFAR-10
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
Done copying data
Starting cntk run
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DeviceId=0 timestamping=true [command=TrainConvNet:Test] forceDeterministicAlgorithms=true stderr=-
CNTK 1.7.2+ (HEAD 5bb8b8, Oct  4 2016 06:16:46) on DPHAIM-25 at 2016/10/04 12:41:01

C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DeviceId=0  timestamping=true  [command=TrainConvNet:Test]  forceDeterministicAlgorithms=true  stderr=-
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
10/04/2016 12:41:03: Redirecting stderr to file -_TrainConvNet_Test.log
10/04/2016 12:41:03: -------------------------------------------------------------------
10/04/2016 12:41:03: Build info: 

10/04/2016 12:41:03: 		Built time: Oct  4 2016 06:16:46
10/04/2016 12:41:03: 		Last modified date: Tue Oct  4 04:49:44 2016
10/04/2016 12:41:03: 		Build type: Release
10/04/2016 12:41:03: 		Build target: GPU
10/04/2016 12:41:03: 		With 1bit-SGD: no
10/04/2016 12:41:03: 		Math lib: mkl
10/04/2016 12:41:03: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
10/04/2016 12:41:03: 		CUB_PATH: c:\src\cub-1.4.1
10/04/2016 12:41:03: 		CUDNN_PATH: c:\NVIDIA\cudnn-5.1\cuda
10/04/2016 12:41:03: 		Build Branch: HEAD
10/04/2016 12:41:03: 		Build SHA1: 5bb8b8090cc5baa3b5586cee5a6611cb1aa88d97
10/04/2016 12:41:03: 		Built by svcphil on dphaim-26-hv1
10/04/2016 12:41:03: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
10/04/2016 12:41:03: -------------------------------------------------------------------
10/04/2016 12:41:03: -------------------------------------------------------------------
10/04/2016 12:41:03: GPU info:

10/04/2016 12:41:03: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
10/04/2016 12:41:03: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
10/04/2016 12:41:03: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
10/04/2016 12:41:03: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 06_RegressionSimple.cntk:command=TrainConvNet:Test
configparameters: 06_RegressionSimple.cntk:configDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 06_RegressionSimple.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:dataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:deviceId=0
configparameters: 06_RegressionSimple.cntk:forceDeterministicAlgorithms=true
configparameters: 06_RegressionSimple.cntk:makeMode=false
configparameters: 06_RegressionSimple.cntk:modelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models
configparameters: 06_RegressionSimple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf
configparameters: 06_RegressionSimple.cntk:outputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:rootDir=.
configparameters: 06_RegressionSimple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:stderr=-
configparameters: 06_RegressionSimple.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:timestamping=true
configparameters: 06_RegressionSimple.cntk:traceLevel=1
configparameters: 06_RegressionSimple.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

10/04/2016 12:41:03: Commands: TrainConvNet Test
10/04/2016 12:41:03: precision = "float"
10/04/2016 12:41:03: WARNING: forceDeterministcAlgorithms flag is specified. Using 1 CPU thread for processing.

10/04/2016 12:41:03: ##############################################################################
10/04/2016 12:41:03: #                                                                            #
10/04/2016 12:41:03: # TrainConvNet command (train action)                                        #
10/04/2016 12:41:03: #                                                                            #
10/04/2016 12:41:03: ##############################################################################

10/04/2016 12:41:03: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, init dims=[100 x 3072], range=0.005413*1.500000, onCPU=true.
)Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, init dims=[3 x 100], range=0.030000*1.500000, onCPU=true.
)Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *], [3 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

10/04/2016 12:41:04: 
Model has 16 nodes. Using GPU 0.

10/04/2016 12:41:04: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 13 are shared as 6, and 14 are not shared.

	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  rmse.z : [1 x 1] }
	{ ol.ol.b : [3] (gradient)
	  sqerr : [1] }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }
	{ ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }
	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }


10/04/2016 12:41:04: Training 307603 parameters in 4 out of 4 parameter tensors and 11 nodes with gradient:

10/04/2016 12:41:04: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
10/04/2016 12:41:04: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
10/04/2016 12:41:04: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
10/04/2016 12:41:04: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

10/04/2016 12:41:04: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

10/04/2016 12:41:04: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

10/04/2016 12:41:04: Starting minibatch loop.
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   1-   1]: rmse = 0.04725274 * 128; time = 0.8131s; samplesPerSecond = 157.4
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   2-   2]: rmse = 0.04474263 * 128; time = 0.0022s; samplesPerSecond = 58904.7
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   3-   3]: rmse = 0.04305258 * 128; time = 0.0173s; samplesPerSecond = 7414.3
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   4-   4]: rmse = 0.03844461 * 128; time = 0.0161s; samplesPerSecond = 7931.6
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   5-   5]: rmse = 0.03247494 * 128; time = 0.0162s; samplesPerSecond = 7904.7
10/04/2016 12:41:05:  Epoch[ 1 of 2]-Minibatch[   6-  50]: rmse = 0.00671105 * 5760; time = 0.7082s; samplesPerSecond = 8133.1
10/04/2016 12:41:06:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.00159925 * 6400; time = 0.7925s; samplesPerSecond = 8075.5
10/04/2016 12:41:07:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.00089868 * 6400; time = 0.7870s; samplesPerSecond = 8131.7
10/04/2016 12:41:08:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.00064953 * 6400; time = 0.7902s; samplesPerSecond = 8099.6
10/04/2016 12:41:09:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.00054372 * 6400; time = 0.7950s; samplesPerSecond = 8050.3
10/04/2016 12:41:09:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.00049660 * 6400; time = 0.8054s; samplesPerSecond = 7946.3
10/04/2016 12:41:10:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.00047138 * 6400; time = 0.8066s; samplesPerSecond = 7934.7
10/04/2016 12:41:11: Finished Epoch[ 1 of 2]: [Training] rmse = 0.00194299 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=7.1272s
10/04/2016 12:41:11: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf.1'

10/04/2016 12:41:11: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples

10/04/2016 12:41:11: Starting minibatch loop.
10/04/2016 12:41:11:  Epoch[ 2 of 2]-Minibatch[   1-   1, 0.29%]: rmse = 0.00040728 * 128; time = 0.0613s; samplesPerSecond = 2087.0
10/04/2016 12:41:11:  Epoch[ 2 of 2]-Minibatch[   2-   2, 0.57%]: rmse = 0.00044909 * 128; time = 0.0161s; samplesPerSecond = 7959.2
10/04/2016 12:41:11:  Epoch[ 2 of 2]-Minibatch[   3-   3, 0.86%]: rmse = 0.00035913 * 128; time = 0.0159s; samplesPerSecond = 8053.4
10/04/2016 12:41:11:  Epoch[ 2 of 2]-Minibatch[   4-   4, 1.14%]: rmse = 0.00034037 * 128; time = 0.0163s; samplesPerSecond = 7832.1
10/04/2016 12:41:11:  Epoch[ 2 of 2]-Minibatch[   5-   5, 1.43%]: rmse = 0.00038534 * 128; time = 0.0160s; samplesPerSecond = 7990.0
10/04/2016 12:41:12:  Epoch[ 2 of 2]-Minibatch[   6-  50, 14.29%]: rmse = 0.00043103 * 5760; time = 0.7262s; samplesPerSecond = 7931.8
10/04/2016 12:41:13:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.00044830 * 6400; time = 0.8166s; samplesPerSecond = 7837.7
10/04/2016 12:41:13:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00042043 * 6400; time = 0.8058s; samplesPerSecond = 7942.4
10/04/2016 12:41:14:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00041931 * 6400; time = 0.8058s; samplesPerSecond = 7942.8
10/04/2016 12:41:15:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00041590 * 6400; time = 0.8051s; samplesPerSecond = 7949.4
10/04/2016 12:41:16:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00040739 * 6400; time = 0.8079s; samplesPerSecond = 7921.9
10/04/2016 12:41:17:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00040259 * 6400; time = 0.8058s; samplesPerSecond = 7942.7
10/04/2016 12:41:17: Finished Epoch[ 2 of 2]: [Training] rmse = 0.00041771 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=6.41936s
10/04/2016 12:41:17: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20161004124040.7614\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf'

10/04/2016 12:41:17: Action "train" complete.


10/04/2016 12:41:17: ##############################################################################
10/04/2016 12:41:17: #                                                                            #
10/04/2016 12:41:17: # Test command (test action)                                                 #
10/04/2016 12:41:17: #                                                                            #
10/04/2016 12:41:17: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *1], [3 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.




Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 16 matrices, 0 are shared as 0, and 16 are not shared.


10/04/2016 12:41:19: Minibatch[1-20]: rmse = 0.00098444 * 10000
10/04/2016 12:41:19: Final Results: Minibatch[1-20]: rmse = 0.00098444 * 10000

10/04/2016 12:41:19: Action "test" complete.

10/04/2016 12:41:19: __COMPLETED__
