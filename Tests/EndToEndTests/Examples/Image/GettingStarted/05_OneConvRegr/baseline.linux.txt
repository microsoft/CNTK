CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/05_OneConvRegr/../../../../../../Examples/Image/GettingStarted/05_OneConvRegr.cntk currentDirectory=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData RunDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu DataDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/05_OneConvRegr/../../../../../../Examples/Image/GettingStarted OutputDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=3]]
CNTK 1.7+ (HEAD c1c5b3, Sep 26 2016 14:54:18) on localhost at 2016/09/26 15:00:39

/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/05_OneConvRegr/../../../../../../Examples/Image/GettingStarted/05_OneConvRegr.cntk  currentDirectory=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData  RunDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu  DataDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/05_OneConvRegr/../../../../../../Examples/Image/GettingStarted  OutputDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=3]]
Changed current directory to /tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData
09/26/2016 15:00:40: Redirecting stderr to file -_trainNetwork_testNetwork.log
09/26/2016 15:00:40: -------------------------------------------------------------------
09/26/2016 15:00:40: Build info: 

09/26/2016 15:00:40: 		Built time: Sep 26 2016 14:54:18
09/26/2016 15:00:40: 		Last modified date: Mon Sep 26 14:52:48 2016
09/26/2016 15:00:40: 		Build type: release
09/26/2016 15:00:40: 		Build target: GPU
09/26/2016 15:00:40: 		With 1bit-SGD: no
09/26/2016 15:00:40: 		Math lib: mkl
09/26/2016 15:00:40: 		CUDA_PATH: /usr/local/cuda-7.5
09/26/2016 15:00:40: 		CUB_PATH: /usr/local/cub-1.4.1
09/26/2016 15:00:40: 		CUDNN_PATH: /usr/local/cudnn-5.1
09/26/2016 15:00:40: 		Build Branch: HEAD
09/26/2016 15:00:40: 		Build SHA1: c1c5b3d813ddeee7a9e67c0dd85c19b38fa7d47e
09/26/2016 15:00:40: 		Built by philly on 0b57d4b42723
09/26/2016 15:00:40: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
09/26/2016 15:00:40: -------------------------------------------------------------------
09/26/2016 15:00:41: -------------------------------------------------------------------
09/26/2016 15:00:41: GPU info:

09/26/2016 15:00:41: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/26/2016 15:00:41: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/26/2016 15:00:41: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/26/2016 15:00:41: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/26/2016 15:00:41: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 05_OneConvRegr.cntk:command=trainNetwork:testNetwork
configparameters: 05_OneConvRegr.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/05_OneConvRegr/../../../../../../Examples/Image/GettingStarted
configparameters: 05_OneConvRegr.cntk:currentDirectory=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData
configparameters: 05_OneConvRegr.cntk:dataDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData
configparameters: 05_OneConvRegr.cntk:deviceId=0
configparameters: 05_OneConvRegr.cntk:forceDeterministicAlgorithms=true
configparameters: 05_OneConvRegr.cntk:modelPath=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/Models/05_OneConvRegr
configparameters: 05_OneConvRegr.cntk:outputDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu
configparameters: 05_OneConvRegr.cntk:precision=float
configparameters: 05_OneConvRegr.cntk:rootDir=..
configparameters: 05_OneConvRegr.cntk:RunDir=/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu
configparameters: 05_OneConvRegr.cntk:stderr=-
configparameters: 05_OneConvRegr.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 05_OneConvRegr.cntk:timestamping=true
configparameters: 05_OneConvRegr.cntk:traceLevel=1
configparameters: 05_OneConvRegr.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        model = Sequential (
            Scale {featScale} :
            ConvolutionalLayer {16, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            DenseLayer {64} : ReLU : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels = Input (labelDim)
        ol = model (features)
        sqerr = SquareError (labels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        outputNodes     = (ol)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 1024
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = {
            features   = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=3]]

09/26/2016 15:00:41: Commands: trainNetwork testNetwork
09/26/2016 15:00:41: precision = "float"

09/26/2016 15:00:41: ##############################################################################
09/26/2016 15:00:41: #                                                                            #
09/26/2016 15:00:41: # trainNetwork command (train action)                                        #
09/26/2016 15:00:41: #                                                                            #
09/26/2016 15:00:41: ##############################################################################

09/26/2016 15:00:41: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[64 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.

Post-processing network...

2 roots:
	ol = Plus()
	rmse = Sqrt()

Validating network. 23 nodes to process in pass 1.

Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 0]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> ol.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> ol.x._.x.x._.x = ElementTimes (ol.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=3, init dims=[400 x 25], range=0.118818*1.000000, onCPU=true.
)Validating --> ol.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x._.x.x._.res.x = Plus (ol.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> ol.x._.x.x = RectifiedLinear (ol.x._.x.x._.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> _ol.x._.x = Pooling (ol.x._.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 14 x 14 x 16].
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[64 x 14 x 14 x 16] <- glorotUniform(seed=2, init dims=[64 x 3136], range=0.043301*1.000000, onCPU=true.
)Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _ol.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *] -> [64 x *]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *], [64] -> [64 x *]
Validating --> ol.x = RectifiedLinear (ol.x._.x) : [64 x *] -> [64 x *]
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 64].
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- glorotUniform(seed=1, init dims=[10 x 64], range=0.284747*1.000000, onCPU=true.
)Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, ol.x) : [10 x 64], [64 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *], [10] -> [10 x *]
Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> labels = InputValue() :  -> [10 x *]
Validating --> sqerr = SquareError (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.

ol.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_ol.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

09/26/2016 15:00:41: 
Model has 23 nodes. Using GPU 0.

09/26/2016 15:00:41: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 41 matrices, 24 are shared as 10, and 17 are not shared.

	{ model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16] (gradient)
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *] }
	{ ol.x._.x.x : [28 x 28 x 16 x *]
	  ol.x._.x.x._.c : [28 x 28 x 16 x *] (gradient) }
	{ _ol.x._.x : [14 x 14 x 16 x *]
	  ol.x._.x.x._.res.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[1].b : [1 x 1 x 16] (gradient)
	  ol.x._.x.PlusArgs[0] : [64 x *]
	  ol.x._.x.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16] (gradient)
	  ol.x._.x : [64 x *] }
	{ ol.x : [64 x *]
	  ol.x._.x.PlusArgs[0] : [64 x *] (gradient) }
	{ _ol.x._.x : [14 x 14 x 16 x *] (gradient)
	  ol.PlusArgs[0] : [10 x *]
	  ol.x._.x : [64 x *] (gradient) }
	{ model.arrayOfFunctions[6].b : [10] (gradient)
	  sqerr : [1] }
	{ model.arrayOfFunctions[6].W : [10 x 64] (gradient)
	  ol : [10 x *] (gradient)
	  rmse.z : [1 x 1] }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64] (gradient)
	  ol.x : [64 x *] (gradient)
	  sqerr : [1] (gradient) }


09/26/2016 15:00:41: Training 201834 parameters in 6 out of 6 parameter tensors and 18 nodes with gradient:

09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 16]
09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) : [64 x 14 x 14 x 16]
09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].b' (LearnableParameter operation) : [64]
09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) : [10 x 64]
09/26/2016 15:00:41: 	Node 'model.arrayOfFunctions[6].b' (LearnableParameter operation) : [10]

09/26/2016 15:00:41: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

09/26/2016 15:00:41: Starting Epoch 1: learning rate per sample = 0.001000  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

09/26/2016 15:00:41: Starting minibatch loop.
09/26/2016 15:00:44:  Epoch[ 1 of 3]-Minibatch[   1- 500]: rmse = 0.03535107 * 32000; time = 2.4640s; samplesPerSecond = 12986.9
09/26/2016 15:00:45: Finished Epoch[ 1 of 3]: [Training] rmse = 0.03238679 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=3.76178s
09/26/2016 15:00:45: SGD: Saving checkpoint model '/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/Models/05_OneConvRegr.1'

09/26/2016 15:00:45: Starting Epoch 2: learning rate per sample = 0.001000  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

09/26/2016 15:00:45: Starting minibatch loop.
09/26/2016 15:00:47:  Epoch[ 2 of 3]-Minibatch[   1- 500, 100.00%]: rmse = 0.02585223 * 32000; time = 1.4628s; samplesPerSecond = 21875.7
09/26/2016 15:00:48: Finished Epoch[ 2 of 3]: [Training] rmse = 0.02514478 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.001; epochTime=2.75287s
09/26/2016 15:00:48: SGD: Saving checkpoint model '/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/Models/05_OneConvRegr.2'

09/26/2016 15:00:48: Starting Epoch 3: learning rate per sample = 0.001000  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

09/26/2016 15:00:48: Starting minibatch loop.
09/26/2016 15:00:49:  Epoch[ 3 of 3]-Minibatch[   1- 500, 100.00%]: rmse = 0.02318400 * 32000; time = 1.4620s; samplesPerSecond = 21887.2
09/26/2016 15:00:51: Finished Epoch[ 3 of 3]: [Training] rmse = 0.02271308 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.001; epochTime=2.74789s
09/26/2016 15:00:51: SGD: Saving checkpoint model '/tmp/cntk-test-20160926145921.993716/Examples/Image/GettingStarted_05_OneConvRegr@release_gpu/Models/05_OneConvRegr'

09/26/2016 15:00:51: Action "train" complete.


09/26/2016 15:00:51: ##############################################################################
09/26/2016 15:00:51: #                                                                            #
09/26/2016 15:00:51: # testNetwork command (test action)                                          #
09/26/2016 15:00:51: #                                                                            #
09/26/2016 15:00:51: ##############################################################################


Post-processing network...

2 roots:
	ol = Plus()
	rmse = Sqrt()

Validating network. 23 nodes to process in pass 1.

Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 64]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 14 x 14 x 16]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 1 x 16]
Validating --> ol.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> ol.x._.x.x._.x = ElementTimes (ol.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> ol.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, ol.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.x._.x.x._.res.x = Plus (ol.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> ol.x._.x.x = RectifiedLinear (ol.x._.x.x._.res.x) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> _ol.x._.x = Pooling (ol.x._.x.x) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _ol.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *1] -> [64 x *1]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *1], [64] -> [64 x *1]
Validating --> ol.x = RectifiedLinear (ol.x._.x) : [64 x *1] -> [64 x *1]
Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, ol.x) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *1], [10] -> [10 x *1]
Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> sqerr = SquareError (labels, ol) : [10 x *1], [10 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.

ol.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_ol.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 23 matrices, 0 are shared as 0, and 23 are not shared.


09/26/2016 15:00:51: Minibatch[1-10]: rmse = 0.00543235 * 10000
09/26/2016 15:00:51: Final Results: Minibatch[1-10]: rmse = 0.00543235 * 10000

09/26/2016 15:00:51: Action "test" complete.

09/26/2016 15:00:51: __COMPLETED__