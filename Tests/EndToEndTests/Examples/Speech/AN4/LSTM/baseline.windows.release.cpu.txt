=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu DeviceId=-1 timestamping=true speechTrain=[SGD=[maxEpochs=1]] speechTrain=[SGD=[epochSize=64]] parallelTrain=false
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 13:15:46
		Last modified date: Tue Apr 26 23:35:31 2016
		Build type: Release
		Build target: GPU
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
		Built by svcphil on cntk-muc01
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
05/03/2016 13:22:28: -------------------------------------------------------------------
05/03/2016 13:22:28: Build info: 

05/03/2016 13:22:28: 		Built time: May  3 2016 13:15:46
05/03/2016 13:22:28: 		Last modified date: Tue Apr 26 23:35:31 2016
05/03/2016 13:22:28: 		Build type: Release
05/03/2016 13:22:28: 		Build target: GPU
05/03/2016 13:22:28: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
05/03/2016 13:22:28: 		CUB_PATH: c:\src\cub-1.4.1
05/03/2016 13:22:28: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
05/03/2016 13:22:28: 		Build Branch: HEAD
05/03/2016 13:22:28: 		Build SHA1: af96f7cce6c3c78a4f1e9315e061291c79360e12
05/03/2016 13:22:28: 		Built by svcphil on cntk-muc01
05/03/2016 13:22:28: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
05/03/2016 13:22:28: -------------------------------------------------------------------

05/03/2016 13:22:28: Running on DPHAIM-22 at 2016/05/03 13:22:28
05/03/2016 13:22:28: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu  DeviceId=-1  timestamping=true  speechTrain=[SGD=[maxEpochs=1]]  speechTrain=[SGD=[epochSize=64]]  parallelTrain=false



05/03/2016 13:22:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 13:22:28: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
DeviceId=-1
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

05/03/2016 13:22:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 13:22:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 13:22:28: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
DeviceId=-1
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
parallelTrain=false

05/03/2016 13:22:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 13:22:28: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: LSTM-NDL.cntk:command=speechTrain
configparameters: LSTM-NDL.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
configparameters: LSTM-NDL.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:deviceId=-1
configparameters: LSTM-NDL.cntk:frameMode=false
configparameters: LSTM-NDL.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models
configparameters: LSTM-NDL.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn
configparameters: LSTM-NDL.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
configparameters: LSTM-NDL.cntk:parallelTrain=false
configparameters: LSTM-NDL.cntk:precision=float
configparameters: LSTM-NDL.cntk:RootDir=..
configparameters: LSTM-NDL.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu
configparameters: LSTM-NDL.cntk:speechTrain=[
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
] [SGD=[maxEpochs=1]] [SGD=[epochSize=64]]

configparameters: LSTM-NDL.cntk:timestamping=true
configparameters: LSTM-NDL.cntk:traceLevel=1
configparameters: LSTM-NDL.cntk:truncated=true
05/03/2016 13:22:28: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 13:22:28: Commands: speechTrain
05/03/2016 13:22:28: Precision = "float"
05/03/2016 13:22:28: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn
05/03/2016 13:22:28: CNTKCommandTrainInfo: speechTrain : 1
05/03/2016 13:22:28: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

05/03/2016 13:22:28: ##############################################################################
05/03/2016 13:22:28: #                                                                            #
05/03/2016 13:22:28: # Action "train"                                                             #
05/03/2016 13:22:28: #                                                                            #
05/03/2016 13:22:28: ##############################################################################

05/03/2016 13:22:28: CNTKCommandTrainBegin: speechTrain
NDLBuilder Using CPU
reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

05/03/2016 13:22:29: Creating virgin network.

Post-processing network...

6 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()
	featNorm.xMean = Mean()
	featNorm.xStdDev = InvStdDev()
	logPrior.prior = Mean()
	scaledLogLikelihood = Minus()

Loop[0] --> Loop_LSTMoutput1.output -> 24 nodes

	LSTMoutput1.dh	LSTMoutput1.whh	LSTMoutput1.wxxpbpwhh
	LSTMoutput1.G4	LSTMoutput1.G3	LSTMoutput1.dc
	LSTMoutput1.Wcfdc	LSTMoutput1.unnamed151	LSTMoutput1.ft
	LSTMoutput1.bft	LSTMoutput1.G1	LSTMoutput1.Wcidc
	LSTMoutput1.unnamed149	LSTMoutput1.it	LSTMoutput1.G2
	LSTMoutput1.unnamed150	LSTMoutput1.bit	LSTMoutput1.ct
	LSTMoutput1.Wcoct	LSTMoutput1.unnamed152	LSTMoutput1.ot
	LSTMoutput1.unnamed153	LSTMoutput1.mt	LSTMoutput1.output

Loop[1] --> Loop_LSTMoutput2.output -> 24 nodes

	LSTMoutput2.dh	LSTMoutput2.whh	LSTMoutput2.wxxpbpwhh
	LSTMoutput2.G4	LSTMoutput2.G3	LSTMoutput2.dc
	LSTMoutput2.Wcfdc	LSTMoutput2.unnamed159	LSTMoutput2.ft
	LSTMoutput2.bft	LSTMoutput2.G1	LSTMoutput2.Wcidc
	LSTMoutput2.unnamed157	LSTMoutput2.it	LSTMoutput2.G2
	LSTMoutput2.unnamed158	LSTMoutput2.bit	LSTMoutput2.ct
	LSTMoutput2.Wcoct	LSTMoutput2.unnamed160	LSTMoutput2.ot
	LSTMoutput2.unnamed161	LSTMoutput2.mt	LSTMoutput2.output

Loop[2] --> Loop_LSTMoutput3.output -> 24 nodes

	LSTMoutput3.dh	LSTMoutput3.whh	LSTMoutput3.wxxpbpwhh
	LSTMoutput3.G4	LSTMoutput3.G3	LSTMoutput3.dc
	LSTMoutput3.Wcfdc	LSTMoutput3.unnamed167	LSTMoutput3.ft
	LSTMoutput3.bft	LSTMoutput3.G1	LSTMoutput3.Wcidc
	LSTMoutput3.unnamed165	LSTMoutput3.it	LSTMoutput3.G2
	LSTMoutput3.unnamed166	LSTMoutput3.bit	LSTMoutput3.ct
	LSTMoutput3.Wcoct	LSTMoutput3.unnamed168	LSTMoutput3.ot
	LSTMoutput3.unnamed169	LSTMoutput3.mt	LSTMoutput3.output

Validating network. 113 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W = LearnableParameter() :  -> [132 x 512]
Validating --> LSTMoutput3.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput3.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput2.wx = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput1.wx = LearnableParameter() :  -> [4096 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> featNorm.xMean = Mean (features) : [363 x *] -> [363]
Validating --> featNorm.xStdDev = InvStdDev (features) : [363 x *] -> [363]
Validating --> featNorm.xNorm = PerDimMeanVarNormalization (features, featNorm.xMean, featNorm.xStdDev) : [363 x *], [363], [363] -> [363 x *]
Validating --> LSTMoutput1.wxx = Times (LSTMoutput1.wx, featNorm.xNorm) : [4096 x 363], [363 x *] -> [4096 x *]
Validating --> LSTMoutput1.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput1.wxxpb = Plus (LSTMoutput1.wxx, LSTMoutput1.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput1.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput1.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput1.wxxpbpwhh = Plus (LSTMoutput1.wxxpb, LSTMoutput1.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput1.G4 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G3 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed151 = Plus (LSTMoutput1.G3, LSTMoutput1.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ft = Sigmoid (LSTMoutput1.unnamed151) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bft = ElementTimes (LSTMoutput1.ft, LSTMoutput1.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G1 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed149 = Plus (LSTMoutput1.G1, LSTMoutput1.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.it = Sigmoid (LSTMoutput1.unnamed149) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G2 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed150 = Tanh (LSTMoutput1.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bit = ElementTimes (LSTMoutput1.it, LSTMoutput1.unnamed150) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ct = Plus (LSTMoutput1.bft, LSTMoutput1.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcoct = DiagTimes (LSTMoutput1.Wco, LSTMoutput1.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed152 = Plus (LSTMoutput1.G4, LSTMoutput1.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ot = Sigmoid (LSTMoutput1.unnamed152) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed153 = Tanh (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.mt = ElementTimes (LSTMoutput1.ot, LSTMoutput1.unnamed153) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.output = Times (LSTMoutput1.Wmr, LSTMoutput1.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.wxx = Times (LSTMoutput2.wx, LSTMoutput1.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput2.wxxpb = Plus (LSTMoutput2.wxx, LSTMoutput2.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput2.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput2.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput2.wxxpbpwhh = Plus (LSTMoutput2.wxxpb, LSTMoutput2.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput2.G4 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G3 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed159 = Plus (LSTMoutput2.G3, LSTMoutput2.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ft = Sigmoid (LSTMoutput2.unnamed159) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bft = ElementTimes (LSTMoutput2.ft, LSTMoutput2.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G1 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed157 = Plus (LSTMoutput2.G1, LSTMoutput2.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.it = Sigmoid (LSTMoutput2.unnamed157) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G2 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed158 = Tanh (LSTMoutput2.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bit = ElementTimes (LSTMoutput2.it, LSTMoutput2.unnamed158) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ct = Plus (LSTMoutput2.bft, LSTMoutput2.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcoct = DiagTimes (LSTMoutput2.Wco, LSTMoutput2.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed160 = Plus (LSTMoutput2.G4, LSTMoutput2.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ot = Sigmoid (LSTMoutput2.unnamed160) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed161 = Tanh (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.mt = ElementTimes (LSTMoutput2.ot, LSTMoutput2.unnamed161) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.output = Times (LSTMoutput2.Wmr, LSTMoutput2.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.wxx = Times (LSTMoutput3.wx, LSTMoutput2.output) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput3.wxxpb = Plus (LSTMoutput3.wxx, LSTMoutput3.b) : [4096 x 1 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput3.Wh = LearnableParameter() :  -> [4096 x 512]
Validating --> LSTMoutput3.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wci = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput3.wxxpbpwhh = Plus (LSTMoutput3.wxxpb, LSTMoutput3.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput3.G4 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G3 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed167 = Plus (LSTMoutput3.G3, LSTMoutput3.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ft = Sigmoid (LSTMoutput3.unnamed167) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bft = ElementTimes (LSTMoutput3.ft, LSTMoutput3.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G1 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed165 = Plus (LSTMoutput3.G1, LSTMoutput3.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.it = Sigmoid (LSTMoutput3.unnamed165) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G2 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed166 = Tanh (LSTMoutput3.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bit = ElementTimes (LSTMoutput3.it, LSTMoutput3.unnamed166) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ct = Plus (LSTMoutput3.bft, LSTMoutput3.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcoct = DiagTimes (LSTMoutput3.Wco, LSTMoutput3.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed168 = Plus (LSTMoutput3.G4, LSTMoutput3.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ot = Sigmoid (LSTMoutput3.unnamed168) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed169 = Tanh (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.mt = ElementTimes (LSTMoutput3.ot, LSTMoutput3.unnamed169) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.output = Times (LSTMoutput3.Wmr, LSTMoutput3.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Validating --> unnamed174 = Times (W, LSTMoutput3.output) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> b = LearnableParameter() :  -> [132 x 1]
Validating --> LSTMoutputW = Plus (unnamed174, b) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> err = ClassificationError (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.prior = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior.logPrior = Log (logPrior.prior) : [132] -> [132]
Validating --> scaledLogLikelihood = Minus (LSTMoutputW, logPrior.logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 88 nodes to process in pass 2.

Validating --> LSTMoutput1.dh = PastValue (LSTMoutput1.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput1.dc = PastValue (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.dh = PastValue (LSTMoutput2.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.dc = PastValue (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.dh = PastValue (LSTMoutput3.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.dc = PastValue (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]

Validating network. 15 nodes to process in pass 3.


Validating network, final pass.



29 out of 113 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 13:22:29: Created model with 113 nodes on CPU.

05/03/2016 13:22:29: Training criterion node(s):
05/03/2016 13:22:29: 	ce = CrossEntropyWithSoftmax

05/03/2016 13:22:29: Evaluation criterion node(s):

05/03/2016 13:22:29: 	err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featNorm.xMean Gradient[363]] [featNorm.xNorm Gradient[363 x *]] [featNorm.xStdDev Gradient[363]] [features Gradient[363 x *]] [labels Gradient[132 x *]] [logPrior.logPrior Gradient[132]] [logPrior.prior Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
0000009F4EF6A100: {[LSTMoutput3.Wci Value[1024]] }
0000009F4EF6A2E0: {[LSTMoutput3.Wcf Value[1024]] }
0000009F4EF6A420: {[LSTMoutput3.Wco Value[1024]] }
0000009F4EF6A600: {[LSTMoutput3.Wh Value[4096 x 512]] }
0000009F4EF6A880: {[LSTMoutput2.Wco Gradient[1024]] [LSTMoutput3.dc Value[1024 x 1 x *]] }
0000009F4EF6AB00: {[LSTMoutput1.Wco Gradient[1024]] [LSTMoutput2.dc Value[1024 x 1 x *]] }
0000009F4EF6AC40: {[LSTMoutput2.mt Gradient[1024 x 1 x *]] [LSTMoutput3.dh Value[512 x 1 x *]] [LSTMoutput3.wxx Gradient[4096 x 1 x *]] }
0000009F4EF6B140: {[LSTMoutput2.Wco Value[1024]] }
0000009F4EF6B6E0: {[LSTMoutput2.Wmr Value[512 x 1024]] }
0000009F4EF6BB40: {[LSTMoutput3.wx Value[4096 x 512]] }
0000009F4EF6BD20: {[LSTMoutput1.mt Gradient[1024 x 1 x *]] [LSTMoutput2.dh Value[512 x 1 x *]] [LSTMoutput2.wxx Gradient[4096 x 1 x *]] }
0000009F4EF6BDC0: {[LSTMoutput3.b Value[4096 x 1]] }
0000009F4EF70D60: {[featNorm.xStdDev Value[363]] }
0000009F4EF70E00: {[featNorm.xMean Value[363]] }
0000009F4EF71940: {[LSTMoutput1.wx Value[4096 x 363]] }
0000009F4EF725C0: {[features Value[363 x *]] }
0000009F4EF72660: {[labels Value[132 x *]] }
0000009F50C721C0: {[featNorm.xNorm Value[363 x *]] }
0000009F50C72440: {[scaledLogLikelihood Value[132 x 1 x *]] }
0000009F50C724E0: {[LSTMoutput1.wxx Value[4096 x *]] }
0000009F50C72DA0: {[logPrior.prior Value[132]] }
0000009F50C737A0: {[LSTMoutput3.Wmr Value[512 x 1024]] }
0000009F50C73AC0: {[err Value[1]] }
0000009F50C73B60: {[logPrior.logPrior Value[132]] }
0000009F50C73DE0: {[W Value[132 x 512]] }
0000009F50C73E80: {[b Value[132 x 1]] }
0000009F50C73F20: {[ce Value[1]] }
0000009F50D1B810: {[LSTMoutput1.Wcf Value[1024]] }
0000009F50D1BA90: {[LSTMoutput2.Wcf Value[1024]] }
0000009F50D1BB30: {[LSTMoutput1.Wmr Value[512 x 1024]] }
0000009F50D1BBD0: {[LSTMoutput2.b Value[4096 x 1]] }
0000009F50D1BD10: {[LSTMoutput1.Wco Value[1024]] }
0000009F50D1C350: {[LSTMoutput1.dh Value[512 x 1 x *]] [LSTMoutput1.wxx Gradient[4096 x *]] }
0000009F50D1C530: {[LSTMoutput2.wx Value[4096 x 512]] }
0000009F50D1C5D0: {[LSTMoutput2.Wh Value[4096 x 512]] }
0000009F50D1C7B0: {[LSTMoutput2.Wci Value[1024]] }
0000009F50D1CB70: {[LSTMoutput1.Wh Value[4096 x 512]] }
0000009F50D1CF30: {[LSTMoutput1.dc Value[1024 x 1 x *]] }
0000009F50D1D250: {[LSTMoutput1.b Value[4096 x 1]] }
0000009F50D1D2F0: {[LSTMoutput1.Wci Value[1024]] }
0000009F50D4D070: {[LSTMoutput1.wxxpbpwhh Value[4096 x 1 x *]] }
0000009F50D4D110: {[LSTMoutput1.unnamed153 Value[1024 x 1 x *]] }
0000009F50D4D1B0: {[LSTMoutput1.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput2.unnamed159 Value[1024 x 1 x *]] }
0000009F50D4D250: {[LSTMoutput1.Wci Gradient[1024]] [LSTMoutput2.G1 Value[1024 x 1 x *]] }
0000009F50D4D2F0: {[LSTMoutput1.mt Value[1024 x 1 x *]] }
0000009F50D4D390: {[LSTMoutput2.unnamed157 Value[1024 x 1 x *]] }
0000009F50D4D430: {[LSTMoutput1.G1 Value[1024 x 1 x *]] }
0000009F50D4D4D0: {[LSTMoutput2.Wmr Gradient[512 x 1024]] [LSTMoutput3.wxx Value[4096 x 1 x *]] }
0000009F50D4D570: {[LSTMoutput3.wx Gradient[4096 x 512]] [LSTMoutput3.wxxpb Value[4096 x 1 x *]] }
0000009F50D4D610: {[LSTMoutput2.unnamed160 Value[1024 x 1 x *]] }
0000009F50D4D6B0: {[LSTMoutput2.ot Gradient[1024 x 1 x *]] [LSTMoutput3.whh Value[4096 x 1 x *]] }
0000009F50D4D750: {[LSTMoutput1.whh Gradient[4096 x 1 x *]] [LSTMoutput2.G2 Value[1024 x 1 x *]] }
0000009F50D4D7F0: {[LSTMoutput1.ot Gradient[1024 x 1 x *]] [LSTMoutput2.whh Value[4096 x 1 x *]] }
0000009F50D4D890: {[LSTMoutput1.G1 Gradient[1024 x 1 x *]] [LSTMoutput2.ft Value[1024 x 1 x *]] }
0000009F50D4D930: {[LSTMoutput1.unnamed150 Value[1024 x 1 x *]] }
0000009F50D4D9D0: {[LSTMoutput1.Wmr Gradient[512 x 1024]] [LSTMoutput2.wxx Value[4096 x 1 x *]] }
0000009F50D4DA70: {[LSTMoutput1.ot Value[1024 x 1 x *]] }
0000009F50D4DB10: {[LSTMoutput1.it Value[1024 x 1 x *]] }
0000009F50D4DBB0: {[LSTMoutput1.bft Value[1024 x 1 x *]] }
0000009F50D4DC50: {[LSTMoutput1.unnamed152 Value[1024 x 1 x *]] }
0000009F50D4DCF0: {[LSTMoutput2.wx Gradient[4096 x 512]] [LSTMoutput2.wxxpb Value[4096 x 1 x *]] }
0000009F50D4DD90: {[LSTMoutput1.G4 Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Value[1024 x 1 x *]] }
0000009F50D4DE30: {[LSTMoutput1.ft Value[1024 x 1 x *]] }
0000009F50D4DED0: {[LSTMoutput2.G3 Value[1024 x 1 x *]] }
0000009F50D4DF70: {[LSTMoutput1.unnamed151 Value[1024 x 1 x *]] }
0000009F50D4E010: {[LSTMoutput1.ct Value[1024 x 1 x *]] }
0000009F50D4E0B0: {[LSTMoutput1.wx Gradient[4096 x 363]] [LSTMoutput1.wxxpb Value[4096 x 1 x *]] }
0000009F50D4E150: {[LSTMoutput2.bft Value[1024 x 1 x *]] }
0000009F50D4E1F0: {[LSTMoutput1.G3 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Value[1024 x 1 x *]] }
0000009F50D4E290: {[LSTMoutput1.unnamed149 Value[1024 x 1 x *]] }
0000009F50D4E330: {[LSTMoutput1.Wcoct Value[1024 x 1 x *]] }
0000009F50D4E3D0: {[LSTMoutput1.Wcf Gradient[1024]] [LSTMoutput2.it Value[1024 x 1 x *]] }
0000009F50D4E470: {[LSTMoutput1.b Gradient[4096 x 1]] [LSTMoutput1.dh Gradient[512 x 1 x *]] [LSTMoutput2.unnamed158 Value[1024 x 1 x *]] }
0000009F50D4E510: {[LSTMoutput1.Wcidc Value[1024 x 1 x *]] }
0000009F50D4E5B0: {[LSTMoutput1.unnamed150 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Value[1024 x 1 x *]] }
0000009F50D4E650: {[LSTMoutput2.bit Value[1024 x 1 x *]] }
0000009F50D4E6F0: {[LSTMoutput1.G2 Value[1024 x 1 x *]] }
0000009F50D4E790: {[LSTMoutput2.ct Value[1024 x 1 x *]] }
0000009F50D4E830: {[LSTMoutput2.Wcoct Value[1024 x 1 x *]] }
0000009F50D4E8D0: {[LSTMoutput2.ot Value[1024 x 1 x *]] }
0000009F50D4E970: {[LSTMoutput2.unnamed161 Value[1024 x 1 x *]] }
0000009F50D4EA10: {[LSTMoutput2.mt Value[1024 x 1 x *]] }
0000009F50D4EAB0: {[LSTMoutput1.G3 Value[1024 x 1 x *]] }
0000009F50D4EB50: {[LSTMoutput2.output Value[512 x 1 x *]] }
0000009F50D4EBF0: {[LSTMoutput1.whh Value[4096 x 1 x *]] }
0000009F50D4EC90: {[LSTMoutput1.output Value[512 x 1 x *]] }
0000009F50D4ED30: {[LSTMoutput1.Wcfdc Value[1024 x 1 x *]] }
0000009F50D4EDD0: {[LSTMoutput1.G4 Value[1024 x 1 x *]] }
0000009F50D4EE70: {[LSTMoutput1.bit Value[1024 x 1 x *]] }
0000009F50D4EF10: {[LSTMoutput1.ct Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Value[4096 x 1 x *]] }
0000009F50D51090: {[LSTMoutput3.bit Value[1024 x 1 x *]] }
0000009F50D511D0: {[b Gradient[132 x 1]] }
0000009F50D51270: {[LSTMoutput1.ft Gradient[1024 x 1 x *]] [LSTMoutput3.bft Gradient[1024 x 1 x *]] }
0000009F50D51310: {[LSTMoutput3.unnamed166 Gradient[1024 x 1 x *]] }
0000009F50D513B0: {[LSTMoutput1.unnamed153 Gradient[1024 x 1 x *]] [LSTMoutput2.whh Gradient[4096 x 1 x *]] [LSTMoutput3.G2 Value[1024 x 1 x *]] }
0000009F50D51450: {[LSTMoutput3.output Value[512 x 1 x *]] }
0000009F50D514F0: {[LSTMoutput3.G3 Value[1024 x 1 x *]] }
0000009F50D51590: {[LSTMoutput3.ot Gradient[1024 x 1 x *]] }
0000009F50D51630: {[LSTMoutput3.Wcoct Gradient[1024 x 1 x *]] }
0000009F50D516D0: {[LSTMoutput3.Wco Gradient[1024]] }
0000009F50D51810: {[LSTMoutput1.dc Gradient[1024 x 1 x *]] [LSTMoutput2.G1 Gradient[1024 x 1 x *]] [LSTMoutput3.ft Value[1024 x 1 x *]] }
0000009F50D518B0: {[LSTMoutput1.bft Gradient[1024 x 1 x *]] [LSTMoutput2.dc Gradient[1024 x 1 x *]] [LSTMoutput3.G1 Gradient[1024 x 1 x *]] }
0000009F50D51950: {[LSTMoutput1.G2 Gradient[1024 x 1 x *]] [LSTMoutput2.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Gradient[1024 x 1 x *]] }
0000009F50D519F0: {[LSTMoutput2.ct Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Value[4096 x 1 x *]] }
0000009F50D51A90: {[LSTMoutput1.unnamed152 Gradient[1024 x 1 x *]] [LSTMoutput2.wxxpbpwhh Gradient[4096 x 1 x *]] [LSTMoutput3.unnamed167 Value[1024 x 1 x *]] }
0000009F50D51B30: {[LSTMoutput3.mt Gradient[1024 x 1 x *]] [unnamed174 Gradient[132 x 1 x *]] }
0000009F50D51BD0: {[LSTMoutput3.mt Value[1024 x 1 x *]] }
0000009F50D51D10: {[LSTMoutput1.unnamed151 Gradient[1024 x 1 x *]] [LSTMoutput3.bft Value[1024 x 1 x *]] }
0000009F50D51DB0: {[LSTMoutput2.unnamed158 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Value[1024 x 1 x *]] }
0000009F50D51E50: {[LSTMoutput2.Wci Gradient[1024]] [LSTMoutput3.G1 Value[1024 x 1 x *]] }
0000009F50D51EF0: {[LSTMoutput2.Wcf Gradient[1024]] [LSTMoutput3.it Value[1024 x 1 x *]] }
0000009F50D51F90: {[LSTMoutput3.ot Value[1024 x 1 x *]] }
0000009F50D52030: {[LSTMoutput3.unnamed169 Value[1024 x 1 x *]] }
0000009F50D520D0: {[LSTMoutput3.output Gradient[512 x 1 x *]] [LSTMoutputW Gradient[132 x 1 x *]] }
0000009F50D52170: {[LSTMoutput3.ct Gradient[1024 x 1 x *]] }
0000009F50D52210: {[LSTMoutput1.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput2.G4 Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Value[1024 x 1 x *]] }
0000009F50D522B0: {[LSTMoutputW Value[132 x 1 x *]] [W Gradient[132 x 512]] }
0000009F50D52350: {[ce Gradient[1]] }
0000009F50D523F0: {[LSTMoutput3.unnamed169 Gradient[1024 x 1 x *]] }
0000009F50D52490: {[LSTMoutput3.unnamed168 Gradient[1024 x 1 x *]] }
0000009F50D52530: {[LSTMoutput3.Wmr Gradient[512 x 1024]] [unnamed174 Value[132 x 1 x *]] }
0000009F50D525D0: {[LSTMoutput2.Wcoct Gradient[1024 x 1 x *]] [LSTMoutput3.G4 Gradient[1024 x 1 x *]] }
0000009F50D52670: {[LSTMoutput1.it Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Value[1024 x 1 x *]] }
0000009F50D527B0: {[LSTMoutput2.Wh Gradient[4096 x 512]] [LSTMoutput3.G2 Gradient[1024 x 1 x *]] }
0000009F50D52850: {[LSTMoutput2.unnamed160 Gradient[1024 x 1 x *]] [LSTMoutput3.wxxpbpwhh Gradient[4096 x 1 x *]] }
0000009F50D528F0: {[LSTMoutput1.bit Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed165 Gradient[1024 x 1 x *]] }
0000009F50D52990: {[LSTMoutput2.G3 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcidc Value[1024 x 1 x *]] }
0000009F50D52AD0: {[LSTMoutput3.Wcoct Value[1024 x 1 x *]] }
0000009F50D52C10: {[LSTMoutput2.b Gradient[4096 x 1]] [LSTMoutput2.dh Gradient[512 x 1 x *]] [LSTMoutput3.unnamed166 Value[1024 x 1 x *]] }
0000009F50D52D50: {[LSTMoutput3.unnamed168 Value[1024 x 1 x *]] }
0000009F50D52DF0: {[LSTMoutput3.ct Value[1024 x 1 x *]] }
0000009F50D52E90: {[LSTMoutput3.bit Gradient[1024 x 1 x *]] }
0000009F50D52F30: {[LSTMoutput1.output Gradient[512 x 1 x *]] [LSTMoutput2.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput3.it Gradient[1024 x 1 x *]] }
0000009F50D6E260: {[LSTMoutput1.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput2.ft Gradient[1024 x 1 x *]] }
0000009F50D6E440: {[LSTMoutput1.wxxpb Gradient[4096 x 1 x *]] [LSTMoutput2.it Gradient[1024 x 1 x *]] }
0000009F50D6EA80: {[LSTMoutput3.G3 Gradient[1024 x 1 x *]] }
0000009F50D6EB20: {[LSTMoutput3.Wci Gradient[1024]] }
0000009F50D6EBC0: {[LSTMoutput2.output Gradient[512 x 1 x *]] [LSTMoutput3.wxxpb Gradient[4096 x 1 x *]] }
0000009F50D6EC60: {[LSTMoutput1.Wcfdc Gradient[1024 x 1 x *]] [LSTMoutput2.Wcidc Gradient[1024 x 1 x *]] [LSTMoutput3.ft Gradient[1024 x 1 x *]] }
0000009F50D6ED00: {[LSTMoutput2.unnamed157 Gradient[1024 x 1 x *]] [LSTMoutput3.unnamed167 Gradient[1024 x 1 x *]] }
0000009F50D6EDA0: {[LSTMoutput3.Wh Gradient[4096 x 512]] }
0000009F50D6EE40: {[LSTMoutput2.bft Gradient[1024 x 1 x *]] [LSTMoutput3.dc Gradient[1024 x 1 x *]] }
0000009F50D6EF80: {[LSTMoutput2.unnamed161 Gradient[1024 x 1 x *]] [LSTMoutput3.whh Gradient[4096 x 1 x *]] }
0000009F50D6F0C0: {[LSTMoutput1.Wh Gradient[4096 x 512]] [LSTMoutput2.G2 Gradient[1024 x 1 x *]] [LSTMoutput3.Wcfdc Gradient[1024 x 1 x *]] }
0000009F50D6F160: {[LSTMoutput1.unnamed149 Gradient[1024 x 1 x *]] [LSTMoutput2.unnamed159 Gradient[1024 x 1 x *]] }
0000009F50D6FC00: {[LSTMoutput2.bit Gradient[1024 x 1 x *]] }
0000009F50D6FE80: {[LSTMoutput3.b Gradient[4096 x 1]] [LSTMoutput3.dh Gradient[512 x 1 x *]] }
0000009F50D6FF20: {[LSTMoutput3.Wcf Gradient[1024]] }


05/03/2016 13:22:29: Precomputing --> 3 PreCompute nodes found.

05/03/2016 13:22:29: 	featNorm.xMean = Mean()
05/03/2016 13:22:29: 	featNorm.xStdDev = InvStdDev()
05/03/2016 13:22:29: 	logPrior.prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

05/03/2016 13:22:31: Precomputing --> Completed.


05/03/2016 13:22:32: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..64] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

05/03/2016 13:22:32: Starting minibatch loop.
05/03/2016 13:22:36:  Epoch[ 1 of 1]-Minibatch[   1-  10, 250.00%]: ce = 4.87647133 * 160; err = 0.90625000 * 160; time = 4.1906s; samplesPerSecond = 38.2
05/03/2016 13:22:40:  Epoch[ 1 of 1]-Minibatch[  11-  20, 500.00%]: ce = 4.86492549 * 148; err = 0.88513514 * 148; time = 4.0238s; samplesPerSecond = 36.8
05/03/2016 13:22:40: Finished Epoch[ 1 of 1]: [Training] ce = 4.87092333 * 308; err = 0.89610390 * 308; totalSamplesSeen = 308; learningRatePerSample = 0.001953125; epochTime=8.21761s
05/03/2016 13:22:40: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160503132211.330996\Examples\Speech\AN4_LSTM@release_cpu/Models/cntkSpeechLSTM.dnn'
05/03/2016 13:22:41: CNTKCommandTrainEnd: speechTrain

05/03/2016 13:22:41: Action "train" complete.

05/03/2016 13:22:41: __COMPLETED__