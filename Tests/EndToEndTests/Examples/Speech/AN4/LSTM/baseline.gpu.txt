CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu DeviceId=0 timestamping=true speechTrain=[SGD=[maxEpochs=1]] speechTrain=[SGD=[epochSize=64]] speechTrain=[reader=[useMersenneTwisterRand=true]] parallelTrain=false
-------------------------------------------------------------------
Build info: 

		Built time: Aug 16 2016 03:09:16
		Last modified date: Fri Aug 12 05:28:23 2016
		Build type: Release
		Build target: GPU
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
		Built by svcphil on Philly-Pool1
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
08/16/2016 03:20:41: -------------------------------------------------------------------
08/16/2016 03:20:41: Build info: 

08/16/2016 03:20:41: 		Built time: Aug 16 2016 03:09:16
08/16/2016 03:20:41: 		Last modified date: Fri Aug 12 05:28:23 2016
08/16/2016 03:20:41: 		Build type: Release
08/16/2016 03:20:41: 		Build target: GPU
08/16/2016 03:20:41: 		Math lib: mkl
08/16/2016 03:20:41: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/16/2016 03:20:41: 		CUB_PATH: c:\src\cub-1.4.1
08/16/2016 03:20:41: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/16/2016 03:20:41: 		Build Branch: HEAD
08/16/2016 03:20:41: 		Build SHA1: 026b1e772b963461e189f8f00aa7ed6951298f84
08/16/2016 03:20:41: 		Built by svcphil on Philly-Pool1
08/16/2016 03:20:41: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows\Source\CNTK\
08/16/2016 03:20:41: -------------------------------------------------------------------
08/16/2016 03:20:43: -------------------------------------------------------------------
08/16/2016 03:20:43: GPU info:

08/16/2016 03:20:43: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:20:43: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:20:43: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/16/2016 03:20:43: -------------------------------------------------------------------

08/16/2016 03:20:43: Running on DPHAIM-25 at 2016/08/16 03:20:43
08/16/2016 03:20:43: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/LSTM-NDL.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu  DeviceId=0  timestamping=true  speechTrain=[SGD=[maxEpochs=1]]  speechTrain=[SGD=[epochSize=64]]  speechTrain=[reader=[useMersenneTwisterRand=true]]  parallelTrain=false



08/16/2016 03:20:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:20:43: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
DeviceId=0
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
speechTrain=[reader=[useMersenneTwisterRand=true]]
parallelTrain=false

08/16/2016 03:20:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:20:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/16/2016 03:20:43: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models"
deviceId = -1
command = speechTrain
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn"
parallelTrain = true
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
DeviceId=0
timestamping=true
speechTrain=[SGD=[maxEpochs=1]]
speechTrain=[SGD=[epochSize=64]]
speechTrain=[reader=[useMersenneTwisterRand=true]]
parallelTrain=false

08/16/2016 03:20:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/16/2016 03:20:43: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: LSTM-NDL.cntk:command=speechTrain
configparameters: LSTM-NDL.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config
configparameters: LSTM-NDL.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data
configparameters: LSTM-NDL.cntk:deviceId=0
configparameters: LSTM-NDL.cntk:frameMode=false
configparameters: LSTM-NDL.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models
configparameters: LSTM-NDL.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn
configparameters: LSTM-NDL.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
configparameters: LSTM-NDL.cntk:parallelTrain=false
configparameters: LSTM-NDL.cntk:precision=float
configparameters: LSTM-NDL.cntk:RootDir=..
configparameters: LSTM-NDL.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu
configparameters: LSTM-NDL.cntk:speechTrain=[
    action = "train"
    nbrUttsIneachRecurrentIter = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Config/lstmp-3layer-opt.ndl"
    ]
    SGD = [
        epochSize = 0
        minibatchSize = 16
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf"
            labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
] [SGD=[maxEpochs=1]] [SGD=[epochSize=64]] [reader=[useMersenneTwisterRand=true]]

configparameters: LSTM-NDL.cntk:timestamping=true
configparameters: LSTM-NDL.cntk:traceLevel=1
configparameters: LSTM-NDL.cntk:truncated=true
08/16/2016 03:20:43: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/16/2016 03:20:43: Commands: speechTrain
08/16/2016 03:20:43: Precision = "float"
08/16/2016 03:20:43: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn
08/16/2016 03:20:43: CNTKCommandTrainInfo: speechTrain : 1
08/16/2016 03:20:43: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

08/16/2016 03:20:43: ##############################################################################
08/16/2016 03:20:43: #                                                                            #
08/16/2016 03:20:43: # Action "train"                                                             #
08/16/2016 03:20:43: #                                                                            #
08/16/2016 03:20:43: ##############################################################################

08/16/2016 03:20:43: CNTKCommandTrainBegin: speechTrain
NDLBuilder Using GPU 0
reading script file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.scp ... 948 entries
total 132 state names in state list C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/state.list
htkmlfreader: reading MLF file C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Speech\AN4\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/16/2016 03:20:43: Creating virgin network.
Node 'LSTMoutput1.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput1.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput1.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput1.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput1.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- 0.000000.
Node 'LSTMoutput2.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput2.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput2.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput2.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput2.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- 0.000000.
Node 'LSTMoutput3.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput3.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput3.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput3.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- 0.000000.
Node 'LSTMoutput3.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- 0.000000.
Node 'b' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.
Node 'LSTMoutput1.wx' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput1.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput1.Wh' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput1.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=3, range=0.050000*1.000000, onCPU=false).
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 3, sizeof(ElemType)==4
Node 'LSTMoutput1.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=4, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput1.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=5, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput1.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- uniform(seed=6, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput2.wx' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput2.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput2.Wh' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput2.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=9, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput2.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=10, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput2.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=11, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput2.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- uniform(seed=12, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput3.wx' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput3.b' (LearnableParameter operation): Initializing Parameter[4096 x 1] <- 0.000000.
Node 'LSTMoutput3.Wh' (LearnableParameter operation): Initializating Parameter[4096 x 0] as uniform later when dimensions are fully known.
Node 'LSTMoutput3.Wci' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=15, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput3.Wcf' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=16, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput3.Wco' (LearnableParameter operation): Initializing Parameter[1024] <- uniform(seed=17, range=0.050000*1.000000, onCPU=false).
Node 'LSTMoutput3.Wmr' (LearnableParameter operation): Initializing Parameter[512 x 1024] <- uniform(seed=18, range=0.050000*1.000000, onCPU=false).
Node 'W' (LearnableParameter operation): Initializating Parameter[132 x 0] as uniform later when dimensions are fully known.
Node 'b' (LearnableParameter operation): Initializing Parameter[132 x 1] <- 0.000000.

Post-processing network...

6 roots:
	ce = CrossEntropyWithSoftmax()
	err = ClassificationError()
	featNorm.xMean = Mean()
	featNorm.xStdDev = InvStdDev()
	logPrior.prior = Mean()
	scaledLogLikelihood = Minus()

Loop[0] --> Loop_LSTMoutput1.output -> 24 nodes

	LSTMoutput1.dh	LSTMoutput1.whh	LSTMoutput1.wxxpbpwhh
	LSTMoutput1.G4	LSTMoutput1.G3	LSTMoutput1.dc
	LSTMoutput1.Wcfdc	LSTMoutput1.unnamed165	LSTMoutput1.ft
	LSTMoutput1.bft	LSTMoutput1.G1	LSTMoutput1.Wcidc
	LSTMoutput1.unnamed163	LSTMoutput1.it	LSTMoutput1.G2
	LSTMoutput1.unnamed164	LSTMoutput1.bit	LSTMoutput1.ct
	LSTMoutput1.Wcoct	LSTMoutput1.unnamed166	LSTMoutput1.ot
	LSTMoutput1.unnamed167	LSTMoutput1.mt	LSTMoutput1.output

Loop[1] --> Loop_LSTMoutput2.output -> 24 nodes

	LSTMoutput2.dh	LSTMoutput2.whh	LSTMoutput2.wxxpbpwhh
	LSTMoutput2.G4	LSTMoutput2.G3	LSTMoutput2.dc
	LSTMoutput2.Wcfdc	LSTMoutput2.unnamed175	LSTMoutput2.ft
	LSTMoutput2.bft	LSTMoutput2.G1	LSTMoutput2.Wcidc
	LSTMoutput2.unnamed173	LSTMoutput2.it	LSTMoutput2.G2
	LSTMoutput2.unnamed174	LSTMoutput2.bit	LSTMoutput2.ct
	LSTMoutput2.Wcoct	LSTMoutput2.unnamed176	LSTMoutput2.ot
	LSTMoutput2.unnamed177	LSTMoutput2.mt	LSTMoutput2.output

Loop[2] --> Loop_LSTMoutput3.output -> 24 nodes

	LSTMoutput3.dh	LSTMoutput3.whh	LSTMoutput3.wxxpbpwhh
	LSTMoutput3.G4	LSTMoutput3.G3	LSTMoutput3.dc
	LSTMoutput3.Wcfdc	LSTMoutput3.unnamed185	LSTMoutput3.ft
	LSTMoutput3.bft	LSTMoutput3.G1	LSTMoutput3.Wcidc
	LSTMoutput3.unnamed183	LSTMoutput3.it	LSTMoutput3.G2
	LSTMoutput3.unnamed184	LSTMoutput3.bit	LSTMoutput3.ct
	LSTMoutput3.Wcoct	LSTMoutput3.unnamed186	LSTMoutput3.ot
	LSTMoutput3.unnamed187	LSTMoutput3.mt	LSTMoutput3.output

Validating network. 113 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W = LearnableParameter() :  -> [132 x 0]
Validating --> LSTMoutput3.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput3.wx = LearnableParameter() :  -> [4096 x 0]
Validating --> LSTMoutput2.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput2.wx = LearnableParameter() :  -> [4096 x 0]
Validating --> LSTMoutput1.Wmr = LearnableParameter() :  -> [512 x 1024]
Validating --> LSTMoutput1.wx = LearnableParameter() :  -> [4096 x 0]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> featNorm.xMean = Mean (features) : [363 x *] -> [363]
Validating --> featNorm.xStdDev = InvStdDev (features) : [363 x *] -> [363]
Validating --> featNorm.xNorm = PerDimMeanVarNormalization (features, featNorm.xMean, featNorm.xStdDev) : [363 x *], [363], [363] -> [363 x *]
Node 'LSTMoutput1.wx' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 363].
Node 'LSTMoutput1.wx' (LearnableParameter operation): Initializing Parameter[4096 x 363] <- uniform(seed=1, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput1.wxx = Times (LSTMoutput1.wx, featNorm.xNorm) : [4096 x 363], [363 x *] -> [4096 x *]
Validating --> LSTMoutput1.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput1.wxxpb = Plus (LSTMoutput1.wxx, LSTMoutput1.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput1.Wh = LearnableParameter() :  -> [4096 x 0]
Validating --> LSTMoutput1.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput1.Wci = LearnableParameter() :  -> [1024]
Node 'LSTMoutput1.Wh' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 512].
Node 'LSTMoutput1.Wh' (LearnableParameter operation): Initializing Parameter[4096 x 512] <- uniform(seed=2, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput1.wxxpbpwhh = Plus (LSTMoutput1.wxxpb, LSTMoutput1.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput1.G4 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G3 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed165 = Plus (LSTMoutput1.G3, LSTMoutput1.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ft = Sigmoid (LSTMoutput1.unnamed165) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bft = ElementTimes (LSTMoutput1.ft, LSTMoutput1.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G1 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput1.unnamed163 = Plus (LSTMoutput1.G1, LSTMoutput1.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput1.it = Sigmoid (LSTMoutput1.unnamed163) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.G2 = Slice (LSTMoutput1.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed164 = Tanh (LSTMoutput1.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.bit = ElementTimes (LSTMoutput1.it, LSTMoutput1.unnamed164) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ct = Plus (LSTMoutput1.bft, LSTMoutput1.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcoct = DiagTimes (LSTMoutput1.Wco, LSTMoutput1.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed166 = Plus (LSTMoutput1.G4, LSTMoutput1.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.ot = Sigmoid (LSTMoutput1.unnamed166) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.unnamed167 = Tanh (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.mt = ElementTimes (LSTMoutput1.ot, LSTMoutput1.unnamed167) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.output = Times (LSTMoutput1.Wmr, LSTMoutput1.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Node 'LSTMoutput2.wx' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 512 x 1].
Node 'LSTMoutput2.wx' (LearnableParameter operation): Initializing Parameter[4096 x 512 x 1] <- uniform(seed=7, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput2.wxx = Times (LSTMoutput2.wx, LSTMoutput1.output) : [4096 x 512 x 1], [512 x 1 x *] -> [4096 x *]
Validating --> LSTMoutput2.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput2.wxxpb = Plus (LSTMoutput2.wxx, LSTMoutput2.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput2.Wh = LearnableParameter() :  -> [4096 x 0]
Validating --> LSTMoutput2.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput2.Wci = LearnableParameter() :  -> [1024]
Node 'LSTMoutput2.Wh' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 512].
Node 'LSTMoutput2.Wh' (LearnableParameter operation): Initializing Parameter[4096 x 512] <- uniform(seed=8, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput2.wxxpbpwhh = Plus (LSTMoutput2.wxxpb, LSTMoutput2.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput2.G4 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G3 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed175 = Plus (LSTMoutput2.G3, LSTMoutput2.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ft = Sigmoid (LSTMoutput2.unnamed175) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bft = ElementTimes (LSTMoutput2.ft, LSTMoutput2.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G1 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput2.unnamed173 = Plus (LSTMoutput2.G1, LSTMoutput2.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput2.it = Sigmoid (LSTMoutput2.unnamed173) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.G2 = Slice (LSTMoutput2.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed174 = Tanh (LSTMoutput2.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.bit = ElementTimes (LSTMoutput2.it, LSTMoutput2.unnamed174) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ct = Plus (LSTMoutput2.bft, LSTMoutput2.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcoct = DiagTimes (LSTMoutput2.Wco, LSTMoutput2.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed176 = Plus (LSTMoutput2.G4, LSTMoutput2.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.ot = Sigmoid (LSTMoutput2.unnamed176) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.unnamed177 = Tanh (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.mt = ElementTimes (LSTMoutput2.ot, LSTMoutput2.unnamed177) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.output = Times (LSTMoutput2.Wmr, LSTMoutput2.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Node 'LSTMoutput3.wx' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 512 x 1].
Node 'LSTMoutput3.wx' (LearnableParameter operation): Initializing Parameter[4096 x 512 x 1] <- uniform(seed=13, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput3.wxx = Times (LSTMoutput3.wx, LSTMoutput2.output) : [4096 x 512 x 1], [512 x 1 x *] -> [4096 x *]
Validating --> LSTMoutput3.b = LearnableParameter() :  -> [4096 x 1]
Validating --> LSTMoutput3.wxxpb = Plus (LSTMoutput3.wxx, LSTMoutput3.b) : [4096 x *], [4096 x 1] -> [4096 x 1 x *]
Validating --> LSTMoutput3.Wh = LearnableParameter() :  -> [4096 x 0]
Validating --> LSTMoutput3.Wco = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wcf = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput3.Wci = LearnableParameter() :  -> [1024]
Node 'LSTMoutput3.Wh' (LearnableParameter operation) operation: Tensor shape was inferred as [4096 x 512].
Node 'LSTMoutput3.Wh' (LearnableParameter operation): Initializing Parameter[4096 x 512] <- uniform(seed=14, range=0.050000*1.000000, onCPU=false).
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512] -> [4096]
Validating --> LSTMoutput3.wxxpbpwhh = Plus (LSTMoutput3.wxxpb, LSTMoutput3.whh) : [4096 x 1 x *], [4096] -> [4096 x 1 x *]
Validating --> LSTMoutput3.G4 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G3 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed185 = Plus (LSTMoutput3.G3, LSTMoutput3.Wcfdc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ft = Sigmoid (LSTMoutput3.unnamed185) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bft = ElementTimes (LSTMoutput3.ft, LSTMoutput3.dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G1 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024] -> [1024]
Validating --> LSTMoutput3.unnamed183 = Plus (LSTMoutput3.G1, LSTMoutput3.Wcidc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput3.it = Sigmoid (LSTMoutput3.unnamed183) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.G2 = Slice (LSTMoutput3.wxxpbpwhh) : [4096 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed184 = Tanh (LSTMoutput3.G2) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.bit = ElementTimes (LSTMoutput3.it, LSTMoutput3.unnamed184) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ct = Plus (LSTMoutput3.bft, LSTMoutput3.bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcoct = DiagTimes (LSTMoutput3.Wco, LSTMoutput3.ct) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed186 = Plus (LSTMoutput3.G4, LSTMoutput3.Wcoct) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.ot = Sigmoid (LSTMoutput3.unnamed186) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.unnamed187 = Tanh (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.mt = ElementTimes (LSTMoutput3.ot, LSTMoutput3.unnamed187) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.output = Times (LSTMoutput3.Wmr, LSTMoutput3.mt) : [512 x 1024], [1024 x 1 x *] -> [512 x 1 x *]
Node 'W' (LearnableParameter operation) operation: Tensor shape was inferred as [132 x 512 x 1].
Node 'W' (LearnableParameter operation): Initializing Parameter[132 x 512 x 1] <- uniform(seed=19, range=0.050000*1.000000, onCPU=false).
Validating --> unnamed193 = Times (W, LSTMoutput3.output) : [132 x 512 x 1], [512 x 1 x *] -> [132 x *]
Validating --> b = LearnableParameter() :  -> [132 x 1]
Validating --> LSTMoutputW = Plus (unnamed193, b) : [132 x *], [132 x 1] -> [132 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> err = ClassificationError (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior.prior = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior.logPrior = Log (logPrior.prior) : [132] -> [132]
Validating --> scaledLogLikelihood = Minus (LSTMoutputW, logPrior.logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 88 nodes to process in pass 2.

Validating --> LSTMoutput1.dh = PastValue (LSTMoutput1.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput1.whh = Times (LSTMoutput1.Wh, LSTMoutput1.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput1.dc = PastValue (LSTMoutput1.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcfdc = DiagTimes (LSTMoutput1.Wcf, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput1.Wcidc = DiagTimes (LSTMoutput1.Wci, LSTMoutput1.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.dh = PastValue (LSTMoutput2.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput2.whh = Times (LSTMoutput2.Wh, LSTMoutput2.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput2.dc = PastValue (LSTMoutput2.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcfdc = DiagTimes (LSTMoutput2.Wcf, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput2.Wcidc = DiagTimes (LSTMoutput2.Wci, LSTMoutput2.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.dh = PastValue (LSTMoutput3.output) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> LSTMoutput3.whh = Times (LSTMoutput3.Wh, LSTMoutput3.dh) : [4096 x 512], [512 x 1 x *] -> [4096 x 1 x *]
Validating --> LSTMoutput3.dc = PastValue (LSTMoutput3.ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcfdc = DiagTimes (LSTMoutput3.Wcf, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput3.Wcidc = DiagTimes (LSTMoutput3.Wci, LSTMoutput3.dc) : [1024], [1024 x 1 x *] -> [1024 x 1 x *]

Validating network. 15 nodes to process in pass 3.


Validating network, final pass.



29 out of 113 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/16/2016 03:20:44: Created model with 113 nodes on GPU 0.

08/16/2016 03:20:44: Training criterion node(s):
08/16/2016 03:20:44: 	ce = CrossEntropyWithSoftmax

08/16/2016 03:20:44: Evaluation criterion node(s):
08/16/2016 03:20:44: 	err = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 217 matrices, 125 are shared as 56, and 92 are not shared.

	{ LSTMoutput2.mt : [1024 x 1 x *] (gradient)
	  LSTMoutput3.dh : [512 x 1 x *]
	  LSTMoutput3.wxx : [4096 x *] (gradient) }
	{ LSTMoutput2.Wco : [1024] (gradient)
	  LSTMoutput3.dc : [1024 x 1 x *] }
	{ LSTMoutput1.dh : [512 x 1 x *]
	  LSTMoutput1.wxx : [4096 x *] (gradient) }
	{ LSTMoutput1.mt : [1024 x 1 x *] (gradient)
	  LSTMoutput2.dh : [512 x 1 x *]
	  LSTMoutput2.wxx : [4096 x *] (gradient) }
	{ LSTMoutput1.Wco : [1024] (gradient)
	  LSTMoutput2.dc : [1024 x 1 x *] }
	{ LSTMoutput3.b : [4096 x 1] (gradient)
	  LSTMoutput3.dh : [512 x 1 x *] (gradient) }
	{ LSTMoutput1.bft : [1024 x 1 x *] (gradient)
	  LSTMoutput2.dc : [1024 x 1 x *] (gradient)
	  LSTMoutput3.G1 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.G2 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.Wcfdc : [1024 x 1 x *] (gradient)
	  LSTMoutput3.Wcidc : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.unnamed163 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.unnamed175 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.Wh : [4096 x 512] (gradient)
	  LSTMoutput2.G2 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.Wcfdc : [1024 x 1 x *] (gradient) }
	{ LSTMoutput2.bft : [1024 x 1 x *] (gradient)
	  LSTMoutput3.dc : [1024 x 1 x *] (gradient) }
	{ LSTMoutput2.unnamed173 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.unnamed185 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput2.unnamed177 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.whh : [4096 x 1 x *] (gradient) }
	{ LSTMoutput1.Wcidc : [1024 x 1 x *] (gradient)
	  LSTMoutput2.ft : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.Wcfdc : [1024 x 1 x *] (gradient)
	  LSTMoutput2.Wcidc : [1024 x 1 x *] (gradient)
	  LSTMoutput3.ft : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.wxxpb : [4096 x 1 x *] (gradient)
	  LSTMoutput2.it : [1024 x 1 x *] (gradient) }
	{ LSTMoutput2.output : [512 x 1 x *] (gradient)
	  LSTMoutput3.wxxpb : [4096 x 1 x *] (gradient) }
	{ LSTMoutput2.wx : [4096 x 512 x 1] (gradient)
	  LSTMoutput2.wxxpb : [4096 x 1 x *] }
	{ LSTMoutput1.ct : [1024 x 1 x *] (gradient)
	  LSTMoutput2.wxxpbpwhh : [4096 x 1 x *] }
	{ LSTMoutput1.unnamed164 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.Wcfdc : [1024 x 1 x *] }
	{ LSTMoutput1.G1 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.ft : [1024 x 1 x *] }
	{ LSTMoutput1.Wci : [1024] (gradient)
	  LSTMoutput2.G1 : [1024 x 1 x *] }
	{ LSTMoutput1.Wcf : [1024] (gradient)
	  LSTMoutput2.it : [1024 x 1 x *] }
	{ LSTMoutput1.ot : [1024 x 1 x *] (gradient)
	  LSTMoutput2.whh : [4096 x 1 x *] }
	{ LSTMoutput1.G4 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.G4 : [1024 x 1 x *] }
	{ LSTMoutput1.Wmr : [512 x 1024] (gradient)
	  LSTMoutput2.wxx : [4096 x *] }
	{ LSTMoutput1.G3 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.Wcidc : [1024 x 1 x *] }
	{ LSTMoutput1.whh : [4096 x 1 x *] (gradient)
	  LSTMoutput2.G2 : [1024 x 1 x *] }
	{ LSTMoutput1.b : [4096 x 1] (gradient)
	  LSTMoutput1.dh : [512 x 1 x *] (gradient)
	  LSTMoutput2.unnamed174 : [1024 x 1 x *] }
	{ LSTMoutput2.Wmr : [512 x 1024] (gradient)
	  LSTMoutput3.wxx : [4096 x *] }
	{ LSTMoutput1.wxxpbpwhh : [4096 x 1 x *] (gradient)
	  LSTMoutput2.unnamed175 : [1024 x 1 x *] }
	{ LSTMoutput1.wx : [4096 x 363] (gradient)
	  LSTMoutput1.wxxpb : [4096 x 1 x *] }
	{ LSTMoutput2.unnamed174 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.Wcfdc : [1024 x 1 x *] }
	{ LSTMoutput2.G3 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.Wcidc : [1024 x 1 x *] }
	{ LSTMoutput2.Wcoct : [1024 x 1 x *] (gradient)
	  LSTMoutput3.G4 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput2.b : [4096 x 1] (gradient)
	  LSTMoutput2.dh : [512 x 1 x *] (gradient)
	  LSTMoutput3.unnamed184 : [1024 x 1 x *] }
	{ LSTMoutput3.output : [512 x 1 x *] (gradient)
	  LSTMoutputW : [132 x 1 x *] (gradient) }
	{ LSTMoutput1.ft : [1024 x 1 x *] (gradient)
	  LSTMoutput3.bft : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.output : [512 x 1 x *] (gradient)
	  LSTMoutput2.wxxpb : [4096 x 1 x *] (gradient)
	  LSTMoutput3.it : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.unnamed167 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.whh : [4096 x 1 x *] (gradient)
	  LSTMoutput3.G2 : [1024 x 1 x *] }
	{ LSTMoutput1.unnamed166 : [1024 x 1 x *] (gradient)
	  LSTMoutput2.wxxpbpwhh : [4096 x 1 x *] (gradient)
	  LSTMoutput3.unnamed185 : [1024 x 1 x *] }
	{ LSTMoutput2.unnamed176 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.wxxpbpwhh : [4096 x 1 x *] (gradient) }
	{ LSTMoutput3.wx : [4096 x 512 x 1] (gradient)
	  LSTMoutput3.wxxpb : [4096 x 1 x *] }
	{ LSTMoutput2.ct : [1024 x 1 x *] (gradient)
	  LSTMoutput3.wxxpbpwhh : [4096 x 1 x *] }
	{ LSTMoutput2.ot : [1024 x 1 x *] (gradient)
	  LSTMoutput3.whh : [4096 x 1 x *] }
	{ LSTMoutput3.mt : [1024 x 1 x *] (gradient)
	  unnamed193 : [132 x *] (gradient) }
	{ LSTMoutput2.Wh : [4096 x 512] (gradient)
	  LSTMoutput3.G2 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput1.bit : [1024 x 1 x *] (gradient)
	  LSTMoutput3.unnamed183 : [1024 x 1 x *] (gradient) }
	{ LSTMoutput3.Wmr : [512 x 1024] (gradient)
	  unnamed193 : [132 x *] }
	{ LSTMoutput1.unnamed165 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.bft : [1024 x 1 x *] }
	{ LSTMoutputW : [132 x 1 x *]
	  W : [132 x 512 x 1] (gradient) }
	{ LSTMoutput2.Wci : [1024] (gradient)
	  LSTMoutput3.G1 : [1024 x 1 x *] }
	{ LSTMoutput1.dc : [1024 x 1 x *] (gradient)
	  LSTMoutput2.G1 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.ft : [1024 x 1 x *] }
	{ LSTMoutput2.Wcf : [1024] (gradient)
	  LSTMoutput3.it : [1024 x 1 x *] }
	{ LSTMoutput1.it : [1024 x 1 x *] (gradient)
	  LSTMoutput3.unnamed183 : [1024 x 1 x *] }
	{ LSTMoutput1.Wcoct : [1024 x 1 x *] (gradient)
	  LSTMoutput2.G4 : [1024 x 1 x *] (gradient)
	  LSTMoutput3.G4 : [1024 x 1 x *] }


08/16/2016 03:20:44: Training 13634692 parameters in 23 out of 23 parameter tensors and 104 nodes with gradient:

08/16/2016 03:20:44: 	Node 'LSTMoutput1.Wcf' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.Wci' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.Wco' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.Wh' (LearnableParameter operation) : [4096 x 512]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.Wmr' (LearnableParameter operation) : [512 x 1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.b' (LearnableParameter operation) : [4096 x 1]
08/16/2016 03:20:44: 	Node 'LSTMoutput1.wx' (LearnableParameter operation) : [4096 x 363]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.Wcf' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.Wci' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.Wco' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.Wh' (LearnableParameter operation) : [4096 x 512]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.Wmr' (LearnableParameter operation) : [512 x 1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.b' (LearnableParameter operation) : [4096 x 1]
08/16/2016 03:20:44: 	Node 'LSTMoutput2.wx' (LearnableParameter operation) : [4096 x 512 x 1]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.Wcf' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.Wci' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.Wco' (LearnableParameter operation) : [1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.Wh' (LearnableParameter operation) : [4096 x 512]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.Wmr' (LearnableParameter operation) : [512 x 1024]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.b' (LearnableParameter operation) : [4096 x 1]
08/16/2016 03:20:44: 	Node 'LSTMoutput3.wx' (LearnableParameter operation) : [4096 x 512 x 1]
08/16/2016 03:20:44: 	Node 'W' (LearnableParameter operation) : [132 x 512 x 1]
08/16/2016 03:20:44: 	Node 'b' (LearnableParameter operation) : [132 x 1]


08/16/2016 03:20:44: Precomputing --> 3 PreCompute nodes found.

08/16/2016 03:20:44: 	featNorm.xMean = Mean()
08/16/2016 03:20:44: 	featNorm.xStdDev = InvStdDev()
08/16/2016 03:20:44: 	logPrior.prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/16/2016 03:20:45: Precomputing --> Completed.


08/16/2016 03:20:46: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..64] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/16/2016 03:20:46: Starting minibatch loop.
08/16/2016 03:20:47:  Epoch[ 1 of 1]-Minibatch[   1-  10, 250.00%]: ce = 4.87453079 * 160; err = 0.90625000 * 160; time = 1.1338s; samplesPerSecond = 141.1
08/16/2016 03:20:48:  Epoch[ 1 of 1]-Minibatch[  11-  20, 500.00%]: ce = 4.84628143 * 160; err = 0.69375000 * 160; time = 1.0409s; samplesPerSecond = 153.7
08/16/2016 03:20:49: Finished Epoch[ 1 of 1]: [Training] ce = 4.85708837 * 418; err = 0.80382775 * 418; totalSamplesSeen = 418; learningRatePerSample = 0.001953125; epochTime=2.90303s
08/16/2016 03:20:50: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160816031849.416502\Examples\Speech\AN4_LSTM@release_gpu/Models/cntkSpeechLSTM.dnn'
08/16/2016 03:20:51: CNTKCommandTrainEnd: speechTrain

08/16/2016 03:20:51: Action "train" complete.

08/16/2016 03:20:51: __COMPLETED__