Redirecting stderr to file ./Output-2gpu-e2e/03_ResNet
-------------------------------------------------------------------
Build info: 

        Built time: Nov 13 2016 13:47:12
        Last modified date: Sun Nov 13 13:00:24 2016
        Build type: Release
        Build target: GPU
        With 1bit-SGD: yes
        With ASGD: yes
        Math lib: mkl
        CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
        CUB_PATH: D:\sharedlibs\cub-1.4.1
        CUDNN_PATH: D:\sharedlibs\cudnn-7.5-windows10-x64-v5.1\cuda
        Built by qiwye on MSRAML-SRV08
        Build Path: D:\Users\qiwye\Git\CNTK\Source\CNTK\
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

        Device[0]: cores = 2688; computeCapability = 3.5; type = "Tesla K20Xm"; memory = 5759 MB
        Device[1]: cores = 2688; computeCapability = 3.5; type = "Tesla K20Xm"; memory = 5759 MB
-------------------------------------------------------------------
Redirecting stderr to file ./Output-2gpu-e2e/03_ResNet.rank1
-------------------------------------------------------------------
Build info: 

                Built time: Nov 13 2016 13:47:12
                Last modified date: Sun Nov 13 13:00:24 2016
                Build type: Release
                Build target: GPU
                With 1bit-SGD: yes
                With ASGD: yes
                Math lib: mkl
                CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
                CUB_PATH: D:\sharedlibs\cub-1.4.1
                CUDNN_PATH: D:\sharedlibs\cudnn-7.5-windows10-x64-v5.1\cuda
                Built by qiwye on MSRAML-SRV08
                Build Path: D:\Users\qiwye\Git\CNTK\Source\CNTK\
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

                Device[0]: cores = 2688; computeCapability = 3.5; type = "Tesla K20Xm"; memory = 5759 MB
                Device[1]: cores = 2688; computeCapability = 3.5; type = "Tesla K20Xm"; memory = 5759 MB
-------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: Configuration After Processing and Variable Resolution:
MPI Rank 0: 
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:configName=2gpu-e2e
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-2gpu-e2e/Models
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-2gpu-e2e
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-2gpu-e2e/03_ResNet
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 0:     action = "test"
MPI Rank 0:     modelPath = "./Output-2gpu-e2e/Models/03_ResNet"
MPI Rank 0:     minibatchSize = 256
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "center"
MPI Rank 0:             cropRatio = 1
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]    
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "./Output-2gpu-e2e/Models/03_ResNet"
MPI Rank 0:      NDLNetworkBuilder = [
MPI Rank 0:         networkDescription = "./03_ResNet.ndl"
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 0:         momentumPerMB = 0
MPI Rank 0:         maxEpochs = 10
MPI Rank 0:         L2RegWeight = 0.0001
MPI Rank 0:         dropoutRate = 0
MPI Rank 0:         perfTraceLevel = 0
MPI Rank 0:         firstMBsToShowResult = 1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = DataParallelASGD
MPI Rank 0:             distributedMBReading = "true"
MPI Rank 0:             parallelizationStartEpoch = 1
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:                 useBufferedAsyncGradientAggregation = false
MPI Rank 0:             ]
MPI Rank 0:             ModelAveragingSGD = [
MPI Rank 0:                 blockSizePerWorker = 128
MPI Rank 0:             ]
MPI Rank 0:             DataParallelASGD = [
MPI Rank 0:                 syncPeriod = 128
MPI Rank 0:                 usePipeline = false
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "random"
MPI Rank 0:             cropRatio = 0.8
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     cvReader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "center"
MPI Rank 0:             cropRatio = 1
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]    
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: Commands: Train
MPI Rank 0: precision = "float"
MPI Rank 0: 
MPI Rank 0: ##############################################################################
MPI Rank 0: #                                                                            #
MPI Rank 0: # Train command (train action)                                               #
MPI Rank 0: #                                                                            #
MPI Rank 0: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Creating virgin network.
MPI Rank 0: NDLBuilder Using GPU 0
MPI Rank 0: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 0: 
MPI Rank 0: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 0: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: 
MPI Rank 0: Model has 184 nodes. Using GPU 0.
MPI Rank 0: 
MPI Rank 0: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 0: Evaluation criterion: Err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 0: 
MPI Rank 0:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 0:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 0:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 0:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { OutputNodes.t : [10 x *]
MPI Rank 0:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { pool : [1 x 1 x 64 x *]
MPI Rank 0:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 0:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 0:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 0:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 0: 
MPI Rank 0:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 0:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 0:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 0:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 0:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 0:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0: 
MPI Rank 0: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 0: [INFO] [2016-11-13 20:49:35] multiverso MPI-Net is initialized under MPI_THREAD_SERIALIZED mode.
MPI Rank 0: [INFO] [2016-11-13 20:49:35] All nodes registered. System contains 2 nodes. num_worker = 2, num_server = 2
MPI Rank 0: [INFO] [2016-11-13 20:49:35] Create a async server
MPI Rank 0: [INFO] [2016-11-13 20:49:35] Rank 0: Multiverso start successfully
MPI Rank 0: multiverso initial model loaded.
MPI Rank 0: 
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.30335426 * 128; Err = 0.87500000 * 128; time = 2.4782s; samplesPerSecond = 51.6
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 2.70786497 * 1152; Err = 0.88194444 * 1152; time = 0.8941s; samplesPerSecond = 1288.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.30793934 * 1280; Err = 0.86875000 * 1280; time = 1.2724s; samplesPerSecond = 1006.0
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.20456848 * 1280; Err = 0.81953125 * 1280; time = 1.5691s; samplesPerSecond = 815.8
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 2.10206375 * 1280; Err = 0.80078125 * 1280; time = 1.2833s; samplesPerSecond = 997.5
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 2.05506668 * 1280; Err = 0.77890625 * 1280; time = 1.3351s; samplesPerSecond = 958.8
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 1.96532822 * 1280; Err = 0.74296875 * 1280; time = 1.2814s; samplesPerSecond = 998.9
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 1.93229980 * 1280; Err = 0.74375000 * 1280; time = 1.3353s; samplesPerSecond = 958.6
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 1.90802765 * 1280; Err = 0.69531250 * 1280; time = 1.3862s; samplesPerSecond = 923.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 1.86122284 * 1280; Err = 0.71328125 * 1280; time = 1.2961s; samplesPerSecond = 987.6
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 1.78237000 * 1280; Err = 0.66718750 * 1280; time = 1.3150s; samplesPerSecond = 973.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 1.83886566 * 1280; Err = 0.68203125 * 1280; time = 1.3267s; samplesPerSecond = 964.8
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 1.76568298 * 1280; Err = 0.68125000 * 1280; time = 1.3109s; samplesPerSecond = 976.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 1.83188324 * 1280; Err = 0.68750000 * 1280; time = 1.1897s; samplesPerSecond = 1075.9
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.78893127 * 1280; Err = 0.68671875 * 1280; time = 1.2618s; samplesPerSecond = 1014.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.76598816 * 1280; Err = 0.67656250 * 1280; time = 1.2830s; samplesPerSecond = 997.7
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.76059570 * 1280; Err = 0.67500000 * 1280; time = 1.3445s; samplesPerSecond = 952.1
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.69859009 * 1280; Err = 0.65703125 * 1280; time = 1.2188s; samplesPerSecond = 1050.2
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.73734741 * 1280; Err = 0.65390625 * 1280; time = 1.2808s; samplesPerSecond = 999.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.67048340 * 1280; Err = 0.63671875 * 1280; time = 1.2924s; samplesPerSecond = 990.4
MPI Rank 0: Finished Epoch[ 1 of 10]: [Training] CE = 1.92257531 * 25000; Err = 0.72148000 * 25000; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=27.6498s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.68999361 * 10000; perplexity = 5.41944609; Err = 0.63710000 * 10000
MPI Rank 0: Finished Epoch[ 1 of 10]: [Validate] CE = 1.68999361 * 10000; Err = 0.63710000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.1'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.63151836 * 128; Err = 0.60156250 * 128; time = 0.1635s; samplesPerSecond = 782.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.68087419 * 1152; Err = 0.63194444 * 1152; time = 1.2455s; samplesPerSecond = 924.9
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.53340855 * 1280; Err = 0.57265625 * 1280; time = 1.6011s; samplesPerSecond = 799.4
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  21-  30, 31.58%]: CE = 1.64141426 * 1280; Err = 0.61406250 * 1280; time = 1.3774s; samplesPerSecond = 929.3
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.55512238 * 1280; Err = 0.58125000 * 1280; time = 1.3373s; samplesPerSecond = 957.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  41-  50, 52.63%]: CE = 1.48780518 * 1280; Err = 0.54765625 * 1280; time = 1.4024s; samplesPerSecond = 912.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  51-  60, 63.16%]: CE = 1.59861298 * 1280; Err = 0.57187500 * 1280; time = 1.4717s; samplesPerSecond = 869.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  61-  70, 73.68%]: CE = 1.50554886 * 1280; Err = 0.55312500 * 1280; time = 1.4387s; samplesPerSecond = 889.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  71-  80, 84.21%]: CE = 1.47032471 * 1280; Err = 0.56406250 * 1280; time = 1.3678s; samplesPerSecond = 935.8
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  81-  90, 94.74%]: CE = 1.44117966 * 1280; Err = 0.53437500 * 1280; time = 1.3644s; samplesPerSecond = 938.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  91- 100, 105.26%]: CE = 1.48814087 * 1280; Err = 0.54218750 * 1280; time = 1.5148s; samplesPerSecond = 845.0
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 1.42337952 * 1280; Err = 0.51875000 * 1280; time = 1.2760s; samplesPerSecond = 1003.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 1.45248566 * 1280; Err = 0.53984375 * 1280; time = 1.5344s; samplesPerSecond = 834.2
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 1.34562225 * 1280; Err = 0.48515625 * 1280; time = 1.4343s; samplesPerSecond = 892.4
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 1.40772400 * 1280; Err = 0.49687500 * 1280; time = 1.3765s; samplesPerSecond = 929.9
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 1.44500580 * 1280; Err = 0.53515625 * 1280; time = 1.5004s; samplesPerSecond = 853.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 1.42186279 * 1280; Err = 0.52343750 * 1280; time = 1.5607s; samplesPerSecond = 820.2
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 1.34610138 * 1280; Err = 0.48359375 * 1280; time = 1.4056s; samplesPerSecond = 910.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 1.37068634 * 1280; Err = 0.50390625 * 1280; time = 1.3907s; samplesPerSecond = 920.4
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 1.33851318 * 1280; Err = 0.48437500 * 1280; time = 1.3422s; samplesPerSecond = 953.7
MPI Rank 0: Finished Epoch[ 2 of 10]: [Training] CE = 1.46636141 * 25000; Err = 0.53920000 * 25000; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=27.9003s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.58909815 * 10000; perplexity = 4.89932848; Err = 0.54160000 * 10000
MPI Rank 0: Finished Epoch[ 2 of 10]: [Validate] CE = 1.58909815 * 10000; Err = 0.54160000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.2'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.25665689 * 128; Err = 0.45312500 * 128; time = 0.1254s; samplesPerSecond = 1020.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.30606871 * 1152; Err = 0.47222222 * 1152; time = 1.3065s; samplesPerSecond = 881.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.24940729 * 1280; Err = 0.46484375 * 1280; time = 1.5026s; samplesPerSecond = 851.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  21-  30, 31.58%]: CE = 1.24523506 * 1280; Err = 0.44609375 * 1280; time = 1.4389s; samplesPerSecond = 889.6
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.26567535 * 1280; Err = 0.43750000 * 1280; time = 1.4464s; samplesPerSecond = 884.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  41-  50, 52.63%]: CE = 1.21068916 * 1280; Err = 0.42890625 * 1280; time = 1.2842s; samplesPerSecond = 996.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  51-  60, 63.16%]: CE = 1.22597427 * 1280; Err = 0.45781250 * 1280; time = 1.4863s; samplesPerSecond = 861.2
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  61-  70, 73.68%]: CE = 1.18305893 * 1280; Err = 0.42187500 * 1280; time = 1.4353s; samplesPerSecond = 891.8
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  71-  80, 84.21%]: CE = 1.17592926 * 1280; Err = 0.41015625 * 1280; time = 1.7474s; samplesPerSecond = 732.5
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  81-  90, 94.74%]: CE = 1.13922043 * 1280; Err = 0.38828125 * 1280; time = 1.3450s; samplesPerSecond = 951.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  91- 100, 105.26%]: CE = 1.18069153 * 1280; Err = 0.43203125 * 1280; time = 1.6639s; samplesPerSecond = 769.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 1.19479752 * 1280; Err = 0.42109375 * 1280; time = 1.3919s; samplesPerSecond = 919.6
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 1.15160522 * 1280; Err = 0.41171875 * 1280; time = 1.3092s; samplesPerSecond = 977.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 1.09535980 * 1280; Err = 0.37968750 * 1280; time = 1.4426s; samplesPerSecond = 887.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 1.09351807 * 1280; Err = 0.40078125 * 1280; time = 1.4936s; samplesPerSecond = 857.0
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 1.15075989 * 1280; Err = 0.41406250 * 1280; time = 1.6331s; samplesPerSecond = 783.8
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 1.06036072 * 1280; Err = 0.39375000 * 1280; time = 1.2746s; samplesPerSecond = 1004.2
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 1.11877441 * 1280; Err = 0.40781250 * 1280; time = 1.3858s; samplesPerSecond = 923.6
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 1.05854950 * 1280; Err = 0.37343750 * 1280; time = 1.5360s; samplesPerSecond = 833.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 1.08852539 * 1280; Err = 0.38593750 * 1280; time = 1.3561s; samplesPerSecond = 943.9
MPI Rank 0: Finished Epoch[ 3 of 10]: [Training] CE = 1.16442445 * 25000; Err = 0.41700000 * 25000; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=28.7848s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.22467686 * 10000; perplexity = 3.40306625; Err = 0.43830000 * 10000
MPI Rank 0: Finished Epoch[ 3 of 10]: [Validate] CE = 1.22467686 * 10000; Err = 0.43830000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.3'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.15302551 * 128; Err = 0.43750000 * 128; time = 0.1460s; samplesPerSecond = 876.9
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.09415702 * 1152; Err = 0.38802083 * 1152; time = 1.2680s; samplesPerSecond = 908.5
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.01035900 * 1280; Err = 0.36875000 * 1280; time = 1.3886s; samplesPerSecond = 921.8
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  21-  30, 31.58%]: CE = 1.03322506 * 1280; Err = 0.37343750 * 1280; time = 1.5532s; samplesPerSecond = 824.1
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.01247826 * 1280; Err = 0.35859375 * 1280; time = 1.2812s; samplesPerSecond = 999.1
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  41-  50, 52.63%]: CE = 1.00657921 * 1280; Err = 0.37343750 * 1280; time = 1.5881s; samplesPerSecond = 806.0
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  51-  60, 63.16%]: CE = 1.01737442 * 1280; Err = 0.36718750 * 1280; time = 1.4050s; samplesPerSecond = 911.0
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.95722122 * 1280; Err = 0.35625000 * 1280; time = 1.4557s; samplesPerSecond = 879.3
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.95939865 * 1280; Err = 0.33046875 * 1280; time = 1.3762s; samplesPerSecond = 930.1
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.94359970 * 1280; Err = 0.34375000 * 1280; time = 1.2077s; samplesPerSecond = 1059.8
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  91- 100, 105.26%]: CE = 1.03716125 * 1280; Err = 0.36406250 * 1280; time = 1.5605s; samplesPerSecond = 820.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.93535004 * 1280; Err = 0.33750000 * 1280; time = 1.2096s; samplesPerSecond = 1058.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.97701340 * 1280; Err = 0.34531250 * 1280; time = 1.3790s; samplesPerSecond = 928.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.93964539 * 1280; Err = 0.34218750 * 1280; time = 1.3729s; samplesPerSecond = 932.3
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.98788605 * 1280; Err = 0.34296875 * 1280; time = 1.3629s; samplesPerSecond = 939.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.91477203 * 1280; Err = 0.33046875 * 1280; time = 1.4039s; samplesPerSecond = 911.8
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.91469421 * 1280; Err = 0.32109375 * 1280; time = 1.4031s; samplesPerSecond = 912.3
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.92785645 * 1280; Err = 0.32265625 * 1280; time = 1.2927s; samplesPerSecond = 990.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.95344391 * 1280; Err = 0.34140625 * 1280; time = 1.5611s; samplesPerSecond = 819.9
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.97071838 * 1280; Err = 0.34765625 * 1280; time = 1.3780s; samplesPerSecond = 928.9
MPI Rank 0: Finished Epoch[ 4 of 10]: [Training] CE = 0.97642992 * 25000; Err = 0.34924000 * 25000; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=27.8041s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.10159160 * 10000; perplexity = 3.00895127; Err = 0.37080000 * 10000
MPI Rank 0: Finished Epoch[ 4 of 10]: [Validate] CE = 1.10159160 * 10000; Err = 0.37080000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.4'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.02725506 * 128; Err = 0.35156250 * 128; time = 0.3349s; samplesPerSecond = 382.2
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.88167095 * 1152; Err = 0.30815972 * 1152; time = 1.2418s; samplesPerSecond = 927.7
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.84721184 * 1280; Err = 0.28750000 * 1280; time = 1.2763s; samplesPerSecond = 1002.9
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.88131466 * 1280; Err = 0.31718750 * 1280; time = 1.3588s; samplesPerSecond = 942.0
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.84471664 * 1280; Err = 0.30625000 * 1280; time = 1.4296s; samplesPerSecond = 895.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.88580437 * 1280; Err = 0.32265625 * 1280; time = 1.4065s; samplesPerSecond = 910.0
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.90890732 * 1280; Err = 0.31796875 * 1280; time = 1.3406s; samplesPerSecond = 954.8
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.90721016 * 1280; Err = 0.31875000 * 1280; time = 1.4341s; samplesPerSecond = 892.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.86561890 * 1280; Err = 0.32421875 * 1280; time = 1.2624s; samplesPerSecond = 1013.9
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.80664902 * 1280; Err = 0.28906250 * 1280; time = 1.3592s; samplesPerSecond = 941.7
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.87069473 * 1280; Err = 0.30781250 * 1280; time = 1.4665s; samplesPerSecond = 872.8
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.87082901 * 1280; Err = 0.31328125 * 1280; time = 1.3819s; samplesPerSecond = 926.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.90532227 * 1280; Err = 0.32109375 * 1280; time = 1.3303s; samplesPerSecond = 962.2
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.82733002 * 1280; Err = 0.29296875 * 1280; time = 1.4311s; samplesPerSecond = 894.4
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.80269699 * 1280; Err = 0.27031250 * 1280; time = 1.3607s; samplesPerSecond = 940.7
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.76604156 * 1280; Err = 0.27187500 * 1280; time = 1.5420s; samplesPerSecond = 830.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.81803284 * 1280; Err = 0.27734375 * 1280; time = 1.2463s; samplesPerSecond = 1027.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.81456757 * 1280; Err = 0.30078125 * 1280; time = 1.4042s; samplesPerSecond = 911.5
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.80769043 * 1280; Err = 0.28515625 * 1280; time = 1.5398s; samplesPerSecond = 831.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.80142822 * 1280; Err = 0.28671875 * 1280; time = 1.5294s; samplesPerSecond = 836.9
MPI Rank 0: Finished Epoch[ 5 of 10]: [Training] CE = 0.84756055 * 25000; Err = 0.30048000 * 25000; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=27.7048s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.17820554 * 10000; perplexity = 3.24853961; Err = 0.36970000 * 10000
MPI Rank 0: Finished Epoch[ 5 of 10]: [Validate] CE = 1.17820554 * 10000; Err = 0.36970000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.5'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.73031420 * 128; Err = 0.26562500 * 128; time = 0.1119s; samplesPerSecond = 1143.6
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.81234721 * 1152; Err = 0.27517361 * 1152; time = 1.2246s; samplesPerSecond = 940.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.76069288 * 1280; Err = 0.26406250 * 1280; time = 1.7162s; samplesPerSecond = 745.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.82717733 * 1280; Err = 0.27734375 * 1280; time = 1.6402s; samplesPerSecond = 780.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.73240356 * 1280; Err = 0.26171875 * 1280; time = 1.3679s; samplesPerSecond = 935.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.76794605 * 1280; Err = 0.26484375 * 1280; time = 1.6092s; samplesPerSecond = 795.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.70578537 * 1280; Err = 0.24296875 * 1280; time = 1.3716s; samplesPerSecond = 933.2
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.75474548 * 1280; Err = 0.26796875 * 1280; time = 1.5430s; samplesPerSecond = 829.6
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.73425789 * 1280; Err = 0.26328125 * 1280; time = 1.3534s; samplesPerSecond = 945.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.75819969 * 1280; Err = 0.24609375 * 1280; time = 1.3902s; samplesPerSecond = 920.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.77724075 * 1280; Err = 0.27421875 * 1280; time = 1.4831s; samplesPerSecond = 863.1
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.74736557 * 1280; Err = 0.27187500 * 1280; time = 1.4344s; samplesPerSecond = 892.3
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.74529114 * 1280; Err = 0.26406250 * 1280; time = 1.5230s; samplesPerSecond = 840.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.75343018 * 1280; Err = 0.25156250 * 1280; time = 1.4759s; samplesPerSecond = 867.3
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.72709885 * 1280; Err = 0.25703125 * 1280; time = 1.4508s; samplesPerSecond = 882.3
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.72757568 * 1280; Err = 0.24062500 * 1280; time = 1.3055s; samplesPerSecond = 980.5
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.74529037 * 1280; Err = 0.26953125 * 1280; time = 1.5232s; samplesPerSecond = 840.3
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.72405624 * 1280; Err = 0.24765625 * 1280; time = 1.2135s; samplesPerSecond = 1054.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.67865677 * 1280; Err = 0.23359375 * 1280; time = 1.3588s; samplesPerSecond = 942.0
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.73493805 * 1280; Err = 0.27421875 * 1280; time = 1.4207s; samplesPerSecond = 901.0
MPI Rank 0: Finished Epoch[ 6 of 10]: [Training] CE = 0.74757188 * 25000; Err = 0.26016000 * 25000; totalSamplesSeen = 150000; learningRatePerSample = 0.0040000002; epochTime=28.3697s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.12731839 * 10000; perplexity = 3.08736629; Err = 0.36390000 * 10000
MPI Rank 0: Finished Epoch[ 6 of 10]: [Validate] CE = 1.12731839 * 10000; Err = 0.36390000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.6'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.71889180 * 128; Err = 0.25000000 * 128; time = 0.2550s; samplesPerSecond = 502.0
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.65854002 * 1152; Err = 0.23784722 * 1152; time = 1.2608s; samplesPerSecond = 913.7
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.67951918 * 1280; Err = 0.24453125 * 1280; time = 1.4072s; samplesPerSecond = 909.6
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.74440870 * 1280; Err = 0.25625000 * 1280; time = 1.3482s; samplesPerSecond = 949.4
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.60063725 * 1280; Err = 0.20234375 * 1280; time = 1.3280s; samplesPerSecond = 963.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.68166847 * 1280; Err = 0.24453125 * 1280; time = 1.4427s; samplesPerSecond = 887.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.68844566 * 1280; Err = 0.23828125 * 1280; time = 1.2442s; samplesPerSecond = 1028.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.68634949 * 1280; Err = 0.22734375 * 1280; time = 1.4297s; samplesPerSecond = 895.3
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.71136398 * 1280; Err = 0.23984375 * 1280; time = 1.3294s; samplesPerSecond = 962.9
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.65470848 * 1280; Err = 0.22578125 * 1280; time = 1.3609s; samplesPerSecond = 940.6
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.70969887 * 1280; Err = 0.24531250 * 1280; time = 1.4257s; samplesPerSecond = 897.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.67499771 * 1280; Err = 0.23750000 * 1280; time = 1.3005s; samplesPerSecond = 984.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.65529556 * 1280; Err = 0.22734375 * 1280; time = 1.4994s; samplesPerSecond = 853.7
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.72470703 * 1280; Err = 0.24765625 * 1280; time = 1.4399s; samplesPerSecond = 889.0
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.67969971 * 1280; Err = 0.22656250 * 1280; time = 1.3597s; samplesPerSecond = 941.4
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.69090729 * 1280; Err = 0.23593750 * 1280; time = 1.4939s; samplesPerSecond = 856.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.72628708 * 1280; Err = 0.24062500 * 1280; time = 1.3273s; samplesPerSecond = 964.4
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.69727097 * 1280; Err = 0.24687500 * 1280; time = 1.5505s; samplesPerSecond = 825.5
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.68712540 * 1280; Err = 0.23984375 * 1280; time = 1.3801s; samplesPerSecond = 927.4
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.64685364 * 1280; Err = 0.22187500 * 1280; time = 1.3827s; samplesPerSecond = 925.7
MPI Rank 0: Finished Epoch[ 7 of 10]: [Training] CE = 0.68318820 * 25000; Err = 0.23580000 * 25000; totalSamplesSeen = 175000; learningRatePerSample = 0.0040000002; epochTime=27.6561s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.02639078 * 10000; perplexity = 2.79097441; Err = 0.32960000 * 10000
MPI Rank 0: Finished Epoch[ 7 of 10]: [Validate] CE = 1.02639078 * 10000; Err = 0.32960000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.7'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.52600664 * 128; Err = 0.24218750 * 128; time = 0.3485s; samplesPerSecond = 367.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.65184022 * 1152; Err = 0.23177083 * 1152; time = 1.2607s; samplesPerSecond = 913.7
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.60456982 * 1280; Err = 0.21250000 * 1280; time = 1.2912s; samplesPerSecond = 991.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.59283237 * 1280; Err = 0.20781250 * 1280; time = 1.5735s; samplesPerSecond = 813.5
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.66204262 * 1280; Err = 0.23515625 * 1280; time = 1.2801s; samplesPerSecond = 999.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.62648182 * 1280; Err = 0.21171875 * 1280; time = 1.3373s; samplesPerSecond = 957.2
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.62753677 * 1280; Err = 0.21328125 * 1280; time = 1.4364s; samplesPerSecond = 891.1
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.63412590 * 1280; Err = 0.21875000 * 1280; time = 1.1774s; samplesPerSecond = 1087.1
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.63493767 * 1280; Err = 0.21953125 * 1280; time = 1.3691s; samplesPerSecond = 934.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.68228455 * 1280; Err = 0.24375000 * 1280; time = 1.2173s; samplesPerSecond = 1051.5
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.62960739 * 1280; Err = 0.21093750 * 1280; time = 1.3546s; samplesPerSecond = 944.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.64119453 * 1280; Err = 0.21640625 * 1280; time = 1.4794s; samplesPerSecond = 865.2
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.56302567 * 1280; Err = 0.19140625 * 1280; time = 1.2134s; samplesPerSecond = 1054.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.68676834 * 1280; Err = 0.25000000 * 1280; time = 1.3371s; samplesPerSecond = 957.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.59244003 * 1280; Err = 0.20468750 * 1280; time = 1.4096s; samplesPerSecond = 908.1
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.64918747 * 1280; Err = 0.22265625 * 1280; time = 1.4462s; samplesPerSecond = 885.1
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.67614059 * 1280; Err = 0.23359375 * 1280; time = 1.4998s; samplesPerSecond = 853.5
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.60455780 * 1280; Err = 0.21875000 * 1280; time = 1.2958s; samplesPerSecond = 987.8
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.62602234 * 1280; Err = 0.21640625 * 1280; time = 1.3661s; samplesPerSecond = 937.0
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.58829651 * 1280; Err = 0.21171875 * 1280; time = 1.3216s; samplesPerSecond = 968.5
MPI Rank 0: Finished Epoch[ 8 of 10]: [Training] CE = 0.62806629 * 25000; Err = 0.21920000 * 25000; totalSamplesSeen = 200000; learningRatePerSample = 0.0040000002; epochTime=26.8878s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 0.75264753 * 10000; perplexity = 2.12261226; Err = 0.24770000 * 10000
MPI Rank 0: Finished Epoch[ 8 of 10]: [Validate] CE = 0.75264753 * 10000; Err = 0.24770000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.8'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.73049378 * 128; Err = 0.22656250 * 128; time = 0.1757s; samplesPerSecond = 728.6
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.57290377 * 1152; Err = 0.20399306 * 1152; time = 1.2328s; samplesPerSecond = 934.4
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.56609883 * 1280; Err = 0.20000000 * 1280; time = 1.5338s; samplesPerSecond = 834.5
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.55634375 * 1280; Err = 0.20000000 * 1280; time = 1.4481s; samplesPerSecond = 883.9
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.58448181 * 1280; Err = 0.19062500 * 1280; time = 1.4601s; samplesPerSecond = 876.6
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.61851406 * 1280; Err = 0.21015625 * 1280; time = 1.3541s; samplesPerSecond = 945.3
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.62881145 * 1280; Err = 0.21562500 * 1280; time = 1.3879s; samplesPerSecond = 922.3
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.63622627 * 1280; Err = 0.22343750 * 1280; time = 1.5367s; samplesPerSecond = 833.0
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.62421570 * 1280; Err = 0.21171875 * 1280; time = 1.3547s; samplesPerSecond = 944.8
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.59813080 * 1280; Err = 0.20937500 * 1280; time = 1.2802s; samplesPerSecond = 999.9
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.58953896 * 1280; Err = 0.20156250 * 1280; time = 1.5115s; samplesPerSecond = 846.8
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.59890404 * 1280; Err = 0.20937500 * 1280; time = 1.2625s; samplesPerSecond = 1013.8
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.63137054 * 1280; Err = 0.23671875 * 1280; time = 1.2597s; samplesPerSecond = 1016.1
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.55558167 * 1280; Err = 0.19609375 * 1280; time = 1.6228s; samplesPerSecond = 788.7
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.59612656 * 1280; Err = 0.20390625 * 1280; time = 1.3747s; samplesPerSecond = 931.1
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.58164825 * 1280; Err = 0.19765625 * 1280; time = 1.2814s; samplesPerSecond = 998.9
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.58242798 * 1280; Err = 0.21406250 * 1280; time = 1.5108s; samplesPerSecond = 847.2
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.59333649 * 1280; Err = 0.19609375 * 1280; time = 1.2558s; samplesPerSecond = 1019.3
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.52922134 * 1280; Err = 0.19921875 * 1280; time = 1.2624s; samplesPerSecond = 1013.9
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.59268036 * 1280; Err = 0.21093750 * 1280; time = 1.6059s; samplesPerSecond = 797.0
MPI Rank 0: Finished Epoch[ 9 of 10]: [Training] CE = 0.59364289 * 25000; Err = 0.20780000 * 25000; totalSamplesSeen = 225000; learningRatePerSample = 0.0040000002; epochTime=27.5113s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 0.68007767 * 10000; perplexity = 1.97403105; Err = 0.22590000 * 10000
MPI Rank 0: Finished Epoch[ 9 of 10]: [Validate] CE = 0.68007767 * 10000; Err = 0.22590000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet.9'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[10 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.46512067 * 128; Err = 0.14843750 * 128; time = 0.0954s; samplesPerSecond = 1342.3
MPI Rank 0:  Epoch[10 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.56869932 * 1152; Err = 0.20052083 * 1152; time = 1.2306s; samplesPerSecond = 936.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.54354901 * 1280; Err = 0.18515625 * 1280; time = 1.6884s; samplesPerSecond = 758.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.58726797 * 1280; Err = 0.21328125 * 1280; time = 1.7996s; samplesPerSecond = 711.3
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.56974869 * 1280; Err = 0.19765625 * 1280; time = 1.4324s; samplesPerSecond = 893.6
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.54349117 * 1280; Err = 0.18515625 * 1280; time = 1.2789s; samplesPerSecond = 1000.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.57178917 * 1280; Err = 0.19375000 * 1280; time = 1.3048s; samplesPerSecond = 981.0
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.55919571 * 1280; Err = 0.18671875 * 1280; time = 1.5478s; samplesPerSecond = 827.0
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.56013794 * 1280; Err = 0.18125000 * 1280; time = 1.2944s; samplesPerSecond = 988.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.57267189 * 1280; Err = 0.19921875 * 1280; time = 1.3762s; samplesPerSecond = 930.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.54565582 * 1280; Err = 0.19218750 * 1280; time = 1.3544s; samplesPerSecond = 945.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.56199493 * 1280; Err = 0.18750000 * 1280; time = 1.3857s; samplesPerSecond = 923.7
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.54752235 * 1280; Err = 0.19531250 * 1280; time = 1.3410s; samplesPerSecond = 954.5
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.56234818 * 1280; Err = 0.19687500 * 1280; time = 1.5690s; samplesPerSecond = 815.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.56677780 * 1280; Err = 0.18984375 * 1280; time = 1.3577s; samplesPerSecond = 942.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.57247391 * 1280; Err = 0.19921875 * 1280; time = 1.2511s; samplesPerSecond = 1023.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.51230469 * 1280; Err = 0.16953125 * 1280; time = 1.6008s; samplesPerSecond = 799.6
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.60372162 * 1280; Err = 0.20937500 * 1280; time = 1.5135s; samplesPerSecond = 845.7
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.57593613 * 1280; Err = 0.19765625 * 1280; time = 1.3719s; samplesPerSecond = 933.0
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.55775528 * 1280; Err = 0.19843750 * 1280; time = 1.3164s; samplesPerSecond = 972.4
MPI Rank 0: Finished Epoch[10 of 10]: [Training] CE = 0.56105816 * 25000; Err = 0.19288000 * 25000; totalSamplesSeen = 250000; learningRatePerSample = 0.0040000002; epochTime=28.2469s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 0.85380670 * 10000; perplexity = 2.34857015; Err = 0.27480000 * 10000
MPI Rank 0: Finished Epoch[10 of 10]: [Validate] CE = 0.85380670 * 10000; Err = 0.27480000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-2gpu-e2e/Models/03_ResNet'
MPI Rank 0: ~MultiversoHelper
MPI Rank 0: [INFO] [2016-11-13 20:57:28] Multiverso Shutdown successfully
MPI Rank 0: 
MPI Rank 0: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: COMPLETED.
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 
MPI Rank 1: Configuration After Processing and Variable Resolution:
MPI Rank 1: 
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:configName=2gpu-e2e
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-2gpu-e2e/Models
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-2gpu-e2e
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-2gpu-e2e/03_ResNet
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 1:     action = "test"
MPI Rank 1:     modelPath = "./Output-2gpu-e2e/Models/03_ResNet"
MPI Rank 1:     minibatchSize = 256
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "center"
MPI Rank 1:             cropRatio = 1
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]    
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "./Output-2gpu-e2e/Models/03_ResNet"
MPI Rank 1:      NDLNetworkBuilder = [
MPI Rank 1:         networkDescription = "./03_ResNet.ndl"
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 1:         momentumPerMB = 0
MPI Rank 1:         maxEpochs = 10
MPI Rank 1:         L2RegWeight = 0.0001
MPI Rank 1:         dropoutRate = 0
MPI Rank 1:         perfTraceLevel = 0
MPI Rank 1:         firstMBsToShowResult = 1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = DataParallelASGD
MPI Rank 1:             distributedMBReading = "true"
MPI Rank 1:             parallelizationStartEpoch = 1
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:                 useBufferedAsyncGradientAggregation = false
MPI Rank 1:             ]
MPI Rank 1:             ModelAveragingSGD = [
MPI Rank 1:                 blockSizePerWorker = 128
MPI Rank 1:             ]
MPI Rank 1:             DataParallelASGD = [
MPI Rank 1:                 syncPeriod = 128
MPI Rank 1:                 usePipeline = false
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "random"
MPI Rank 1:             cropRatio = 0.8
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     cvReader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "center"
MPI Rank 1:             cropRatio = 1
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]    
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: Commands: Train
MPI Rank 1: precision = "float"
MPI Rank 1: 
MPI Rank 1: ##############################################################################
MPI Rank 1: #                                                                            #
MPI Rank 1: # Train command (train action)                                               #
MPI Rank 1: #                                                                            #
MPI Rank 1: ##############################################################################
MPI Rank 1: 
MPI Rank 1: LockDevice: Failed to lock GPU 0 for exclusive use.
MPI Rank 1: 
MPI Rank 1: Creating virgin network.
MPI Rank 1: NDLBuilder Using GPU 1
MPI Rank 1: Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 1: 
MPI Rank 1: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 1: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: 
MPI Rank 1: Model has 184 nodes. Using GPU 1.
MPI Rank 1: 
MPI Rank 1: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 1: Evaluation criterion: Err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 1: 
MPI Rank 1:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 1:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 1:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 1:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 1:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { pool : [1 x 1 x 64 x *]
MPI Rank 1:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 1:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 1:     { OutputNodes.t : [10 x *]
MPI Rank 1:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 1: 
MPI Rank 1:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 1:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 1:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 1:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 1:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 1:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1: 
MPI Rank 1: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 1: [INFO] [2016-11-13 20:49:35] multiverso MPI-Net is initialized under MPI_THREAD_SERIALIZED mode.
MPI Rank 1: [INFO] [2016-11-13 20:49:35] Create a async server
MPI Rank 1: [INFO] [2016-11-13 20:49:35] Rank 1: Multiverso start successfully
MPI Rank 1: multiverso initial model loaded.
MPI Rank 1: 
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.29648542 * 128; Err = 0.90625000 * 128; time = 3.3859s; samplesPerSecond = 37.8
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 2.29399305 * 1152; Err = 0.83420139 * 1152; time = 2.2052s; samplesPerSecond = 522.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.12445812 * 1280; Err = 0.81328125 * 1280; time = 2.3441s; samplesPerSecond = 546.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.04184952 * 1280; Err = 0.76406250 * 1280; time = 2.4329s; samplesPerSecond = 526.1
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 1.94551620 * 1280; Err = 0.73203125 * 1280; time = 2.3770s; samplesPerSecond = 538.5
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 1.90567474 * 1280; Err = 0.72187500 * 1280; time = 2.3004s; samplesPerSecond = 556.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 1.87603149 * 1280; Err = 0.68984375 * 1280; time = 2.3104s; samplesPerSecond = 554.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 1.81801529 * 1280; Err = 0.67500000 * 1280; time = 2.1342s; samplesPerSecond = 599.8
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 1.82065277 * 1280; Err = 0.67890625 * 1280; time = 2.4085s; samplesPerSecond = 531.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 1.77443085 * 1280; Err = 0.67890625 * 1280; time = 2.1712s; samplesPerSecond = 589.5
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 1.69720764 * 1280; Err = 0.63515625 * 1280; time = 2.0605s; samplesPerSecond = 621.2
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 1.70190277 * 1280; Err = 0.65781250 * 1280; time = 2.0994s; samplesPerSecond = 609.7
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 1.60765381 * 1280; Err = 0.61093750 * 1280; time = 2.1837s; samplesPerSecond = 586.2
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 1.60836029 * 1280; Err = 0.60078125 * 1280; time = 2.0268s; samplesPerSecond = 631.5
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.61619110 * 1280; Err = 0.62890625 * 1280; time = 1.9898s; samplesPerSecond = 643.3
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.64490967 * 1280; Err = 0.62265625 * 1280; time = 2.0664s; samplesPerSecond = 619.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.57494202 * 1280; Err = 0.59843750 * 1280; time = 2.0051s; samplesPerSecond = 638.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.57842712 * 1280; Err = 0.57968750 * 1280; time = 1.9467s; samplesPerSecond = 657.5
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.56920776 * 1280; Err = 0.59921875 * 1280; time = 1.9281s; samplesPerSecond = 663.9
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.54866638 * 1280; Err = 0.56328125 * 1280; time = 1.9474s; samplesPerSecond = 657.3
MPI Rank 1: Finished Epoch[ 1 of 10]: [Training] CE = 1.76941219 * 25000; Err = 0.66496000 * 25000; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=45.4977s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.63790554 * 10000; perplexity = 5.14438352; Err = 0.60400000 * 10000
MPI Rank 1: Finished Epoch[ 1 of 10]: [Validate] CE = 1.63790554 * 10000; Err = 0.60400000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.53609335 * 128; Err = 0.57812500 * 128; time = 0.2418s; samplesPerSecond = 529.3
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.68441448 * 1152; Err = 0.61545139 * 1152; time = 2.2222s; samplesPerSecond = 518.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.62663460 * 1280; Err = 0.62109375 * 1280; time = 2.4658s; samplesPerSecond = 519.1
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  21-  30, 31.58%]: CE = 1.59111481 * 1280; Err = 0.60312500 * 1280; time = 2.5603s; samplesPerSecond = 499.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.59431877 * 1280; Err = 0.59375000 * 1280; time = 2.2859s; samplesPerSecond = 559.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  41-  50, 52.63%]: CE = 1.51605453 * 1280; Err = 0.54375000 * 1280; time = 2.3348s; samplesPerSecond = 548.2
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  51-  60, 63.16%]: CE = 1.44093933 * 1280; Err = 0.52968750 * 1280; time = 2.5560s; samplesPerSecond = 500.8
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  61-  70, 73.68%]: CE = 1.45344391 * 1280; Err = 0.52968750 * 1280; time = 2.4598s; samplesPerSecond = 520.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  71-  80, 84.21%]: CE = 1.43804398 * 1280; Err = 0.52265625 * 1280; time = 2.2828s; samplesPerSecond = 560.7
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  81-  90, 94.74%]: CE = 1.32225418 * 1280; Err = 0.49140625 * 1280; time = 2.2947s; samplesPerSecond = 557.8
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  91- 100, 105.26%]: CE = 1.35436859 * 1280; Err = 0.51250000 * 1280; time = 2.5377s; samplesPerSecond = 504.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 1.42056580 * 1280; Err = 0.52421875 * 1280; time = 2.3293s; samplesPerSecond = 549.5
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 1.32499695 * 1280; Err = 0.49453125 * 1280; time = 2.2728s; samplesPerSecond = 563.2
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 1.30439758 * 1280; Err = 0.48437500 * 1280; time = 2.1294s; samplesPerSecond = 601.1
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 1.23224945 * 1280; Err = 0.43750000 * 1280; time = 2.1001s; samplesPerSecond = 609.5
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 1.22116394 * 1280; Err = 0.45156250 * 1280; time = 1.9598s; samplesPerSecond = 653.1
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 1.24854431 * 1280; Err = 0.46015625 * 1280; time = 1.9486s; samplesPerSecond = 656.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 1.23981018 * 1280; Err = 0.45937500 * 1280; time = 1.9563s; samplesPerSecond = 654.3
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 1.20456238 * 1280; Err = 0.43203125 * 1280; time = 1.9781s; samplesPerSecond = 647.1
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 1.19583740 * 1280; Err = 0.43671875 * 1280; time = 1.9612s; samplesPerSecond = 652.7
MPI Rank 1: Finished Epoch[ 2 of 10]: [Training] CE = 1.38342141 * 25000; Err = 0.50996000 * 25000; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=44.0029s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.28859905 * 10000; perplexity = 3.62770078; Err = 0.46980000 * 10000
MPI Rank 1: Finished Epoch[ 2 of 10]: [Validate] CE = 1.28859905 * 10000; Err = 0.46980000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.35486114 * 128; Err = 0.46875000 * 128; time = 0.2052s; samplesPerSecond = 623.8
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.23765555 * 1152; Err = 0.47135417 * 1152; time = 2.1456s; samplesPerSecond = 536.9
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.30049152 * 1280; Err = 0.47734375 * 1280; time = 2.4646s; samplesPerSecond = 519.4
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  21-  30, 31.58%]: CE = 1.25629349 * 1280; Err = 0.44531250 * 1280; time = 2.4074s; samplesPerSecond = 531.7
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.16101036 * 1280; Err = 0.40312500 * 1280; time = 2.5979s; samplesPerSecond = 492.7
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  41-  50, 52.63%]: CE = 1.13188400 * 1280; Err = 0.41093750 * 1280; time = 2.3739s; samplesPerSecond = 539.2
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  51-  60, 63.16%]: CE = 1.19993286 * 1280; Err = 0.44062500 * 1280; time = 2.2357s; samplesPerSecond = 572.5
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  61-  70, 73.68%]: CE = 1.11638336 * 1280; Err = 0.41484375 * 1280; time = 2.3997s; samplesPerSecond = 533.4
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  71-  80, 84.21%]: CE = 1.10284729 * 1280; Err = 0.40546875 * 1280; time = 2.3561s; samplesPerSecond = 543.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  81-  90, 94.74%]: CE = 1.18830185 * 1280; Err = 0.41875000 * 1280; time = 2.6238s; samplesPerSecond = 487.8
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  91- 100, 105.26%]: CE = 1.05094604 * 1280; Err = 0.39296875 * 1280; time = 2.4653s; samplesPerSecond = 519.2
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 1.10181503 * 1280; Err = 0.40078125 * 1280; time = 2.2960s; samplesPerSecond = 557.5
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 1.05711365 * 1280; Err = 0.38515625 * 1280; time = 2.2608s; samplesPerSecond = 566.2
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 1.03999786 * 1280; Err = 0.36093750 * 1280; time = 2.3967s; samplesPerSecond = 534.1
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 1.01974030 * 1280; Err = 0.37031250 * 1280; time = 2.1721s; samplesPerSecond = 589.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 1.03961182 * 1280; Err = 0.36875000 * 1280; time = 2.0229s; samplesPerSecond = 632.8
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.96483002 * 1280; Err = 0.34531250 * 1280; time = 1.9653s; samplesPerSecond = 651.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 1.07026215 * 1280; Err = 0.38125000 * 1280; time = 2.0180s; samplesPerSecond = 634.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 1.00664520 * 1280; Err = 0.35703125 * 1280; time = 2.0417s; samplesPerSecond = 626.9
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.99345551 * 1280; Err = 0.35156250 * 1280; time = 2.0565s; samplesPerSecond = 622.4
MPI Rank 1: Finished Epoch[ 3 of 10]: [Training] CE = 1.10609625 * 25000; Err = 0.39920000 * 25000; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=44.694s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.13241162 * 10000; perplexity = 3.10313107; Err = 0.38790000 * 10000
MPI Rank 1: Finished Epoch[ 3 of 10]: [Validate] CE = 1.13241162 * 10000; Err = 0.38790000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[   1-   1, 1.05%]: CE = 1.06442523 * 128; Err = 0.39062500 * 128; time = 0.2235s; samplesPerSecond = 572.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[   2-  10, 10.53%]: CE = 1.05461007 * 1152; Err = 0.40017361 * 1152; time = 2.0530s; samplesPerSecond = 561.1
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  11-  20, 21.05%]: CE = 1.00995750 * 1280; Err = 0.36250000 * 1280; time = 2.4589s; samplesPerSecond = 520.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.99707947 * 1280; Err = 0.36640625 * 1280; time = 2.4697s; samplesPerSecond = 518.3
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  31-  40, 42.11%]: CE = 1.02410736 * 1280; Err = 0.36562500 * 1280; time = 2.2955s; samplesPerSecond = 557.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.95243797 * 1280; Err = 0.34531250 * 1280; time = 2.3493s; samplesPerSecond = 544.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.96657486 * 1280; Err = 0.32968750 * 1280; time = 2.3684s; samplesPerSecond = 540.4
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  61-  70, 73.68%]: CE = 1.01450272 * 1280; Err = 0.36796875 * 1280; time = 2.2325s; samplesPerSecond = 573.4
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.97538452 * 1280; Err = 0.32343750 * 1280; time = 2.5413s; samplesPerSecond = 503.7
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.97704163 * 1280; Err = 0.33437500 * 1280; time = 2.2918s; samplesPerSecond = 558.5
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.92791443 * 1280; Err = 0.32265625 * 1280; time = 2.3619s; samplesPerSecond = 541.9
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.98513031 * 1280; Err = 0.34453125 * 1280; time = 2.4722s; samplesPerSecond = 517.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.91145020 * 1280; Err = 0.33359375 * 1280; time = 2.3227s; samplesPerSecond = 551.1
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.88056030 * 1280; Err = 0.32265625 * 1280; time = 2.3726s; samplesPerSecond = 539.5
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.84070587 * 1280; Err = 0.29921875 * 1280; time = 2.0510s; samplesPerSecond = 624.1
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.83853149 * 1280; Err = 0.29531250 * 1280; time = 2.0104s; samplesPerSecond = 636.7
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.89706879 * 1280; Err = 0.32421875 * 1280; time = 2.0006s; samplesPerSecond = 639.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.85724640 * 1280; Err = 0.30390625 * 1280; time = 2.0504s; samplesPerSecond = 624.3
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.86080780 * 1280; Err = 0.31171875 * 1280; time = 2.0281s; samplesPerSecond = 631.1
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.90658722 * 1280; Err = 0.32421875 * 1280; time = 2.0081s; samplesPerSecond = 637.4
MPI Rank 1: Finished Epoch[ 4 of 10]: [Training] CE = 0.94017859 * 25000; Err = 0.33568000 * 25000; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=44.3979s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.88865153 * 10000; perplexity = 2.43184818; Err = 0.30820000 * 10000
MPI Rank 1: Finished Epoch[ 4 of 10]: [Validate] CE = 0.88865153 * 10000; Err = 0.30820000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.86072922 * 128; Err = 0.32812500 * 128; time = 0.3649s; samplesPerSecond = 350.8
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.89742014 * 1152; Err = 0.31770833 * 1152; time = 2.0119s; samplesPerSecond = 572.6
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.82288637 * 1280; Err = 0.28593750 * 1280; time = 2.2194s; samplesPerSecond = 576.7
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.91264057 * 1280; Err = 0.33125000 * 1280; time = 2.4113s; samplesPerSecond = 530.8
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.76568470 * 1280; Err = 0.27031250 * 1280; time = 2.4073s; samplesPerSecond = 531.7
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.88193092 * 1280; Err = 0.32500000 * 1280; time = 1.7929s; samplesPerSecond = 713.9
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.89614525 * 1280; Err = 0.30390625 * 1280; time = 1.4898s; samplesPerSecond = 859.2
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.81297379 * 1280; Err = 0.28203125 * 1280; time = 1.7648s; samplesPerSecond = 725.3
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.85433922 * 1280; Err = 0.30312500 * 1280; time = 2.3304s; samplesPerSecond = 549.3
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.82212219 * 1280; Err = 0.29296875 * 1280; time = 2.1657s; samplesPerSecond = 591.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.80199890 * 1280; Err = 0.28437500 * 1280; time = 2.3272s; samplesPerSecond = 550.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.86499481 * 1280; Err = 0.30468750 * 1280; time = 2.3787s; samplesPerSecond = 538.1
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.82339020 * 1280; Err = 0.28437500 * 1280; time = 2.4026s; samplesPerSecond = 532.8
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.77615738 * 1280; Err = 0.25625000 * 1280; time = 2.3727s; samplesPerSecond = 539.5
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.74743881 * 1280; Err = 0.26406250 * 1280; time = 2.3166s; samplesPerSecond = 552.5
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.83268967 * 1280; Err = 0.29218750 * 1280; time = 2.0612s; samplesPerSecond = 621.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.81668167 * 1280; Err = 0.27500000 * 1280; time = 2.0089s; samplesPerSecond = 637.2
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.73799286 * 1280; Err = 0.26718750 * 1280; time = 2.0249s; samplesPerSecond = 632.1
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.70458984 * 1280; Err = 0.23125000 * 1280; time = 1.9322s; samplesPerSecond = 662.5
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.79244843 * 1280; Err = 0.25781250 * 1280; time = 2.0738s; samplesPerSecond = 617.2
MPI Rank 1: Finished Epoch[ 5 of 10]: [Training] CE = 0.81667523 * 25000; Err = 0.28512000 * 25000; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=42.0858s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.88832983 * 10000; perplexity = 2.43106595; Err = 0.29550000 * 10000
MPI Rank 1: Finished Epoch[ 5 of 10]: [Validate] CE = 0.88832983 * 10000; Err = 0.29550000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.75091934 * 128; Err = 0.29687500 * 128; time = 0.2180s; samplesPerSecond = 587.2
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.77406608 * 1152; Err = 0.27256944 * 1152; time = 2.0288s; samplesPerSecond = 567.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.77035847 * 1280; Err = 0.25468750 * 1280; time = 2.3529s; samplesPerSecond = 544.0
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.72902184 * 1280; Err = 0.25859375 * 1280; time = 2.3153s; samplesPerSecond = 552.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.80518017 * 1280; Err = 0.28515625 * 1280; time = 2.3791s; samplesPerSecond = 538.0
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.82034302 * 1280; Err = 0.28515625 * 1280; time = 2.4757s; samplesPerSecond = 517.0
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.81736565 * 1280; Err = 0.27968750 * 1280; time = 2.1958s; samplesPerSecond = 582.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.75495682 * 1280; Err = 0.26953125 * 1280; time = 2.0249s; samplesPerSecond = 632.1
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.66802902 * 1280; Err = 0.22656250 * 1280; time = 2.3734s; samplesPerSecond = 539.3
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.74823685 * 1280; Err = 0.25703125 * 1280; time = 2.3060s; samplesPerSecond = 555.1
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.72627106 * 1280; Err = 0.26640625 * 1280; time = 2.3815s; samplesPerSecond = 537.5
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.71279526 * 1280; Err = 0.23828125 * 1280; time = 2.3794s; samplesPerSecond = 537.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.76213684 * 1280; Err = 0.26015625 * 1280; time = 2.3107s; samplesPerSecond = 553.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.66611404 * 1280; Err = 0.23125000 * 1280; time = 2.4157s; samplesPerSecond = 529.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.66626434 * 1280; Err = 0.23437500 * 1280; time = 2.0660s; samplesPerSecond = 619.5
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.71219025 * 1280; Err = 0.24140625 * 1280; time = 1.9638s; samplesPerSecond = 651.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.69508362 * 1280; Err = 0.24609375 * 1280; time = 1.9924s; samplesPerSecond = 642.5
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.69483719 * 1280; Err = 0.22656250 * 1280; time = 1.9548s; samplesPerSecond = 654.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.69992447 * 1280; Err = 0.24531250 * 1280; time = 2.0208s; samplesPerSecond = 633.4
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.69523010 * 1280; Err = 0.24609375 * 1280; time = 1.9606s; samplesPerSecond = 652.9
MPI Rank 1: Finished Epoch[ 6 of 10]: [Training] CE = 0.73119742 * 25000; Err = 0.25372000 * 25000; totalSamplesSeen = 150000; learningRatePerSample = 0.0040000002; epochTime=43.447s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.73152160 * 10000; perplexity = 2.07824045; Err = 0.25360000 * 10000
MPI Rank 1: Finished Epoch[ 6 of 10]: [Validate] CE = 0.73152160 * 10000; Err = 0.25360000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.55741471 * 128; Err = 0.18750000 * 128; time = 0.4175s; samplesPerSecond = 306.6
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.70231918 * 1152; Err = 0.24392361 * 1152; time = 2.1400s; samplesPerSecond = 538.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.71079378 * 1280; Err = 0.25078125 * 1280; time = 2.1901s; samplesPerSecond = 584.4
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.72228928 * 1280; Err = 0.24921875 * 1280; time = 2.1431s; samplesPerSecond = 597.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.68558559 * 1280; Err = 0.23437500 * 1280; time = 2.4076s; samplesPerSecond = 531.7
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.68551693 * 1280; Err = 0.23515625 * 1280; time = 2.3530s; samplesPerSecond = 544.0
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.65366402 * 1280; Err = 0.23359375 * 1280; time = 2.3460s; samplesPerSecond = 545.6
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.66291428 * 1280; Err = 0.23437500 * 1280; time = 2.2764s; samplesPerSecond = 562.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.69912071 * 1280; Err = 0.24062500 * 1280; time = 2.2326s; samplesPerSecond = 573.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.64392548 * 1280; Err = 0.22343750 * 1280; time = 2.3920s; samplesPerSecond = 535.1
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.71311722 * 1280; Err = 0.23671875 * 1280; time = 2.4197s; samplesPerSecond = 529.0
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.65320816 * 1280; Err = 0.21171875 * 1280; time = 2.3631s; samplesPerSecond = 541.7
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.67262344 * 1280; Err = 0.22265625 * 1280; time = 2.1327s; samplesPerSecond = 600.2
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.61447525 * 1280; Err = 0.21718750 * 1280; time = 2.2890s; samplesPerSecond = 559.2
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.69660873 * 1280; Err = 0.23203125 * 1280; time = 2.1418s; samplesPerSecond = 597.6
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.68944778 * 1280; Err = 0.22968750 * 1280; time = 2.0112s; samplesPerSecond = 636.4
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.63934174 * 1280; Err = 0.22656250 * 1280; time = 2.0393s; samplesPerSecond = 627.7
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.64508591 * 1280; Err = 0.22031250 * 1280; time = 2.0219s; samplesPerSecond = 633.1
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.64611588 * 1280; Err = 0.21718750 * 1280; time = 2.0165s; samplesPerSecond = 634.8
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.62708435 * 1280; Err = 0.20703125 * 1280; time = 1.9698s; samplesPerSecond = 649.8
MPI Rank 1: Finished Epoch[ 7 of 10]: [Training] CE = 0.67155102 * 25000; Err = 0.22996000 * 25000; totalSamplesSeen = 175000; learningRatePerSample = 0.0040000002; epochTime=43.7236s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.80376952 * 10000; perplexity = 2.23394597; Err = 0.26630000 * 10000
MPI Rank 1: Finished Epoch[ 7 of 10]: [Validate] CE = 0.80376952 * 10000; Err = 0.26630000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.64744210 * 128; Err = 0.24218750 * 128; time = 0.4599s; samplesPerSecond = 278.3
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.67586478 * 1152; Err = 0.23263889 * 1152; time = 2.0325s; samplesPerSecond = 566.8
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.63312516 * 1280; Err = 0.22343750 * 1280; time = 2.5717s; samplesPerSecond = 497.7
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.58394575 * 1280; Err = 0.18828125 * 1280; time = 2.5035s; samplesPerSecond = 511.3
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.60500927 * 1280; Err = 0.21484375 * 1280; time = 2.4710s; samplesPerSecond = 518.0
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.64838619 * 1280; Err = 0.22578125 * 1280; time = 2.6650s; samplesPerSecond = 480.3
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.66419926 * 1280; Err = 0.23359375 * 1280; time = 2.2137s; samplesPerSecond = 578.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.63703156 * 1280; Err = 0.23437500 * 1280; time = 2.3634s; samplesPerSecond = 541.6
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.62816353 * 1280; Err = 0.21640625 * 1280; time = 2.3458s; samplesPerSecond = 545.6
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.62276917 * 1280; Err = 0.19921875 * 1280; time = 2.3840s; samplesPerSecond = 536.9
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.58555031 * 1280; Err = 0.20078125 * 1280; time = 2.4005s; samplesPerSecond = 533.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.60385818 * 1280; Err = 0.21640625 * 1280; time = 2.3893s; samplesPerSecond = 535.7
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.62125778 * 1280; Err = 0.22109375 * 1280; time = 2.2688s; samplesPerSecond = 564.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.62968521 * 1280; Err = 0.22421875 * 1280; time = 2.2449s; samplesPerSecond = 570.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.57852097 * 1280; Err = 0.21406250 * 1280; time = 2.0822s; samplesPerSecond = 614.7
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.57975540 * 1280; Err = 0.20781250 * 1280; time = 2.0158s; samplesPerSecond = 635.0
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.62259674 * 1280; Err = 0.22656250 * 1280; time = 1.9727s; samplesPerSecond = 648.8
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.63893967 * 1280; Err = 0.22734375 * 1280; time = 1.9322s; samplesPerSecond = 662.5
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.59768372 * 1280; Err = 0.21484375 * 1280; time = 2.0631s; samplesPerSecond = 620.4
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.63996429 * 1280; Err = 0.22890625 * 1280; time = 2.0405s; samplesPerSecond = 627.3
MPI Rank 1: Finished Epoch[ 8 of 10]: [Training] CE = 0.62076484 * 25000; Err = 0.21828000 * 25000; totalSamplesSeen = 200000; learningRatePerSample = 0.0040000002; epochTime=44.865s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.77053771 * 10000; perplexity = 2.16092790; Err = 0.25860000 * 10000
MPI Rank 1: Finished Epoch[ 8 of 10]: [Validate] CE = 0.77053771 * 10000; Err = 0.25860000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.61847818 * 128; Err = 0.19531250 * 128; time = 0.2546s; samplesPerSecond = 502.7
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.58933715 * 1152; Err = 0.20920139 * 1152; time = 2.1676s; samplesPerSecond = 531.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.56242528 * 1280; Err = 0.18750000 * 1280; time = 2.2816s; samplesPerSecond = 561.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.59659491 * 1280; Err = 0.21171875 * 1280; time = 2.4636s; samplesPerSecond = 519.6
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.61734142 * 1280; Err = 0.20859375 * 1280; time = 2.0863s; samplesPerSecond = 613.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.65990295 * 1280; Err = 0.22265625 * 1280; time = 2.3113s; samplesPerSecond = 553.8
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.58875599 * 1280; Err = 0.20546875 * 1280; time = 2.2322s; samplesPerSecond = 573.4
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.60724411 * 1280; Err = 0.20937500 * 1280; time = 2.2490s; samplesPerSecond = 569.1
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.57060432 * 1280; Err = 0.19921875 * 1280; time = 2.4488s; samplesPerSecond = 522.7
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.60231514 * 1280; Err = 0.21093750 * 1280; time = 2.2474s; samplesPerSecond = 569.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.56261635 * 1280; Err = 0.19140625 * 1280; time = 2.1116s; samplesPerSecond = 606.2
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.60800858 * 1280; Err = 0.20625000 * 1280; time = 2.2907s; samplesPerSecond = 558.8
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.61806946 * 1280; Err = 0.21640625 * 1280; time = 2.3297s; samplesPerSecond = 549.4
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.52527161 * 1280; Err = 0.17187500 * 1280; time = 2.3322s; samplesPerSecond = 548.8
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.59060974 * 1280; Err = 0.20390625 * 1280; time = 2.2194s; samplesPerSecond = 576.7
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.59686508 * 1280; Err = 0.21406250 * 1280; time = 1.9923s; samplesPerSecond = 642.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.53946609 * 1280; Err = 0.19062500 * 1280; time = 2.0124s; samplesPerSecond = 636.1
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.55708389 * 1280; Err = 0.19375000 * 1280; time = 2.0350s; samplesPerSecond = 629.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.52720947 * 1280; Err = 0.18984375 * 1280; time = 1.9245s; samplesPerSecond = 665.1
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.54466858 * 1280; Err = 0.19375000 * 1280; time = 1.9746s; samplesPerSecond = 648.2
MPI Rank 1: Finished Epoch[ 9 of 10]: [Training] CE = 0.58219582 * 25000; Err = 0.20152000 * 25000; totalSamplesSeen = 225000; learningRatePerSample = 0.0040000002; epochTime=43.1569s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.69007668 * 10000; perplexity = 1.99386841; Err = 0.23520000 * 10000
MPI Rank 1: Finished Epoch[ 9 of 10]: [Validate] CE = 0.69007668 * 10000; Err = 0.23520000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[10 of 10]-Minibatch[   1-   1, 1.05%]: CE = 0.45097357 * 128; Err = 0.15625000 * 128; time = 0.2033s; samplesPerSecond = 629.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[   2-  10, 10.53%]: CE = 0.55597623 * 1152; Err = 0.18489583 * 1152; time = 2.1790s; samplesPerSecond = 528.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  11-  20, 21.05%]: CE = 0.54600286 * 1280; Err = 0.17968750 * 1280; time = 2.3839s; samplesPerSecond = 536.9
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  21-  30, 31.58%]: CE = 0.55091200 * 1280; Err = 0.19062500 * 1280; time = 2.3496s; samplesPerSecond = 544.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  31-  40, 42.11%]: CE = 0.54869041 * 1280; Err = 0.20000000 * 1280; time = 2.2367s; samplesPerSecond = 572.3
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  41-  50, 52.63%]: CE = 0.60176449 * 1280; Err = 0.20468750 * 1280; time = 2.3865s; samplesPerSecond = 536.3
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  51-  60, 63.16%]: CE = 0.56337070 * 1280; Err = 0.18750000 * 1280; time = 2.2904s; samplesPerSecond = 558.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  61-  70, 73.68%]: CE = 0.60884171 * 1280; Err = 0.21640625 * 1280; time = 2.3387s; samplesPerSecond = 547.3
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  71-  80, 84.21%]: CE = 0.59864388 * 1280; Err = 0.20468750 * 1280; time = 2.2627s; samplesPerSecond = 565.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  81-  90, 94.74%]: CE = 0.57752266 * 1280; Err = 0.21093750 * 1280; time = 2.4138s; samplesPerSecond = 530.3
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  91- 100, 105.26%]: CE = 0.60415382 * 1280; Err = 0.21562500 * 1280; time = 2.4487s; samplesPerSecond = 522.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 101- 110, 115.79%]: CE = 0.53056488 * 1280; Err = 0.18437500 * 1280; time = 2.3494s; samplesPerSecond = 544.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 111- 120, 126.32%]: CE = 0.58539925 * 1280; Err = 0.21015625 * 1280; time = 2.2943s; samplesPerSecond = 557.9
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 121- 130, 136.84%]: CE = 0.54647217 * 1280; Err = 0.19843750 * 1280; time = 2.3125s; samplesPerSecond = 553.5
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 131- 140, 147.37%]: CE = 0.55931091 * 1280; Err = 0.18984375 * 1280; time = 2.2591s; samplesPerSecond = 566.6
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 141- 150, 157.89%]: CE = 0.54931870 * 1280; Err = 0.18515625 * 1280; time = 2.0043s; samplesPerSecond = 638.6
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 151- 160, 168.42%]: CE = 0.52518311 * 1280; Err = 0.17187500 * 1280; time = 2.0662s; samplesPerSecond = 619.5
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 161- 170, 178.95%]: CE = 0.52275696 * 1280; Err = 0.18984375 * 1280; time = 1.9439s; samplesPerSecond = 658.5
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 171- 180, 189.47%]: CE = 0.55066986 * 1280; Err = 0.17656250 * 1280; time = 1.9731s; samplesPerSecond = 648.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 181- 190, 200.00%]: CE = 0.52513199 * 1280; Err = 0.17890625 * 1280; time = 1.9957s; samplesPerSecond = 641.4
MPI Rank 1: Finished Epoch[10 of 10]: [Training] CE = 0.55843945 * 25000; Err = 0.19316000 * 25000; totalSamplesSeen = 250000; learningRatePerSample = 0.0040000002; epochTime=44.2889s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.72476228 * 10000; perplexity = 2.06424034; Err = 0.24310000 * 10000
MPI Rank 1: Finished Epoch[10 of 10]: [Validate] CE = 0.72476228 * 10000; Err = 0.24310000 * 10000
MPI Rank 1: ~MultiversoHelper
MPI Rank 1: [INFO] [2016-11-13 20:57:28] Multiverso Shutdown successfully
MPI Rank 1: 
MPI Rank 1: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: COMPLETED.
MPI Rank 1: ~MPIWrapper
