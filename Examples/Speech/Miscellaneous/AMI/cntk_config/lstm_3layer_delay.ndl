load=ndlMacroDefine
run=ndlCreateNetwork

ndlMacroDefine=[
    # Macro definitions
    DelayNode(x)
    {
        D=Delay(x, delayInput=Dout, delayTime=1)
    }

    MeanVarNorm(x)
    {   
	xMean = Mean(x)
    	xStdDev = InvStdDev(x)
    	xNorm=PerDimMeanVarNormalization(x,xMean,xStdDev)
    }

    LogPrior(labels)
    {
	Prior=Mean(labels)
	LogPrior=Log(Prior)
    }   

    LSTMComponent(inputDim, outputDim, inputVal)
    {
        Wxo = Parameter(outputDim, inputDim)
        Wxi = Parameter(outputDim, inputDim)
        Wxf = Parameter(outputDim, inputDim)
        Wxc = Parameter(outputDim, inputDim)

        bo = Parameter(outputDim, init=fixedvalue, value=-1.0)
        bc = Parameter(outputDim, init=fixedvalue, value=0.0)
        bi = Parameter(outputDim, init=fixedvalue, value=-1.0)
        bf = Parameter(outputDim, init=fixedvalue, value=-1.0)

        Whi = Parameter(outputDim, outputDim)
        Wci = Parameter(outputDim)
        Whf = Parameter(outputDim, outputDim)
        Wcf = Parameter(outputDim)
        Who = Parameter(outputDim, outputDim)
        Wco = Parameter(outputDim)
        Whc = Parameter(outputDim, outputDim)

        delayHI = Delay(outputDim, output, delayTime=1)
        delayHF = Delay(outputDim, output, delayTime=1)
        delayHO = Delay(outputDim, output, delayTime=1)
        delayHC = Delay(outputDim, output, delayTime=1)
        delayCI = Delay(outputDim, ct, delayTime=1)
        delayCF = Delay(outputDim, ct, delayTime=1)
        delayCC = Delay(outputDim, ct, delayTime=1)

        WxiInput = Times(Wxi, inputVal)
        WhidelayHI = Times(Whi, delayHI)
        WcidelayCI = DiagTimes(Wci, delayCI)

        it = Sigmoid (Plus ( Plus (Plus (WxiInput, bi), WhidelayHI), WcidelayCI))

        WxcInput = Times(Wxc, inputVal)
        WhcdelayHC = Times(Whc, delayHC)
        bit = ElementTimes(it, Tanh( Plus(WxcInput, Plus(WhcdelayHC, bc))))
        
        Wxfinput = Times(Wxf, inputVal)
        WhfdelayHF = Times(Whf, delayHF)
        WcfdelayCF = DiagTimes(Wcf, delayCF)

        ft = Sigmoid( Plus (Plus (Plus(Wxfinput, bf), WhfdelayHF), WcfdelayCF))

        bft = ElementTimes(ft, delayCC)

        ct = Plus(bft, bit)

        Wxoinput = Times(Wxo, inputVal)
        WhodelayHO = Times(Who, delayHO)
        Wcoct = DiagTimes(Wco, ct)

        ot = Sigmoid( Plus( Plus( Plus(Wxoinput, bo), WhodelayHO), Wcoct))

        output = ElementTimes(ot, Tanh(ct))
        
        
    }


]


ndlCreateNetwork=[

	#define basic i/o
	featDim=$featDim$
	labelDim=$labelDim$
	hiddenDim=512
	features=Input(featDim, tag=feature)
	labels=Input(labelDim, tag=label)
    #delaylabels=Delay(labelDim, labels, delayTime=5)


	# define network
	featNorm = MeanVarNorm(features)
    
    LSTMoutput = LSTMComponent(featDim, hiddenDim, featNorm)
    LSTMoutput2 = LSTMComponent(hiddenDim, hiddenDim, LSTMoutput)
    LSTMoutput3 = LSTMComponent(hiddenDim, hiddenDim, LSTMoutput2)
    W1 = Parameter(labelDim, hiddenDim)

    LSTMoutputW1 = Times(W1, LSTMoutput3)

    cr = CrossEntropyWithSoftmax(labels, LSTMoutputW1,tag=Criteria)
    Err = ClassificationError(labels,LSTMoutputW1,tag=Eval)
    
    logPrior = LogPrior(labels)	 
    ScaledLogLikelihood=Minus(LSTMoutputW1,logPrior,tag=Output)

]
