load=ndlMacroDefine
run=ndlMultiTask

ndlMacroDefine=[	
     WtObjFcn(o1,w1,o2,w2)
     {
		A1=Constant(w1)
		A2=Constant(w2)
		T1=Times(A1,o1)
		T2=Times(A2,o2)
		O=Plus(T1,T2) 
     }
]

ndlMultiTask = [

FeatDim = 792
HiddenDim = 512
HiddenDim2 = 256

LabelDim1 = 183
LabelDim2 = 8

# input definitions
features=Input(FeatDim,tag="feature")
labels=Input(LabelDim1,tag="label")
regions=Input(LabelDim2,tag="label")

Prior=Mean(labels)
LogPrior = Log(Prior)

featMean=Mean(features)
featInvStd=InvStdDev(features)
featInput=PerDimMeanVarNormalization(features,featMean,featInvStd)

# layer definitions
L1 = SBFF(featInput, HiddenDim, FeatDim)
L2 = SBFF(L1, HiddenDim2, HiddenDim)
L3 = SBFF(L2, HiddenDim, HiddenDim2)

# objective function 1
BFF1=BFF(L3,LabelDim1,HiddenDim)
CE1=CrossEntropyWithSoftmax(labels,BFF1.FF.P,tag="evaluation")
FER1 = ClassificationError(labels,BFF1.FF.P,tag="evaluation")

# objective function 2
BFF2=BFF(L3,LabelDim2,HiddenDim)
CE2=CrossEntropyWithSoftmax(regions,BFF2.FF.P,tag="evaluation")
FER2 = ClassificationError(regions,BFF2.FF.P,tag="evaluation")

# weighted final objective function
Alpha1=0.8
Alpha2=0.2
ObjFcn = WtObjFcn(CE1,Alpha1,CE2,Alpha2,tag="criterion")

# for decoding
ScaledLogLikelihood=Minus(BFF1.FF.P, LogPrior)

# root Nodes
OutputNodes=(ScaledLogLikelihood)
]


