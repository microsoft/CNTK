# Fully-connected layer with ReLU activation.
DnnReLULayer(inDim, outDim, x, wScale, bValue)
[
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = Parameter(outDim, init = fixedValue, value = bValue) 
    t = Times(W, x)
    z = Plus(t, b)
    y = RectifiedLinear(z)
]

# Fully-connected layer with batch normalization and ReLU activation.
DnnBNReLULayer(inDim, outDim, x, wScale, bValue)
[
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale) 
    b = Parameter(outDim, 1, init = fixedValue, value = bValue) 
    sc = Parameter(outDim, 1, init = Gaussian, initValueScale = 0.01)
    m = Parameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = Parameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, v, spatial = false)
    y = RectifiedLinear(bn)
]

# Fully-connected layer.
DnnLayer(inDim, outDim, x, wScale, bValue)
[
    W = Parameter(outDim, inDim, init = Gaussian, initValueScale = wScale)
    b = Parameter(outDim, init = fixedValue, value = bValue)
    t = Times(W, x)
    z = Plus(t, b)
]

# Convolutional layer with ReLU activation.
ConvReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue)
[
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = ImageParameter(1, 1, outMap, init = fixedValue, value = bValue, imageLayout = "cudnn")
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true, imageLayout = "cudnn")
    z = Plus(c, b);
    y = RectifiedLinear(z);
]

# Convolutional layer with batch normalization and ReLU activation.
ConvBNReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue)
[
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc = Parameter(outMap, 1, init = Gaussian, initValueScale = scValue)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    v = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true, imageLayout = "cudnn")
    bn = BatchNormalization(c, sc, b, m, v, spatial = true, imageLayout = "cudnn")
    y = RectifiedLinear(bn);
]
