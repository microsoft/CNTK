#
# Inception V3 network
# Details are in https://arxiv.org/pdf/1512.00567.pdf
#

command = Train:Eval

deviceId = "Auto"
precision = "float"
traceLevel = 1
#perfTraceLevel = 1
parallelTrain  = true
numMBsToShowResult = 100

RootDir     = "."
ConfigDir   = "$RootDir$"
ImageNetDir = "$ConfigDir$"
DataDir     = "$RootDir$"
OutputDir   = "$RootDir$/Output"
ModelDir    = "$OutputDir$/Model"

stderr      = "$OutputDir$/InceptionV3"
modelPath   = "$ModelDir$/InceptionV3"
    
ImageH    = 299
ImageW    = 299
ImageC    = 3
NumLabels = 1000

Train = {
    action = "train"

    BrainScriptNetworkBuilder = {
        include "$ConfigDir$/InceptionBlocks.bs"
        include "$ConfigDir$/InceptionV3.bs"

        imageShape  = $ImageH$:$ImageW$:$ImageC$
        labelDim    = $NumLabels$
        bnTimeConst = 4096
        auxWeight   = Constant(0.3)

        # inputs
        features = Input {imageShape}
        labels   = Input {labelDim}

        # apply model to features
        model    = InceptionV3Norm(features, labelDim, bnTimeConst)
        z        = model.z
        aux      = model.aux

        # connect to system
        ceAux    = CrossEntropyWithSoftmax     (labels, aux)
        ceZ      = CrossEntropyWithSoftmax     (labels, z)
        errs     = ClassificationError         (labels, z)
        top5Errs = ClassificationError         (labels, z, topN=5)  # only used in Eval action
        ce       = auxWeight .* ceAux + ceZ

        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs : top5Errs)
        outputNodes     = (z)
    }

    SGD = {
        epochSize = 0
        minibatchSize = 256 # 8 GPUs
        learningRatesPerMB = 3.6*2:3.384
        momentumPerMB = 0.9
        maxEpochs = 300
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        numMBsToShowResult = 100
        dropoutRate = 0.2
        useNAG = true

        autoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 1000
            learnRateAdjustInterval = 2
            learnRateDecreaseFactor = 0.94
            loadBestModel = false
        ]

        ParallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
        ]
    }

    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Crop"; cropType = "RandomArea"; areaRatio = 0.05:1.0; aspectRatio=0.75:1.0; jitterType = "uniRatio" } :
                    { type = "Scale"; width = $ImageW$; height = $ImageH$; channels = $ImageC$; interpolations = "linear" } :
                    { type = "Color" ; brightnessRadius = 0.125 ; contrastRadius = 0.5 ; saturationRadius = 0.5 } :
                    { type = "Transpose" }
                )}
                labels = { labelDim = $NumLabels$ }
            }
        })
    }

    cvreader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/val_map.txt"
            input = {
                features = { transforms = (
                   { type = "Crop"; cropType = "Center"; sideRatio = 0.875 } :
                   { type = "Scale"; width = $ImageW$; height = $ImageH$; channels = $ImageC$; interpolations = "linear" } :
                   { type = "Transpose" }
                )}
                labels = { labelDim = $NumLabels$ }
            }
        })
    }
}

Eval = [
    action = "test"
    evalNodeNames = errs:top5Errs  # also test top-5 error rate
    minibatchSize = 256

    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/val_map.txt"
            input = {
                features = { transforms = (
                   { type = "Crop"; cropType = "Center"; sideRatio = 0.875 } :
                   { type = "Scale"; width = $ImageW$; height = $ImageH$; channels = $ImageC$; interpolations = "linear" } :
                   { type = "Transpose" }
                )}
                labels = { labelDim = $NumLabels$ }
            }
        })
    } 
]
