DNNSigmoidLayer(inDim, outDim, x, parmScale) = [
    W = LearnableParameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
    b = LearnableParameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
    t = Times(W, x)
    z = Plus(t, b)
    y = Sigmoid(z)
]

DNNImageSigmoidLayer(inW, inH, inC, outDim, x, parmScale) = [
    W = ImageParameter(outDim, inW, inH, inC, init="uniform", initValueScale=parmScale, initOnCPUOnly=true, imageLayout=$imageLayout$)
    b = LearnableParameter(outDim, 1,         init="uniform", initValueScale=parmScale, initOnCPUOnly=true) 
    t = Times(W, x)
    z = Plus(t, b)
    y = Sigmoid(z)
]

DNNLayer(inDim, outDim, x, parmScale) = [
    W = LearnableParameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
    b = LearnableParameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=true)
    t = Times(W, x)
    z = Plus(t, b)
]

DnnBNReLULayer(inDim, outDim, x, wScale, bValue, scValue, bnTimeConst) = [
    W = LearnableParameter(outDim, inDim, init = Gaussian, initValueScale = wScale, initOnCPUOnly=true) 
    b = LearnableParameter(outDim, 1, init = fixedValue, value = bValue) 
    sc = LearnableParameter(outDim, 1, init = fixedValue, value = scValue) 
    m = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = LearnableParameter(outDim, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    t = Times(W, x)
    bn = BatchNormalization(t, sc, b, m, isd, eval = false, spatial = false, normalizationTimeConstant = bnTimeConst)
    y = RectifiedLinear(bn)
]

ConvW(outMap, inWCount, wScale) = [
    W = LearnableParameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=true)
]

ConvB(outMap, bValue) = [
    b = ImageParameter(1, 1, outMap, init="fixedValue", value=bValue, imageLayout=$imageLayout$)
]

Conv2D(w, inp, kW, kH, outMap, hStride, vStride) = [
    c = Convolution(w, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout=$imageLayout$)
]

ConvND(w, inp, kW, kH, inMap, outMap, hStride, vStride) = [
    c = Convolution(w, inp, {kW, kH, inMap}, mapCount=outMap, stride={hStride, vStride, inMap}, sharing={true, true, true}, autoPadding={true, true, false}, lowerPad=0, upperPad=0, imageLayout=$imageLayout$)
]

DeConv(w, inp, kW, kH, inMap, outMap, hStride, vStride, lpad, upad) = [
    c = Convolution(w, inp, {kW, kH, inMap}, mapCount=outMap, stride={hStride, vStride, inMap}, sharing={true, true, true}, autoPadding=false, lowerPad={lpad, lpad, 0}, upperPad={upad, upad, 0}, transpose=1, imageLayout=$imageLayout$)
]

Conv2DReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [
    w = ConvW(outMap, inWCount, wScale)
    b = ConvB(outMap, bValue)
    c = Conv2D(w, inp, kW, kH, outMap, hStride, vStride)
    cpb = Plus(c, b);
    out = RectifiedLinear(cpb);
]

ConvNDReLULayer(inp, kW, kH, inMap, inWCount, outMap, hStride, vStride, wScale, bValue) = [
    w = ConvW(outMap, inWCount, wScale)
    b = ConvB(outMap, bValue)
    c = ConvND(w, inp, kW, kH, inMap, outMap, hStride, vStride)
    cpb = Plus(c, b);
    out = RectifiedLinear(cpb);
]

ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, bnTimeConst) = [
    b = LearnableParameter(outMap, 1, init=fixedValue, value=bValue)
    sc = LearnableParameter(outMap, 1, init=fixedValue, value=scValue)
    m = LearnableParameter(outMap, 1, init=fixedValue, value=0, learningRateMultiplier=0)
    isd = LearnableParameter(outMap, 1, init=fixedValue, value=0, learningRateMultiplier=0)
    
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding=true, imageLayout=$imageLayout$)
    y = BatchNormalization(c, sc, b, m, isd, eval=false, spatial=true, normalizationTimeConstant=bnTimeConst, imageLayout=$imageLayout$)
]

ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst) = [
    W = LearnableParameter(outMap, inWCount, init=Gaussian, initValueScale=wScale, initOnCPUOnly=true)
    c = ConvBNLayerW(W, inp, outMap, kW, kH, hStride, vStride, bValue, scValue, bnTimeConst)
]

ConvBNReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst) = [
    c = ConvBNLayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
    y = RectifiedLinear(c)
]

DeconvReLULayer(inp, kW, kH, inMap, inWCount, outMap, hStride, vStride, lpad, upad, wScale, bValue) = [
    # No bias here.
    w = ConvW(outMap, inWCount, wScale)
    act = RectifiedLinear(inp)
    out = DeConv(w, act, kW, kH, inMap, outMap, hStride, vStride, lpad, upad)
]

MaxNDPooling(inp, kW, kH, hStride, vStride) = [
    p = Pooling(inp, "max", {kW, kH, 1}, stride={hStride, vStride, 1}, autoPadding={true, true, false}, lowerPad=0, upperPad=0, imageLayout=$imageLayout$)
]

MaxUnpool(inp, poolInp, kW, kH, hStride, vStride) = [
    up = MaxUnpooling(inp, poolInp, {kW, kH, 1}, stride={hStride, vStride, 1}, autoPadding={false, false, false}, lowerPad=0, upperPad=0, imageLayout=$imageLayout$)
]
