# Note: This sample uses the deprecated NdlNetworkBuilder.
#       An updated version using BrainScript is coming soon.
#       Please find updated samples on Github, https://github.com/Microsoft/CNTK/tree/master/Examples /...
#
RootDir = "."

ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

ndlMacros="$ConfigDir$/Macros.ndl"

precision="float"
deviceId="Auto"

command=Train:PBN:CreateEval:Test

parallelTrain="false"

stderr="$OutputDir$/ResNet_50"
traceLevel=1
numMBsToShowResult=500

# Strides for increasing layers. Defaults (paper) are 2 for 1x1 and 1 for 3x3.
stride1x1=2
stride3x3=1

Train=[
    action="train"
    modelPath="$ModelDir$/ResNet_50"

     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/ResNet_50.ndl"
    ]
    
    SGD=[
        epochSize=0
        minibatchSize=256
        # Note that learning rates are 10x more than in the paper due to a different
        # momentum update rule in CNTK: v{t + 1} = lr*(1 - momentum)*g{t + 1} + momentum*v{t}
        learningRatesPerMB=1.0*30:0.1*30:0.01*30:0.001
        momentumPerMB=0.9
        maxEpochs=125
        gradUpdateType="None"
        L2RegWeight=0.0001
        dropoutRate=0

        disableWkInBatchNormal=true
        
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    
    reader=[
        readerType="ImageReader"
        file="$DataDir$/train_map.txt"
        # Randomize images before every epoch. Possible values: None, Auto. Default: Auto.
        randomize="Auto"
        features=[
            # Below are the required parameters.
            width=224
            height=224
            channels=3
            # Below are the optional parameters.
            # Possible values: Center, Random. Default: Center
            cropType="Random"
            # Horizontal random flip, will be enabled by default if cropType=Random
            hflip="true"
            # Crop scale ratio. Examples: cropRatio=0.9, cropRatio=0.7:0.9. Default: 1.
            cropRatio=0.46666:0.875
            # Crop scale ratio jitter type.
            # Possible values: None, UniRatio, UniLength, UniArea. Default: UniRatio
            jitterType="UniRatio"
            # The file stores mean values for each pixel in OpenCV matrix XML format.
            meanFile="$ConfigDir$/ImageNet1K_mean.xml"
        ]
        labels=[
            labelDim=1000
        ]
    ]   
]

PBN=[
    action="pbn"
    modelPath="$ModelDir$/ResNet_50"
    # Set minibatch size for testing.
    minibatchSize=256
    iters=30

    reader=[
        readerType="ImageReader"
        file="$DataDir$/train_map.txt"
        # Randomize images before every epoch. Possible values: None, Auto. Default: Auto.
        randomize="Auto"
        features=[
            # Below are the required parameters.
            width=224
            height=224
            channels=3
            # Below are the optional parameters.
            # Possible values: Center, Random. Default: Center
            cropType="Random"
            # Horizontal random flip, will be enabled by default if cropType=Random
            hflip="true"
            # Crop scale ratio. Examples: cropRatio=0.9, cropRatio=0.7:0.9. Default: 1.
            cropRatio=0.46666:0.875
            # Crop scale ratio jitter type.
            # Possible values: None, UniRatio, UniLength, UniArea. Default: UniRatio
            jitterType="UniRatio"
            # The file stores mean values for each pixel in OpenCV matrix XML format.
            meanFile="$ConfigDir$/ImageNet1K_mean.xml"
        ]
        labels=[
            labelDim=1000
        ]
    ] 
]

CreateEval=[    
    action="edit"
    CurModel="$ModelDir$/ResNet_50.PBN"
    NewModel="$ModelDir$/ResNet_50.Eval"
    editPath="$ConfigDir$/CreateEvalModel.mel"
]

Test=[
    action="test"
    modelPath="$ModelDir$/ResNet_50.Eval"
    # Set minibatch size for testing.
    minibatchSize=200

    reader=[
        readerType="ImageReader"
        file="$DataDir$/val_map.txt"
        randomize="None"
        features=[
            width=224
            height=224
            channels=3
            cropType="Center"
            cropRatio=0.875
            meanFile="$ConfigDir$/ImageNet1K_mean.xml"
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
