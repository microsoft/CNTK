# configuration file for class based RNN training

ExpFolder=C:\CNTKExp\RNN\log\
ConfigFolder=..\..\ExampleSetups\LM\RNNLM
DataFolder=C:\CNTKExp\RNN\data\PennTreeBank

stderr=$ExpFolder$
# command=dumpNodeInfo
command=train
# command=test
#command=train:test
#command=writeWordAndClassInfo

precision=float

writeWordAndClassInfo=[
    action=writeWordAndClass
    inputFile=$DataFolder$\vocab.txt
    outputWord2Cls=$ExpFolder$\word2cls.txt
    outputCls2Index=$ExpFolder$\cls2idx.txt
    vocabSize=10000
    nbrClass=50
    printValues=true
]

dumpNodeInfo=[
    action=dumpnode
    modelPath=$ExpFolder$\modelRnnCNTK
    #nodeName=W0
    printValues=true
]

devtest=[action=devtest]

train=[
    action=train
    minibatchSize=10
    traceLevel=1
    deviceId=-1
    epochSize=4430000
    # which is 886 * 5000
    recurrentLayer=1
    defaultHiddenActivity=0.1
    rnnType=CLASSLM
    # rnnType=LSTM

    # uncomment below and comment SimpleNetworkBuilder section to use NDL to train RNN LM
    # NDLNetworkBuilder=[
    #    networkDescription=$ConfigFolder$\rnnlm.ndl
    # ]

    SimpleNetworkBuilder=[
        trainingCriterion=classcrossentropywithsoftmax
        evalCriterion=classcrossentropywithsoftmax
        nodeType=Sigmoid
        initValueScale=6.0
        layerSizes=10000:200:10000
        addPrior=false
        addDropoutNodes=false
        applyMeanVarNorm=false
        uniformInit=true;

        # these are for the class information for class-based language modeling
        vocabSize=10000
        nbrClass=50
    ]

    # configuration file, base parameters
    SGD=[
        learningRatesPerSample=0.1
        momentumPerMB=0
        gradientClippingWithTruncation=true
        clippingThresholdPerSample=15.0
        maxEpochs=40
        unroll=false
        numMBsToShowResult=2000
        # gradUpdateType=AdaGrad
        gradUpdateType=None
      
        modelPath=$ExpFolder$\modelRnnCNTK
        loadBestModel=true

        # settings for Auto Adjust Learning Rate
        AutoAdjust=[
            # auto learning rate adjustment
            autoAdjustLR=adjustafterepoch
            reduceLearnRateIfImproveLessThan=0.001
            continueReduce=true
            increaseLearnRateIfImproveMoreThan=1000000000
            learnRateDecreaseFactor=0.5
            learnRateIncreaseFactor=1.382
            numMiniBatch4LRSearch=100
            numPrevLearnRates=5
            numBestSearchEpoch=1
        ]

        dropoutRate=0.0
    ]

    reader=[
      readerType=LMSequenceReader
      randomize=None
      nbruttsineachrecurrentiter=1

      # word class info
      wordclass=$DataFolder$\vocab.txt

      # if writerType is set, we will cache to a binary file
      # if the binary file exists, we will use it instead of parsing this file
      # writerType=BinaryReader

      #### write definition
      wfile=$ExpFolder$\sequenceSentence.bin
      #wsize - inital size of the file in MB
      # if calculated size would be bigger, that is used instead
      wsize=256

      #wrecords - number of records we should allocate space for in the file
      # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
      wrecords=1000
      #windowSize - number of records we should include in BinaryWriter window
      windowSize=10000

      file=$DataFolder$\ptb.train.cntk.txt

      #additional features sections
      #for now store as expanded category data (including label in)
      features=[
        # sentence has no features, so need to set dimension to zero
        dim=0
        ### write definition
        sectionType=data
      ]
      # sequence break table, list indexes into sequence records, so we know when a sequence starts/stops
      sequence=[
        dim=1
        wrecords=2
        ### write definition
        sectionType=data
      ]
      #labels sections
      labelIn=[
        dim=1
        # vocabulary size
        labelDim=10000
        labelMappingFile=$ExpFolder$\sentenceLabels.txt
        labelType=Category
        beginSequence="</s>"
        endSequence="</s>"

        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=11
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=11
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
      #labels sections
      labels=[
        dim=1
        labelType=NextWord
        beginSequence="O"
        endSequence="O"

        # vocabulary size
        labelDim=10000

        labelMappingFile=$ExpFolder$\sentenceLabels.out.txt
        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=3
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=3
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
    ]

    cvReader=[
      # reader to use
      readerType=LMSequenceReader
      randomize=None

      # word class info
      wordclass=$DataFolder$\vocab.txt

      # if writerType is set, we will cache to a binary file
      # if the binary file exists, we will use it instead of parsing this file
      # writerType=BinaryReader

      #### write definition
      wfile=$ExpFolder$\sequenceSentence.valid.bin
      #wsize - inital size of the file in MB
      # if calculated size would be bigger, that is used instead
      wsize=256

      #wrecords - number of records we should allocate space for in the file
      # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
      wrecords=1000
      #windowSize - number of records we should include in BinaryWriter window
      windowSize=10000

      file=$DataFolder$\ptb.valid.cntk.txt

      #additional features sections
      #for now store as expanded category data (including label in)
      features=[
        # sentence has no features, so need to set dimension to zero
        dim=0
        ### write definition
        sectionType=data
      ]
      # sequence break table, list indexes into sequence records, so we know when a sequence starts/stops
      sequence=[
        dim=1
        wrecords=2
        ### write definition
        sectionType=data
      ]
      #labels sections
      # it should be the same as that in the training set
      labelIn=[
        dim=1

        # vocabulary size
        labelDim=10000
        labelMappingFile=$ExpFolder$\sentenceLabels.out.txt
        labelType=Category
        beginSequence="</s>"
        endSequence="</s>"

        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=11
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=11
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
      #labels sections
      labels=[
        dim=1
        labelType=NextWord
        beginSequence="O"
        endSequence="O"

        labelDim=10000
        labelMappingFile=$ExpFolder$\sentenceLabels.out.txt
        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=3
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=3
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
    ]
]


test=[
    action=eval

    # correspond to the number of words/characteres to train in a minibatch
    minibatchSize=1
    # need to be small since models are updated for each minibatch
    traceLevel=1
    deviceId=-1
    epochSize=4430000
    # which is 886 * 5000
    recurrentLayer=1
    defaultHiddenActivity=0.1
    rnnType=CLASSLM

    modelPath=$ExpFolder$\modelRnnCNTK

    reader=[
      # reader to use
      readerType=LMSequenceReader
      randomize=None

      # word class info
      wordclass=$DataFolder$\vocab.txt

      # if writerType is set, we will cache to a binary file
      # if the binary file exists, we will use it instead of parsing this file
      # writerType=BinaryReader

      #### write definition
      wfile=$ExpFolder$\sequenceSentence.bin
      #wsize - inital size of the file in MB
      # if calculated size would be bigger, that is used instead
      wsize=256

      # wrecords - number of records we should allocate space for in the file
      # files cannot be expanded, so this should be large enough. If known modify this element in config before creating file
      wrecords=1000
      # windowSize - number of records we should include in BinaryWriter window
      windowSize=10000

      file=$DataFolder$\ptb.test.cntk.txt

      #additional features sections
      #for now store as expanded category data (including label in)
      features=[
        # sentence has no features, so need to set dimension to zero
        dim=0
        ### write definition
        sectionType=data
      ]
      # sequence break table, list indexes into sequence records, so we know when a sequence starts/stops
      sequence=[
        dim=1
        wrecords=2
        ### write definition
        sectionType=data
      ]
      #labels sections
      labelIn=[
        dim=1

        # vocabulary size
        labelDim=10000
        labelMappingFile=$ExpFolder$\sentenceLabels.txt
        labelType=Category
        beginSequence="</s>"
        endSequence="</s>"

        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=11
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=11
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
      #labels sections
      labels=[
        dim=1
        labelType=NextWord
        beginSequence="O"
        endSequence="O"

        # vocabulary size
        labelDim=10000

        labelMappingFile=$ExpFolder$\sentenceLabels.out.txt
        #### Write definition ####
        # sizeof(unsigned) which is the label index type
        elementSize=4
        sectionType=labels
        mapping=[
          #redefine number of records for this section, since we don't need to save it for each data record
          wrecords=3
          #variable size so use an average string size
          elementSize=10
          sectionType=labelMapping
        ]
        category=[
          dim=3
          #elementSize=sizeof(ElemType) is default
          sectionType=categoryLabels
        ]
      ]
    ]
]
