run=ndlCreateNetwork

ndlCreateNetwork=[
    # vocabulary size
	featDim=10000
	# vocabulary size
	labelDim=10000
	# hidden layer size
	hiddenDim=200
	# number of classes
	nbrClass=50
	
	initScale=6
	
	features=SparseInput(featDim, tag="feature")
	
	# labels in classbasedCrossEntropy is dense and contain 4 values for each sample
	labels=Input(4, tag="label")

	# define network
	WFeat2Hid=Parameter(hiddenDim, featDim, init="uniform", initValueScale=initScale)
	WHid2Hid=Parameter(hiddenDim, hiddenDim, init="uniform", initValueScale=initScale)

	# WHid2Word is special that it is hiddenSize X labelSize
	WHid2Word=Parameter(hiddenDim, labelDim, init="uniform", initValueScale=initScale)
 	WHid2Class=Parameter(nbrClass, hiddenDim, init="uniform", initValueScale=initScale)
   
	PastHid = Delay(hiddenDim, HidAfterSig, delayTime=1, needGradient=true)	
	HidFromHeat = Times(WFeat2Hid, features)
	HidFromRecur = Times(WHid2Hid, PastHid)
	HidBeforeSig = Plus(HidFromHeat, HidFromRecur)
	HidAfterSig = Sigmoid(HidBeforeSig)
	
	Out = Times(WHid2Word, HidAfterSig)  #word part
	
	ClassProbBeforeSoftmax=Times(WHid2Class, HidAfterSig)
	
	cr = ClassBasedCrossEntropyWithSoftmax(labels, HidAfterSig, WHid2Word, ClassProbBeforeSoftmax, tag="criterion")
	EvalNodes=(Cr)
	OutputNodes=(Cr)
]
